import { LaunchOptions, ChromeArgOptions, BrowserOptions } from './launcher/LaunchOptions';
import { ProductLauncher } from './Launcher';
import { BrowserFetcher, BrowserFetcherOptions } from './BrowserFetcher';
import { PuppeteerErrors } from './Errors';
import { ConnectionTransport } from './ConnectionTransport';
import { DevicesMap } from './/DeviceDescriptors';
import { Browser } from './Browser';
import { QueryHandler } from './QueryHandler';
/**
 * The main Puppeteer class
 * @public
 */
export declare class Puppeteer {
    _projectRoot: string;
    _preferredRevision: string;
    _isPuppeteerCore: boolean;
    _changedProduct: boolean;
    __productName: string;
    _lazyLauncher: ProductLauncher;
    constructor(projectRoot: string, preferredRevision: string, isPuppeteerCore: boolean, productName: string);
    launch(options?: LaunchOptions & ChromeArgOptions & BrowserOptions & {
        product?: string;
        extraPrefsFirefox?: {};
    }): Promise<Browser>;
    connect(options: BrowserOptions & {
        browserWSEndpoint?: string;
        browserURL?: string;
        transport?: ConnectionTransport;
        product?: string;
    }): Promise<Browser>;
    set _productName(name: string);
    get _productName(): string;
    executablePath(): string;
    get _launcher(): ProductLauncher;
    get product(): string;
    get devices(): DevicesMap;
    get errors(): PuppeteerErrors;
    defaultArgs(options: ChromeArgOptions): string[];
    createBrowserFetcher(options: BrowserFetcherOptions): BrowserFetcher;
    __experimental_registerCustomQueryHandler(name: string, queryHandler: QueryHandler): void;
    __experimental_unregisterCustomQueryHandler(name: string): void;
    __experimental_customQueryHandlers(): Map<string, QueryHandler>;
    __experimental_clearQueryHandlers(): void;
}
//# sourceMappingURL=Puppeteer.d.ts.map