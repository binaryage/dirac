// lighthouse, browserified. 3.2.0 (081864eb30869df28f5ec05e28ca046b79b630cb)
require=function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a;}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r);},p,p.exports,r,e,n,t);}return n[i].exports;}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o;}return r;}()({"../audits/accessibility/accesskeys":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class Accesskeys extends AxeAudit{



static get meta(){
return{
id:'accesskeys',
title:'`[accesskey]` values are unique',
failureTitle:'`[accesskey]` values are not unique',
description:'Access keys let users quickly focus a part of the page. For proper '+
'navigation, each access key must be unique. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/accesskeys?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=Accesskeys;

},{"./axe-audit":1}],"../audits/accessibility/aria-allowed-attr":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ARIAAllowedAttr extends AxeAudit{



static get meta(){
return{
id:'aria-allowed-attr',
title:'`[aria-*]` attributes match their roles',
failureTitle:'`[aria-*]` attributes do not match their roles',
description:'Each ARIA `role` supports a specific subset of `aria-*` attributes. '+
'Mismatching these invalidates the `aria-*` attributes. [Learn '+
'more](https://dequeuniversity.com/rules/axe/2.2/aria-allowed-attr?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ARIAAllowedAttr;

},{"./axe-audit":1}],"../audits/accessibility/aria-required-attr":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ARIARequiredAttr extends AxeAudit{



static get meta(){
return{
id:'aria-required-attr',
title:'`[role]`s have all required `[aria-*]` attributes',
failureTitle:'`[role]`s do not have all required `[aria-*]` attributes',
description:'Some ARIA roles have required attributes that describe the state '+
'of the element to screen readers. [Learn more](https://dequeuniversity.com/rules/axe/2.2/aria-required-attr?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ARIARequiredAttr;

},{"./axe-audit":1}],"../audits/accessibility/aria-required-children":[function(require,module,exports){





'use strict';







const AxeAudit=require('./axe-audit');

class AriaRequiredChildren extends AxeAudit{



static get meta(){
return{
id:'aria-required-children',
title:'Elements with `[role]` that require specific children `[role]`s, are present',
failureTitle:'Elements with `[role]` that require specific children `[role]`s, '+
'are missing.',
description:'Some ARIA parent roles must contain specific child roles to perform '+
'their intended accessibility functions. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/aria-required-children?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=AriaRequiredChildren;

},{"./axe-audit":1}],"../audits/accessibility/aria-required-parent":[function(require,module,exports){





'use strict';







const AxeAudit=require('./axe-audit');

class AriaRequiredParent extends AxeAudit{



static get meta(){
return{
id:'aria-required-parent',
title:'`[role]`s are contained by their required parent element',
failureTitle:'`[role]`s are not contained by their required parent element',
description:'Some ARIA child roles must be contained by specific parent roles to '+
'properly perform their intended accessibility functions. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/aria-required-parent?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=AriaRequiredParent;

},{"./axe-audit":1}],"../audits/accessibility/aria-roles":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class AriaRoles extends AxeAudit{



static get meta(){
return{
id:'aria-roles',
title:'`[role]` values are valid',
failureTitle:'`[role]` values are not valid',
description:'ARIA roles must have valid values in order to perform their '+
'intended accessibility functions. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/aria-roles?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=AriaRoles;

},{"./axe-audit":1}],"../audits/accessibility/aria-valid-attr-value":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ARIAValidAttr extends AxeAudit{



static get meta(){
return{
id:'aria-valid-attr-value',
title:'`[aria-*]` attributes have valid values',
failureTitle:'`[aria-*]` attributes do not have valid values',
description:'Assistive technologies, like screen readers, can\'t interpret ARIA '+
'attributes with invalid values. [Learn '+
'more](https://dequeuniversity.com/rules/axe/2.2/aria-valid-attr-value?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ARIAValidAttr;

},{"./axe-audit":1}],"../audits/accessibility/aria-valid-attr":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ARIAValidAttr extends AxeAudit{



static get meta(){
return{
id:'aria-valid-attr',
title:'`[aria-*]` attributes are valid and not misspelled',
failureTitle:'`[aria-*]` attributes are not valid or misspelled',
description:'Assistive technologies, like screen readers, can\'t interpret ARIA '+
'attributes with invalid names. [Learn '+
'more](https://dequeuniversity.com/rules/axe/2.2/aria-valid-attr?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ARIAValidAttr;

},{"./axe-audit":1}],"../audits/accessibility/audio-caption":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class AudioCaption extends AxeAudit{



static get meta(){
return{
id:'audio-caption',
title:'`<audio>` elements contain a `<track>` element with `[kind="captions"]`',
failureTitle:'`<audio>` elements are missing a `<track>` element with '+
'`[kind="captions"]`.',
description:'Captions make audio elements usable for deaf or hearing-impaired users, '+
'providing critical information such as who is talking, what they\'re saying, '+
'and other non-speech information. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/audio-caption?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=AudioCaption;

},{"./axe-audit":1}],"../audits/accessibility/button-name":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ButtonName extends AxeAudit{



static get meta(){
return{
id:'button-name',
title:'Buttons have an accessible name',
failureTitle:'Buttons do not have an accessible name',
description:'When a button doesn\'t have an accessible name, screen readers announce it '+
'as "button", making it unusable for users who rely on screen readers. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/button-name?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ButtonName;

},{"./axe-audit":1}],"../audits/accessibility/bypass":[function(require,module,exports){





'use strict';







const AxeAudit=require('./axe-audit');

class Bypass extends AxeAudit{



static get meta(){
return{
id:'bypass',
title:'The page contains a heading, skip link, or landmark region',
failureTitle:'The page does not contain a heading, skip link, or landmark region',
description:'Adding ways to bypass repetitive content lets keyboard users navigate the '+
'page more efficiently. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/bypass?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=Bypass;

},{"./axe-audit":1}],"../audits/accessibility/color-contrast":[function(require,module,exports){





'use strict';







const AxeAudit=require('./axe-audit');

class ColorContrast extends AxeAudit{



static get meta(){
return{
id:'color-contrast',
title:'Background and foreground colors have a sufficient contrast ratio',
failureTitle:'Background and foreground colors do not have a '+
'sufficient contrast ratio.',
description:'Low-contrast text is difficult or impossible for many users to read. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/color-contrast?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ColorContrast;

},{"./axe-audit":1}],"../audits/accessibility/definition-list":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class DefinitionList extends AxeAudit{



static get meta(){
return{
id:'definition-list',
title:'`<dl>`\'s contain only properly-ordered `<dt>` and `<dd>` groups, `<script>` '+
'or `<template>` elements.',
failureTitle:'`<dl>`\'s do not contain only properly-ordered `<dt>` and `<dd>` '+
'groups, `<script>` or `<template>` elements.',
description:'When definition lists are not properly marked up, screen readers may produce '+
'confusing or inaccurate output. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/definition-list?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=DefinitionList;

},{"./axe-audit":1}],"../audits/accessibility/dlitem":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class DLItem extends AxeAudit{



static get meta(){
return{
id:'dlitem',
title:'Definition list items are wrapped in `<dl>` elements',
failureTitle:'Definition list items are not wrapped in `<dl>` elements',
description:'Definition list items (`<dt>` and `<dd>`) must be wrapped in a '+
'parent `<dl>` element to ensure that screen readers can properly announce them. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/dlitem?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=DLItem;

},{"./axe-audit":1}],"../audits/accessibility/document-title":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class DocumentTitle extends AxeAudit{



static get meta(){
return{
id:'document-title',
title:'Document has a `<title>` element',
failureTitle:'Document doesn\'t have a `<title>` element',
description:'The title gives screen reader users an overview of the page, and search '+
'engine users rely on it heavily to determine if a page is relevant to their search. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/title).',
requiredArtifacts:['Accessibility']};

}}


module.exports=DocumentTitle;

},{"./axe-audit":1}],"../audits/accessibility/duplicate-id":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class DuplicateId extends AxeAudit{



static get meta(){
return{
id:'duplicate-id',
title:'`[id]` attributes on the page are unique',
failureTitle:'`[id]` attributes on the page are not unique',
description:'The value of an id attribute must be unique to prevent '+
'other instances from being overlooked by assistive technologies. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/duplicate-id?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=DuplicateId;

},{"./axe-audit":1}],"../audits/accessibility/frame-title":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class FrameTitle extends AxeAudit{



static get meta(){
return{
id:'frame-title',
title:'`<frame>` or `<iframe>` elements have a title',
failureTitle:'`<frame>` or `<iframe>` elements do not have a title',
description:'Screen reader users rely on frame titles to describe the contents of frames. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/frame-title?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=FrameTitle;

},{"./axe-audit":1}],"../audits/accessibility/html-has-lang":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class HTMLHasLang extends AxeAudit{



static get meta(){
return{
id:'html-has-lang',
title:'`<html>` element has a `[lang]` attribute',
failureTitle:'`<html>` element does not have a `[lang]` attribute',
description:'If a page doesn\'t specify a lang attribute, a screen reader assumes '+
'that the page is in the default language that the user chose when setting up the '+
'screen reader. If the page isn\'t actually in the default language, then the screen '+
'reader might not announce the page\'s text correctly. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/html-lang?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=HTMLHasLang;

},{"./axe-audit":1}],"../audits/accessibility/html-lang-valid":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class HTMLLangValid extends AxeAudit{



static get meta(){
return{
id:'html-lang-valid',
title:'`<html>` element has a valid value for its `[lang]` attribute',
failureTitle:'`<html>` element does not have a valid value for '+
'its `[lang]` attribute.',
description:'Specifying a valid [BCP 47 language](https://www.w3.org/International/questions/qa-choosing-language-tags#question) '+
'helps screen readers announce text properly. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/valid-lang?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=HTMLLangValid;

},{"./axe-audit":1}],"../audits/accessibility/image-alt":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ImageAlt extends AxeAudit{



static get meta(){
return{
id:'image-alt',
title:'Image elements have `[alt]` attributes',
failureTitle:'Image elements do not have `[alt]` attributes',
description:'Informative elements should aim for short, descriptive alternate text. '+
'Decorative elements can be ignored with an empty alt attribute. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/image-alt?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ImageAlt;

},{"./axe-audit":1}],"../audits/accessibility/input-image-alt":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class InputImageAlt extends AxeAudit{



static get meta(){
return{
id:'input-image-alt',
title:'`<input type="image">` elements have `[alt]` text',
failureTitle:'`<input type="image">` elements do not have `[alt]` text',
description:'When an image is being used as an `<input>` button, providing alternative '+
'text can help screen reader users understand the purpose of the button. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/input-image-alt?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=InputImageAlt;

},{"./axe-audit":1}],"../audits/accessibility/label":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class Label extends AxeAudit{



static get meta(){
return{
id:'label',
title:'Form elements have associated labels',
failureTitle:'Form elements do not have associated labels',
description:'Labels ensure that form controls are announced properly by assistive '+
'technologies, like screen readers. [Learn '+
'more](https://dequeuniversity.com/rules/axe/2.2/label?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=Label;

},{"./axe-audit":1}],"../audits/accessibility/layout-table":[function(require,module,exports){





'use strict';







const AxeAudit=require('./axe-audit');

class LayoutTable extends AxeAudit{



static get meta(){
return{
id:'layout-table',
title:'Presentational `<table>` elements avoid using `<th>`, `<caption>` or the '+
'`[summary]` attribute.',
failureTitle:'Presentational `<table>` elements do not avoid using `<th>`, '+
'`<caption>` or the `[summary]` attribute.',
description:'A table being used for layout purposes should not include data elements, '+
'such as the th or caption elements or the summary attribute, because this can '+
'create a confusing experience for screen reader users. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/layout-table?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=LayoutTable;

},{"./axe-audit":1}],"../audits/accessibility/link-name":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class LinkName extends AxeAudit{



static get meta(){
return{
id:'link-name',
title:'Links have a discernible name',
failureTitle:'Links do not have a discernible name',
description:'Link text (and alternate text for images, when used as links) that is '+
'discernible, unique, and focusable improves the navigation experience for '+
'screen reader users. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/link-name?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=LinkName;

},{"./axe-audit":1}],"../audits/accessibility/listitem":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ListItem extends AxeAudit{



static get meta(){
return{
id:'listitem',
title:'List items (`<li>`) are contained within `<ul>` or `<ol>` parent elements',
failureTitle:'List items (`<li>`) are not contained within `<ul>` '+
'or `<ol>` parent elements.',
description:'Screen readers require list items (`<li>`) to be contained within a '+
'parent `<ul>` or `<ol>` to be announced properly. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/listitem?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ListItem;

},{"./axe-audit":1}],"../audits/accessibility/list":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class List extends AxeAudit{



static get meta(){
return{
id:'list',
title:'Lists contain only `<li>` elements and script supporting elements '+
'(`<script>` and `<template>`).',
failureTitle:'Lists do not contain only `<li>` elements and script '+
'supporting elements (`<script>` and `<template>`).',
description:'Screen readers have a specific way of announcing lists. Ensuring proper list '+
'structure aids screen reader output. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/list?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=List;

},{"./axe-audit":1}],"../audits/accessibility/manual/custom-controls-labels":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class CustomControlsLabels extends ManualAudit{



static get meta(){
return Object.assign({
id:'custom-controls-labels',
description:'Custom interactive controls have associated labels, provided by aria-label or aria-labelledby. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#try_it_with_a_screen_reader).',
title:'Custom controls have associated labels'},
super.partialMeta);
}}


module.exports=CustomControlsLabels;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/custom-controls-roles":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class CustomControlsRoles extends ManualAudit{



static get meta(){
return Object.assign({
id:'custom-controls-roles',
description:'Custom interactive controls have appropriate ARIA roles. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#try_it_with_a_screen_reader).',
title:'Custom controls have ARIA roles'},
super.partialMeta);
}}


module.exports=CustomControlsRoles;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/focus-traps":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class FocusTraps extends ManualAudit{



static get meta(){
return Object.assign({
id:'focus-traps',
description:'A user can tab into and out of any control or region without accidentally trapping their focus. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#start_with_the_keyboard).',
title:'User focus is not accidentally trapped in a region'},
super.partialMeta);
}}


module.exports=FocusTraps;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/focusable-controls":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class FocusableControls extends ManualAudit{



static get meta(){
return Object.assign({
id:'focusable-controls',
description:'Custom interactive controls are keyboard focusable and display a focus indicator. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#start_with_the_keyboard).',
title:'Interactive controls are keyboard focusable'},
super.partialMeta);
}}


module.exports=FocusableControls;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/heading-levels":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class HeadingLevels extends ManualAudit{



static get meta(){
return Object.assign({
id:'heading-levels',
description:'Headings are used to create an outline for the page and heading levels are not skipped. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#take_advantage_of_headings_and_landmarks).',
title:'Headings don\'t skip levels'},
super.partialMeta);
}}


module.exports=HeadingLevels;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/interactive-element-affordance":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class InteractiveElementAffordance extends ManualAudit{



static get meta(){
return Object.assign({
id:'interactive-element-affordance',
description:'Interactive elements, such as links and buttons, should indicate their state and be distinguishable from non-interactive elements. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#interactive_elements_like_links_and_buttons_should_indicate_their_purpose_and_state).',
title:'Interactive elements indicate their purpose and state'},
super.partialMeta);
}}


module.exports=InteractiveElementAffordance;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/logical-tab-order":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class LogicalTabOrder extends ManualAudit{



static get meta(){
return Object.assign({
id:'logical-tab-order',
description:'Tabbing through the page follows the visual layout. Users cannot focus elements that are offscreen. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#start_with_the_keyboard).',
title:'The page has a logical tab order'},
super.partialMeta);
}}


module.exports=LogicalTabOrder;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/managed-focus":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class ManagedFocus extends ManualAudit{



static get meta(){
return Object.assign({
id:'managed-focus',
description:'If new content, such as a dialog, is added to the page, the user\'s focus is directed to it. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#start_with_the_keyboard).',
title:'The user\'s focus is directed to new content added to the page'},
super.partialMeta);
}}


module.exports=ManagedFocus;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/offscreen-content-hidden":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');






class OffscreenContentHidden extends ManualAudit{



static get meta(){
return Object.assign({
id:'offscreen-content-hidden',
description:'Offscreen content is hidden with display: none or aria-hidden=true. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#try_it_with_a_screen_reader).',
title:'Offscreen content is hidden from assistive technology'},
super.partialMeta);
}}


module.exports=OffscreenContentHidden;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/use-landmarks":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class UseLandmarks extends ManualAudit{



static get meta(){
return Object.assign({
id:'use-landmarks',
description:'Landmark elements (<main>, <nav>, etc.) are used to improve the keyboard navigation of the page for assistive technology. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#take_advantage_of_headings_and_landmarks).',
title:'HTML5 landmark elements are used to improve navigation'},
super.partialMeta);
}}


module.exports=UseLandmarks;

},{"../../manual/manual-audit":4}],"../audits/accessibility/manual/visual-order-follows-dom":[function(require,module,exports){






'use strict';

const ManualAudit=require('../../manual/manual-audit');





class VisualOrderFollowsDOM extends ManualAudit{



static get meta(){
return Object.assign({
id:'visual-order-follows-dom',
description:'DOM order matches the visual order, improving navigation for assistive technology. [Learn more](https://developers.google.com/web/fundamentals/accessibility/how-to-review#try_it_with_a_screen_reader).',
title:'Visual order on the page follows DOM order'},
super.partialMeta);
}}


module.exports=VisualOrderFollowsDOM;

},{"../../manual/manual-audit":4}],"../audits/accessibility/meta-refresh":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class MetaRefresh extends AxeAudit{



static get meta(){
return{
id:'meta-refresh',
title:'The document does not use `<meta http-equiv="refresh">`',
failureTitle:'The document uses `<meta http-equiv="refresh">`',
description:'Users do not expect a page to refresh automatically, and doing so will move '+
'focus back to the top of the page. This may create a frustrating or '+
'confusing experience. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/meta-refresh?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=MetaRefresh;

},{"./axe-audit":1}],"../audits/accessibility/meta-viewport":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class MetaViewport extends AxeAudit{



static get meta(){
return{
id:'meta-viewport',
title:'`[user-scalable="no"]` is not used in the `<meta name="viewport">` '+
'element and the `[maximum-scale]` attribute is not less than 5.',
failureTitle:'`[user-scalable="no"]` is used in the `<meta name="viewport">` '+
'element or the `[maximum-scale]` attribute is less than 5.',
description:'Disabling zooming is problematic for users with low vision who rely on '+
'screen magnification to properly see the contents of a web page. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/meta-viewport?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=MetaViewport;

},{"./axe-audit":1}],"../audits/accessibility/object-alt":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ObjectAlt extends AxeAudit{



static get meta(){
return{
id:'object-alt',
title:'`<object>` elements have `[alt]` text',
failureTitle:'`<object>` elements do not have `[alt]` text',
description:'Screen readers cannot translate non-text content. Adding alt text to '+
'`<object>` elements helps screen readers convey meaning to users. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/object-alt?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ObjectAlt;

},{"./axe-audit":1}],"../audits/accessibility/tabindex":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class TabIndex extends AxeAudit{



static get meta(){
return{
id:'tabindex',
title:'No element has a `[tabindex]` value greater than 0',
failureTitle:'Some elements have a `[tabindex]` value greater than 0',
description:'A value greater than 0 implies an explicit navigation ordering. '+
'Although technically valid, this often creates frustrating experiences '+
'for users who rely on assistive technologies. [Learn more](https://dequeuniversity.com/rules/axe/2.2/tabindex?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=TabIndex;

},{"./axe-audit":1}],"../audits/accessibility/td-headers-attr":[function(require,module,exports){





'use strict';







const AxeAudit=require('./axe-audit');

class TDHeadersAttr extends AxeAudit{



static get meta(){
return{
id:'td-headers-attr',
title:'Cells in a `<table>` element that use the `[headers]` attribute only refer '+
'to other cells of that same table.',
failureTitle:'Cells in a `<table>` element that use the `[headers]` '+
'attribute refers to other cells of that same table.',
description:'Screen readers have features to make navigating tables easier. Ensuring '+
'`<td>` cells using the `[headers]` attribute only refer to other cells in the same '+
'table may improve the experience for screen reader users. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/td-headers-attr?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=TDHeadersAttr;

},{"./axe-audit":1}],"../audits/accessibility/th-has-data-cells":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class THHasDataCells extends AxeAudit{



static get meta(){
return{
id:'th-has-data-cells',
title:'`<th>` elements and elements with `[role="columnheader"/"rowheader"]` have '+
'data cells they describe.',
failureTitle:'`<th>` elements and elements with '+
'`[role="columnheader"/"rowheader"]` do not have data cells they describe.',
description:'Screen readers have features to make navigating tables easier. Ensuring '+
'table headers always refer to some set of cells may improve the experience for screen '+
'reader users. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/th-has-data-cells?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=THHasDataCells;

},{"./axe-audit":1}],"../audits/accessibility/valid-lang":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class ValidLang extends AxeAudit{



static get meta(){
return{
id:'valid-lang',
title:'`[lang]` attributes have a valid value',
failureTitle:'`[lang]` attributes do not have a valid value',
description:'Specifying a valid [BCP 47 language](https://www.w3.org/International/questions/qa-choosing-language-tags#question) '+
'on elements helps ensure that text is pronounced correctly by a screen reader. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/valid-lang?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=ValidLang;

},{"./axe-audit":1}],"../audits/accessibility/video-caption":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class VideoCaption extends AxeAudit{



static get meta(){
return{
id:'video-caption',
title:'`<video>` elements contain a `<track>` element with `[kind="captions"]`',
failureTitle:'`<video>` elements do not contain a `<track>` element '+
'with `[kind="captions"]`.',
description:'When a video provides a caption it is easier for deaf and hearing impaired '+
'users to access its information. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/video-caption?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=VideoCaption;

},{"./axe-audit":1}],"../audits/accessibility/video-description":[function(require,module,exports){





'use strict';






const AxeAudit=require('./axe-audit');

class VideoDescription extends AxeAudit{



static get meta(){
return{
id:'video-description',
title:'`<video>` elements contain a `<track>` element with `[kind="description"]`',
failureTitle:'`<video>` elements do not contain a `<track>` element with '+
'`[kind="description"]`.',
description:'Audio descriptions provide relevant information for videos that dialogue '+
'cannot, such as facial expressions and scenes. '+
'[Learn more](https://dequeuniversity.com/rules/axe/2.2/video-description?application=lighthouse).',
requiredArtifacts:['Accessibility']};

}}


module.exports=VideoDescription;

},{"./axe-audit":1}],"../audits/bootup-time":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('./audit');
const NetworkRequest=require('../lib/network-request');
const{taskGroups}=require('../lib/task-groups');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'JavaScript execution time',

failureTitle:'Reduce JavaScript execution time',

description:'Consider reducing the time spent parsing, compiling, and executing JS. '+
'You may find delivering smaller JS payloads helps with this. [Learn '+
'more](https://developers.google.com/web/tools/lighthouse/audits/bootup).',

columnTotal:'Total',

columnScriptEval:'Script Evaluation',

columnScriptParse:'Script Parse',

chromeExtensionsWarning:'Chrome extensions negatively affected this page\'s load performance. '+
'Try auditing the page in incognito mode or from a Chrome profile without extensions.'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class BootupTime extends Audit{



static get meta(){
return{
id:'bootup-time',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces']};

}




static get defaultOptions(){
return{


scorePODR:600,
scoreMedian:3500,
thresholdInMs:50};

}




static getJavaScriptURLs(records){

const urls=new Set();
for(const record of records){
if(record.resourceType===NetworkRequest.TYPES.Script){
urls.add(record.url);
}
}

return urls;
}






static getExecutionTimingsByURL(tasks,jsURLs){

const result=new Map();

for(const task of tasks){
const jsURL=task.attributableURLs.find(url=>jsURLs.has(url));
const fallbackURL=task.attributableURLs[0];
const attributableURL=jsURL||fallbackURL;
if(!attributableURL||attributableURL==='about:blank')continue;

const timingByGroupId=result.get(attributableURL)||{};
const originalTime=timingByGroupId[task.group.id]||0;
timingByGroupId[task.group.id]=originalTime+task.selfTime;
result.set(attributableURL,timingByGroupId);
}

return result;
}






static async audit(artifacts,context){
const settings=context.settings||{};
const trace=artifacts.traces[BootupTime.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[BootupTime.DEFAULT_PASS];
const networkRecords=await artifacts.requestNetworkRecords(devtoolsLog);
const tasks=await artifacts.requestMainThreadTasks(trace);
const multiplier=settings.throttlingMethod==='simulate'?
settings.throttling.cpuSlowdownMultiplier:1;

const jsURLs=BootupTime.getJavaScriptURLs(networkRecords);
const executionTimings=BootupTime.getExecutionTimingsByURL(tasks,jsURLs);

let hadExcessiveChromeExtension=false;
let totalBootupTime=0;
const results=Array.from(executionTimings).
map(([url,timingByGroupId])=>{

let bootupTimeForURL=0;
for(const[groupId,timespanMs]of Object.entries(timingByGroupId)){
timingByGroupId[groupId]=timespanMs*multiplier;
bootupTimeForURL+=timespanMs*multiplier;
}


if(bootupTimeForURL>=context.options.thresholdInMs){
totalBootupTime+=bootupTimeForURL;
}

const scriptingTotal=timingByGroupId[taskGroups.scriptEvaluation.id]||0;
const parseCompileTotal=timingByGroupId[taskGroups.scriptParseCompile.id]||0;

hadExcessiveChromeExtension=hadExcessiveChromeExtension||
url.startsWith('chrome-extension:')&&scriptingTotal>100;

return{
url:url,
total:bootupTimeForURL,

scripting:scriptingTotal,
scriptParseCompile:parseCompileTotal};

}).
filter(result=>result.total>=context.options.thresholdInMs).
sort((a,b)=>b.total-a.total);



if(hadExcessiveChromeExtension){
context.LighthouseRunWarnings.push(str_(UIStrings.chromeExtensionsWarning));
}

const summary={wastedMs:totalBootupTime};

const headings=[
{key:'url',itemType:'url',text:str_(i18n.UIStrings.columnURL)},
{key:'total',granularity:1,itemType:'ms',text:str_(UIStrings.columnTotal)},
{key:'scripting',granularity:1,itemType:'ms',text:str_(UIStrings.columnScriptEval)},
{key:'scriptParseCompile',granularity:1,itemType:'ms',
text:str_(UIStrings.columnScriptParse)}];


const details=BootupTime.makeTableDetails(headings,results,summary);

const score=Audit.computeLogNormalScore(
totalBootupTime,
context.options.scorePODR,
context.options.scoreMedian);


return{
score,
rawValue:totalBootupTime,
displayValue:totalBootupTime>0?
str_(i18n.UIStrings.seconds,{timeInMs:totalBootupTime}):'',
details};

}}


module.exports=BootupTime;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/bootup-time.js");
},{"../lib/i18n/i18n.js":36,"../lib/network-request":88,"../lib/task-groups":93,"./audit":2}],"../audits/byte-efficiency/efficient-animated-content":[function(require,module,exports){
(function(__filename){








'use strict';

const NetworkRequest=require('../../lib/network-request');
const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Use video formats for animated content',

description:'Large GIFs are inefficient for delivering animated content. Consider using '+
'MPEG4/WebM videos for animations and PNG/WebP for static images instead of GIF to save '+
'network bytes. [Learn more](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);



const GIF_BYTE_THRESHOLD=100*1024;

class EfficientAnimatedContent extends ByteEfficiencyAudit{



static get meta(){
return{
id:'efficient-animated-content',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['devtoolsLogs','traces']};

}







static getPercentSavings(bytes){
return Math.round(29.1*Math.log10(bytes)-100.7)/100;
}






static audit_(artifacts,networkRecords){
const unoptimizedContent=networkRecords.filter(
record=>record.mimeType==='image/gif'&&
record.resourceType===NetworkRequest.TYPES.Image&&
(record.resourceSize||0)>GIF_BYTE_THRESHOLD);



const items=unoptimizedContent.map(record=>{
const resourceSize=record.resourceSize||0;
return{
url:record.url,
totalBytes:resourceSize,
wastedBytes:Math.round(resourceSize*
EfficientAnimatedContent.getPercentSavings(resourceSize))};

});


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
items,
headings};

}}


module.exports=EfficientAnimatedContent;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/efficient-animated-content.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/network-request":88,"./byte-efficiency-audit":3}],"../audits/byte-efficiency/offscreen-images":[function(require,module,exports){
(function(__filename){









'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const Sentry=require('../../lib/sentry');
const URL=require('../../lib/url-shim');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Defer offscreen images',

description:
'Consider lazy-loading offscreen and hidden images after all critical resources have '+
'finished loading to lower time to interactive. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const ALLOWABLE_OFFSCREEN_X=100;
const ALLOWABLE_OFFSCREEN_Y=200;

const IGNORE_THRESHOLD_IN_BYTES=2048;
const IGNORE_THRESHOLD_IN_PERCENT=75;
const IGNORE_THRESHOLD_IN_MS=50;



class OffscreenImages extends ByteEfficiencyAudit{



static get meta(){
return{
id:'offscreen-images',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['ImageUsage','ViewportDimensions','devtoolsLogs','traces']};

}






static computeVisiblePixels(imageRect,viewportDimensions){
const innerWidth=viewportDimensions.innerWidth;
const innerHeight=viewportDimensions.innerHeight;

const top=Math.max(imageRect.top,-1*ALLOWABLE_OFFSCREEN_Y);
const right=Math.min(imageRect.right,innerWidth+ALLOWABLE_OFFSCREEN_X);
const bottom=Math.min(imageRect.bottom,innerHeight+ALLOWABLE_OFFSCREEN_Y);
const left=Math.max(imageRect.left,-1*ALLOWABLE_OFFSCREEN_X);

return Math.max(right-left,0)*Math.max(bottom-top,0);
}






static computeWaste(image,viewportDimensions){
if(!image.networkRecord){
return null;
}

const url=URL.elideDataURI(image.src);
const totalPixels=image.clientWidth*image.clientHeight;
const visiblePixels=this.computeVisiblePixels(image.clientRect,viewportDimensions);

const wastedRatio=totalPixels===0?1:1-visiblePixels/totalPixels;
const totalBytes=image.networkRecord.resourceSize;
const wastedBytes=Math.round(totalBytes*wastedRatio);

if(!Number.isFinite(wastedRatio)){
return new Error(`Invalid image sizing information ${url}`);
}

return{
url,
requestStartTime:image.networkRecord.startTime,
totalBytes,
wastedBytes,
wastedPercent:100*wastedRatio};

}







static filterLanternResults(images,lanternMetricData){
const nodeTimings=lanternMetricData.pessimisticEstimate.nodeTimings;


let lastLongTaskStartTime=0;


const startTimesByURL=new Map();
for(const[node,timing]of nodeTimings){
if(node.type==='cpu'&&timing.duration>=50){
lastLongTaskStartTime=Math.max(lastLongTaskStartTime,timing.startTime);
}else if(node.type==='network'){
const networkNode=node;
startTimesByURL.set(networkNode.record.url,timing.startTime);
}
}

return images.filter(image=>{

if(image.wastedBytes<IGNORE_THRESHOLD_IN_BYTES)return false;
if(image.wastedPercent<IGNORE_THRESHOLD_IN_PERCENT)return false;

const imageRequestStartTime=startTimesByURL.get(image.url)||0;
return imageRequestStartTime<lastLongTaskStartTime-IGNORE_THRESHOLD_IN_MS;
});
}







static filterObservedResults(images,interactiveTimestamp){
return images.filter(image=>{
if(image.wastedBytes<IGNORE_THRESHOLD_IN_BYTES)return false;
if(image.wastedPercent<IGNORE_THRESHOLD_IN_PERCENT)return false;
return image.requestStartTime<interactiveTimestamp/1e6-IGNORE_THRESHOLD_IN_MS/1000;
});
}











static computeWasteWithTTIGraph(results,graph,simulator){
return super.computeWasteWithTTIGraph(results,graph,simulator,
{includeLoad:false});
}







static audit_(artifacts,networkRecords,context){
const images=artifacts.ImageUsage;
const viewportDimensions=artifacts.ViewportDimensions;
const trace=artifacts.traces[ByteEfficiencyAudit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[ByteEfficiencyAudit.DEFAULT_PASS];


const warnings=[];
const resultsMap=images.reduce((results,image)=>{
const processed=OffscreenImages.computeWaste(image,viewportDimensions);
if(processed===null){
return results;
}

if(processed instanceof Error){
warnings.push(processed.message);
Sentry.captureException(processed,{tags:{audit:this.meta.id},level:'warning'});
return results;
}


const existing=results.get(processed.url);
if(!existing||existing.wastedBytes>processed.wastedBytes){
results.set(processed.url,processed);
}

return results;
},new Map());

const settings=context.settings;
return artifacts.requestInteractive({trace,devtoolsLog,settings}).then(interactive=>{
const unfilteredResults=Array.from(resultsMap.values());
const lanternInteractive=interactive;

const items=context.settings.throttlingMethod==='simulate'?
OffscreenImages.filterLanternResults(unfilteredResults,lanternInteractive):

OffscreenImages.filterObservedResults(unfilteredResults,interactive.timestamp);


const headings=[
{key:'url',valueType:'thumbnail',label:''},
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
warnings,
items,
headings};

});
}}


module.exports=OffscreenImages;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/offscreen-images.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/sentry":90,"../../lib/url-shim":"url","./byte-efficiency-audit":3}],"../audits/byte-efficiency/render-blocking-resources":[function(require,module,exports){
(function(__filename){









'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');
const BaseNode=require('../../lib/dependency-graph/base-node');
const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const UnusedCSS=require('./unused-css-rules');
const NetworkRequest=require('../../lib/network-request');









const MINIMUM_WASTED_MS=50;

const UIStrings={

title:'Eliminate render-blocking resources',

description:'Resources are blocking the first paint of your page. Consider '+
'delivering critical JS/CSS inline and deferring all non-critical '+
'JS/styles. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);






function getNodesAndTimingByUrl(nodeTimings){

const urlMap={};
const nodes=Array.from(nodeTimings.keys());
nodes.forEach(node=>{
if(node.type!=='network')return;
const nodeTiming=nodeTimings.get(node);
if(!nodeTiming)return;

urlMap[node.record.url]={node,nodeTiming};
});

return urlMap;
}

class RenderBlockingResources extends Audit{



static get meta(){
return{
id:'render-blocking-resources',
title:str_(UIStrings.title),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
description:str_(UIStrings.description),



requiredArtifacts:['URL','TagsBlockingFirstPaint','traces']};

}






static async computeResults(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const simulatorData={devtoolsLog,settings:context.settings};
const traceOfTab=await artifacts.requestTraceOfTab(trace);
const simulator=await artifacts.requestLoadSimulator(simulatorData);
const wastedCssBytes=await RenderBlockingResources.computeWastedCSSBytes(artifacts,context);

const metricSettings={throttlingMethod:'simulate'};
const metricComputationData={trace,devtoolsLog,simulator,settings:metricSettings};

const fcpSimulation=await artifacts.requestFirstContentfulPaint(metricComputationData);
const fcpTsInMs=traceOfTab.timestamps.firstContentfulPaint/1000;

const nodesByUrl=getNodesAndTimingByUrl(fcpSimulation.optimisticEstimate.nodeTimings);

const results=[];
const deferredNodeIds=new Set();
for(const resource of artifacts.TagsBlockingFirstPaint){

if(resource.endTime*1000>fcpTsInMs)continue;

if(!nodesByUrl[resource.tag.url])continue;

const{node,nodeTiming}=nodesByUrl[resource.tag.url];




node.traverse(node=>deferredNodeIds.add(node.id));


const wastedMs=Math.round(nodeTiming.duration);
if(wastedMs<MINIMUM_WASTED_MS)continue;

results.push({
url:resource.tag.url,
totalBytes:resource.transferSize,
wastedMs});

}

if(!results.length){
return{results,wastedMs:0};
}

const wastedMs=RenderBlockingResources.estimateSavingsWithGraphs(
simulator,
fcpSimulation.optimisticGraph,
deferredNodeIds,
wastedCssBytes);


return{results,wastedMs};
}

















static estimateSavingsWithGraphs(simulator,fcpGraph,deferredIds,wastedCssBytesByUrl){
const originalEstimate=simulator.simulate(fcpGraph).timeInMs;

let totalChildNetworkBytes=0;
const minimalFCPGraph=fcpGraph.cloneWithRelationships(node=>{

const canDeferRequest=deferredIds.has(node.id);
if(node.type!==BaseNode.TYPES.NETWORK)return!canDeferRequest;

const isStylesheet=
node.record.resourceType===NetworkRequest.TYPES.Stylesheet;
if(canDeferRequest&&isStylesheet){

const wastedBytes=wastedCssBytesByUrl.get(node.record.url)||0;
totalChildNetworkBytes+=(node.record.transferSize||0)-wastedBytes;
}
return!canDeferRequest;
});


const originalTransferSize=minimalFCPGraph.record.transferSize;
const safeTransferSize=originalTransferSize||0;
minimalFCPGraph.record.transferSize=safeTransferSize+totalChildNetworkBytes;
const estimateAfterInline=simulator.simulate(minimalFCPGraph).timeInMs;
minimalFCPGraph.record.transferSize=originalTransferSize;
return Math.round(Math.max(originalEstimate-estimateAfterInline,0));
}






static async computeWastedCSSBytes(artifacts,context){
const wastedBytesByUrl=new Map();
try{

const results=await UnusedCSS.audit(artifacts,context);

for(const item of results.details.items){
wastedBytesByUrl.set(item.url,item.wastedBytes);
}
}catch(_){}

return wastedBytesByUrl;
}






static async audit(artifacts,context){
const{results,wastedMs}=await RenderBlockingResources.computeResults(artifacts,context);

let displayValue='';
if(results.length>0){
displayValue=str_(i18n.UIStrings.displayValueMsSavings,{wastedMs});
}


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedMs',valueType:'timespanMs',label:str_(i18n.UIStrings.columnWastedMs)}];


const details=Audit.makeOpportunityDetails(headings,results,wastedMs);

return{
displayValue,
score:ByteEfficiencyAudit.scoreForWastedMs(wastedMs),
rawValue:wastedMs,
details};

}}


module.exports=RenderBlockingResources;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/render-blocking-resources.js");
},{"../../lib/dependency-graph/base-node":25,"../../lib/i18n/i18n.js":36,"../../lib/network-request":88,"../audit":2,"./byte-efficiency-audit":3,"./unused-css-rules":"../audits/byte-efficiency/unused-css-rules"}],"../audits/byte-efficiency/total-byte-weight":[function(require,module,exports){
(function(__filename){





'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Avoids enormous network payloads',

failureTitle:'Avoid enormous network payloads',

description:
'Large network payloads cost users real money and are highly correlated with '+
'long load times. [Learn '+
'more](https://developers.google.com/web/tools/lighthouse/audits/network-payloads).',

displayValue:'Total size was {totalBytes, number, bytes}\xa0KB'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class TotalByteWeight extends ByteEfficiencyAudit{



static get meta(){
return{
id:'total-byte-weight',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['devtoolsLogs','traces']};

}




static get defaultOptions(){
return{


scorePODR:2500*1024,
scoreMedian:4000*1024};

}






static async audit(artifacts,context){
const devtoolsLogs=artifacts.devtoolsLogs[ByteEfficiencyAudit.DEFAULT_PASS];
const[networkRecords,networkThroughput]=await Promise.all([
artifacts.requestNetworkRecords(devtoolsLogs),
artifacts.requestNetworkThroughput(devtoolsLogs)]);


let totalBytes=0;

let results=[];
networkRecords.forEach(record=>{


if(record.parsedURL.scheme==='data'||!record.finished)return;

const result={
url:record.url,
totalBytes:record.transferSize,
totalMs:ByteEfficiencyAudit.bytesToMs(record.transferSize,networkThroughput)};


totalBytes+=result.totalBytes;
results.push(result);
});
const totalCompletedRequests=results.length;
results=results.sort((itemA,itemB)=>itemB.totalBytes-itemA.totalBytes).slice(0,10);

const score=ByteEfficiencyAudit.computeLogNormalScore(
totalBytes,
context.options.scorePODR,
context.options.scoreMedian);


const headings=[
{key:'url',itemType:'url',text:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',itemType:'bytes',text:str_(i18n.UIStrings.columnSize)}];


const tableDetails=ByteEfficiencyAudit.makeTableDetails(headings,results);

return{
score,
rawValue:totalBytes,
displayValue:str_(UIStrings.displayValue,{totalBytes}),
extendedInfo:{
value:{
results,
totalCompletedRequests}},


details:tableDetails};

}}


module.exports=TotalByteWeight;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/total-byte-weight.js");
},{"../../lib/i18n/i18n.js":36,"./byte-efficiency-audit":3}],"../audits/byte-efficiency/unminified-css":[function(require,module,exports){
(function(__filename){





'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const UnusedCSSRules=require('./unused-css-rules');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Minify CSS',

description:'Minifying CSS files can reduce network payload sizes. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/minify-css).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_PERCENT=5;
const IGNORE_THRESHOLD_IN_BYTES=2048;




class UnminifiedCSS extends ByteEfficiencyAudit{



static get meta(){
return{
id:'unminified-css',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['CSSUsage','devtoolsLogs','traces']};

}







static computeTokenLength(content){
let totalTokenLength=0;
let isInComment=false;
let isInLicenseComment=false;
let isInString=false;
let stringOpenChar=null;

for(let i=0;i<content.length;i++){
const twoChars=content.substr(i,2);
const char=twoChars.charAt(0);

const isWhitespace=char===' '||char==='\n'||char==='\t';
const isAStringOpenChar=char===`'`||char==='"';

if(isInComment){
if(isInLicenseComment)totalTokenLength++;

if(twoChars==='*/'){
if(isInLicenseComment)totalTokenLength++;
isInComment=false;
i++;
}
}else if(isInString){
totalTokenLength++;
if(char==='\\'){
totalTokenLength++;
i++;
}else if(char===stringOpenChar){
isInString=false;
}
}else{
if(twoChars==='/*'){
isInComment=true;
isInLicenseComment=content.charAt(i+2)==='!';
if(isInLicenseComment)totalTokenLength+=2;
i++;
}else if(isAStringOpenChar){
isInString=true;
stringOpenChar=char;
totalTokenLength++;
}else if(!isWhitespace){
totalTokenLength++;
}
}
}



if(isInComment||isInString){
return content.length;
}

return totalTokenLength;
}







static computeWaste(stylesheet,networkRecord,pageUrl){
const content=stylesheet.content;
const totalTokenLength=UnminifiedCSS.computeTokenLength(content);

let url=stylesheet.header.sourceURL;
if(!url||url===pageUrl){
const contentPreview=UnusedCSSRules.determineContentPreview(stylesheet.content);
url=contentPreview;
}

const totalBytes=ByteEfficiencyAudit.estimateTransferSize(networkRecord,content.length,
'Stylesheet');
const wastedRatio=1-totalTokenLength/content.length;
const wastedBytes=Math.round(totalBytes*wastedRatio);

return{
url,
totalBytes,
wastedBytes,
wastedPercent:100*wastedRatio};

}






static audit_(artifacts,networkRecords){
const pageUrl=artifacts.URL.finalUrl;
const items=[];
for(const stylesheet of artifacts.CSSUsage.stylesheets){
const networkRecord=networkRecords.
find(record=>record.url===stylesheet.header.sourceURL);
if(!stylesheet.content)continue;

const result=UnminifiedCSS.computeWaste(stylesheet,networkRecord,pageUrl);



if(result.wastedPercent<IGNORE_THRESHOLD_IN_PERCENT||
result.wastedBytes<IGNORE_THRESHOLD_IN_BYTES||
!Number.isFinite(result.wastedBytes))continue;
items.push(result);
}


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{items,headings};
}}


module.exports=UnminifiedCSS;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/unminified-css.js");
},{"../../lib/i18n/i18n.js":36,"./byte-efficiency-audit":3,"./unused-css-rules":"../audits/byte-efficiency/unused-css-rules"}],"../audits/byte-efficiency/unminified-javascript":[function(require,module,exports){
(function(__filename){





'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const esprima=require('esprima');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Minify JavaScript',

description:'Minifying JavaScript files can reduce payload sizes and script parse time. '+
'[Learn more](https://developers.google.com/speed/docs/insights/MinifyResources).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_PERCENT=10;
const IGNORE_THRESHOLD_IN_BYTES=2048;











class UnminifiedJavaScript extends ByteEfficiencyAudit{



static get meta(){
return{
id:'unminified-javascript',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['Scripts','devtoolsLogs','traces']};

}






static computeWaste(scriptContent,networkRecord){
const contentLength=scriptContent.length;
let totalTokenLength=0;


const tokens=esprima.tokenize(scriptContent,{tolerant:true});
if(!tokens.length&&tokens.errors&&tokens.errors.length){
throw tokens.errors[0];
}

for(const token of tokens){
totalTokenLength+=token.value.length;
}

const totalBytes=ByteEfficiencyAudit.estimateTransferSize(networkRecord,contentLength,
'Script');
const wastedRatio=1-totalTokenLength/contentLength;
const wastedBytes=Math.round(totalBytes*wastedRatio);

return{
url:networkRecord.url,
totalBytes,
wastedBytes,
wastedPercent:100*wastedRatio};

}






static audit_(artifacts,networkRecords){

const items=[];
const warnings=[];
for(const requestId of Object.keys(artifacts.Scripts)){
const scriptContent=artifacts.Scripts[requestId];
const networkRecord=networkRecords.find(record=>record.requestId===requestId);
if(!networkRecord||!scriptContent)continue;

try{
const result=UnminifiedJavaScript.computeWaste(scriptContent,networkRecord);


if(result.wastedPercent<IGNORE_THRESHOLD_IN_PERCENT||
result.wastedBytes<IGNORE_THRESHOLD_IN_BYTES||
!Number.isFinite(result.wastedBytes))continue;
items.push(result);
}catch(err){
warnings.push(`Unable to process ${networkRecord.url}: ${err.message}`);
}
}


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
items,
warnings,
headings};

}}


module.exports=UnminifiedJavaScript;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/unminified-javascript.js");
},{"../../lib/i18n/i18n.js":36,"./byte-efficiency-audit":3,"esprima":162}],"../audits/byte-efficiency/unused-css-rules":[function(require,module,exports){
(function(__filename){





'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Defer unused CSS',

description:'Remove unused rules from stylesheets to reduce unnecessary '+
'bytes consumed by network activity. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/unused-css).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_BYTES=2048;
const PREVIEW_LENGTH=100;



class UnusedCSSRules extends ByteEfficiencyAudit{



static get meta(){
return{
id:'unused-css-rules',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['CSSUsage','URL','devtoolsLogs','traces']};

}






static indexStylesheetsById(styles,networkRecords){
const indexedNetworkRecords=networkRecords.
reduce((indexed,record)=>{
indexed[record.url]=record;
return indexed;
},{});

return styles.reduce((indexed,stylesheet)=>{
indexed[stylesheet.header.styleSheetId]=Object.assign({
usedRules:[],
networkRecord:indexedNetworkRecords[stylesheet.header.sourceURL]},
stylesheet);
return indexed;
},{});
}






static indexUsedRules(rules,indexedStylesheets){
rules.forEach(rule=>{
const stylesheetInfo=indexedStylesheets[rule.styleSheetId];

if(!stylesheetInfo){
return;
}

if(rule.used){
stylesheetInfo.usedRules.push(rule);
}
});
}





static computeUsage(stylesheetInfo){
let usedUncompressedBytes=0;
const totalUncompressedBytes=stylesheetInfo.content.length;

for(const usedRule of stylesheetInfo.usedRules){
usedUncompressedBytes+=usedRule.endOffset-usedRule.startOffset;
}

const totalTransferredBytes=ByteEfficiencyAudit.estimateTransferSize(
stylesheetInfo.networkRecord,totalUncompressedBytes,'Stylesheet');
const percentUnused=(totalUncompressedBytes-usedUncompressedBytes)/totalUncompressedBytes;
const wastedBytes=Math.round(percentUnused*totalTransferredBytes);

return{
wastedBytes,
wastedPercent:percentUnused*100,
totalBytes:totalTransferredBytes};

}






static determineContentPreview(content){
let preview=(content||'').
slice(0,PREVIEW_LENGTH*5).
replace(/( {2,}|\t)+/g,'  ').
replace(/\n\s+}/g,'\n}').
trim();

if(preview.length>PREVIEW_LENGTH){
const firstRuleStart=preview.indexOf('{');
const firstRuleEnd=preview.indexOf('}');

if(firstRuleStart===-1||firstRuleEnd===-1||
firstRuleStart>firstRuleEnd||
firstRuleStart>PREVIEW_LENGTH){

preview=preview.slice(0,PREVIEW_LENGTH)+'...';
}else if(firstRuleEnd<PREVIEW_LENGTH){

preview=preview.slice(0,firstRuleEnd+1)+' ...';
}else{

const lastSemicolonIndex=preview.slice(0,PREVIEW_LENGTH).lastIndexOf(';');
preview=lastSemicolonIndex<firstRuleStart?
preview.slice(0,PREVIEW_LENGTH)+'... } ...':
preview.slice(0,lastSemicolonIndex+1)+' ... } ...';
}
}

return preview;
}






static mapSheetToResult(stylesheetInfo,pageUrl){
let url=stylesheetInfo.header.sourceURL;
if(!url||url===pageUrl){
const contentPreview=UnusedCSSRules.determineContentPreview(stylesheetInfo.content);
url=contentPreview;
}

const usage=UnusedCSSRules.computeUsage(stylesheetInfo);

return Object.assign({url},usage);
}





static audit_(artifacts){
const styles=artifacts.CSSUsage.stylesheets;
const usage=artifacts.CSSUsage.rules;
const pageUrl=artifacts.URL.finalUrl;

const devtoolsLogs=artifacts.devtoolsLogs[ByteEfficiencyAudit.DEFAULT_PASS];
return artifacts.requestNetworkRecords(devtoolsLogs).then(networkRecords=>{
const indexedSheets=UnusedCSSRules.indexStylesheetsById(styles,networkRecords);
UnusedCSSRules.indexUsedRules(usage,indexedSheets);

const items=Object.keys(indexedSheets).
map(sheetId=>UnusedCSSRules.mapSheetToResult(indexedSheets[sheetId],pageUrl)).
filter(sheet=>sheet&&sheet.wastedBytes>IGNORE_THRESHOLD_IN_BYTES);


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
items,
headings};

});
}}


module.exports=UnusedCSSRules;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/unused-css-rules.js");
},{"../../lib/i18n/i18n.js":36,"./byte-efficiency-audit":3}],"../audits/byte-efficiency/unused-javascript":[function(require,module,exports){
(function(__filename){





'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Remove unused JavaScript',

description:'Remove unused JavaScript to reduce bytes consumed by network activity.'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_BYTES=2048;

class UnusedJavaScript extends ByteEfficiencyAudit{



static get meta(){
return{
id:'unused-javascript',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['JsUsage','devtoolsLogs','traces']};

}





static computeWaste(script){
let maximumEndOffset=0;
for(const func of script.functions){
for(const range of func.ranges){
maximumEndOffset=Math.max(maximumEndOffset,range.endOffset);
}
}



const unusedByIndex=new Uint8Array(maximumEndOffset);
for(const func of script.functions){
for(const range of func.ranges){
if(range.count===0){
for(let i=range.startOffset;i<range.endOffset;i++){
unusedByIndex[i]=1;
}
}
}
}

let unused=0;
for(const x of unusedByIndex){
unused+=x;
}

return{
unusedLength:unused,
contentLength:maximumEndOffset};

}






static mergeWaste(wasteData,networkRecord){
let unusedLength=0;
let contentLength=0;
for(const usage of wasteData){
unusedLength+=usage.unusedLength;
contentLength+=usage.contentLength;
}

const totalBytes=ByteEfficiencyAudit.estimateTransferSize(networkRecord,contentLength,
'Script');
const wastedRatio=unusedLength/contentLength||0;
const wastedBytes=Math.round(totalBytes*wastedRatio);

return{
url:networkRecord.url,
totalBytes,
wastedBytes,
wastedPercent:100*wastedRatio};

}






static audit_(artifacts,networkRecords){

const scriptsByUrl=new Map();
for(const script of artifacts.JsUsage){
const scripts=scriptsByUrl.get(script.url)||[];
scripts.push(script);
scriptsByUrl.set(script.url,scripts);
}

const items=[];
for(const[url,scripts]of scriptsByUrl.entries()){
const networkRecord=networkRecords.find(record=>record.url===url);
if(!networkRecord)continue;
const wasteData=scripts.map(UnusedJavaScript.computeWaste);
const item=UnusedJavaScript.mergeWaste(wasteData,networkRecord);
if(item.wastedBytes<=IGNORE_THRESHOLD_IN_BYTES)continue;
items.push(item);
}

return{
items,
headings:[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}]};


}}


module.exports=UnusedJavaScript;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/unused-javascript.js");
},{"../../lib/i18n/i18n.js":36,"./byte-efficiency-audit":3}],"../audits/byte-efficiency/uses-long-cache-ttl":[function(require,module,exports){
(function(__filename){





'use strict';

const assert=require('assert');

const parseCacheControl=require('parse-cache-control');
const Audit=require('../audit');
const NetworkRequest=require('../../lib/network-request');
const URL=require('../../lib/url-shim');
const linearInterpolation=require('../../lib/statistics').linearInterpolation;
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Uses efficient cache policy on static assets',

failureTitle:'Serve static assets with an efficient cache policy',

description:
'A long cache lifetime can speed up repeat visits to your page. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/cache-policy).',

displayValue:`{itemCount, plural,
    =1 {1 resource found}
    other {# resources found}
    }`};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);


const IGNORE_THRESHOLD_IN_PERCENT=0.925;

class CacheHeaders extends Audit{



static get meta(){
return{
id:'uses-long-cache-ttl',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['devtoolsLogs','traces']};

}




static get defaultOptions(){
return{



scorePODR:4*1024,
scoreMedian:128*1024};

}







static getCacheHitProbability(maxAgeInSeconds){





const RESOURCE_AGE_IN_HOURS_DECILES=[0,0.2,1,3,8,12,24,48,72,168,8760,Infinity];
assert.ok(RESOURCE_AGE_IN_HOURS_DECILES.length===12,'deciles 0-10 and 1 for overflow');

const maxAgeInHours=maxAgeInSeconds/3600;
const upperDecileIndex=RESOURCE_AGE_IN_HOURS_DECILES.findIndex(
decile=>decile>=maxAgeInHours);



if(upperDecileIndex===RESOURCE_AGE_IN_HOURS_DECILES.length-1)return 1;
if(upperDecileIndex===0)return 0;


const upperDecileValue=RESOURCE_AGE_IN_HOURS_DECILES[upperDecileIndex];
const lowerDecileValue=RESOURCE_AGE_IN_HOURS_DECILES[upperDecileIndex-1];
const upperDecile=upperDecileIndex/10;
const lowerDecile=(upperDecileIndex-1)/10;


return linearInterpolation(
lowerDecileValue,
lowerDecile,
upperDecileValue,
upperDecile,
maxAgeInHours);

}









static computeCacheLifetimeInSeconds(headers,cacheControl){
if(cacheControl){

if(cacheControl['no-cache']||cacheControl['no-store'])return 0;
const maxAge=cacheControl['max-age'];
if(maxAge!==undefined&&Number.isFinite(maxAge))return Math.max(maxAge,0);
}else if((headers.get('pragma')||'').includes('no-cache')){

return 0;
}

const expiresHeaders=headers.get('expires');
if(expiresHeaders){
const expires=new Date(expiresHeaders).getTime();

if(!expires)return 0;
return Math.max(0,Math.ceil((expires-Date.now())/1000));
}

return null;
}
















static isCacheableAsset(record){
const CACHEABLE_STATUS_CODES=new Set([200,203,206]);


const STATIC_RESOURCE_TYPES=new Set([
NetworkRequest.TYPES.Font,
NetworkRequest.TYPES.Image,
NetworkRequest.TYPES.Media,
NetworkRequest.TYPES.Script,
NetworkRequest.TYPES.Stylesheet]);


const resourceUrl=record.url;
return(
CACHEABLE_STATUS_CODES.has(record.statusCode)&&
STATIC_RESOURCE_TYPES.has(record.resourceType||'Other')&&
!resourceUrl.includes('data:'));

}






static audit(artifacts,context){
const devtoolsLogs=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
return artifacts.requestNetworkRecords(devtoolsLogs).then(records=>{
const results=[];
let queryStringCount=0;
let totalWastedBytes=0;

for(const record of records){
if(!CacheHeaders.isCacheableAsset(record))continue;


const headers=new Map();
for(const header of record.responseHeaders||[]){
if(headers.has(header.name.toLowerCase())){
const previousHeaderValue=headers.get(header.name.toLowerCase());
headers.set(header.name.toLowerCase(),
`${previousHeaderValue}, ${header.value}`);
}else{
headers.set(header.name.toLowerCase(),header.value);
}
}

const cacheControl=parseCacheControl(headers.get('cache-control'));
let cacheLifetimeInSeconds=CacheHeaders.computeCacheLifetimeInSeconds(
headers,
cacheControl);



if(cacheLifetimeInSeconds===0)continue;
cacheLifetimeInSeconds=cacheLifetimeInSeconds||0;

const cacheHitProbability=CacheHeaders.getCacheHitProbability(cacheLifetimeInSeconds);
if(cacheHitProbability>IGNORE_THRESHOLD_IN_PERCENT)continue;

const url=URL.elideDataURI(record.url);
const totalBytes=record.transferSize||0;
const wastedBytes=(1-cacheHitProbability)*totalBytes;

totalWastedBytes+=wastedBytes;
if(url.includes('?'))queryStringCount++;

results.push({
url,
cacheControl,
cacheLifetimeMs:cacheLifetimeInSeconds*1000,
cacheHitProbability,
totalBytes,
wastedBytes});

}

results.sort(
(a,b)=>a.cacheLifetimeMs-b.cacheLifetimeMs||b.totalBytes-a.totalBytes);


const score=Audit.computeLogNormalScore(
totalWastedBytes,
context.options.scorePODR,
context.options.scoreMedian);


const headings=[
{key:'url',itemType:'url',text:str_(i18n.UIStrings.columnURL)},

{key:'cacheLifetimeMs',itemType:'ms',text:str_(i18n.UIStrings.columnCacheTTL),
displayUnit:'duration'},
{key:'totalBytes',itemType:'bytes',text:str_(i18n.UIStrings.columnSize),
displayUnit:'kb',granularity:1}];


const summary={wastedBytes:totalWastedBytes};
const details=Audit.makeTableDetails(headings,results,summary);

return{
score,
rawValue:totalWastedBytes,
displayValue:str_(UIStrings.displayValue,{itemCount:results.length}),
extendedInfo:{
value:{
results,
queryStringCount}},


details};

});
}}


module.exports=CacheHeaders;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/network-request":88,"../../lib/statistics":91,"../../lib/url-shim":"url","../audit":2,"assert":102,"parse-cache-control":181}],"../audits/byte-efficiency/uses-optimized-images":[function(require,module,exports){
(function(__filename){









'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const URL=require('../../lib/url-shim');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Efficiently encode images',

description:'Optimized images load faster and consume less cellular data. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/optimize-images).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_BYTES=4096;

class UsesOptimizedImages extends ByteEfficiencyAudit{



static get meta(){
return{
id:'uses-optimized-images',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['OptimizedImages','devtoolsLogs','traces']};

}





static computeSavings(image){
const bytes=image.originalSize-image.jpegSize;
const percent=100*bytes/image.originalSize;
return{bytes,percent};
}





static audit_(artifacts){
const images=artifacts.OptimizedImages;


const items=[];
const warnings=[];
for(const image of images){
if(image.failed){
warnings.push(`Unable to decode ${URL.getURLDisplayName(image.url)}`);
continue;
}else if(/(jpeg|bmp)/.test(image.mimeType)===false||
image.originalSize<image.jpegSize+IGNORE_THRESHOLD_IN_BYTES){
continue;
}

const url=URL.elideDataURI(image.url);
const jpegSavings=UsesOptimizedImages.computeSavings(image);

items.push({
url,
fromProtocol:image.fromProtocol,
isCrossOrigin:!image.isSameOrigin,
totalBytes:image.originalSize,
wastedBytes:jpegSavings.bytes});

}


const headings=[
{key:'url',valueType:'thumbnail',label:''},
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
warnings,
items,
headings};

}}


module.exports=UsesOptimizedImages;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/uses-optimized-images.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/url-shim":"url","./byte-efficiency-audit":3}],"../audits/byte-efficiency/uses-responsive-images":[function(require,module,exports){
(function(__filename){













'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const Sentry=require('../../lib/sentry');
const URL=require('../../lib/url-shim');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Properly size images',

description:
'Serve images that are appropriately-sized to save cellular data '+
'and improve load time. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/oversized-images).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_BYTES=2048;

class UsesResponsiveImages extends ByteEfficiencyAudit{



static get meta(){
return{
id:'uses-responsive-images',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['ImageUsage','ViewportDimensions','devtoolsLogs','traces']};

}






static computeWaste(image,DPR){

if(!image.networkRecord){
return null;
}

const url=URL.elideDataURI(image.src);
const actualPixels=image.naturalWidth*image.naturalHeight;
const usedPixels=image.clientWidth*image.clientHeight*Math.pow(DPR,2);
const wastedRatio=1-usedPixels/actualPixels;
const totalBytes=image.networkRecord.resourceSize;
const wastedBytes=Math.round(totalBytes*wastedRatio);



if(!usedPixels){
return null;
}

if(!Number.isFinite(wastedRatio)){
return new Error(`Invalid image sizing information ${url}`);
}

return{
url,
totalBytes,
wastedBytes,
wastedPercent:100*wastedRatio};

}





static audit_(artifacts){
const images=artifacts.ImageUsage;
const DPR=artifacts.ViewportDimensions.devicePixelRatio;


const warnings=[];

const resultsMap=new Map();
images.forEach(image=>{

if(!image.networkRecord||image.networkRecord.mimeType==='image/svg+xml'){
return;
}

const processed=UsesResponsiveImages.computeWaste(image,DPR);
if(!processed)return;

if(processed instanceof Error){
warnings.push(processed.message);
Sentry.captureException(processed,{tags:{audit:this.meta.id},level:'warning'});
return;
}


const existing=resultsMap.get(processed.url);
if(!existing||existing.wastedBytes>processed.wastedBytes){
resultsMap.set(processed.url,processed);
}
});

const items=Array.from(resultsMap.values()).
filter(item=>item.wastedBytes>IGNORE_THRESHOLD_IN_BYTES);


const headings=[
{key:'url',valueType:'thumbnail',label:''},
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
warnings,
items,
headings};

}}


module.exports=UsesResponsiveImages;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/uses-responsive-images.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/sentry":90,"../../lib/url-shim":"url","./byte-efficiency-audit":3}],"../audits/byte-efficiency/uses-text-compression":[function(require,module,exports){
(function(__filename){









'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const URL=require('../../lib/url-shim');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Enable text compression',

description:'Text-based resources should be served with compression (gzip, deflate or'+
' brotli) to minimize total network bytes.'+
' [Learn more](https://developers.google.com/web/tools/lighthouse/audits/text-compression).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_BYTES=1400;
const IGNORE_THRESHOLD_IN_PERCENT=0.1;

class ResponsesAreCompressed extends ByteEfficiencyAudit{



static get meta(){
return{
id:'uses-text-compression',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['ResponseCompression','devtoolsLogs','traces']};

}





static audit_(artifacts){
const uncompressedResponses=artifacts.ResponseCompression;


const items=[];
uncompressedResponses.forEach(record=>{

if(!record.gzipSize||record.gzipSize<0)return;

const originalSize=record.resourceSize;
const gzipSize=record.gzipSize;
const gzipSavings=originalSize-gzipSize;



if(1-gzipSize/originalSize<IGNORE_THRESHOLD_IN_PERCENT||
gzipSavings<IGNORE_THRESHOLD_IN_BYTES||
record.transferSize<gzipSize)
{
return;
}


const url=URL.elideDataURI(record.url);
const isDuplicate=items.find(item=>item.url===url&&
item.totalBytes===record.resourceSize);
if(isDuplicate){
return;
}

items.push({
url,
totalBytes:originalSize,
wastedBytes:gzipSavings});

});


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
items,
headings};

}}


module.exports=ResponsesAreCompressed;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/uses-text-compression.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/url-shim":"url","./byte-efficiency-audit":3}],"../audits/byte-efficiency/uses-webp-images":[function(require,module,exports){
(function(__filename){








'use strict';

const ByteEfficiencyAudit=require('./byte-efficiency-audit');
const URL=require('../../lib/url-shim');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Serve images in next-gen formats',

description:'Image formats like JPEG 2000, JPEG XR, and WebP often provide better '+
'compression than PNG or JPEG, which means faster downloads and less data consumption. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/webp).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const IGNORE_THRESHOLD_IN_BYTES=8192;

class UsesWebPImages extends ByteEfficiencyAudit{



static get meta(){
return{
id:'uses-webp-images',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:ByteEfficiencyAudit.SCORING_MODES.NUMERIC,
requiredArtifacts:['OptimizedImages','devtoolsLogs','traces']};

}





static computeSavings(image){
const bytes=image.originalSize-image.webpSize;
const percent=100*bytes/image.originalSize;
return{bytes,percent};
}





static audit_(artifacts){
const images=artifacts.OptimizedImages;


const items=[];
const warnings=[];
for(const image of images){
if(image.failed){
warnings.push(`Unable to decode ${URL.getURLDisplayName(image.url)}`);
continue;
}else if(image.originalSize<image.webpSize+IGNORE_THRESHOLD_IN_BYTES){
continue;
}

const url=URL.elideDataURI(image.url);
const webpSavings=UsesWebPImages.computeSavings(image);

items.push({
url,
fromProtocol:image.fromProtocol,
isCrossOrigin:!image.isSameOrigin,
totalBytes:image.originalSize,
wastedBytes:webpSavings.bytes});

}


const headings=[
{key:'url',valueType:'thumbnail',label:''},
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'totalBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnSize)},
{key:'wastedBytes',valueType:'bytes',label:str_(i18n.UIStrings.columnWastedBytes)}];


return{
warnings,
items,
headings};

}}


module.exports=UsesWebPImages;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/uses-webp-images.js");
},{"../../lib/i18n/i18n.js":36,"../../lib/url-shim":"url","./byte-efficiency-audit":3}],"../audits/content-width":[function(require,module,exports){





'use strict';

const Audit=require('./audit');

class ContentWidth extends Audit{



static get meta(){
return{
id:'content-width',
title:'Content is sized correctly for the viewport',
failureTitle:'Content is not sized correctly for the viewport',
description:'If the width of your app\'s content doesn\'t match the width '+
'of the viewport, your app might not be optimized for mobile screens. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/content-sized-correctly-for-viewport).',
requiredArtifacts:['ViewportDimensions','HostUserAgent']};

}






static audit(artifacts,context){
const userAgent=artifacts.HostUserAgent;
const viewportWidth=artifacts.ViewportDimensions.innerWidth;
const windowWidth=artifacts.ViewportDimensions.outerWidth;
const widthsMatch=viewportWidth===windowWidth;


const isMobileHost=userAgent.includes('Android')||userAgent.includes('Mobile');
const isMobile=context.settings.emulatedFormFactor==='mobile'||
context.settings.emulatedFormFactor!=='desktop'&&isMobileHost;

if(isMobile){
return{
rawValue:widthsMatch,
explanation:this.createExplanation(widthsMatch,artifacts.ViewportDimensions)};

}else{
return{
rawValue:true,
notApplicable:true};

}
}






static createExplanation(match,artifact){
if(match){
return'';
}

return'The viewport size is '+artifact.innerWidth+'px, '+
'whereas the window size is '+artifact.outerWidth+'px.';
}}


module.exports=ContentWidth;

},{"./audit":2}],"../audits/critical-request-chains":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('./audit');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'Minimize Critical Requests Depth',

description:'The Critical Request Chains below show you what resources are '+
'loaded with a high priority. Consider reducing '+
'the length of chains, reducing the download size of resources, or '+
'deferring the download of unnecessary resources to improve page load. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains).',

displayValue:`{itemCount, plural,
    =1 {1 chain found}
    other {# chains found}
    }`};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class CriticalRequestChains extends Audit{



static get meta(){
return{
id:'critical-request-chains',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.INFORMATIVE,
requiredArtifacts:['devtoolsLogs','URL']};

}







static _traverse(tree,cb){






function walk(node,depth,startTime,transferSize=0){
const children=Object.keys(node);
if(children.length===0){
return;
}
children.forEach(id=>{
const child=node[id];
if(!startTime){
startTime=child.request.startTime;
}


cb({
depth,
id,
node:child,
chainDuration:(child.request.endTime-startTime)*1000,
chainTransferSize:transferSize+child.request.transferSize});



walk(child.children,depth+1,startTime);
},'');
}

walk(tree,0);
}






static _getLongestChain(tree){
const longest={
duration:0,
length:0,
transferSize:0};

CriticalRequestChains._traverse(tree,opts=>{
const duration=opts.chainDuration;
if(duration>longest.duration){
longest.duration=duration;
longest.transferSize=opts.chainTransferSize;
longest.length=opts.depth;
}
});

longest.length++;
return longest;
}





static flattenRequests(tree){

const flattendChains={};

const chainMap=new Map();


function flatten(opts){
const request=opts.node.request;
const simpleRequest={
url:request.url,
startTime:request.startTime,
endTime:request.endTime,
responseReceivedTime:request.responseReceivedTime,
transferSize:request.transferSize};


let chain=chainMap.get(opts.id);
if(chain){
chain.request=simpleRequest;
}else{
chain={
request:simpleRequest,
children:{}};

flattendChains[opts.id]=chain;
}

for(const chainId of Object.keys(opts.node.children)){

const childChain={
request:{},
children:{}};

chainMap.set(chainId,childChain);
chain.children[chainId]=childChain;
}

chainMap.set(opts.id,chain);
}

CriticalRequestChains._traverse(tree,flatten);

return flattendChains;
}






static audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const URL=artifacts.URL;
return artifacts.requestCriticalRequestChains({devtoolsLog,URL}).then(chains=>{
let chainCount=0;




function walk(node,depth){
const children=Object.keys(node);



if(children.length===0){
chainCount++;
}

children.forEach(id=>{
const child=node[id];
walk(child.children,depth+1);
},'');
}

const flattenedChains=CriticalRequestChains.flattenRequests(chains);


const initialNavKey=Object.keys(flattenedChains)[0];
const initialNavChildren=initialNavKey&&flattenedChains[initialNavKey].children;
if(initialNavChildren&&Object.keys(initialNavChildren).length>0){
walk(initialNavChildren,0);
}

const longestChain=CriticalRequestChains._getLongestChain(flattenedChains);

return{
rawValue:chainCount===0,
notApplicable:chainCount===0,
displayValue:chainCount?str_(UIStrings.displayValue,{itemCount:chainCount}):'',
extendedInfo:{
value:{
chains:flattenedChains,
longestChain}},


details:{
type:'criticalrequestchain',
chains:flattenedChains,
longestChain}};


});
}}


module.exports=CriticalRequestChains;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/critical-request-chains.js");
},{"../lib/i18n/i18n.js":36,"./audit":2}],"../audits/deprecations":[function(require,module,exports){





'use strict';







const Audit=require('./audit');
const Util=require('../report/html/renderer/util');

class Deprecations extends Audit{



static get meta(){
return{
id:'deprecations',
title:'Avoids deprecated APIs',
failureTitle:'Uses deprecated APIs',
description:'Deprecated APIs will eventually be removed from the browser. '+
'[Learn more](https://www.chromestatus.com/features#deprecated).',
requiredArtifacts:['ChromeConsoleMessages']};

}





static audit(artifacts){
const entries=artifacts.ChromeConsoleMessages;

const deprecations=entries.filter(log=>log.entry.source==='deprecation').map(log=>{
return{
value:log.entry.text,
url:log.entry.url||'',
source:log.entry.source,
lineNumber:log.entry.lineNumber};

});

const headings=[
{key:'value',itemType:'code',text:'Deprecation / Warning'},
{key:'url',itemType:'url',text:'URL'},
{key:'lineNumber',itemType:'text',text:'Line'}];

const details=Audit.makeTableDetails(headings,deprecations);

let displayValue='';
if(deprecations.length>1){
displayValue=`${Util.formatNumber(deprecations.length)} warnings found`;
}else if(deprecations.length===1){
displayValue=`${deprecations.length} warning found`;
}

return{
rawValue:deprecations.length===0,
displayValue,
extendedInfo:{
value:deprecations},

details};

}}


module.exports=Deprecations;

},{"../report/html/renderer/util":97,"./audit":2}],"../audits/dobetterweb/appcache-manifest":[function(require,module,exports){










'use strict';

const Audit=require('../audit');

class AppCacheManifestAttr extends Audit{



static get meta(){
return{
id:'appcache-manifest',
title:'Avoids Application Cache',
failureTitle:'Uses Application Cache',
description:'Application Cache is deprecated. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/appcache).',
requiredArtifacts:['AppCacheManifest']};

}





static audit(artifacts){
const usingAppcache=artifacts.AppCacheManifest!==null;
const displayValue=usingAppcache?`Found "${artifacts.AppCacheManifest}"`:'';

return{
rawValue:!usingAppcache,
displayValue};

}}


module.exports=AppCacheManifestAttr;

},{"../audit":2}],"../audits/dobetterweb/doctype":[function(require,module,exports){





'use strict';

const Audit=require('../audit');

class Doctype extends Audit{



static get meta(){
return{
id:'doctype',
title:'Page has the HTML doctype',
failureTitle:'Page is missing the HTML doctype',
description:'Specifying a doctype prevents the browser from switching to quirks-mode.'+
'Read more on the '+
'[MDN Web Docs page](https://developer.mozilla.org/en-US/docs/Glossary/Doctype)',
requiredArtifacts:['Doctype']};

}





static audit(artifacts){
if(!artifacts.Doctype){
return{
rawValue:false,
explanation:'Document must contain a doctype'};

}


const doctypeName=artifacts.Doctype.name.trim();
const doctypePublicId=artifacts.Doctype.publicId;
const doctypeSystemId=artifacts.Doctype.systemId;

if(doctypePublicId!==''){
return{
rawValue:false,
explanation:'Expected publicId to be an empty string'};

}

if(doctypeSystemId!==''){
return{
rawValue:false,
explanation:'Expected systemId to be an empty string'};

}




if(doctypeName==='html'){
return{
rawValue:true};

}else{
return{
rawValue:false,
explanation:'Doctype name must be the lowercase string `html`'};

}
}}


module.exports=Doctype;

},{"../audit":2}],"../audits/dobetterweb/dom-size":[function(require,module,exports){
(function(__filename){












'use strict';

const Audit=require('../audit');
const Util=require('../../report/html/renderer/util.js');
const i18n=require('../../lib/i18n/i18n.js');

const MAX_DOM_NODES=1500;
const MAX_DOM_TREE_WIDTH=60;
const MAX_DOM_TREE_DEPTH=32;

const UIStrings={

title:'Avoids an excessive DOM size',

failureTitle:'Avoid an excessive DOM size',

description:'Browser engineers recommend pages contain fewer than '+
`~${MAX_DOM_NODES.toLocaleString()} DOM nodes. The sweet spot is a tree `+
`depth < ${MAX_DOM_TREE_DEPTH} elements and fewer than ${MAX_DOM_TREE_WIDTH} `+
'children/parent element. A large DOM can increase memory usage, cause longer '+
'[style calculations](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), '+
'and produce costly [layout reflows](https://developers.google.com/speed/articles/reflow). [Learn more](https://developers.google.com/web/tools/lighthouse/audits/dom-size).',

columnStatistic:'Statistic',

columnElement:'Element',

columnValue:'Value',

displayValue:`{itemCount, plural,
    =1 {1 node}
    other {# nodes}
    }`,

statisticDOMNodes:'Total DOM Nodes',

statisticDOMDepth:'Maximum DOM Depth',

statisticDOMWidth:'Maximum Child Elements'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);


class DOMSize extends Audit{
static get MAX_DOM_NODES(){
return MAX_DOM_NODES;
}




static get meta(){
return{
id:'dom-size',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['DOMStats']};

}




static get defaultOptions(){
return{



scorePODR:700,
scoreMedian:1400};

}







static audit(artifacts,context){
const stats=artifacts.DOMStats;

const score=Audit.computeLogNormalScore(
stats.totalDOMNodes,
context.options.scorePODR,
context.options.scoreMedian);


const headings=[
{key:'statistic',itemType:'text',text:str_(UIStrings.columnStatistic)},
{key:'element',itemType:'code',text:str_(UIStrings.columnElement)},
{key:'value',itemType:'text',text:str_(UIStrings.columnValue)}];



const items=[
{
statistic:str_(UIStrings.statisticDOMNodes),
element:'',
value:Util.formatNumber(stats.totalDOMNodes)},

{
statistic:str_(UIStrings.statisticDOMDepth),
element:{
type:'code',
value:stats.depth.snippet},

value:Util.formatNumber(stats.depth.max)},

{
statistic:str_(UIStrings.statisticDOMWidth),
element:{
type:'code',
value:stats.width.snippet},

value:Util.formatNumber(stats.width.max)}];



return{
score,
rawValue:stats.totalDOMNodes,
displayValue:str_(UIStrings.displayValue,{itemCount:stats.totalDOMNodes}),
extendedInfo:{
value:items},

details:Audit.makeTableDetails(headings,items)};

}}


module.exports=DOMSize;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/dobetterweb/dom-size.js");
},{"../../lib/i18n/i18n.js":36,"../../report/html/renderer/util.js":97,"../audit":2}],"../audits/dobetterweb/external-anchors-use-rel-noopener":[function(require,module,exports){





'use strict';

const URL=require('../../lib/url-shim');
const Audit=require('../audit');

class ExternalAnchorsUseRelNoopenerAudit extends Audit{



static get meta(){
return{
id:'external-anchors-use-rel-noopener',
title:'Links to cross-origin destinations are safe',
failureTitle:'Links to cross-origin destinations are unsafe',
description:'Add `rel="noopener"` or `rel="noreferrer"` to any external links to improve '+
'performance and prevent security vulnerabilities. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/noopener).',
requiredArtifacts:['URL','AnchorsWithNoRelNoopener']};

}





static audit(artifacts){

const warnings=[];
const pageHost=new URL(artifacts.URL.finalUrl).host;

const failingAnchors=artifacts.AnchorsWithNoRelNoopener.
filter(anchor=>{
try{
return new URL(anchor.href).host!==pageHost;
}catch(err){
warnings.push(`Unable to determine the destination for anchor (${anchor.outerHTML}). `+
'If not used as a hyperlink, consider removing target=_blank.');
return true;
}
}).
filter(anchor=>{
return!anchor.href||anchor.href.toLowerCase().startsWith('http');
}).
map(anchor=>{
return{
href:anchor.href||'Unknown',
target:anchor.target||'',
rel:anchor.rel||'',
outerHTML:anchor.outerHTML||''};

});

const headings=[
{key:'href',itemType:'url',text:'URL'},
{key:'target',itemType:'text',text:'Target'},
{key:'rel',itemType:'text',text:'Rel'}];


const details=Audit.makeTableDetails(headings,failingAnchors);

return{
rawValue:failingAnchors.length===0,
extendedInfo:{
value:failingAnchors},

details,
warnings};

}}


module.exports=ExternalAnchorsUseRelNoopenerAudit;

},{"../../lib/url-shim":"url","../audit":2}],"../audits/dobetterweb/geolocation-on-start":[function(require,module,exports){











'use strict';

const ViolationAudit=require('../violation-audit');

class GeolocationOnStart extends ViolationAudit{



static get meta(){
return{
id:'geolocation-on-start',
title:'Avoids requesting the geolocation permission on page load',
failureTitle:'Requests the geolocation permission on page load',
description:'Users are mistrustful of or confused by sites that request their '+
'location without context. Consider tying the request to user gestures instead. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/geolocation-on-load).',
requiredArtifacts:['ChromeConsoleMessages']};

}





static audit(artifacts){

const results=ViolationAudit.getViolationResults(artifacts,/geolocation/);

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'label',itemType:'text',text:'Location'}];



const details=ViolationAudit.makeTableDetails(headings,results);

return{
rawValue:results.length===0,
extendedInfo:{
value:results},

details};

}}


module.exports=GeolocationOnStart;

},{"../violation-audit":6}],"../audits/dobetterweb/js-libraries":[function(require,module,exports){










'use strict';

const Audit=require('../audit');

class JsLibrariesAudit extends Audit{



static get meta(){
return{
id:'js-libraries',
title:'Detected JavaScript libraries',
description:'All front-end JavaScript libraries detected on the page.',
requiredArtifacts:['JSLibraries']};

}





static audit(artifacts){
const libDetails=artifacts.JSLibraries.map(lib=>({
name:lib.name,
version:lib.version,
npm:lib.npmPkgName||null}));


const headings=[
{key:'name',itemType:'text',text:'Name'},
{key:'version',itemType:'text',text:'Version'}];

const details=Audit.makeTableDetails(headings,libDetails,{});

return{
rawValue:true,
details};

}}


module.exports=JsLibrariesAudit;

},{"../audit":2}],"../audits/dobetterweb/no-document-write":[function(require,module,exports){










'use strict';

const ViolationAudit=require('../violation-audit');

class NoDocWriteAudit extends ViolationAudit{



static get meta(){
return{
id:'no-document-write',
title:'Avoids `document.write()`',
failureTitle:'Uses `document.write()`',
description:'For users on slow connections, external scripts dynamically injected via '+
'`document.write()` can delay page load by tens of seconds. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/document-write).',
requiredArtifacts:['ChromeConsoleMessages']};

}





static audit(artifacts){
const results=ViolationAudit.getViolationResults(artifacts,/document\.write/);

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'label',itemType:'text',text:'Location'}];


const details=ViolationAudit.makeTableDetails(headings,results);

return{
rawValue:results.length===0,
extendedInfo:{
value:results},

details};

}}


module.exports=NoDocWriteAudit;

},{"../violation-audit":6}],"../audits/dobetterweb/no-vulnerable-libraries":[function(require,module,exports){












'use strict';

const Audit=require('../audit');
const Sentry=require('../../lib/sentry');
const semver=require('semver');
const snykDatabase=require('../../../third-party/snyk/snapshot.json');

const SEMVER_REGEX=/^(\d+\.\d+\.\d+)[^-0-9]+/;




class NoVulnerableLibrariesAudit extends Audit{



static get meta(){
return{
id:'no-vulnerable-libraries',
title:'Avoids front-end JavaScript libraries'+
' with known security vulnerabilities',
failureTitle:'Includes front-end JavaScript libraries'+
' with known security vulnerabilities',
description:'Some third-party scripts may contain known security vulnerabilities '+
'that are easily identified and exploited by attackers. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/vulnerabilities).',
requiredArtifacts:['JSLibraries']};

}




static get snykDB(){
return snykDatabase;
}




static get severityMap(){
return{
high:3,
medium:2,
low:1};

}






static normalizeVersion(version){
if(!version)return version;
if(semver.valid(version))return version;


if(/^\d+\.\d+$/.test(version))return`${version}.0`;

const versionMatch=version.match(SEMVER_REGEX);
if(versionMatch)return versionMatch[1];

return version;
}






static getVulnerabilities(normalizedVersion,lib){
const snykDB=NoVulnerableLibrariesAudit.snykDB;
if(!lib.npmPkgName||!snykDB.npm[lib.npmPkgName]){
return[];
}

try{
semver.satisfies(normalizedVersion,'*');
}catch(err){
err.pkgName=lib.npmPkgName;

Sentry.captureException(err,{level:'warning'});
return[];
}

const snykInfo=snykDB.npm[lib.npmPkgName];
const vulns=snykInfo.
filter(vuln=>semver.satisfies(normalizedVersion,vuln.semver.vulnerable[0])).

map(vuln=>{
return{
severity:vuln.severity,
numericSeverity:this.severityMap[vuln.severity],
library:`${lib.name}@${normalizedVersion}`,
url:'https://snyk.io/vuln/'+vuln.id};

});

return vulns;
}





static highestSeverity(vulnerabilities){
const sortedVulns=vulnerabilities.
sort((a,b)=>b.numericSeverity-a.numericSeverity);
return sortedVulns[0].severity;
}





static audit(artifacts){
const foundLibraries=artifacts.JSLibraries;
if(!foundLibraries.length){
return{
rawValue:true};

}

let totalVulns=0;

const vulnerabilityResults=[];

const libraryVulns=foundLibraries.map(lib=>{
const version=this.normalizeVersion(lib.version)||'';
const vulns=this.getVulnerabilities(version,lib);
const vulnCount=vulns.length;
totalVulns+=vulnCount;

let highestSeverity;
if(vulns.length>0){
highestSeverity=this.highestSeverity(vulns).replace(/^\w/,l=>l.toUpperCase());

vulnerabilityResults.push({
highestSeverity,
vulnCount,
detectedLib:{
text:lib.name+'@'+version,
url:`https://snyk.io/vuln/npm:${lib.npmPkgName}?lh=${version}`,
type:'link'}});


}

return{
name:lib.name,
npmPkgName:lib.npmPkgName,
version,
vulns,
highestSeverity};

});

let displayValue='';
if(totalVulns>1){
displayValue=`${totalVulns} vulnerabilities detected`;
}else if(totalVulns===1){
displayValue=`${totalVulns} vulnerability detected`;
}

const headings=[
{key:'detectedLib',itemType:'link',text:'Library Version'},
{key:'vulnCount',itemType:'text',text:'Vulnerability Count'},
{key:'highestSeverity',itemType:'text',text:'Highest Severity'}];

const details=Audit.makeTableDetails(headings,vulnerabilityResults,{});

return{
rawValue:totalVulns===0,
displayValue,
extendedInfo:{
jsLibs:libraryVulns,
vulnerabilities:vulnerabilityResults},

details};

}}


module.exports=NoVulnerableLibrariesAudit;

},{"../../../third-party/snyk/snapshot.json":189,"../../lib/sentry":90,"../audit":2,"semver":184}],"../audits/dobetterweb/no-websql":[function(require,module,exports){











'use strict';

const Audit=require('../audit');

class NoWebSQLAudit extends Audit{



static get meta(){
return{
id:'no-websql',
title:'Avoids WebSQL DB',
failureTitle:'Uses WebSQL DB',
description:'Web SQL is deprecated. Consider using IndexedDB instead. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/web-sql).',
requiredArtifacts:['WebSQL']};

}





static audit(artifacts){
const db=artifacts.WebSQL;
const displayValue=db?
`Found "${db.name}" (v${db.version})`:'';

return{
rawValue:!db,
displayValue};

}}


module.exports=NoWebSQLAudit;

},{"../audit":2}],"../audits/dobetterweb/notification-on-start":[function(require,module,exports){











'use strict';

const ViolationAudit=require('../violation-audit');

class NotificationOnStart extends ViolationAudit{



static get meta(){
return{
id:'notification-on-start',
title:'Avoids requesting the notification permission on page load',
failureTitle:'Requests the notification permission on page load',
description:'Users are mistrustful of or confused by sites that request to send '+
'notifications without context. Consider tying the request to user gestures '+
'instead. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/notifications-on-load).',
requiredArtifacts:['ChromeConsoleMessages']};

}





static audit(artifacts){
const results=ViolationAudit.getViolationResults(artifacts,/notification permission/);

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'label',itemType:'text',text:'Location'}];


const details=ViolationAudit.makeTableDetails(headings,results);

return{
rawValue:results.length===0,
extendedInfo:{
value:results},

details};

}}


module.exports=NotificationOnStart;

},{"../violation-audit":6}],"../audits/dobetterweb/password-inputs-can-be-pasted-into":[function(require,module,exports){





'use strict';

const Audit=require('../audit');

class PasswordInputsCanBePastedIntoAudit extends Audit{



static get meta(){
return{
id:'password-inputs-can-be-pasted-into',
title:'Allows users to paste into password fields',
failureTitle:'Prevents users to paste into password fields',
description:'Preventing password pasting undermines good security policy. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/password-pasting).',
requiredArtifacts:['PasswordInputsWithPreventedPaste']};

}





static audit(artifacts){
const passwordInputsWithPreventedPaste=artifacts.PasswordInputsWithPreventedPaste;


const items=[];
passwordInputsWithPreventedPaste.forEach(input=>{
items.push({
node:{type:'node',snippet:input.snippet}});

});

const headings=[
{key:'node',itemType:'node',text:'Failing Elements'}];


return{
rawValue:passwordInputsWithPreventedPaste.length===0,
extendedInfo:{
value:passwordInputsWithPreventedPaste},

details:Audit.makeTableDetails(headings,items)};

}}


module.exports=PasswordInputsCanBePastedIntoAudit;

},{"../audit":2}],"../audits/dobetterweb/uses-http2":[function(require,module,exports){











'use strict';

const URL=require('../../lib/url-shim');
const Audit=require('../audit');
const Util=require('../../report/html/renderer/util.js');

class UsesHTTP2Audit extends Audit{



static get meta(){
return{
id:'uses-http2',
title:'Uses HTTP/2 for its own resources',
failureTitle:'Does not use HTTP/2 for all of its resources',
description:'HTTP/2 offers many benefits over HTTP/1.1, including binary headers, '+
'multiplexing, and server push. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/http2).',
requiredArtifacts:['URL','devtoolsLogs']};

}





static audit(artifacts){
const devtoolsLogs=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
return artifacts.requestNetworkRecords(devtoolsLogs).then(networkRecords=>{
const finalHost=new URL(artifacts.URL.finalUrl).host;

const seenURLs=new Set();

const resources=networkRecords.filter(record=>{

const isOldHttp=/HTTP\/[01][.\d]?/i.test(record.protocol);
if(!isOldHttp)return false;
const requestHost=new URL(record.url).host;
return requestHost===finalHost;
}).map(record=>{
return{
protocol:record.protocol,
url:record.url};

}).filter(record=>{
if(seenURLs.has(record.url))return false;
seenURLs.add(record.url);
return true;
});

let displayValue='';
if(resources.length>1){
displayValue=
`${Util.formatNumber(resources.length)} requests not served via HTTP/2`;
}else if(resources.length===1){
displayValue=`${resources.length} request not served via HTTP/2`;
}

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'protocol',itemType:'text',text:'Protocol'}];

const details=Audit.makeTableDetails(headings,resources);

return{
rawValue:resources.length===0,
displayValue:displayValue,
extendedInfo:{
value:{
results:resources}},


details};

});
}}


module.exports=UsesHTTP2Audit;

},{"../../lib/url-shim":"url","../../report/html/renderer/util.js":97,"../audit":2}],"../audits/dobetterweb/uses-passive-event-listeners":[function(require,module,exports){











'use strict';

const ViolationAudit=require('../violation-audit');

class PassiveEventsAudit extends ViolationAudit{



static get meta(){
return{
id:'uses-passive-event-listeners',
title:'Uses passive listeners to improve scrolling performance',
failureTitle:'Does not use passive listeners to improve scrolling performance',
description:'Consider marking your touch and wheel event listeners as `passive` '+
'to improve your page\'s scroll performance. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/passive-event-listeners).',
requiredArtifacts:['ChromeConsoleMessages']};

}





static audit(artifacts){
const results=ViolationAudit.getViolationResults(artifacts,/passive event listener/);

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'label',itemType:'text',text:'Location'}];


const details=ViolationAudit.makeTableDetails(headings,results);

return{
rawValue:results.length===0,
extendedInfo:{
value:results},

details};

}}


module.exports=PassiveEventsAudit;

},{"../violation-audit":6}],"../audits/errors-in-console":[function(require,module,exports){





'use strict';






const Audit=require('./audit');

class ErrorLogs extends Audit{



static get meta(){
return{
id:'errors-in-console',
title:'No browser errors logged to the console',
description:'Errors logged to the console indicate unresolved problems. '+
'They can come from network request failures and other browser concerns.',
failureTitle:'Browser errors were logged to the console',
requiredArtifacts:['ChromeConsoleMessages','RuntimeExceptions']};

}





static audit(artifacts){
const consoleEntries=artifacts.ChromeConsoleMessages;
const runtimeExceptions=artifacts.RuntimeExceptions;

const consoleRows=
consoleEntries.filter(log=>log.entry&&log.entry.level==='error').
map(item=>{
return{
source:item.entry.source,
description:item.entry.text,
url:item.entry.url};

});

const runtimeExRows=
runtimeExceptions.filter(entry=>entry.exceptionDetails!==undefined).
map(entry=>{
const description=entry.exceptionDetails.exception?
entry.exceptionDetails.exception.description:entry.exceptionDetails.text;

return{
source:'Runtime.exception',
description,
url:entry.exceptionDetails.url};

});

const tableRows=consoleRows.concat(runtimeExRows);

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'description',itemType:'code',text:'Description'}];


const details=Audit.makeTableDetails(headings,tableRows);
const numErrors=tableRows.length;

return{
score:Number(numErrors===0),
rawValue:numErrors,
details};

}}


module.exports=ErrorLogs;

},{"./audit":2}],"../audits/final-screenshot":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const LHError=require('../lib/lh-error');

class FinalScreenshot extends Audit{



static get meta(){
return{
id:'final-screenshot',
scoreDisplayMode:Audit.SCORING_MODES.INFORMATIVE,
title:'Final Screenshot',
description:'The last screenshot captured of the pageload.',
requiredArtifacts:['traces']};

}





static async audit(artifacts){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const screenshots=await artifacts.requestScreenshots(trace);
const finalScreenshot=screenshots[screenshots.length-1];

if(!finalScreenshot){
throw new LHError(LHError.errors.NO_SCREENSHOTS);
}

return{
rawValue:true,
details:{
type:'screenshot',
timestamp:finalScreenshot.timestamp,
data:finalScreenshot.datauri}};


}}


module.exports=FinalScreenshot;

},{"../lib/lh-error":85,"./audit":2}],"../audits/font-display":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('./audit');
const NetworkRequest=require('../lib/network-request');
const allowedFontFaceDisplays=['block','fallback','optional','swap'];
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'All text remains visible during webfont loads',

failureTitle:'Ensure text remains visible during webfont load',

description:'Leverage the font-display CSS feature to ensure text is user-visible while '+
'webfonts are loading. '+
'[Learn more](https://developers.google.com/web/updates/2016/02/font-display).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class FontDisplay extends Audit{



static get meta(){
return{
id:'font-display',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
requiredArtifacts:['devtoolsLogs','Fonts']};

}





static audit(artifacts){
const devtoolsLogs=artifacts.devtoolsLogs[this.DEFAULT_PASS];
const fontFaces=artifacts.Fonts;


const fontsWithoutProperDisplay=fontFaces.filter(fontFace=>
!fontFace.display||!allowedFontFaceDisplays.includes(fontFace.display));


return artifacts.requestNetworkRecords(devtoolsLogs).then(networkRecords=>{
const results=networkRecords.filter(record=>{
const isFont=record.resourceType===NetworkRequest.TYPES.Font;

return isFont;
}).
filter(fontRecord=>{

return!!fontsWithoutProperDisplay.find(fontFace=>{
return!!fontFace.src&&!!fontFace.src.find(src=>fontRecord.url===src);
});
}).

map(record=>{


const wastedMs=Math.min((record.endTime-record.startTime)*1000,3000);

return{
url:record.url,
wastedMs};

});

const headings=[
{key:'url',itemType:'url',text:str_(i18n.UIStrings.columnURL)},
{key:'wastedMs',itemType:'ms',text:str_(i18n.UIStrings.columnWastedMs)}];

const details=Audit.makeTableDetails(headings,results);

return{
score:Number(results.length===0),
rawValue:results.length===0,
details};

});
}}


module.exports=FontDisplay;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/font-display.js");
},{"../lib/i18n/i18n.js":36,"../lib/network-request":88,"./audit":2}],"../audits/image-aspect-ratio":[function(require,module,exports){











'use strict';

const Audit=require('./audit');

const URL=require('../lib/url-shim');
const THRESHOLD_PX=2;



class ImageAspectRatio extends Audit{



static get meta(){
return{
id:'image-aspect-ratio',
title:'Displays images with correct aspect ratio',
failureTitle:'Displays images with incorrect aspect ratio',
description:'Image display dimensions should match natural aspect ratio. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/aspect-ratio).',
requiredArtifacts:['ImageUsage']};

}





static computeAspectRatios(image){
const url=URL.elideDataURI(image.src);
const actualAspectRatio=image.naturalWidth/image.naturalHeight;
const displayedAspectRatio=image.width/image.height;

const targetDisplayHeight=image.width/actualAspectRatio;
const doRatiosMatch=Math.abs(targetDisplayHeight-image.height)<THRESHOLD_PX;

if(!Number.isFinite(actualAspectRatio)||
!Number.isFinite(displayedAspectRatio)){
return new Error(`Invalid image sizing information ${url}`);
}

return{
url,
displayedAspectRatio:`${image.width} x ${image.height}
        (${displayedAspectRatio.toFixed(2)})`,
actualAspectRatio:`${image.naturalWidth} x ${image.naturalHeight}
        (${actualAspectRatio.toFixed(2)})`,
doRatiosMatch};

}





static audit(artifacts){
const images=artifacts.ImageUsage;


const warnings=[];

const results=[];
images.filter(image=>{



return image.networkRecord&&
image.networkRecord.mimeType!=='image/svg+xml'&&
image.width&&
image.height&&
!image.usesObjectFit;
}).forEach(image=>{
const wellDefinedImage=image;
const processed=ImageAspectRatio.computeAspectRatios(wellDefinedImage);
if(processed instanceof Error){
warnings.push(processed.message);
return;
}

if(!processed.doRatiosMatch)results.push(processed);
});

const headings=[
{key:'url',itemType:'thumbnail',text:''},
{key:'url',itemType:'url',text:'URL'},
{key:'displayedAspectRatio',itemType:'text',text:'Aspect Ratio (Displayed)'},
{key:'actualAspectRatio',itemType:'text',text:'Aspect Ratio (Actual)'}];


return{
rawValue:results.length===0,
warnings,
details:Audit.makeTableDetails(headings,results)};

}}


module.exports=ImageAspectRatio;

},{"../lib/url-shim":"url","./audit":2}],"../audits/is-on-https":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const URL=require('../lib/url-shim');
const Util=require('../report/html/renderer/util');

const SECURE_SCHEMES=['data','https','wss','blob','chrome','chrome-extension','about'];
const SECURE_DOMAINS=['localhost','127.0.0.1'];

class HTTPS extends Audit{



static get meta(){
return{
id:'is-on-https',
title:'Uses HTTPS',
failureTitle:'Does not use HTTPS',
description:'All sites should be protected with HTTPS, even ones that don\'t handle '+
'sensitive data. HTTPS prevents intruders from tampering with or passively listening '+
'in on the communications between your app and your users, and is a prerequisite for '+
'HTTP/2 and many new web platform APIs. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/https).',
requiredArtifacts:['devtoolsLogs']};

}





static isSecureRecord(record){
return SECURE_SCHEMES.includes(record.parsedURL.scheme)||
SECURE_SCHEMES.includes(record.protocol)||
SECURE_DOMAINS.includes(record.parsedURL.host);
}





static audit(artifacts){
const devtoolsLogs=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
return artifacts.requestNetworkRecords(devtoolsLogs).then(networkRecords=>{
const insecureURLs=networkRecords.
filter(record=>!HTTPS.isSecureRecord(record)).
map(record=>URL.elideDataURI(record.url));

let displayValue='';
if(insecureURLs.length>1){
displayValue=`${Util.formatNumber(insecureURLs.length)} insecure requests found`;
}else if(insecureURLs.length===1){
displayValue=`${insecureURLs.length} insecure request found`;
}

const items=Array.from(new Set(insecureURLs)).map(url=>({url}));

const headings=[
{key:'url',itemType:'url',text:'Insecure URL'}];


return{
rawValue:items.length===0,
displayValue,
extendedInfo:{
value:items},

details:Audit.makeTableDetails(headings,items)};

});
}}


module.exports=HTTPS;

},{"../lib/url-shim":"url","../report/html/renderer/util":97,"./audit":2}],"../audits/load-fast-enough-for-pwa":[function(require,module,exports){





'use strict';







const isDeepEqual=require('lodash.isequal');
const Audit=require('./audit');
const mobile3GThrottling=require('../config/constants').throttling.mobile3G;



const MAXIMUM_TTI=10*1000;

class LoadFastEnough4Pwa extends Audit{



static get meta(){
return{
id:'load-fast-enough-for-pwa',
title:'Page load is fast enough on 3G',
failureTitle:'Page load is not fast enough on 3G',
description:
'A fast page load over a 3G network ensures a good mobile user experience. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/fast-3g).',
requiredArtifacts:['traces','devtoolsLogs']};

}






static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];



const settingOverrides={throttlingMethod:'simulate',throttling:mobile3GThrottling};
const settings=
context.settings.throttlingMethod!=='provided'&&
isDeepEqual(context.settings.throttling,mobile3GThrottling)?
context.settings:
Object.assign({},context.settings,settingOverrides);

const metricComputationData={trace,devtoolsLog,settings};
const tti=await artifacts.requestInteractive(metricComputationData);

const score=Number(tti.timing<MAXIMUM_TTI);


let displayValue;

let explanation;
if(!score){
displayValue=[`Interactive at %d\xa0s`,tti.timing/1000];
explanation='Your page loads too slowly and is not interactive within 10 seconds. '+
'Look at the opportunities and diagnostics in the "Performance" section to learn how to '+
'improve.';
}

return{
score,
displayValue,
explanation,
rawValue:tti.timing};

}}


module.exports=LoadFastEnough4Pwa;

},{"../config/constants":8,"./audit":2,"lodash.isequal":178}],"../audits/mainthread-work-breakdown":[function(require,module,exports){
(function(__filename){










'use strict';

const Audit=require('./audit');
const{taskGroups}=require('../lib/task-groups');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'Minimizes main-thread work',

failureTitle:'Minimize main-thread work',

description:'Consider reducing the time spent parsing, compiling and executing JS. '+
'You may find delivering smaller JS payloads helps with this.',

columnCategory:'Category'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);



class MainThreadWorkBreakdown extends Audit{



static get meta(){
return{
id:'mainthread-work-breakdown',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces']};

}




static get defaultOptions(){
return{

scorePODR:1500,
scoreMedian:4000};

}





static getExecutionTimingsByGroup(tasks){

const result=new Map();

for(const task of tasks){
const originalTime=result.get(task.group.id)||0;
result.set(task.group.id,originalTime+task.selfTime);
}

return result;
}






static async audit(artifacts,context){
const settings=context.settings||{};
const trace=artifacts.traces[MainThreadWorkBreakdown.DEFAULT_PASS];

const tasks=await artifacts.requestMainThreadTasks(trace);
const multiplier=settings.throttlingMethod==='simulate'?
settings.throttling.cpuSlowdownMultiplier:1;

const executionTimings=MainThreadWorkBreakdown.getExecutionTimingsByGroup(tasks);

let totalExecutionTime=0;

const categoryTotals={};
const results=Array.from(executionTimings).map(([groupId,rawDuration])=>{
const duration=rawDuration*multiplier;
totalExecutionTime+=duration;

const categoryTotal=categoryTotals[groupId]||0;
categoryTotals[groupId]=categoryTotal+duration;

return{
group:groupId,
groupLabel:taskGroups[groupId].label,
duration:duration};

});

const headings=[
{key:'groupLabel',itemType:'text',text:str_(UIStrings.columnCategory)},
{key:'duration',itemType:'ms',granularity:1,text:str_(i18n.UIStrings.columnTimeSpent)}];


results.sort((a,b)=>categoryTotals[b.group]-categoryTotals[a.group]);
const tableDetails=MainThreadWorkBreakdown.makeTableDetails(headings,results);

const score=Audit.computeLogNormalScore(
totalExecutionTime,
context.options.scorePODR,
context.options.scoreMedian);


return{
score,
rawValue:totalExecutionTime,
displayValue:str_(i18n.UIStrings.seconds,{timeInMs:totalExecutionTime}),
details:tableDetails};

}}


module.exports=MainThreadWorkBreakdown;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/mainthread-work-breakdown.js");
},{"../lib/i18n/i18n.js":36,"../lib/task-groups":93,"./audit":2}],"../audits/manifest-short-name-length":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const ManifestValues=require('../gather/computed/manifest-values');

class ManifestShortNameLength extends Audit{



static get meta(){
return{
id:'manifest-short-name-length',
title:'The `short_name` won\'t be truncated on the homescreen',
failureTitle:'The `short_name` will be truncated on the homescreen',
description:'Make your app\'s `short_name` fewer than 12 characters to '+
'ensure that it\'s not truncated on homescreens. [Learn '+
'more](https://developers.google.com/web/tools/lighthouse/audits/manifest-short_name-is-not-truncated).',
requiredArtifacts:['Manifest']};

}






static async audit(artifacts,context){
const manifestValues=await ManifestValues.request(context,artifacts.Manifest);

if(manifestValues.isParseFailure){
return{
rawValue:true,
notApplicable:true};

}

const shortNameCheck=manifestValues.allChecks.find(i=>i.id==='hasShortName');
const shortNameLengthCheck=manifestValues.allChecks.find(i=>i.id==='shortNameLength');


if(shortNameCheck&&!shortNameCheck.passing){
return{
rawValue:true,
notApplicable:true};

}

if(shortNameLengthCheck&&!shortNameLengthCheck.passing){
return{
rawValue:false,
explanation:`Failure: ${shortNameLengthCheck.failureText}.`};

}

return{
rawValue:true};

}}


module.exports=ManifestShortNameLength;

},{"../gather/computed/manifest-values":12,"./audit":2}],"../audits/manual/pwa-cross-browser":[function(require,module,exports){






'use strict';

const ManualAudit=require('./manual-audit');





class PWACrossBrowser extends ManualAudit{



static get meta(){
return Object.assign({
id:'pwa-cross-browser',
description:'To reach the most number of users, sites should work across '+
'every major browser. [Learn more](https://developers.google.com/web/progressive-web-apps/checklist#site-works-cross-browser).',
title:'Site works cross-browser'},
super.partialMeta);
}}


module.exports=PWACrossBrowser;

},{"./manual-audit":4}],"../audits/manual/pwa-each-page-has-url":[function(require,module,exports){





'use strict';

const ManualAudit=require('./manual-audit');





class PWAEachPageHasURL extends ManualAudit{



static get meta(){
return Object.assign({
id:'pwa-each-page-has-url',
description:'Ensure individual pages are deep linkable via the URLs and that URLs are '+
'unique for the purpose of shareability on social media. [Learn more](https://developers.google.com/web/progressive-web-apps/checklist#each-page-has-a-url).',
title:'Each page has a URL'},
super.partialMeta);
}}


module.exports=PWAEachPageHasURL;

},{"./manual-audit":4}],"../audits/manual/pwa-page-transitions":[function(require,module,exports){





'use strict';

const ManualAudit=require('./manual-audit');





class PWAPageTransitions extends ManualAudit{



static get meta(){
return Object.assign({
id:'pwa-page-transitions',
description:'Transitions should feel snappy as you tap around, even on a slow network, a '+
'key to perceived performance. [Learn more](https://developers.google.com/web/progressive-web-apps/checklist#page-transitions-dont-feel-like-they-block-on-the-network).',
title:'Page transitions don\'t feel like they block on the network'},
super.partialMeta);
}}


module.exports=PWAPageTransitions;

},{"./manual-audit":4}],"../audits/metrics/estimated-input-latency":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Estimated Input Latency',

description:'The score above is an estimate of how long your app takes to respond to user '+
'input, in milliseconds, during the busiest 5s window of page load. If your '+
'latency is higher than 50 ms, users may perceive your app as laggy. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class EstimatedInputLatency extends Audit{



static get meta(){
return{
id:'estimated-input-latency',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces']};

}




static get defaultOptions(){
return{

scorePODR:50,
scoreMedian:100};

}









static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const metricResult=await artifacts.requestEstimatedInputLatency(metricComputationData);

return{
score:Audit.computeLogNormalScore(
metricResult.timing,
context.options.scorePODR,
context.options.scoreMedian),

rawValue:metricResult.timing,
displayValue:str_(i18n.UIStrings.ms,{timeInMs:metricResult.timing})};

}}


module.exports=EstimatedInputLatency;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/metrics/estimated-input-latency.js");
},{"../../lib/i18n/i18n.js":36,"../audit":2}],"../audits/metrics/first-contentful-paint":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'First Contentful Paint',

description:'First Contentful Paint marks the time at which the first text or image is '+
`painted. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint).`};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class FirstContentfulPaint extends Audit{



static get meta(){
return{
id:'first-contentful-paint',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces','devtoolsLogs']};

}




static get defaultOptions(){
return{



scorePODR:2000,
scoreMedian:4000};

}






static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const metricResult=await artifacts.requestFirstContentfulPaint(metricComputationData);

return{
score:Audit.computeLogNormalScore(
metricResult.timing,
context.options.scorePODR,
context.options.scoreMedian),

rawValue:metricResult.timing,
displayValue:str_(i18n.UIStrings.seconds,{timeInMs:metricResult.timing})};

}}


module.exports=FirstContentfulPaint;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/metrics/first-contentful-paint.js");
},{"../../lib/i18n/i18n.js":36,"../audit":2}],"../audits/metrics/first-cpu-idle":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'First CPU Idle',

description:'First CPU Idle marks the first time at which the page\'s main thread is '+
'quiet enough to handle input. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-interactive).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class FirstCPUIdle extends Audit{



static get meta(){
return{
id:'first-cpu-idle',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces']};

}




static get defaultOptions(){
return{



scorePODR:2900,
scoreMedian:6500};

}









static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const metricResult=await artifacts.requestFirstCPUIdle(metricComputationData);

return{
score:Audit.computeLogNormalScore(
metricResult.timing,
context.options.scorePODR,
context.options.scoreMedian),

rawValue:metricResult.timing,
displayValue:str_(i18n.UIStrings.seconds,{timeInMs:metricResult.timing})};

}}


module.exports=FirstCPUIdle;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/metrics/first-cpu-idle.js");
},{"../../lib/i18n/i18n.js":36,"../audit":2}],"../audits/metrics/first-meaningful-paint":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'First Meaningful Paint',

description:'First Meaningful Paint measures when the primary content of a page is '+
'visible. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class FirstMeaningfulPaint extends Audit{



static get meta(){
return{
id:'first-meaningful-paint',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces']};

}




static get defaultOptions(){
return{



scorePODR:2000,
scoreMedian:4000};

}









static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const metricResult=await artifacts.requestFirstMeaningfulPaint(metricComputationData);

return{
score:Audit.computeLogNormalScore(
metricResult.timing,
context.options.scorePODR,
context.options.scoreMedian),

rawValue:metricResult.timing,
displayValue:str_(i18n.UIStrings.seconds,{timeInMs:metricResult.timing})};

}}


module.exports=FirstMeaningfulPaint;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/metrics/first-meaningful-paint.js");
},{"../../lib/i18n/i18n.js":36,"../audit":2}],"../audits/metrics/interactive":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Time to Interactive',

description:'Interactive marks the time at which the page is fully interactive. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);







class InteractiveMetric extends Audit{



static get meta(){
return{
id:'interactive',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces','devtoolsLogs']};

}




static get defaultOptions(){
return{



scorePODR:2900,
scoreMedian:7300};

}






static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const metricResult=await artifacts.requestInteractive(metricComputationData);
const timeInMs=metricResult.timing;
const extendedInfo={
timeInMs,
timestamp:metricResult.timestamp,

optimistic:metricResult.optimisticEstimate&&metricResult.optimisticEstimate.timeInMs,

pessimistic:metricResult.pessimisticEstimate&&metricResult.pessimisticEstimate.timeInMs};


return{
score:Audit.computeLogNormalScore(
timeInMs,
context.options.scorePODR,
context.options.scoreMedian),

rawValue:timeInMs,
displayValue:str_(i18n.UIStrings.seconds,{timeInMs}),
extendedInfo:{
value:extendedInfo}};


}}


module.exports=InteractiveMetric;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/metrics/interactive.js");
},{"../../lib/i18n/i18n.js":36,"../audit":2}],"../audits/metrics/speed-index":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const i18n=require('../../lib/i18n/i18n.js');

const UIStrings={

title:'Speed Index',

description:'Speed Index shows how quickly the contents of a page are visibly populated. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/speed-index).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class SpeedIndex extends Audit{



static get meta(){
return{
id:'speed-index',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces','devtoolsLogs']};

}




static get defaultOptions(){
return{



scorePODR:2900,
scoreMedian:5800};

}








static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const metricResult=await artifacts.requestSpeedIndex(metricComputationData);

return{
score:Audit.computeLogNormalScore(
metricResult.timing,
context.options.scorePODR,
context.options.scoreMedian),

rawValue:metricResult.timing,
displayValue:str_(i18n.UIStrings.seconds,{timeInMs:metricResult.timing})};

}}


module.exports=SpeedIndex;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/metrics/speed-index.js");
},{"../../lib/i18n/i18n.js":36,"../audit":2}],"../audits/metrics":[function(require,module,exports){





'use strict';

const Audit=require('./audit');

class Metrics extends Audit{



static get meta(){
return{
id:'metrics',
scoreDisplayMode:Audit.SCORING_MODES.INFORMATIVE,
title:'Metrics',
description:'Collects all available metrics.',
requiredArtifacts:['traces','devtoolsLogs']};

}






static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};

const traceOfTab=await artifacts.requestTraceOfTab(trace);
const speedline=await artifacts.requestSpeedline(trace);
const firstContentfulPaint=await artifacts.requestFirstContentfulPaint(metricComputationData);
const firstMeaningfulPaint=await artifacts.requestFirstMeaningfulPaint(metricComputationData);
const firstCPUIdle=await artifacts.requestFirstCPUIdle(metricComputationData);
const interactive=await artifacts.requestInteractive(metricComputationData);
const speedIndex=await artifacts.requestSpeedIndex(metricComputationData);
const estimatedInputLatency=await artifacts.requestEstimatedInputLatency(metricComputationData);


const metrics={

firstContentfulPaint:firstContentfulPaint.timing,
firstContentfulPaintTs:firstContentfulPaint.timestamp,
firstMeaningfulPaint:firstMeaningfulPaint.timing,
firstMeaningfulPaintTs:firstMeaningfulPaint.timestamp,
firstCPUIdle:firstCPUIdle.timing,
firstCPUIdleTs:firstCPUIdle.timestamp,
interactive:interactive.timing,
interactiveTs:interactive.timestamp,
speedIndex:speedIndex.timing,
speedIndexTs:speedIndex.timestamp,
estimatedInputLatency:estimatedInputLatency.timing,
estimatedInputLatencyTs:estimatedInputLatency.timestamp,


observedNavigationStart:traceOfTab.timings.navigationStart,
observedNavigationStartTs:traceOfTab.timestamps.navigationStart,
observedFirstPaint:traceOfTab.timings.firstPaint,
observedFirstPaintTs:traceOfTab.timestamps.firstPaint,
observedFirstContentfulPaint:traceOfTab.timings.firstContentfulPaint,
observedFirstContentfulPaintTs:traceOfTab.timestamps.firstContentfulPaint,
observedFirstMeaningfulPaint:traceOfTab.timings.firstMeaningfulPaint,
observedFirstMeaningfulPaintTs:traceOfTab.timestamps.firstMeaningfulPaint,
observedTraceEnd:traceOfTab.timings.traceEnd,
observedTraceEndTs:traceOfTab.timestamps.traceEnd,
observedLoad:traceOfTab.timings.load,
observedLoadTs:traceOfTab.timestamps.load,
observedDomContentLoaded:traceOfTab.timings.domContentLoaded,
observedDomContentLoadedTs:traceOfTab.timestamps.domContentLoaded,


observedFirstVisualChange:speedline.first,
observedFirstVisualChangeTs:(speedline.first+speedline.beginning)*1000,
observedLastVisualChange:speedline.complete,
observedLastVisualChangeTs:(speedline.complete+speedline.beginning)*1000,
observedSpeedIndex:speedline.speedIndex,
observedSpeedIndexTs:(speedline.speedIndex+speedline.beginning)*1000};


for(const[name,value]of Object.entries(metrics)){
const key=name;
if(typeof value!=='undefined'){
metrics[key]=Math.round(value);
}
}


const details={items:[metrics]};

return{
score:1,
rawValue:interactive.timing,
details};

}}








































module.exports=Metrics;

},{"./audit":2}],"../audits/mixed-content":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const URL=require('../lib/url-shim');
const Util=require('../report/html/renderer/util');







class MixedContent extends Audit{



static get meta(){
return{
id:'mixed-content',
title:'All resources loaded are secure',
failureTitle:'Some insecure resources can be upgraded to HTTPS',
description:`Mixed content warnings can prevent you from upgrading to HTTPS.
      This audit shows which insecure resources this page uses that can be
      upgraded to HTTPS. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/mixed-content)`,
requiredArtifacts:['devtoolsLogs','MixedContent']};

}







static upgradeURL(url){
const parsedURL=new URL(url);
parsedURL.protocol='https:';
return parsedURL.href;
}







static simplifyURL(url){
const parsedURL=new URL(url);
parsedURL.hash='';
parsedURL.search='';
return parsedURL.href;
}







static displayURL(url=''){
const displayOptions={
numPathParts:4,
preserveQuery:false,
preserveHost:true};

return URL.getURLDisplayName(url,displayOptions);
}





static audit(artifacts){
const defaultLogs=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const upgradeLogs=artifacts.devtoolsLogs['mixedContentPass'];
const baseHostname=new URL(artifacts.MixedContent.url).host;

const computedArtifacts=[
artifacts.requestNetworkRecords(defaultLogs),
artifacts.requestNetworkRecords(upgradeLogs)];


return Promise.all(computedArtifacts).then(([defaultRecords,upgradedRecords])=>{
const insecureRecords=defaultRecords.filter(
record=>!record.isSecure);
const secureRecords=defaultRecords.filter(
record=>record.isSecure);

const upgradePassHosts=new Set();
const upgradePassSecureHosts=new Set();
upgradedRecords.forEach(record=>{
upgradePassHosts.add(new URL(record.url).hostname);
if(record.isSecure&&record.finished&&!record.failed){
upgradePassSecureHosts.add(new URL(record.url).hostname);
}
});




const seen=new Set();
const upgradeableResources=[];

for(const record of insecureRecords){
const simpleUrl=this.simplifyURL(record.url);
if(seen.has(simpleUrl))continue;
seen.add(simpleUrl);

const resource={
host:new URL(record.url).hostname,
fullUrl:record.url,
referrerDocUrl:this.displayURL(record.documentURL)};


if(!upgradePassSecureHosts.has(resource.host))continue;

if(!resource.referrerDocUrl.includes(baseHostname))continue;

upgradeableResources.push(resource);
}

const displayValue=`${Util.formatNumber(upgradeableResources.length)}
          ${upgradeableResources.length===1?'request':'requests'}`;

const headings=[
{key:'fullUrl',itemType:'url',text:'URL'}];

const details=Audit.makeTableDetails(headings,upgradeableResources);

const totalRecords=defaultRecords.length;
const score=(secureRecords.length+0.5*upgradeableResources.length)/totalRecords;

return{
rawValue:upgradeableResources.length===0,
score,
displayValue:displayValue,
details};

});
}}


module.exports=MixedContent;

},{"../lib/url-shim":"url","../report/html/renderer/util":97,"./audit":2}],"../audits/network-requests":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const URL=require('../lib/url-shim');

class NetworkRequests extends Audit{



static get meta(){
return{
id:'network-requests',
scoreDisplayMode:Audit.SCORING_MODES.INFORMATIVE,
title:'Network Requests',
description:'Lists the network requests that were made during page load.',
requiredArtifacts:['devtoolsLogs']};

}





static audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
return artifacts.requestNetworkRecords(devtoolsLog).then(records=>{
const earliestStartTime=records.reduce(
(min,record)=>Math.min(min,record.startTime),
Infinity);



const timeToMs=time=>time<earliestStartTime||!Number.isFinite(time)?
undefined:(time-earliestStartTime)*1000;

const results=records.map(record=>{
return{
url:URL.elideDataURI(record.url),
startTime:timeToMs(record.startTime),
endTime:timeToMs(record.endTime),
transferSize:record.transferSize,
statusCode:record.statusCode,
mimeType:record.mimeType,
resourceType:record.resourceType};

});

const headings=[
{key:'url',itemType:'url',text:'URL'},
{key:'startTime',itemType:'ms',granularity:1,text:'Start Time'},
{key:'endTime',itemType:'ms',granularity:1,text:'End Time'},
{
key:'transferSize',
itemType:'bytes',
displayUnit:'kb',
granularity:1,
text:'Transfer Size'},

{key:'statusCode',itemType:'text',text:'Status Code'},
{key:'mimeType',itemType:'text',text:'MIME Type'},
{key:'resourceType',itemType:'text',text:'Resource Type'}];


const tableDetails=Audit.makeTableDetails(headings,results);

return{
score:1,
rawValue:results.length,
details:tableDetails};

});
}}


module.exports=NetworkRequests;

},{"../lib/url-shim":"url","./audit":2}],"../audits/predictive-perf":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const Util=require('../report/html/renderer/util');



const SCORING_POINT_OF_DIMINISHING_RETURNS=1700;
const SCORING_MEDIAN=10000;

class PredictivePerf extends Audit{



static get meta(){
return{
id:'predictive-perf',
title:'Predicted Performance (beta)',
description:
'Predicted performance evaluates how your site will perform under '+
'a 3G connection on a mobile device.',
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['traces','devtoolsLogs']};

}





static async audit(artifacts){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];


const settings={};
const fcp=await artifacts.requestLanternFirstContentfulPaint({trace,devtoolsLog,settings});
const fmp=await artifacts.requestLanternFirstMeaningfulPaint({trace,devtoolsLog,settings});
const tti=await artifacts.requestLanternInteractive({trace,devtoolsLog,settings});
const ttfcpui=await artifacts.requestLanternFirstCPUIdle({trace,devtoolsLog,settings});
const si=await artifacts.requestLanternSpeedIndex({trace,devtoolsLog,settings});
const eil=await artifacts.requestLanternEstimatedInputLatency({trace,devtoolsLog,settings});

const values={
roughEstimateOfFCP:fcp.timing,
optimisticFCP:fcp.optimisticEstimate.timeInMs,
pessimisticFCP:fcp.pessimisticEstimate.timeInMs,

roughEstimateOfFMP:fmp.timing,
optimisticFMP:fmp.optimisticEstimate.timeInMs,
pessimisticFMP:fmp.pessimisticEstimate.timeInMs,

roughEstimateOfTTI:tti.timing,
optimisticTTI:tti.optimisticEstimate.timeInMs,
pessimisticTTI:tti.pessimisticEstimate.timeInMs,

roughEstimateOfTTFCPUI:ttfcpui.timing,
optimisticTTFCPUI:ttfcpui.optimisticEstimate.timeInMs,
pessimisticTTFCPUI:ttfcpui.pessimisticEstimate.timeInMs,

roughEstimateOfSI:si.timing,
optimisticSI:si.optimisticEstimate.timeInMs,
pessimisticSI:si.pessimisticEstimate.timeInMs,

roughEstimateOfEIL:eil.timing,
optimisticEIL:eil.optimisticEstimate.timeInMs,
pessimisticEIL:eil.pessimisticEstimate.timeInMs};


const score=Audit.computeLogNormalScore(
values.roughEstimateOfTTI,
SCORING_POINT_OF_DIMINISHING_RETURNS,
SCORING_MEDIAN);


return{
score,
rawValue:values.roughEstimateOfTTI,
displayValue:Util.formatMilliseconds(values.roughEstimateOfTTI),
details:{items:[values]}};

}}


module.exports=PredictivePerf;

},{"../report/html/renderer/util":97,"./audit":2}],"../audits/redirects-http":[function(require,module,exports){





'use strict';

const Audit=require('./audit');

class RedirectsHTTP extends Audit{



static get meta(){
return{
id:'redirects-http',
title:'Redirects HTTP traffic to HTTPS',
failureTitle:'Does not redirect HTTP traffic to HTTPS',
description:'If you\'ve already set up HTTPS, make sure that you redirect all HTTP '+
'traffic to HTTPS. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/http-redirects-to-https).',
requiredArtifacts:['HTTPRedirect']};

}





static audit(artifacts){
return{
rawValue:artifacts.HTTPRedirect.value};

}}


module.exports=RedirectsHTTP;

},{"./audit":2}],"../audits/redirects":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('./audit');
const UnusedBytes=require('./byte-efficiency/byte-efficiency-audit');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'Avoid multiple page redirects',

description:'Redirects introduce additional delays before the page can be loaded. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/redirects).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class Redirects extends Audit{



static get meta(){
return{
id:'redirects',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC,
requiredArtifacts:['URL','devtoolsLogs','traces']};

}






static async audit(artifacts,context){
const settings=context.settings;
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];

const traceOfTab=await artifacts.requestTraceOfTab(trace);
const networkRecords=await artifacts.requestNetworkRecords(devtoolsLog);
const mainResource=await artifacts.requestMainResource({URL:artifacts.URL,devtoolsLog});

const metricComputationData={trace,devtoolsLog,traceOfTab,networkRecords,settings};
const metricResult=await artifacts.requestLanternInteractive(metricComputationData);


const nodeTimingsByUrl=new Map();
for(const[node,timing]of metricResult.pessimisticEstimate.nodeTimings.entries()){
if(node.type==='network'){
const networkNode=node;
nodeTimingsByUrl.set(networkNode.record.url,timing);
}
}


const redirectRequests=Array.from(mainResource.redirects||[]);


redirectRequests.push(mainResource);

let totalWastedMs=0;
const pageRedirects=[];


if(redirectRequests.length>1){
pageRedirects.push({
url:`(Initial: ${redirectRequests[0].url})`,
wastedMs:0});

}

for(let i=1;i<redirectRequests.length;i++){
const initialRequest=redirectRequests[i-1];
const redirectedRequest=redirectRequests[i];

const initialTiming=nodeTimingsByUrl.get(initialRequest.url);
const redirectedTiming=nodeTimingsByUrl.get(redirectedRequest.url);
if(!initialTiming||!redirectedTiming){
throw new Error('Could not find redirects in graph');
}

const wastedMs=redirectedTiming.startTime-initialTiming.startTime;
totalWastedMs+=wastedMs;

pageRedirects.push({
url:redirectedRequest.url,
wastedMs});

}


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'wastedMs',valueType:'timespanMs',label:str_(i18n.UIStrings.columnTimeSpent)}];

const details=Audit.makeOpportunityDetails(headings,pageRedirects,totalWastedMs);

return{

score:redirectRequests.length<=2?1:UnusedBytes.scoreForWastedMs(totalWastedMs),
rawValue:totalWastedMs,
displayValue:totalWastedMs?
str_(i18n.UIStrings.displayValueMsSavings,{wastedMs:totalWastedMs}):
'',
extendedInfo:{
value:{
wastedMs:totalWastedMs}},


details};

}}


module.exports=Redirects;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/redirects.js");
},{"../lib/i18n/i18n.js":36,"./audit":2,"./byte-efficiency/byte-efficiency-audit":3}],"../audits/screenshot-thumbnails":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const LHError=require('../lib/lh-error');
const jpeg=require('jpeg-js');

const NUMBER_OF_THUMBNAILS=10;
const THUMBNAIL_WIDTH=120;



class ScreenshotThumbnails extends Audit{



static get meta(){
return{
id:'screenshot-thumbnails',
scoreDisplayMode:Audit.SCORING_MODES.INFORMATIVE,
title:'Screenshot Thumbnails',
description:'This is what the load of your site looked like.',
requiredArtifacts:['traces','devtoolsLogs']};

}








static scaleImageToThumbnail(imageData){
const scaledWidth=THUMBNAIL_WIDTH;
const scaleFactor=imageData.width/scaledWidth;
const scaledHeight=Math.floor(imageData.height/scaleFactor);

const outPixels=new Uint8Array(scaledWidth*scaledHeight*4);

for(let i=0;i<scaledWidth;i++){
for(let j=0;j<scaledHeight;j++){
const origX=Math.floor(i*scaleFactor);
const origY=Math.floor(j*scaleFactor);

const origPos=(origY*imageData.width+origX)*4;
const outPos=(j*scaledWidth+i)*4;

outPixels[outPos]=imageData.data[origPos];
outPixels[outPos+1]=imageData.data[origPos+1];
outPixels[outPos+2]=imageData.data[origPos+2];
outPixels[outPos+3]=imageData.data[origPos+3];
}
}

return{
width:scaledWidth,
height:scaledHeight,
data:outPixels};

}






static async audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];

const cachedThumbnails=new Map();

const speedline=await artifacts.requestSpeedline(trace);


let minimumTimelineDuration=context.options.minimumTimelineDuration||3000;

if(context.settings.throttlingMethod!=='simulate'){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const metricComputationData={trace,devtoolsLog,settings:context.settings};
const tti=artifacts.requestInteractive(metricComputationData);
try{
minimumTimelineDuration=Math.max((await tti).timing,minimumTimelineDuration);
}catch(_){}
}

const thumbnails=[];
const analyzedFrames=speedline.frames.filter(frame=>!frame.isProgressInterpolated());
const maxFrameTime=
speedline.complete||
Math.max(...speedline.frames.map(frame=>frame.getTimeStamp()-speedline.beginning));
const timelineEnd=Math.max(maxFrameTime,minimumTimelineDuration);

if(!analyzedFrames.length||!Number.isFinite(timelineEnd)){
throw new LHError(LHError.errors.INVALID_SPEEDLINE);
}

for(let i=1;i<=NUMBER_OF_THUMBNAILS;i++){
const targetTimestamp=speedline.beginning+timelineEnd*i/NUMBER_OF_THUMBNAILS;



let frameForTimestamp=null;
if(i===NUMBER_OF_THUMBNAILS){
frameForTimestamp=analyzedFrames[analyzedFrames.length-1];
}else{
analyzedFrames.forEach(frame=>{
if(frame.getTimeStamp()<=targetTimestamp){
frameForTimestamp=frame;
}
});
}
let base64Data;
if(cachedThumbnails.has(frameForTimestamp)){
base64Data=cachedThumbnails.get(frameForTimestamp);
}else{
const imageData=frameForTimestamp.getParsedImage();
const thumbnailImageData=ScreenshotThumbnails.scaleImageToThumbnail(imageData);
base64Data=jpeg.encode(thumbnailImageData,90).data.toString('base64');
cachedThumbnails.set(frameForTimestamp,base64Data);
}
thumbnails.push({
timing:Math.round(targetTimestamp-speedline.beginning),
timestamp:targetTimestamp*1000,
data:base64Data});

}

return{
score:1,
rawValue:thumbnails.length>0,
details:{
type:'filmstrip',
scale:timelineEnd,
items:thumbnails}};


}}


module.exports=ScreenshotThumbnails;

},{"../lib/lh-error":85,"./audit":2,"jpeg-js":175}],"../audits/seo/canonical":[function(require,module,exports){





'use strict';

const Audit=require('../audit');
const LinkHeader=require('http-link-header');
const URL=require('../../lib/url-shim');
const LINK_HEADER='link';





function getCanonicalLinksFromHeader(headerValue){
const linkHeader=LinkHeader.parse(headerValue);

return linkHeader.get('rel','canonical').map(c=>c.uri);
}





function getHreflangsFromHeader(headerValue){
const linkHeader=LinkHeader.parse(headerValue);

return linkHeader.get('rel','alternate').map(h=>h.uri);
}






function isValidRelativeOrAbsoluteURL(url){
try{
new URL(url,'https://example.com/');
return true;
}catch(e){
return false;
}
}







function getPrimaryDomain(url){
return url.hostname.split('.').slice(-2).join('.');
}

class Canonical extends Audit{



static get meta(){
return{
id:'canonical',
title:'Document has a valid `rel=canonical`',
failureTitle:'Document does not have a valid `rel=canonical`',
description:'Canonical links suggest which URL to show in search results. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/canonical).',
requiredArtifacts:['Canonical','Hreflang','URL']};

}





static audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];

return artifacts.requestMainResource({devtoolsLog,URL:artifacts.URL}).
then(mainResource=>{
const baseURL=new URL(mainResource.url);

let canonicals=[];

let hreflangs=[];

mainResource.responseHeaders&&mainResource.responseHeaders.
filter(h=>h.name.toLowerCase()===LINK_HEADER).
forEach(h=>{
canonicals=canonicals.concat(getCanonicalLinksFromHeader(h.value));
hreflangs=hreflangs.concat(getHreflangsFromHeader(h.value));
});

for(const canonical of artifacts.Canonical){
if(canonical!==null){
canonicals.push(canonical);
}
}


canonicals=Array.from(new Set(canonicals));

artifacts.Hreflang.forEach(({href})=>hreflangs.push(href));

hreflangs=hreflangs.
filter(href=>isValidRelativeOrAbsoluteURL(href)).
map(href=>new URL(href,baseURL).href);

if(canonicals.length===0){
return{
rawValue:true,
notApplicable:true};

}

if(canonicals.length>1){
return{
rawValue:false,
explanation:`Multiple conflicting URLs (${canonicals.join(', ')})`};

}

const canonical=canonicals[0];

if(!isValidRelativeOrAbsoluteURL(canonical)){
return{
rawValue:false,
explanation:`Invalid URL (${canonical})`};

}

if(!URL.isValid(canonical)){
return{
rawValue:false,
explanation:`Relative URL (${canonical})`};

}

const canonicalURL=new URL(canonical);


if(hreflangs.includes(baseURL.href)&&hreflangs.includes(canonicalURL.href)&&
baseURL.href!==canonicalURL.href){
return{
rawValue:false,
explanation:`Points to another hreflang location (${baseURL.href})`};

}



if(getPrimaryDomain(canonicalURL)!==getPrimaryDomain(baseURL)){
return{
rawValue:false,
explanation:`Points to a different domain (${canonicalURL})`};

}


if(canonicalURL.origin===baseURL.origin&&
canonicalURL.pathname==='/'&&baseURL.pathname!=='/'){
return{
rawValue:false,
explanation:'Points to a root of the same origin'};

}

return{
rawValue:true};

});
}}


module.exports=Canonical;

},{"../../lib/url-shim":"url","../audit":2,"http-link-header":163}],"../audits/seo/font-size":[function(require,module,exports){





'use strict';



const URL=require('../../lib/url-shim');
const Audit=require('../audit');
const ViewportAudit=require('../viewport');
const MINIMAL_PERCENTAGE_OF_LEGIBLE_TEXT=60;





function getUniqueFailingRules(fontSizeArtifact){

const failingRules=new Map();

fontSizeArtifact.forEach(({cssRule,fontSize,textLength,node})=>{
const artifactId=getFontArtifactId(cssRule,node);
const failingRule=failingRules.get(artifactId);

if(!failingRule){
failingRules.set(artifactId,{
node,
cssRule,
fontSize,
textLength});

}else{
failingRule.textLength+=textLength;
}
});

return[...failingRules.values()];
}





function getAttributeMap(attributes=[]){
const map=new Map();

for(let i=0;i<attributes.length;i+=2){
const name=attributes[i].toLowerCase();
const value=attributes[i+1].trim();

if(value){
map.set(name,value);
}
}

return map;
}






function getSelector(node){
const attributeMap=getAttributeMap(node.attributes);

if(attributeMap.has('id')){
return'#'+attributeMap.get('id');
}else{
const attrClass=attributeMap.get('class');
if(attrClass){
return'.'+attrClass.split(/\s+/).join('.');
}
}

return node.localName.toLowerCase();
}





function nodeToTableNode(node){
const attributes=node.attributes||[];
const attributesString=attributes.map((value,idx)=>
idx%2===0?` ${value}`:`="${value}"`).
join('');

return{
type:'node',
selector:node.parentNode?getSelector(node.parentNode):'',
snippet:`<${node.localName}${attributesString}>`};

}







function findStyleRuleSource(baseURL,styleDeclaration,node){
if(
!styleDeclaration||
styleDeclaration.type==='Attributes'||
styleDeclaration.type==='Inline')
{
return{
selector:nodeToTableNode(node),
source:baseURL};

}

if(styleDeclaration.parentRule&&
styleDeclaration.parentRule.origin==='user-agent'){
return{
selector:styleDeclaration.parentRule.selectors.map(item=>item.text).join(', '),
source:'User Agent Stylesheet'};

}

if(styleDeclaration.type==='Regular'&&styleDeclaration.parentRule){
const rule=styleDeclaration.parentRule;
const stylesheet=styleDeclaration.stylesheet;

if(stylesheet){
let source;
const selector=rule.selectors.map(item=>item.text).join(', ');

if(stylesheet.sourceURL){
const url=new URL(stylesheet.sourceURL,baseURL);
const range=styleDeclaration.range;
source=`${url.href}`;

if(range){


const absoluteStartLine=range.startLine+stylesheet.startLine+1;
const absoluteStartColumn=range.startColumn+stylesheet.startColumn+1;

source+=`:${absoluteStartLine}:${absoluteStartColumn}`;
}
}else{

source='dynamic';
}

return{
selector,
source};

}
}

return{
selector:'',
source:'Unknown'};

}






function getFontArtifactId(styleDeclaration,node){
if(styleDeclaration&&styleDeclaration.type==='Regular'){
const startLine=styleDeclaration.range?styleDeclaration.range.startLine:0;
const startColumn=styleDeclaration.range?styleDeclaration.range.startColumn:0;
return`${styleDeclaration.styleSheetId}@${startLine}:${startColumn}`;
}else{
return`node_${node.nodeId}`;
}
}

class FontSize extends Audit{



static get meta(){
return{
id:'font-size',
title:'Document uses legible font sizes',
failureTitle:'Document doesn\'t use legible font sizes',
description:'Font sizes less than 12px are too small to be legible and require mobile '+
'visitors to “pinch to zoom” in order to read. Strive to have >60% of page text ≥12px. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/font-sizes).',
requiredArtifacts:['FontSize','URL','Viewport']};

}





static audit(artifacts){
const hasViewportSet=ViewportAudit.audit(artifacts).rawValue;
if(!hasViewportSet){
return{
rawValue:false,
explanation:'Text is illegible because of a missing viewport config'};

}

const{
analyzedFailingNodesData,
analyzedFailingTextLength,
failingTextLength,
visitedTextLength,
totalTextLength}=
artifacts.FontSize;

if(totalTextLength===0){
return{
rawValue:true};

}

const failingRules=getUniqueFailingRules(analyzedFailingNodesData);
const percentageOfPassingText=
(visitedTextLength-failingTextLength)/visitedTextLength*100;
const pageUrl=artifacts.URL.finalUrl;

const headings=[
{key:'source',itemType:'url',text:'Source'},
{key:'selector',itemType:'code',text:'Selector'},
{key:'coverage',itemType:'text',text:'% of Page Text'},
{key:'fontSize',itemType:'text',text:'Font Size'}];


const tableData=failingRules.sort((a,b)=>b.textLength-a.textLength).
map(({cssRule,textLength,fontSize,node})=>{
const percentageOfAffectedText=textLength/visitedTextLength*100;
const origin=findStyleRuleSource(pageUrl,cssRule,node);

return{
source:origin.source,
selector:origin.selector,
coverage:`${percentageOfAffectedText.toFixed(2)}%`,
fontSize:`${fontSize}px`};

});


if(analyzedFailingTextLength<failingTextLength){
const percentageOfUnanalyzedFailingText=
(failingTextLength-analyzedFailingTextLength)/visitedTextLength*100;

tableData.push({
source:'Add\'l illegible text',
selector:'',
coverage:`${percentageOfUnanalyzedFailingText.toFixed(2)}%`,
fontSize:'< 12px'});

}

if(percentageOfPassingText>0){
tableData.push({
source:'Legible text',
selector:'',
coverage:`${percentageOfPassingText.toFixed(2)}%`,
fontSize:'≥ 12px'});

}


const displayValue=['%.1d% legible text',percentageOfPassingText];
const details=Audit.makeTableDetails(headings,tableData);
const passed=percentageOfPassingText>=MINIMAL_PERCENTAGE_OF_LEGIBLE_TEXT;

let explanation;
if(!passed){
const percentageOfFailingText=parseFloat((100-percentageOfPassingText).toFixed(2));
let disclaimer='';


if(visitedTextLength<totalTextLength){
const percentageOfVisitedText=visitedTextLength/totalTextLength*100;
disclaimer=` (based on ${percentageOfVisitedText.toFixed()}% sample)`;
}

explanation=`${percentageOfFailingText}% of text is too small${disclaimer}.`;
}

return{
rawValue:passed,
details,
displayValue,
explanation};

}}


module.exports=FontSize;

},{"../../lib/url-shim":"url","../audit":2,"../viewport":"../audits/viewport"}],"../audits/seo/hreflang":[function(require,module,exports){
(function(global){





'use strict';

const Audit=require('../audit');
const LinkHeader=require('http-link-header');
const VALID_LANGS=importValidLangs();
const LINK_HEADER='link';
const NO_LANGUAGE='x-default';







function importValidLangs(){

const axeCache=global.axe;

global.axe={utils:{}};

require('axe-core/lib/commons/utils/valid-langs.js');

const validLangs=global.axe.utils.validLangs();

global.axe=axeCache;

return validLangs;
}





function isValidHreflang(hreflang){
if(hreflang.toLowerCase()===NO_LANGUAGE){
return true;
}


const[lang]=hreflang.split('-');
return VALID_LANGS.includes(lang.toLowerCase());
}





function headerHasValidHreflangs(headerValue){
const linkHeader=LinkHeader.parse(headerValue);

return linkHeader.get('rel','alternate').
every(link=>!!link.hreflang&&isValidHreflang(link.hreflang));
}

class Hreflang extends Audit{



static get meta(){
return{
id:'hreflang',
title:'Document has a valid `hreflang`',
failureTitle:'Document doesn\'t have a valid `hreflang`',
description:'hreflang links tell search engines what version of a page they should '+
'list in search results for a given language or region. [Learn more]'+
'(https://developers.google.com/web/tools/lighthouse/audits/hreflang).',
requiredArtifacts:['Hreflang','URL']};

}





static audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const URL=artifacts.URL;

return artifacts.requestMainResource({devtoolsLog,URL}).
then(mainResource=>{

const invalidHreflangs=[];

if(artifacts.Hreflang){
artifacts.Hreflang.forEach(({href,hreflang})=>{
if(!isValidHreflang(hreflang)){
invalidHreflangs.push({
source:{
type:'node',
snippet:`<link name="alternate" hreflang="${hreflang}" href="${href}" />`}});


}
});
}

mainResource.responseHeaders&&mainResource.responseHeaders.
filter(h=>h.name.toLowerCase()===LINK_HEADER&&!headerHasValidHreflangs(h.value)).
forEach(h=>invalidHreflangs.push({source:`${h.name}: ${h.value}`}));

const headings=[
{key:'source',itemType:'code',text:'Source'}];

const details=Audit.makeTableDetails(headings,invalidHreflangs);

return{
rawValue:invalidHreflangs.length===0,
details};

});
}}


module.exports=Hreflang;

}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"../audit":2,"axe-core/lib/commons/utils/valid-langs.js":152,"http-link-header":163}],"../audits/seo/http-status-code":[function(require,module,exports){





'use strict';

const Audit=require('../audit');
const HTTP_UNSUCCESSFUL_CODE_LOW=400;
const HTTP_UNSUCCESSFUL_CODE_HIGH=599;

class HTTPStatusCode extends Audit{



static get meta(){
return{
id:'http-status-code',
title:'Page has successful HTTP status code',
failureTitle:'Page has unsuccessful HTTP status code',
description:'Pages with unsuccessful HTTP status codes may not be indexed properly. '+
'[Learn more]'+
'(https://developers.google.com/web/tools/lighthouse/audits/successful-http-code).',
requiredArtifacts:['devtoolsLogs','URL']};

}





static audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const URL=artifacts.URL;

return artifacts.requestMainResource({devtoolsLog,URL}).
then(mainResource=>{
const statusCode=mainResource.statusCode;

if(statusCode>=HTTP_UNSUCCESSFUL_CODE_LOW&&
statusCode<=HTTP_UNSUCCESSFUL_CODE_HIGH){
return{
rawValue:false,
displayValue:`${statusCode}`};

}

return{
rawValue:true};

});
}}


module.exports=HTTPStatusCode;

},{"../audit":2}],"../audits/seo/is-crawlable":[function(require,module,exports){





'use strict';

const Audit=require('../audit');
const robotsParser=require('robots-parser');
const URL=require('../../lib/url-shim');
const BLOCKLIST=new Set([
'noindex',
'none']);

const ROBOTS_HEADER='x-robots-tag';
const UNAVAILABLE_AFTER='unavailable_after';






function isUnavailable(directive){
const parts=directive.split(':');

if(parts.length<=1||parts[0]!==UNAVAILABLE_AFTER){
return false;
}

const date=Date.parse(parts.slice(1).join(':'));

return!isNaN(date)&&date<Date.now();
}






function hasBlockingDirective(directives){
return directives.split(',').
map(d=>d.toLowerCase().trim()).
some(d=>BLOCKLIST.has(d)||isUnavailable(d));
}






function hasUserAgent(directives){
const parts=directives.match(/^([^,:]+):/);



return!!parts&&parts[1].toLowerCase()!==UNAVAILABLE_AFTER;
}

class IsCrawlable extends Audit{



static get meta(){
return{
id:'is-crawlable',
title:'Page isn’t blocked from indexing',
failureTitle:'Page is blocked from indexing',
description:'Search engines are unable to include your pages in search results '+
'if they don\'t have permission to crawl them. [Learn '+
'more](https://developers.google.com/web/tools/lighthouse/audits/indexing).',
requiredArtifacts:['MetaRobots','RobotsTxt','URL']};

}





static audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];

return artifacts.requestMainResource({devtoolsLog,URL:artifacts.URL}).
then(mainResource=>{

const blockingDirectives=[];

if(artifacts.MetaRobots){
const isBlocking=hasBlockingDirective(artifacts.MetaRobots);

if(isBlocking){
blockingDirectives.push({
source:{
type:'node',
snippet:`<meta name="robots" content="${artifacts.MetaRobots}" />`}});


}
}

mainResource.responseHeaders&&mainResource.responseHeaders.
filter(h=>h.name.toLowerCase()===ROBOTS_HEADER&&!hasUserAgent(h.value)&&
hasBlockingDirective(h.value)).
forEach(h=>blockingDirectives.push({source:`${h.name}: ${h.value}`}));

if(artifacts.RobotsTxt.content){
const robotsFileUrl=new URL('/robots.txt',mainResource.url);
const robotsTxt=robotsParser(robotsFileUrl.href,artifacts.RobotsTxt.content);

if(!robotsTxt.isAllowed(mainResource.url)){
blockingDirectives.push({
source:{
type:'url',
value:robotsFileUrl.href}});


}
}

const headings=[
{key:'source',itemType:'code',text:'Blocking Directive Source'}];

const details=Audit.makeTableDetails(headings,blockingDirectives);

return{
rawValue:blockingDirectives.length===0,
details};

});
}}


module.exports=IsCrawlable;

},{"../../lib/url-shim":"url","../audit":2,"robots-parser":183}],"../audits/seo/link-text":[function(require,module,exports){





'use strict';

const Audit=require('../audit');
const URL=require('../../lib/url-shim');
const BLOCKLIST=new Set([
'click here',
'click this',
'go',
'here',
'this',
'start',
'right here',
'more',
'learn more']);


class LinkText extends Audit{



static get meta(){
return{
id:'link-text',
title:'Links have descriptive text',
failureTitle:'Links do not have descriptive text',
description:'Descriptive link text helps search engines understand your content. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/descriptive-link-text).',
requiredArtifacts:['URL','CrawlableLinks']};

}





static audit(artifacts){
const failingLinks=artifacts.CrawlableLinks.
filter(link=>{
if(
link.href.toLowerCase().startsWith('javascript:')||
URL.equalWithExcludedFragments(link.href,artifacts.URL.finalUrl))
{
return false;
}

return BLOCKLIST.has(link.text.trim().toLowerCase());
});

const headings=[
{key:'href',itemType:'url',text:'Link destination'},
{key:'text',itemType:'text',text:'Link Text'}];


const details=Audit.makeTableDetails(headings,failingLinks,{});
let displayValue;

if(failingLinks.length){
displayValue=failingLinks.length>1?
`${failingLinks.length} links found`:'1 link found';
}

return{
rawValue:failingLinks.length===0,
details,
displayValue};

}}


module.exports=LinkText;

},{"../../lib/url-shim":"url","../audit":2}],"../audits/seo/manual/mobile-friendly":[function(require,module,exports){





'use strict';

const ManualAudit=require('../../manual/manual-audit');





class MobileFriendly extends ManualAudit{



static get meta(){
return Object.assign({
id:'mobile-friendly',
description:'Take the [Mobile-Friendly Test](https://search.google.com/test/mobile-friendly) to check for audits not covered by Lighthouse, like sizing tap targets appropriately. [Learn more](https://developers.google.com/search/mobile-sites/).',
title:'Page is mobile friendly'},
super.partialMeta);
}}


module.exports=MobileFriendly;

},{"../../manual/manual-audit":4}],"../audits/seo/manual/structured-data":[function(require,module,exports){





'use strict';

const ManualAudit=require('../../manual/manual-audit');





class StructuredData extends ManualAudit{



static get meta(){
return Object.assign({
id:'structured-data',
description:'Run the [Structured Data Testing Tool](https://search.google.com/structured-data/testing-tool/) and the [Structured Data Linter](http://linter.structured-data.org/) to validate structured data. [Learn more](https://developers.google.com/search/docs/guides/mark-up-content).',
title:'Structured data is valid'},
super.partialMeta);
}}


module.exports=StructuredData;

},{"../../manual/manual-audit":4}],"../audits/seo/meta-description":[function(require,module,exports){





'use strict';

const Audit=require('../audit');

class Description extends Audit{



static get meta(){
return{
id:'meta-description',
title:'Document has a meta description',
failureTitle:'Document does not have a meta description',
description:'Meta descriptions may be included in search results to concisely summarize '+
'page content. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/description).',
requiredArtifacts:['MetaDescription']};

}





static audit(artifacts){
if(artifacts.MetaDescription===null){
return{
rawValue:false};

}

if(artifacts.MetaDescription.trim().length===0){
return{
rawValue:false,
explanation:'Description text is empty.'};

}

return{
rawValue:true};

}}


module.exports=Description;

},{"../audit":2}],"../audits/seo/plugins":[function(require,module,exports){





'use strict';

const Audit=require('../audit');
const URL=require('../../lib/url-shim');

const JAVA_APPLET_TYPE='application/x-java-applet';
const JAVA_BEAN_TYPE='application/x-java-bean';
const TYPE_BLOCKLIST=new Set([
'application/x-shockwave-flash',

JAVA_APPLET_TYPE,
JAVA_BEAN_TYPE,

'application/x-silverlight',
'application/x-silverlight-2']);

const FILE_EXTENSION_BLOCKLIST=new Set([
'swf',
'flv',
'class',
'xap']);

const SOURCE_PARAMS=new Set([
'code',
'movie',
'source',
'src']);







function isPluginType(type){
type=type.trim().toLowerCase();

return TYPE_BLOCKLIST.has(type)||
type.startsWith(JAVA_APPLET_TYPE)||
type.startsWith(JAVA_BEAN_TYPE);
}






function isPluginURL(url){
try{

const filePath=new URL(url,'http://example.com').pathname;
const parts=filePath.split('.');

if(parts.length<2){
return false;
}
const part=parts.pop();
return FILE_EXTENSION_BLOCKLIST.has(part.trim().toLowerCase());
}catch(e){
return false;
}
}

class Plugins extends Audit{



static get meta(){
return{
id:'plugins',
title:'Document avoids plugins',
failureTitle:'Document uses plugins',
description:'Search engines can\'t index plugin content, and '+
'many devices restrict plugins or don\'t support them. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/plugins).',
requiredArtifacts:['EmbeddedContent']};

}





static audit(artifacts){
const plugins=artifacts.EmbeddedContent.
filter(item=>{
if(item.tagName==='APPLET'){
return true;
}

if(
(item.tagName==='EMBED'||item.tagName==='OBJECT')&&
item.type&&
isPluginType(item.type))
{
return true;
}

const embedSrc=item.src||item.code;
if(item.tagName==='EMBED'&&embedSrc&&isPluginURL(embedSrc)){
return true;
}

if(item.tagName==='OBJECT'&&item.data&&isPluginURL(item.data)){
return true;
}

const failingParams=item.params.filter(param=>
SOURCE_PARAMS.has(param.name.trim().toLowerCase())&&isPluginURL(param.value));


return failingParams.length>0;
}).
map(plugin=>{
const tagName=plugin.tagName.toLowerCase();

const attributeKeys=['src','data','code','type'];
const attributes=attributeKeys.
reduce((result,attr)=>{
if(plugin[attr]!==null){
result+=` ${attr}="${plugin[attr]}"`;
}
return result;
},'');
const params=plugin.params.
filter(param=>SOURCE_PARAMS.has(param.name.trim().toLowerCase())).
map(param=>`<param ${param.name}="${param.value}" />`).
join('');

return{
source:{
type:'node',
snippet:`<${tagName}${attributes}>${params}</${tagName}>`}};


});

const headings=[
{key:'source',itemType:'code',text:'Element source'}];


const details=Audit.makeTableDetails(headings,plugins);

return{
rawValue:plugins.length===0,
details};

}}


module.exports=Plugins;

},{"../../lib/url-shim":"url","../audit":2}],"../audits/seo/robots-txt":[function(require,module,exports){





'use strict';








const Audit=require('../audit');
const URL=require('../../lib/url-shim');

const HTTP_CLIENT_ERROR_CODE_LOW=400;
const HTTP_SERVER_ERROR_CODE_LOW=500;

const DIRECTIVE_SITEMAP='sitemap';
const DIRECTIVE_USER_AGENT='user-agent';
const DIRECTIVE_ALLOW='allow';
const DIRECTIVE_DISALLOW='disallow';
const DIRECTIVES_GROUP_MEMBERS=new Set([DIRECTIVE_ALLOW,DIRECTIVE_DISALLOW]);
const DIRECTIVE_SAFELIST=new Set([
DIRECTIVE_USER_AGENT,DIRECTIVE_DISALLOW,
DIRECTIVE_ALLOW,DIRECTIVE_SITEMAP,
'crawl-delay',
'clean-param','host',
'request-rate','visit-time','noindex']);

const SITEMAP_VALID_PROTOCOLS=new Set(['https:','http:','ftp:']);






function verifyDirective(directiveName,directiveValue){
if(!DIRECTIVE_SAFELIST.has(directiveName)){
throw new Error('Unknown directive');
}

if(directiveName===DIRECTIVE_SITEMAP){
let sitemapUrl;

try{
sitemapUrl=new URL(directiveValue);
}catch(e){
throw new Error('Invalid sitemap URL');
}

if(!SITEMAP_VALID_PROTOCOLS.has(sitemapUrl.protocol)){
throw new Error('Invalid sitemap URL protocol');
}
}

if(directiveName===DIRECTIVE_USER_AGENT&&!directiveValue){
throw new Error('No user-agent specified');
}

if(directiveName===DIRECTIVE_ALLOW||directiveName===DIRECTIVE_DISALLOW){
if(directiveValue!==''&&directiveValue[0]!=='/'&&directiveValue[0]!=='*'){
throw new Error('Pattern should either be empty, start with "/" or "*"');
}

const dollarIndex=directiveValue.indexOf('$');

if(dollarIndex!==-1&&dollarIndex!==directiveValue.length-1){
throw new Error('"$" should only be used at the end of the pattern');
}
}
}






function parseLine(line){
const hashIndex=line.indexOf('#');

if(hashIndex!==-1){
line=line.substr(0,hashIndex);
}

line=line.trim();

if(line.length===0){
return null;
}

const colonIndex=line.indexOf(':');

if(colonIndex===-1){
throw new Error('Syntax not understood');
}

const directiveName=line.slice(0,colonIndex).trim().toLowerCase();
const directiveValue=line.slice(colonIndex+1).trim();

verifyDirective(directiveName,directiveValue);

return{
directive:directiveName,
value:directiveValue};

}





function validateRobots(content){



const errors=[];
let inGroup=false;

content.
split(/\r\n|\r|\n/).
forEach((line,index)=>{
let parsedLine;

try{
parsedLine=parseLine(line);
}catch(e){
errors.push({
index:(index+1).toString(),
line:line,
message:e.message.toString()});

}

if(!parsedLine){
return;
}



if(parsedLine.directive===DIRECTIVE_USER_AGENT){
inGroup=true;
}else if(!inGroup&&DIRECTIVES_GROUP_MEMBERS.has(parsedLine.directive)){
errors.push({
index:(index+1).toString(),
line:line,
message:'No user-agent specified'});

}
});

return errors;
}

class RobotsTxt extends Audit{



static get meta(){
return{
id:'robots-txt',
title:'robots.txt is valid',
failureTitle:'robots.txt is not valid',
description:'If your robots.txt file is malformed, crawlers may not be able to understand '+
'how you want your website to be crawled or indexed.',
requiredArtifacts:['RobotsTxt']};

}





static audit(artifacts){
const{
status,
content}=
artifacts.RobotsTxt;

if(!status){
return{
rawValue:false,
explanation:'Lighthouse was unable to download your robots.txt file'};

}

if(status>=HTTP_SERVER_ERROR_CODE_LOW){
return{
rawValue:false,
displayValue:`request for robots.txt returned HTTP${status}`};

}else if(status>=HTTP_CLIENT_ERROR_CODE_LOW||content===''){
return{
rawValue:true,
notApplicable:true};

}


if(content===null){
throw new Error(`Status ${status} was valid, but content was null`);
}

const validationErrors=validateRobots(content);

const headings=[
{key:'index',itemType:'text',text:'Line #'},
{key:'line',itemType:'code',text:'Content'},
{key:'message',itemType:'code',text:'Error'}];


const details=Audit.makeTableDetails(headings,validationErrors,{});
let displayValue;

if(validationErrors.length){
displayValue=validationErrors.length>1?
`${validationErrors.length} errors found`:'1 error found';
}

return{
rawValue:validationErrors.length===0,
details,
displayValue};

}}


module.exports=RobotsTxt;

},{"../../lib/url-shim":"url","../audit":2}],"../audits/service-worker":[function(require,module,exports){





'use strict';

const URL=require('../lib/url-shim');
const Audit=require('./audit');

class ServiceWorker extends Audit{



static get meta(){
return{
id:'service-worker',
title:'Registers a service worker',
failureTitle:'Does not register a service worker',
description:'The service worker is the technology that enables your app to use many '+
'Progressive Web App features, such as offline, add to homescreen, and push '+
'notifications. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/registered-service-worker).',
requiredArtifacts:['URL','ServiceWorker']};

}





static audit(artifacts){


const versions=artifacts.ServiceWorker.versions;
const url=artifacts.URL.finalUrl;

const origin=new URL(url).origin;
const matchingSW=versions.filter(v=>v.status==='activated').
find(v=>new URL(v.scriptURL).origin===origin);

return{
rawValue:!!matchingSW};

}}


module.exports=ServiceWorker;

},{"../lib/url-shim":"url","./audit":2}],"../audits/splash-screen":[function(require,module,exports){





'use strict';

const MultiCheckAudit=require('./multi-check-audit');
const ManifestValues=require('../gather/computed/manifest-values');














class SplashScreen extends MultiCheckAudit{



static get meta(){
return{
id:'splash-screen',
title:'Configured for a custom splash screen',
failureTitle:'Is not configured for a custom splash screen',
description:'A themed splash screen ensures a high-quality experience when '+
'users launch your app from their homescreens. [Learn '+
'more](https://developers.google.com/web/tools/lighthouse/audits/custom-splash-screen).',
requiredArtifacts:['Manifest']};

}





static assessManifest(manifestValues,failures){
if(manifestValues.isParseFailure&&manifestValues.parseFailureReason){
failures.push(manifestValues.parseFailureReason);
return;
}

const splashScreenCheckIds=[
'hasName',
'hasBackgroundColor',
'hasThemeColor',
'hasIconsAtLeast512px'];


manifestValues.allChecks.
filter(item=>splashScreenCheckIds.includes(item.id)).
forEach(item=>{
if(!item.passing){
failures.push(item.failureText);
}
});
}






static async audit_(artifacts,context){

const failures=[];

const manifestValues=await ManifestValues.request(context,artifacts.Manifest);
SplashScreen.assessManifest(manifestValues,failures);

return{
failures,
manifestValues};

}}


module.exports=SplashScreen;

},{"../gather/computed/manifest-values":12,"./multi-check-audit":5}],"../audits/themed-omnibox":[function(require,module,exports){





'use strict';

const MultiCheckAudit=require('./multi-check-audit');
const ManifestValues=require('../gather/computed/manifest-values');
const cssParsers=require('cssstyle/lib/parsers');











class ThemedOmnibox extends MultiCheckAudit{



static get meta(){
return{
id:'themed-omnibox',
title:'Address bar matches brand colors',
failureTitle:'Address bar does not match brand colors',
description:'The browser address bar can be themed to match your site. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/address-bar).',
requiredArtifacts:['Manifest','ThemeColor']};

}





static isValidColor(color){
return cssParsers.valueType(color)===cssParsers.TYPES.COLOR;
}





static assessMetaThemecolor(themeColorMeta,failures){
if(themeColorMeta===null){
failures.push('No `<meta name="theme-color">` tag found');
}else if(!ThemedOmnibox.isValidColor(themeColorMeta)){
failures.push('The theme-color meta tag did not contain a valid CSS color');
}
}





static assessManifest(manifestValues,failures){
if(manifestValues.isParseFailure&&manifestValues.parseFailureReason){
failures.push(manifestValues.parseFailureReason);
return;
}

const themeColorCheck=manifestValues.allChecks.find(i=>i.id==='hasThemeColor');
if(themeColorCheck&&!themeColorCheck.passing){
failures.push(themeColorCheck.failureText);
}
}






static async audit_(artifacts,context){

const failures=[];

const manifestValues=await ManifestValues.request(context,artifacts.Manifest);
ThemedOmnibox.assessManifest(manifestValues,failures);
ThemedOmnibox.assessMetaThemecolor(artifacts.ThemeColor,failures);

return{
failures,
manifestValues,
themeColor:artifacts.ThemeColor};

}}


module.exports=ThemedOmnibox;

},{"../gather/computed/manifest-values":12,"./multi-check-audit":5,"cssstyle/lib/parsers":161}],"../audits/time-to-first-byte":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('./audit');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'Server response times are low (TTFB)',

failureTitle:'Reduce server response times (TTFB)',

description:'Time To First Byte identifies the time at which your server sends a response.'+
' [Learn more](https://developers.google.com/web/tools/lighthouse/audits/ttfb).',

displayValue:`Root document took {timeInMs, number, milliseconds}\xa0ms`};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const TTFB_THRESHOLD=600;

class TTFBMetric extends Audit{



static get meta(){
return{
id:'time-to-first-byte',
title:str_(UIStrings.title),
failureTitle:str_(UIStrings.failureTitle),
description:str_(UIStrings.description),
requiredArtifacts:['devtoolsLogs','URL']};

}




static caclulateTTFB(record){
const timing=record.timing;
return timing?timing.receiveHeadersEnd-timing.sendEnd:0;
}





static async audit(artifacts){
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const mainResource=await artifacts.requestMainResource({devtoolsLog,URL:artifacts.URL});

const ttfb=TTFBMetric.caclulateTTFB(mainResource);
const passed=ttfb<TTFB_THRESHOLD;
const displayValue=str_(UIStrings.displayValue,{timeInMs:ttfb});


const details={
type:'opportunity',
overallSavingsMs:ttfb-TTFB_THRESHOLD,
headings:[],
items:[]};


return{
rawValue:ttfb,
score:Number(passed),
displayValue,
details,
extendedInfo:{
value:{
wastedMs:ttfb-TTFB_THRESHOLD}}};



}}


module.exports=TTFBMetric;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/time-to-first-byte.js");
},{"../lib/i18n/i18n.js":36,"./audit":2}],"../audits/user-timings":[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('./audit');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'User Timing marks and measures',

description:'Consider instrumenting your app with the User Timing API to measure your '+
'app\'s real-world performance during key user experiences. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/user-timing).',

displayValue:`{itemCount, plural,
    =1 {1 user timing}
    other {# user timings}
    }`,

columnName:'Name',

columnType:'Type',

columnStartTime:'Start Time',

columnDuration:'Duration'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);




class UserTimings extends Audit{



static get meta(){
return{
id:'user-timings',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
scoreDisplayMode:Audit.SCORING_MODES.INFORMATIVE,
requiredArtifacts:['traces']};

}





static filterTrace(tabTrace){

const userTimings=[];

const measuresStartTimes={};





tabTrace.processEvents.filter(evt=>{
if(!evt.cat.includes('blink.user_timing')){
return false;
}



return evt.name!=='requestStart'&&
evt.name!=='navigationStart'&&
evt.name!=='paintNonDefaultBackgroundColor'&&
evt.args.frame===undefined;
}).
forEach(ut=>{

if(ut.ph==='R'||ut.ph.toUpperCase()==='I'){
userTimings.push({
name:ut.name,
isMark:true,
args:ut.args,
startTime:ut.ts});



}else if(ut.ph.toLowerCase()==='b'){
measuresStartTimes[ut.name]=ut.ts;


}else if(ut.ph.toLowerCase()==='e'){
userTimings.push({
name:ut.name,
isMark:false,
args:ut.args,
startTime:measuresStartTimes[ut.name],
endTime:ut.ts,
duration:ut.ts-measuresStartTimes[ut.name]});

}
});


userTimings.forEach(ut=>{
ut.startTime=(ut.startTime-tabTrace.navigationStartEvt.ts)/1000;
if(!ut.isMark){
ut.endTime=(ut.endTime-tabTrace.navigationStartEvt.ts)/1000;
ut.duration=ut.duration/1000;
}
});

return userTimings;
}




static get blacklistedPrefixes(){
return['goog_'];
}






static excludeBlacklisted(evt){
return UserTimings.blacklistedPrefixes.every(prefix=>!evt.name.startsWith(prefix));
}





static audit(artifacts){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
return artifacts.requestTraceOfTab(trace).then(tabTrace=>{
const userTimings=this.filterTrace(tabTrace).filter(UserTimings.excludeBlacklisted);
const tableRows=userTimings.map(item=>{
return{
name:item.name,
startTime:item.startTime,
duration:item.isMark?undefined:item.duration,
timingType:item.isMark?'Mark':'Measure'};

}).sort((itemA,itemB)=>{
if(itemA.timingType===itemB.timingType){

return itemA.startTime-itemB.startTime;
}else if(itemA.timingType==='Measure'){

return-1;
}else{
return 1;
}
});

const headings=[
{key:'name',itemType:'text',text:str_(UIStrings.columnName)},
{key:'timingType',itemType:'text',text:str_(UIStrings.columnType)},
{key:'startTime',itemType:'ms',granularity:0.01,
text:str_(UIStrings.columnStartTime)},
{key:'duration',itemType:'ms',granularity:0.01,text:str_(UIStrings.columnDuration)}];


const details=Audit.makeTableDetails(headings,tableRows);


let displayValue;
if(userTimings.length){
displayValue=str_(UIStrings.displayValue,{itemCount:userTimings.length});
}

return{

rawValue:userTimings.length===0,
notApplicable:userTimings.length===0,
displayValue,
extendedInfo:{
value:userTimings},

details};

});
}}


module.exports=UserTimings;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/user-timings.js");
},{"../lib/i18n/i18n.js":36,"./audit":2}],"../audits/uses-rel-preconnect":[function(require,module,exports){
(function(__filename){






'use strict';

const Audit=require('./audit');
const UnusedBytes=require('./byte-efficiency/byte-efficiency-audit');
const i18n=require('../lib/i18n/i18n.js');





const PRECONNECT_SOCKET_MAX_IDLE=15;

const IGNORE_THRESHOLD_IN_MS=50;

const UIStrings={

title:'Preconnect to required origins',

description:
'Consider adding preconnect or dns-prefetch resource hints to establish early '+
`connections to important third-party origins. [Learn more](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect).`};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

class UsesRelPreconnectAudit extends Audit{



static get meta(){
return{
id:'uses-rel-preconnect',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
requiredArtifacts:['devtoolsLogs','URL'],
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC};

}






static hasValidTiming(record){
return!!record.timing&&record.timing.connectEnd>0&&record.timing.connectStart>0;
}






static hasAlreadyConnectedToOrigin(record){
return(
!!record.timing&&
record.timing.dnsEnd-record.timing.dnsStart===0&&
record.timing.connectEnd-record.timing.connectStart===0);

}







static socketStartTimeIsBelowThreshold(record,mainResource){
return Math.max(0,record.startTime-mainResource.endTime)<PRECONNECT_SOCKET_MAX_IDLE;
}






static async audit(artifacts,context){
const devtoolsLog=artifacts.devtoolsLogs[UsesRelPreconnectAudit.DEFAULT_PASS];
const URL=artifacts.URL;
const settings=context.settings;
let maxWasted=0;

const[networkRecords,mainResource,loadSimulator]=await Promise.all([
artifacts.requestNetworkRecords(devtoolsLog),
artifacts.requestMainResource({devtoolsLog,URL}),
artifacts.requestLoadSimulator({devtoolsLog,settings})]);


const{rtt,additionalRttByOrigin}=loadSimulator.getOptions();


const origins=new Map();
networkRecords.
forEach(record=>{
if(

!UsesRelPreconnectAudit.hasValidTiming(record)||

record.initiator.url===mainResource.url||

!record.parsedURL||!record.parsedURL.securityOrigin||

mainResource.parsedURL.securityOrigin===record.parsedURL.securityOrigin||

UsesRelPreconnectAudit.hasAlreadyConnectedToOrigin(record)||

!UsesRelPreconnectAudit.socketStartTimeIsBelowThreshold(record,mainResource))
{
return;
}

const securityOrigin=record.parsedURL.securityOrigin;
const records=origins.get(securityOrigin)||[];
records.push(record);
origins.set(securityOrigin,records);
});


let results=[];
origins.forEach(records=>{


const firstRecordOfOrigin=records.reduce((firstRecord,record)=>{
return record.startTime<firstRecord.startTime?record:firstRecord;
});


if(!firstRecordOfOrigin.timing)return;

const securityOrigin=firstRecordOfOrigin.parsedURL.securityOrigin;




const additionalRtt=additionalRttByOrigin.get(securityOrigin)||0;
let connectionTime=rtt+additionalRtt;

if(firstRecordOfOrigin.parsedURL.scheme==='https')connectionTime=connectionTime*2;

const timeBetweenMainResourceAndDnsStart=
firstRecordOfOrigin.startTime*1000-
mainResource.endTime*1000+
firstRecordOfOrigin.timing.dnsStart;

const wastedMs=Math.min(connectionTime,timeBetweenMainResourceAndDnsStart);
if(wastedMs<IGNORE_THRESHOLD_IN_MS)return;

maxWasted=Math.max(wastedMs,maxWasted);
results.push({
url:securityOrigin,
wastedMs:wastedMs});

});

results=results.
sort((a,b)=>b.wastedMs-a.wastedMs);


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'wastedMs',valueType:'timespanMs',label:str_(i18n.UIStrings.columnWastedMs)}];


const details=Audit.makeOpportunityDetails(headings,results,maxWasted);

return{
score:UnusedBytes.scoreForWastedMs(maxWasted),
rawValue:maxWasted,
displayValue:maxWasted?
str_(i18n.UIStrings.displayValueMsSavings,{wastedMs:maxWasted}):
'',
extendedInfo:{
value:results},

details};

}}


module.exports=UsesRelPreconnectAudit;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/uses-rel-preconnect.js");
},{"../lib/i18n/i18n.js":36,"./audit":2,"./byte-efficiency/byte-efficiency-audit":3}],"../audits/uses-rel-preload":[function(require,module,exports){
(function(__filename){





'use strict';

const URL=require('../lib/url-shim');
const Audit=require('./audit');
const UnusedBytes=require('./byte-efficiency/byte-efficiency-audit');
const CriticalRequestChains=require('../gather/computed/critical-request-chains');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

title:'Preload key requests',

description:'Consider using <link rel=preload> to prioritize fetching resources that are '+
'currently requested later in page load. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/preload).'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);

const THRESHOLD_IN_MS=100;

class UsesRelPreloadAudit extends Audit{



static get meta(){
return{
id:'uses-rel-preload',
title:str_(UIStrings.title),
description:str_(UIStrings.description),
requiredArtifacts:['devtoolsLogs','traces','URL'],
scoreDisplayMode:Audit.SCORING_MODES.NUMERIC};

}






static getURLsToPreload(mainResource,graph){

const urls=new Set();

graph.traverse((node,traversalPath)=>{
if(node.type!=='network')return;

const path=traversalPath.slice(1).filter(initiator=>initiator.type==='network');
if(!UsesRelPreloadAudit.shouldPreloadRequest(node.record,mainResource,path))return;
urls.add(node.record.url);
});

return urls;
}













static shouldPreloadRequest(request,mainResource,initiatorPath){
const mainResourceDepth=mainResource.redirects?mainResource.redirects.length:0;


if(request.isLinkPreload)return false;

if(!CriticalRequestChains.isCritical(request,mainResource))return false;

if(URL.NON_NETWORK_PROTOCOLS.includes(request.protocol))return false;

if(initiatorPath.length!==mainResourceDepth+2)return false;

return URL.rootDomainsMatch(request.url,mainResource.url);
}








static computeWasteWithGraph(urls,graph,simulator){
if(!urls.size){
return{wastedMs:0,results:[]};
}



const simulationBeforeChanges=simulator.simulate(graph,{flexibleOrdering:true});
const modifiedGraph=graph.cloneWithRelationships();


const nodesToPreload=[];

let mainDocumentNode=null;
modifiedGraph.traverse(node=>{
if(node.type!=='network')return;

const networkNode=node;
if(node.isMainDocument()){
mainDocumentNode=networkNode;
}else if(networkNode.record&&urls.has(networkNode.record.url)){
nodesToPreload.push(networkNode);
}
});

if(!mainDocumentNode){

throw new Error('Could not find main document node');
}



for(const node of nodesToPreload){
node.removeAllDependencies();
node.addDependency(mainDocumentNode);
}


const simulationAfterChanges=simulator.simulate(modifiedGraph,{flexibleOrdering:true});
const originalNodesByRecord=Array.from(simulationBeforeChanges.nodeTimings.keys()).

reduce((map,node)=>map.set(node.record,node),new Map());

const results=[];
for(const node of nodesToPreload){
const originalNode=originalNodesByRecord.get(node.record);
const timingAfter=simulationAfterChanges.nodeTimings.get(node);
const timingBefore=simulationBeforeChanges.nodeTimings.get(originalNode);
if(!timingBefore||!timingAfter)throw new Error('Missing preload node');

const wastedMs=Math.round(timingBefore.endTime-timingAfter.endTime);
if(wastedMs<THRESHOLD_IN_MS)continue;
results.push({url:node.record.url,wastedMs});
}

if(!results.length){
return{wastedMs:0,results};
}

return{


wastedMs:Math.max(...results.map(item=>item.wastedMs)),
results};

}






static async audit(artifacts,context){
const trace=artifacts.traces[UsesRelPreloadAudit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[UsesRelPreloadAudit.DEFAULT_PASS];
const URL=artifacts.URL;
const simulatorOptions={trace,devtoolsLog,settings:context.settings};

const[mainResource,graph,simulator]=await Promise.all([
artifacts.requestMainResource({devtoolsLog,URL}),
artifacts.requestPageDependencyGraph({trace,devtoolsLog}),
artifacts.requestLoadSimulator(simulatorOptions)]);


const urls=UsesRelPreloadAudit.getURLsToPreload(mainResource,graph);
const{results,wastedMs}=UsesRelPreloadAudit.computeWasteWithGraph(urls,graph,simulator);

results.sort((a,b)=>b.wastedMs-a.wastedMs);


const headings=[
{key:'url',valueType:'url',label:str_(i18n.UIStrings.columnURL)},
{key:'wastedMs',valueType:'timespanMs',label:str_(i18n.UIStrings.columnWastedMs)}];

const details=Audit.makeOpportunityDetails(headings,results,wastedMs);

return{
score:UnusedBytes.scoreForWastedMs(wastedMs),
rawValue:wastedMs,
displayValue:wastedMs?
str_(i18n.UIStrings.displayValueMsSavings,{wastedMs}):
'',
extendedInfo:{
value:results},

details};

}}


module.exports=UsesRelPreloadAudit;
module.exports.UIStrings=UIStrings;

}).call(this,"/../lighthouse-core/audits/uses-rel-preload.js");
},{"../gather/computed/critical-request-chains":"./gather/computed/critical-request-chains","../lib/i18n/i18n.js":36,"../lib/url-shim":"url","./audit":2,"./byte-efficiency/byte-efficiency-audit":3}],"../audits/viewport":[function(require,module,exports){





'use strict';

const Audit=require('./audit');
const Parser=require('metaviewport-parser');

class Viewport extends Audit{



static get meta(){
return{
id:'viewport',
title:'Has a `<meta name="viewport">` tag with `width` or `initial-scale`',
failureTitle:'Does not have a `<meta name="viewport">` tag with `width` '+
'or `initial-scale`',
description:'Add a viewport meta tag to optimize your app for mobile screens. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/has-viewport-meta-tag).',
requiredArtifacts:['Viewport']};

}





static audit(artifacts){
if(artifacts.Viewport===null){
return{
explanation:'No viewport meta tag found',
rawValue:false};

}

const warnings=[];
const parsedProps=Parser.parseMetaViewPortContent(artifacts.Viewport);

if(Object.keys(parsedProps.unknownProperties).length){
warnings.push(`Invalid properties found: ${JSON.stringify(parsedProps.unknownProperties)}`);
}
if(Object.keys(parsedProps.invalidValues).length){
warnings.push(`Invalid values found: ${JSON.stringify(parsedProps.invalidValues)}`);
}

const viewportProps=parsedProps.validProperties;
const hasMobileViewport=viewportProps.width||viewportProps['initial-scale'];

return{
rawValue:!!hasMobileViewport,
warnings};

}}


module.exports=Viewport;

},{"./audit":2,"metaviewport-parser":180}],"../audits/webapp-install-banner":[function(require,module,exports){





'use strict';

const MultiCheckAudit=require('./multi-check-audit');
const SWAudit=require('./service-worker');
const ManifestValues=require('../gather/computed/manifest-values');





















class WebappInstallBanner extends MultiCheckAudit{



static get meta(){
return{
id:'webapp-install-banner',
title:'User can be prompted to Install the Web App',
failureTitle:'User will not be prompted to Install the Web App',
description:'Browsers can proactively prompt users to add your app to their homescreen, '+
'which can lead to higher engagement. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/install-prompt).',
requiredArtifacts:['URL','ServiceWorker','Manifest','StartUrl']};

}





static assessManifest(manifestValues){
if(manifestValues.isParseFailure&&manifestValues.parseFailureReason){
return[manifestValues.parseFailureReason];
}


const failures=[];
const bannerCheckIds=[
'hasName',






'hasShortName',
'hasStartUrl',
'hasPWADisplayValue',
'hasIconsAtLeast192px'];

manifestValues.allChecks.
filter(item=>bannerCheckIds.includes(item.id)).
forEach(item=>{
if(!item.passing){
failures.push(item.failureText);
}
});

return failures;
}





static assessServiceWorker(artifacts){
const failures=[];
const hasServiceWorker=SWAudit.audit(artifacts).rawValue;
if(!hasServiceWorker){
failures.push('Site does not register a service worker');
}

return failures;
}





static assessOfflineStartUrl(artifacts){
const failures=[];
const warnings=[];
const hasOfflineStartUrl=artifacts.StartUrl.statusCode===200;

if(!hasOfflineStartUrl){
failures.push('Service worker does not successfully serve the manifest\'s start_url');
if(artifacts.StartUrl.explanation){
failures.push(artifacts.StartUrl.explanation);
}
}

if(artifacts.StartUrl.explanation){
warnings.push(artifacts.StartUrl.explanation);
}

return{failures,warnings};
}






static async audit_(artifacts,context){

let offlineFailures=[];

let offlineWarnings=[];

const manifestValues=await ManifestValues.request(context,artifacts.Manifest);
const manifestFailures=WebappInstallBanner.assessManifest(manifestValues);
const swFailures=WebappInstallBanner.assessServiceWorker(artifacts);
if(!swFailures.length){
const{failures,warnings}=WebappInstallBanner.assessOfflineStartUrl(artifacts);
offlineFailures=failures;
offlineWarnings=warnings;
}

return{
warnings:offlineWarnings,
failures:[
...manifestFailures,
...swFailures,
...offlineFailures],

manifestValues};

}}


module.exports=WebappInstallBanner;

},{"../gather/computed/manifest-values":12,"./multi-check-audit":5,"./service-worker":"../audits/service-worker"}],"../audits/without-javascript":[function(require,module,exports){





'use strict';

const Audit=require('./audit');

class WithoutJavaScript extends Audit{



static get meta(){
return{
id:'without-javascript',
title:'Contains some content when JavaScript is not available',
failureTitle:'Does not provide fallback content when JavaScript is not available',
description:'Your app should display some content when JavaScript is disabled, even if '+
'it\'s just a warning to the user that JavaScript is required to use the app. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/no-js).',
requiredArtifacts:['HTMLWithoutJavaScript']};

}





static audit(artifacts){
const artifact=artifacts.HTMLWithoutJavaScript;


if(artifact.bodyText.trim()===''&&!artifact.hasNoScript){
return{
rawValue:false,
explanation:'The page body should render some content if its scripts are not available.'};

}

return{
rawValue:true};

}}


module.exports=WithoutJavaScript;

},{"./audit":2}],"../audits/works-offline":[function(require,module,exports){





'use strict';

const URL=require('../lib/url-shim');
const Audit=require('./audit');

class WorksOffline extends Audit{



static get meta(){
return{
id:'works-offline',
title:'Responds with a 200 when offline',
failureTitle:'Does not respond with a 200 when offline',
description:'If you\'re building a Progressive Web App, consider using a service worker '+
'so that your app can work offline. '+
'[Learn more](https://developers.google.com/web/tools/lighthouse/audits/http-200-when-offline).',
requiredArtifacts:['Offline','URL']};

}





static audit(artifacts){
const warnings=[];
const passed=artifacts.Offline===200;
if(!passed&&
!URL.equalWithExcludedFragments(artifacts.URL.requestedUrl,artifacts.URL.finalUrl)){
warnings.push('You may be not loading offline because your test URL '+
`(${artifacts.URL.requestedUrl}) was redirected to "${artifacts.URL.finalUrl}". `+
'Try testing the second URL directly.');
}

return{
rawValue:passed,
warnings};

}}


module.exports=WorksOffline;

},{"../lib/url-shim":"url","./audit":2}],"../gather/gatherers/accessibility":[function(require,module,exports){





'use strict';



const Gatherer=require('./gatherer');

const axeLibSource="/*! aXe v3.0.0-beta.2\n * Copyright (c) 2018 Deque Systems, Inc.\n *\n * Your use of this Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This entire copyright notice must appear in every copy of this file you\n * distribute or in any file that contains substantial portions of this source\n * code.\n */\n!function a(window){function b(a){this.name=\"SupportError\",this.cause=a.cause,this.message=\"`\"+a.cause+\"` - feature unsupported in your environment.\",a.ruleId&&(this.ruleId=a.ruleId,this.message+=\" Skipping \"+this.ruleId+\" rule.\"),this.stack=(new Error).stack}function c(a){\"use strict\";var b;return a?(b=axe.utils.clone(a),b.commons=a.commons):b={},b.reporter=b.reporter||null,b.rules=b.rules||[],b.checks=b.checks||[],b.data=Object.assign({checks:{},rules:{}},b.data),b}function d(a,b,c){\"use strict\";var d,e;for(d=0,e=a.length;d<e;d++)b[c](a[d])}function e(a){this.brand=\"axe\",this.application=\"axeAPI\",this.tagExclude=[\"experimental\"],this.defaultConfig=a,this._init()}function f(a,b,c){var d=a.brand,e=a.application;return axe.constants.helpUrlBase+d+\"/\"+(c||axe.version.substring(0,axe.version.lastIndexOf(\".\")))+\"/\"+b+\"?application=\"+e}function g(a){\"use strict\";this.id=a.id,this.data=null,this.relatedNodes=[],this.result=null}function h(a){\"use strict\";return\"string\"==typeof a?new Function(\"return \"+a+\";\")():a}function i(a){a&&(this.id=a.id,this.configure(a))}function j(a,b){\"use strict\";if(!axe.utils.isHidden(b)){axe.utils.findBy(a,\"node\",b)||a.push({node:b,include:[],exclude:[]})}}function k(a,b,c){\"use strict\";a.frames=a.frames||[];var d,e,f=document.querySelectorAll(c.shift());a:for(var g=0,h=f.length;g<h;g++){e=f[g];for(var i=0,j=a.frames.length;i<j;i++)if(a.frames[i].node===e){a.frames[i][b].push(c);break a}d={node:e,include:[],exclude:[]},c&&d[b].push(c),a.frames.push(d)}}function l(a){\"use strict\";if(a&&\"object\"===(void 0===a?\"undefined\":za(a))||a instanceof NodeList){if(a instanceof Node)return{include:[a],exclude:[]};if(a.hasOwnProperty(\"include\")||a.hasOwnProperty(\"exclude\"))return{include:a.include&&+a.include.length?a.include:[document],exclude:a.exclude||[]};if(a.length===+a.length)return{include:a,exclude:[]}}return\"string\"==typeof a?{include:[a],exclude:[]}:{include:[document],exclude:[]}}function m(a,b){\"use strict\";for(var c,d,e=[],f=0,g=a[b].length;f<g;f++){if(\"string\"==typeof(c=a[b][f])){d=Array.from(document.querySelectorAll(c)),e=e.concat(d.map(function(a){return axe.utils.getFlattenedTree(a)[0]}));break}!c||!c.length||c instanceof Node?c instanceof Node&&e.push(axe.utils.getFlattenedTree(c)[0]):c.length>1?k(a,b,c):(d=Array.from(document.querySelectorAll(c[0])),e=e.concat(d.map(function(a){return axe.utils.getFlattenedTree(a)[0]})))}return e.filter(function(a){return a})}function n(a){\"use strict\";if(0===a.include.length){if(0===a.frames.length){var b=axe.utils.respondable.isInFrame()?\"frame\":\"page\";return new Error(\"No elements found for include in \"+b+\" Context\")}a.frames.forEach(function(a,b){if(0===a.include.length)return new Error(\"No elements found for include in Context of frame \"+b)})}}function o(a){\"use strict\";var b=this;this.frames=[],this.initiator=!a||\"boolean\"!=typeof a.initiator||a.initiator,this.page=!1,a=l(a),this.exclude=a.exclude,this.include=a.include,this.include=m(this,\"include\"),this.exclude=m(this,\"exclude\"),axe.utils.select(\"frame, iframe\",this).forEach(function(a){wa(a,b)&&j(b.frames,a.actualNode)}),1===this.include.length&&this.include[0].actualNode===document.documentElement&&(this.page=!0);var c=n(this);if(c instanceof Error)throw c;Array.isArray(this.include)||(this.include=Array.from(this.include)),this.include.sort(axe.utils.nodeSorter)}function p(a){\"use strict\";this.id=a.id,this.result=axe.constants.NA,this.pageLevel=a.pageLevel,this.impact=null,this.nodes=[]}function q(a,b){\"use strict\";this._audit=b,this.id=a.id,this.selector=a.selector||\"*\",this.excludeHidden=\"boolean\"!=typeof a.excludeHidden||a.excludeHidden,this.enabled=\"boolean\"!=typeof a.enabled||a.enabled,this.pageLevel=\"boolean\"==typeof a.pageLevel&&a.pageLevel,this.any=a.any||[],this.all=a.all||[],this.none=a.none||[],this.tags=a.tags||[],a.matches&&(this.matches=h(a.matches))}function r(a){\"use strict\";return axe.utils.getAllChecks(a).map(function(b){var c=a._audit.checks[b.id||b];return c&&\"function\"==typeof c.after?c:null}).filter(Boolean)}function s(a,b){\"use strict\";var c=[];return a.forEach(function(a){axe.utils.getAllChecks(a).forEach(function(a){a.id===b&&c.push(a)})}),c}function t(a){\"use strict\";return a.filter(function(a){return!0!==a.filtered})}function u(a){\"use strict\";var b=[\"any\",\"all\",\"none\"],c=a.nodes.filter(function(a){var c=0;return b.forEach(function(b){a[b]=t(a[b]),c+=a[b].length}),c>0});return a.pageLevel&&c.length&&(c=[c.reduce(function(a,c){if(a)return b.forEach(function(b){a[b].push.apply(a[b],c[b])}),a})]),c}function v(a,b){\"use strict\";if(a=a||function(){},b=b||axe.log,!axe._audit)throw new Error(\"No audit configured\");var c=axe.utils.queue(),d=[];Object.keys(axe.plugins).forEach(function(a){c.defer(function(b){var c=function(a){d.push(a),b()};try{axe.plugins[a].cleanup(b,c)}catch(a){c(a)}})});var e=axe.utils.getFlattenedTree(document.body);axe.utils.querySelectorAll(e,\"iframe, frame\").forEach(function(a){c.defer(function(b,c){return axe.utils.sendCommandToFrame(a.actualNode,{command:\"cleanup-plugin\"},b,c)})}),c.then(function(c){0===d.length?a(c):b(d)}).catch(b)}function w(a){\"use strict\";var b;if(!(b=axe._audit))throw new Error(\"No audit configured\");a.reporter&&(\"function\"==typeof a.reporter||Ca[a.reporter])&&(b.reporter=a.reporter),a.checks&&a.checks.forEach(function(a){b.addCheck(a)});var c=[];a.rules&&a.rules.forEach(function(a){c.push(a.id),b.addRule(a)}),a.disableOtherRules&&b.rules.forEach(function(a){!1===c.includes(a.id)&&(a.enabled=!1)}),void 0!==a.branding?b.setBranding(a.branding):b._constructHelpUrls(),a.tagExclude&&(b.tagExclude=a.tagExclude)}function x(a,b,c){\"use strict\";var d=c,e=function(a){a instanceof Error==!1&&(a=new Error(a)),c(a)},f=a&&a.context||{};f.hasOwnProperty(\"include\")&&!f.include.length&&(f.include=[document]);var g=a&&a.options||{};switch(a.command){case\"rules\":return A(f,g,d,e);case\"cleanup-plugin\":return v(d,e);default:if(axe._audit&&axe._audit.commands&&axe._audit.commands[a.command])return axe._audit.commands[a.command](a,c)}}function y(a){\"use strict\";this._run=a.run,this._collect=a.collect,this._registry={},a.commands.forEach(function(a){axe._audit.registerCommand(a)})}function z(){\"use strict\";var a=axe._audit;if(!a)throw new Error(\"No audit configured\");a.resetRulesAndChecks()}function A(a,b,c,d){\"use strict\";try{a=new o(a)}catch(a){return d(a)}var e=axe.utils.queue(),f=axe._audit;b.performanceTimer&&axe.utils.performanceTimer.auditStart(),a.frames.length&&!1!==b.iframes&&e.defer(function(c,d){axe.utils.collectResultsFromFrames(a,b,\"rules\",null,c,d)});var g=void 0;e.defer(function(c,d){b.restoreScroll&&(g=axe.utils.getScrollState()),f.run(a,b,c,d)}),e.then(function(e){try{g&&axe.utils.setScrollState(g),b.performanceTimer&&axe.utils.performanceTimer.auditEnd();var h=axe.utils.mergeResults(e.map(function(a){return{results:a}}));a.initiator&&(h=f.after(h,b),h.forEach(axe.utils.publishMetaData),h=h.map(axe.utils.finalizeRuleResult));try{c(h)}catch(a){axe.log(a)}}catch(a){d(a)}}).catch(d)}function B(a){\"use strict\";switch(!0){case\"string\"==typeof a:case Array.isArray(a):case Node&&a instanceof Node:case NodeList&&a instanceof NodeList:return!0;case\"object\"!==(void 0===a?\"undefined\":za(a)):return!1;case void 0!==a.include:case void 0!==a.exclude:case\"number\"==typeof a.length:return!0;default:return!1}}function C(a,b,c){\"use strict\";var d=new TypeError(\"axe.run arguments are invalid\");if(!B(a)){if(void 0!==c)throw d;c=b,b=a,a=document}if(\"object\"!==(void 0===b?\"undefined\":za(b))){if(void 0!==c)throw d;c=b,b={}}if(\"function\"!=typeof c&&void 0!==c)throw d;return{context:a,options:b,callback:c||Da}}function D(a,b){\"use strict\";[\"any\",\"all\",\"none\"].forEach(function(c){Array.isArray(a[c])&&a[c].filter(function(a){return Array.isArray(a.relatedNodes)}).forEach(function(a){a.relatedNodes=a.relatedNodes.map(function(a){var c={html:a.source};return b.elementRef&&!a.fromFrame&&(c.element=a.element),(!1!==b.selectors||a.fromFrame)&&(c.target=a.selector),b.xpath&&(c.xpath=a.xpath),c})})})}function E(a,b){return Ja.reduce(function(c,d){return c[d]=(a[d]||[]).map(function(a){return b(a,d)}),c},{})}function F(a,b,c){var d=Object.assign({},b);d.nodes=(d[c]||[]).concat(),axe.constants.resultGroups.forEach(function(a){delete d[a]}),a[c].push(d)}function G(a,b,c){\"use strict\";var d=window.getComputedStyle(a,null),e=!1;return!!d&&(b.forEach(function(a){d.getPropertyValue(a.property)===a.value&&(e=!0)}),!!e||!(a.nodeName.toUpperCase()===c.toUpperCase()||!a.parentNode)&&G(a.parentNode,b,c))}function H(a,b){\"use strict\";var c;return axe._tree&&(c=axe.utils.getSelector(b)),new Error(a+\": \"+(c||b))}function I(a,b,c,d,e,f){\"use strict\";var g=axe.utils.queue();a.frames.forEach(function(e){var f={options:b,command:c,parameter:d,context:{initiator:!1,page:a.page,include:e.include||[],exclude:e.exclude||[]}};g.defer(function(a,b){var c=e.node;axe.utils.sendCommandToFrame(c,f,function(b){if(b)return a({results:b,frameElement:c,frame:axe.utils.getSelector(c)});a(null)},b)})}),g.then(function(a){e(axe.utils.mergeResults(a,b))}).catch(f)}function J(a,b){if(b=b||300,a.length>b){var c=a.indexOf(\">\");a=a.substring(0,c+1)}return a}function K(a){var b=a.outerHTML;return b||\"function\"!=typeof XMLSerializer||(b=(new XMLSerializer).serializeToString(a)),J(b||\"\")}function L(a,b,c){this._fromFrame=!!c,this.spec=c||{},b&&b.absolutePaths&&(this._options={toRoot:!0}),this.source=void 0!==this.spec.source?this.spec.source:K(a),this._element=a}function M(a,b){return{shadowId:b,children:[],actualNode:a}}function N(a){var b=[];for(a=a.firstChild;a;)b.push(a),a=a.nextSibling;return b}function O(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\";return 0!==a.length&&(a.match(/[0-9]/g)||\"\").length>=a.length/2}function P(a,b){return[a.substring(0,b),a.substring(b)]}function Q(a){var b=a,c=\"\",d=\"\",e=\"\",f=\"\",g=\"\",h=\"\";if(a.includes(\"#\")){var i=P(a,a.indexOf(\"#\")),j=Ka(i,2);a=j[0],h=j[1]}if(a.includes(\"?\")){var k=P(a,a.indexOf(\"?\")),l=Ka(k,2);a=l[0],g=l[1]}if(a.includes(\"://\")){var m=a.split(\"://\"),n=Ka(m,2);c=n[0],a=n[1];var o=P(a,a.indexOf(\"/\")),p=Ka(o,2);d=p[0],a=p[1]}else if(\"//\"===a.substr(0,2)){a=a.substr(2);var q=P(a,a.indexOf(\"/\")),r=Ka(q,2);d=r[0],a=r[1]}if(\"www.\"===d.substr(0,4)&&(d=d.substr(4)),d&&d.includes(\":\")){var s=P(d,d.indexOf(\":\")),t=Ka(s,2);d=t[0],e=t[1]}return f=a,{original:b,protocol:c,domain:d,port:e,path:f,query:g,hash:h}}function R(a,b){var c=b.name,d=void 0;if(-1!==c.indexOf(\"href\")||-1!==c.indexOf(\"src\")){var e=encodeURI(axe.utils.getFriendlyUriEnd(a.getAttribute(c)));if(!e)return;d=La(b.name)+'$=\"'+e+'\"'}else d=La(c)+'=\"'+La(b.value)+'\"';return d}function S(a,b){return a.count<b.count?-1:a.count===b.count?0:1}function T(a){return!Na.includes(a.name)&&-1===a.name.indexOf(\":\")&&(!a.value||a.value.length<Oa)}function U(a,b){var c=[],d=b.classes,e=b.tags;return a.classList&&Array.from(a.classList).forEach(function(b){var f=La(b);d[f]<e[a.nodeName]&&c.push({name:f,count:d[f],species:\"class\"})}),c.sort(S)}function V(a,b){var c=a.parentNode&&Array.from(a.parentNode.children||\"\")||[];if(c.find(function(c){return c!==a&&axe.utils.matchesSelector(c,b)}))return\":nth-child(\"+(1+c.indexOf(a))+\")\";return\"\"}function W(a){if(a.getAttribute(\"id\")){var b=a.getRootNode&&a.getRootNode()||document,c=\"#\"+La(a.getAttribute(\"id\")||\"\");return c.match(/player_uid_/)||1!==b.querySelectorAll(c).length?void 0:c}}function X(a){return void 0===Ma&&(Ma=axe.utils.isXHTML(document)),La(Ma?a.localName:a.nodeName.toLowerCase())}function Y(a,b){var c=[],d=b.attributes,e=b.tags;return a.attributes&&Array.from(a.attributes).filter(T).forEach(function(b){var f=R(a,b);f&&d[f]<e[a.nodeName]&&c.push({name:f,count:d[f],species:\"attribute\"})}),c.sort(S)}function Z(a,b){var c=\"\",d=void 0,e=U(a,b),f=Y(a,b);return e.length&&1===e[0].count?d=[e[0]]:f.length&&1===f[0].count?(d=[f[0]],c=X(a)):(d=e.concat(f),d.sort(S),d=d.slice(0,3),d.some(function(a){return\"class\"===a.species})?d.sort(function(a,b){return a.species!==b.species&&\"class\"===a.species?-1:a.species===b.species?0:1}):c=X(a)),c+=d.reduce(function(a,b){switch(b.species){case\"class\":return a+\".\"+b.name;case\"attribute\":return a+\"[\"+b.name+\"]\"}return a},\"\")}function $(a,b,c){axe._selectorData||(axe._selectorData=axe.utils.getSelectorData(axe._tree));var d=b.toRoot,e=void 0!==d&&d,f=void 0,g=void 0;do{var h=W(a);h||(h=Z(a,axe._selectorData),h+=V(a,h)),f=f?h+\" > \"+f:h,g=g?g.filter(function(a){return axe.utils.matchesSelector(a,f)}):Array.from(c.querySelectorAll(f)),a=a.parentElement}while((g.length>1||e)&&a&&11!==a.nodeType);return 1===g.length?f:-1!==f.indexOf(\" > \")?\":root\"+f.substring(f.indexOf(\" > \")):\":root\"}function _(a,b){var c,d;if(!a)return[];if(!b&&9===a.nodeType)return b=[{str:\"html\"}];if(b=b||[],a.parentNode&&a.parentNode!==a&&(b=_(a.parentNode,b)),a.previousSibling){d=1,c=a.previousSibling;do{1===c.nodeType&&c.nodeName===a.nodeName&&d++,c=c.previousSibling}while(c);1===d&&(d=null)}else if(a.nextSibling){c=a.nextSibling;do{1===c.nodeType&&c.nodeName===a.nodeName?(d=1,c=null):(d=null,c=c.previousSibling)}while(c)}if(1===a.nodeType){var e={};e.str=a.nodeName.toLowerCase();var f=a.getAttribute&&axe.utils.escapeSelector(a.getAttribute(\"id\"));f&&1===a.ownerDocument.querySelectorAll(\"#\"+f).length&&(e.id=a.getAttribute(\"id\")),d>1&&(e.count=d),b.push(e)}return b}function aa(a){return a.reduce(function(a,b){return b.id?\"/\"+b.str+\"[@id='\"+b.id+\"']\":a+\"/\"+b.str+(b.count>0?\"[\"+b.count+\"]\":\"\")},\"\")}function ba(a){\"use strict\";if(Pa&&Pa.parentNode)return void 0===Pa.styleSheet?Pa.appendChild(document.createTextNode(a)):Pa.styleSheet.cssText+=a,Pa;if(a){var b=document.head||document.getElementsByTagName(\"head\")[0];return Pa=document.createElement(\"style\"),Pa.type=\"text/css\",void 0===Pa.styleSheet?Pa.appendChild(document.createTextNode(a)):Pa.styleSheet.cssText=a,b.appendChild(Pa),Pa}}function ca(a,b,c,d){\"use strict\";var e=axe.utils.getXpath(c),f={element:c,selector:d,xpath:e};a.forEach(function(a){a.node=axe.utils.DqElement.fromFrame(a.node,b,f);var c=axe.utils.getAllChecks(a);c.length&&c.forEach(function(a){a.relatedNodes=a.relatedNodes.map(function(a){return axe.utils.DqElement.fromFrame(a,b,f)})})})}function da(a,b){\"use strict\";for(var c,d,e=b[0].node,f=0,g=a.length;f<g;f++)if(d=a[f].node,(c=axe.utils.nodeSorter({actualNode:d.element},{actualNode:e.element}))>0||0===c&&e.selector.length<d.selector.length)return void a.splice.apply(a,[f,0].concat(b));a.push.apply(a,b)}function ea(a){\"use strict\";return a&&a.results?Array.isArray(a.results)?a.results.length?a.results:null:[a.results]:null}function fa(a,b){function c(a){return a.incomplete&&a.incomplete.default?a.incomplete.default:Aa.incompleteFallbackMessage()}if(!a||!a.missingData)return c(b);try{var d=b.incomplete[a.missingData[0].reason];if(!d)throw new Error;return d}catch(d){return\"string\"==typeof a.missingData?b.incomplete[a.missingData]:c(b)}}function ga(a,b){\"use strict\";return function(c){var d=a[c.id]||{},e=d.messages||{},f=Object.assign({},d);delete f.messages,void 0===c.result?\"object\"===za(e.incomplete)?f.message=function(){return fa(c.data,e)}:f.message=e.incomplete:f.message=c.result===b?e.pass:e.fail,axe.utils.extendMetaData(c,f)}}function ha(a,b){return 1===a.nodeType&&(\"*\"===b.tag||a.nodeName.toLowerCase()===b.tag)}function ia(a,b){return!b.classes||b.classes.reduce(function(b,c){return b&&a.className&&a.className.match(c.regexp)},!0)}function ja(a,b){return!b.attributes||b.attributes.reduce(function(b,c){var d=a.getAttribute(c.key);return b&&null!==d&&(!c.value||c.test(d))},!0)}function ka(a,b){return!b.id||a.id===b.id}function la(a,b){return!(b.pseudos&&!b.pseudos.reduce(function(b,c){if(\"not\"===c.name)return b&&!Sa([a],c.expressions,!1).length;throw new Error(\"the pseudo selector \"+c.name+\" has not yet been implemented\")},!0))}function ma(a){/*! Credit Mootools Copyright Mootools, MIT License */\nif(a)return a.map(function(a){var b,c,d=a.name.replace(Ua,\"\"),e=(a.value||\"\").replace(Ua,\"\");switch(a.operator){case\"^=\":c=new RegExp(\"^\"+Ta(e));break;case\"$=\":c=new RegExp(Ta(e)+\"$\");break;case\"~=\":c=new RegExp(\"(^|\\\\s)\"+Ta(e)+\"(\\\\s|$)\");break;case\"|=\":c=new RegExp(\"^\"+Ta(e)+\"(-|$)\");break;case\"=\":b=function(a){return e===a};break;case\"*=\":b=function(a){return a&&a.includes(e)};break;case\"!=\":b=function(a){return e!==a};break;default:b=function(a){return!!a}}return\"\"===e&&/^[*$^]=$/.test(a.operator)&&(b=function(){return!1}),b||(b=function(a){return a&&c.test(a)}),{key:d,value:e,test:b}})}function na(a){if(a)return a.map(function(a){return a=a.replace(Ua,\"\"),{value:a,regexp:new RegExp(\"(^|\\\\s)\"+Ta(a)+\"(\\\\s|$)\")}})}function oa(a){if(a)return a.map(function(a){var b;return\"not\"===a.name&&(b=axe.utils.cssParser.parse(a.value),b=b.selectors?b.selectors:[b],b=Ra(b)),{name:a.name,expressions:b,value:a.value}})}function pa(a,b,c,d){var e={nodes:a.slice(),anyLevel:b,thisLevel:c,parentShadowId:d};return e.nodes.reverse(),e}function qa(a,b){return ha(a.actualNode,b[0])&&ia(a.actualNode,b[0])&&ja(a.actualNode,b[0])&&ka(a.actualNode,b[0])&&la(a,b[0])}function ra(a,b){\"use strict\";var c,d,e=axe._audit&&axe._audit.tagExclude?axe._audit.tagExclude:[];return b.hasOwnProperty(\"include\")||b.hasOwnProperty(\"exclude\")?(c=b.include||[],c=Array.isArray(c)?c:[c],d=b.exclude||[],d=Array.isArray(d)?d:[d],d=d.concat(e.filter(function(a){return-1===c.indexOf(a)}))):(c=Array.isArray(b)?b:[b],d=e.filter(function(a){return-1===c.indexOf(a)})),!!(c.some(function(b){return-1!==a.tags.indexOf(b)})||0===c.length&&!1!==a.enabled)&&d.every(function(b){return-1===a.tags.indexOf(b)})}function sa(a){var b=window.getComputedStyle(a),c=\"visible\"===b.getPropertyValue(\"overflow-y\"),d=\"visible\"===b.getPropertyValue(\"overflow-x\");if(!c&&a.scrollHeight>a.clientHeight||!d&&a.scrollWidth>a.clientWidth)return{elm:a,top:a.scrollTop,left:a.scrollLeft}}function ta(a,b,c){if(a===window)return a.scroll(b,c);a.scrollTop=b,a.scrollLeft=c}function ua(a){return Array.from(a.children).reduce(function(a,b){var c=sa(b);return c&&a.push(c),a.concat(ua(b))},[])}function va(a){\"use strict\";return a.sort(function(a,b){return axe.utils.contains(a,b)?1:-1})[0]}function wa(a,b){\"use strict\";var c=b.include&&va(b.include.filter(function(b){return axe.utils.contains(b,a)})),d=b.exclude&&va(b.exclude.filter(function(b){return axe.utils.contains(b,a)}));return!!(!d&&c||d&&axe.utils.contains(d,c))}function xa(a,b){\"use strict\";var c;if(0===a.length)return b;a.length<b.length&&(c=a,a=b,b=c);for(var d=0,e=b.length;d<e;d++)a.includes(b[d])||a.push(b[d]);return a}function ya(a){return a.reduce(function(a,b){return a.length&&a[a.length-1].actualNode.contains(b.actualNode)||a.push(b),a},[])}var document=window.document,za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a},axe=axe||{};axe.version=\"3.0.0-beta.2\",\"function\"==typeof define&&define.amd&&define([],function(){\"use strict\";return axe}),\"object\"===(\"undefined\"==typeof module?\"undefined\":za(module))&&module.exports&&\"function\"==typeof a.toString&&(axe.source=\"(\"+a.toString()+')(typeof window === \"object\" ? window : this);',module.exports=axe),\"function\"==typeof window.getComputedStyle&&(window.axe=axe);var commons;b.prototype=Object.create(Error.prototype),b.prototype.constructor=b;var utils=axe.utils={},Aa={},za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};e.prototype._init=function(){var a=c(this.defaultConfig);axe.commons=commons=a.commons,this.reporter=a.reporter,this.commands={},this.rules=[],this.checks={},d(a.rules,this,\"addRule\"),d(a.checks,this,\"addCheck\"),this.data={},this.data.checks=a.data&&a.data.checks||{},this.data.rules=a.data&&a.data.rules||{},this.data.failureSummaries=a.data&&a.data.failureSummaries||{},this.data.incompleteFallbackMessage=a.data&&a.data.incompleteFallbackMessage||\"\",this._constructHelpUrls()},e.prototype.registerCommand=function(a){\"use strict\";this.commands[a.id]=a.callback},e.prototype.addRule=function(a){\"use strict\";a.metadata&&(this.data.rules[a.id]=a.metadata);var b=this.getRule(a.id);b?b.configure(a):this.rules.push(new q(a,this))},e.prototype.addCheck=function(a){\"use strict\";var b=a.metadata;\"object\"===(void 0===b?\"undefined\":za(b))&&(this.data.checks[a.id]=b,\"object\"===za(b.messages)&&Object.keys(b.messages).filter(function(a){return b.messages.hasOwnProperty(a)&&\"string\"==typeof b.messages[a]}).forEach(function(a){0===b.messages[a].indexOf(\"function\")&&(b.messages[a]=new Function(\"return \"+b.messages[a]+\";\")())})),this.checks[a.id]?this.checks[a.id].configure(a):this.checks[a.id]=new i(a)},e.prototype.run=function(a,b,c,d){\"use strict\";this.validateOptions(b),axe._tree=axe.utils.getFlattenedTree(document.documentElement),axe._selectCache=[];var e=axe.utils.queue();this.rules.forEach(function(c){if(axe.utils.ruleShouldRun(c,a,b)){if(b.performanceTimer){var d=\"mark_rule_end_\"+c.id,f=\"mark_rule_start_\"+c.id;axe.utils.performanceTimer.mark(f)}e.defer(function(e,g){c.run(a,b,function(a){b.performanceTimer&&(axe.utils.performanceTimer.mark(d),axe.utils.performanceTimer.measure(\"rule_\"+c.id,f,d)),e(a)},function(a){if(b.debug)g(a);else{var d=Object.assign(new p(c),{result:axe.constants.CANTTELL,description:\"An error occured while running this rule\",message:a.message,stack:a.stack,error:a});e(d)}})})}}),e.then(function(a){axe._selectCache=void 0,c(a.filter(function(a){return!!a}))}).catch(d)},e.prototype.after=function(a,b){\"use strict\";var c=this.rules;return a.map(function(a){return axe.utils.findBy(c,\"id\",a.id).after(a,b)})},e.prototype.getRule=function(a){return this.rules.find(function(b){return b.id===a})},e.prototype.validateOptions=function(a){\"use strict\";var b=this;if(\"object\"===za(a.runOnly)){var c=a.runOnly;if(\"rule\"===c.type&&Array.isArray(c.value))c.value.forEach(function(a){if(!b.getRule(a))throw new Error(\"unknown rule `\"+a+\"` in options.runOnly\")});else if(Array.isArray(c.value)&&c.value.length>0){var d=[].concat(c.value);if(b.rules.forEach(function(a){var b,c,e;if(d)for(c=0,e=a.tags.length;c<e;c++)-1!==(b=d.indexOf(a.tags[c]))&&d.splice(b,1)}),0!==d.length)throw new Error(\"could not find tags `\"+d.join(\"`, `\")+\"`\")}}return\"object\"===za(a.rules)&&Object.keys(a.rules).forEach(function(a){if(!b.getRule(a))throw new Error(\"unknown rule `\"+a+\"` in options.rules\")}),a},e.prototype.setBranding=function(a){\"use strict\";var b={brand:this.brand,application:this.application};a&&a.hasOwnProperty(\"brand\")&&a.brand&&\"string\"==typeof a.brand&&(this.brand=a.brand),a&&a.hasOwnProperty(\"application\")&&a.application&&\"string\"==typeof a.application&&(this.application=a.application),this._constructHelpUrls(b)},e.prototype._constructHelpUrls=function(){var a=this,b=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,c=(axe.version.match(/^[1-9][0-9]*\\.[0-9]+/)||[\"x.y\"])[0];this.rules.forEach(function(d){a.data.rules[d.id]||(a.data.rules[d.id]={});var e=a.data.rules[d.id];(\"string\"!=typeof e.helpUrl||b&&e.helpUrl===f(b,d.id,c))&&(e.helpUrl=f(a,d.id,c))})},e.prototype.resetRulesAndChecks=function(){\"use strict\";this._init()},i.prototype.enabled=!0,i.prototype.run=function(a,b,c,d){\"use strict\";b=b||{};var e=b.hasOwnProperty(\"enabled\")?b.enabled:this.enabled,f=b.options||this.options;if(e){var h,i=new g(this),j=axe.utils.checkHelper(i,b,c,d);try{h=this.evaluate.call(j,a.actualNode,f,a)}catch(a){return void d(a)}j.isAsync||(i.result=h,setTimeout(function(){c(i)},0))}else c(null)},i.prototype.configure=function(a){var b=this;[\"options\",\"enabled\"].filter(function(b){return a.hasOwnProperty(b)}).forEach(function(c){return b[c]=a[c]}),[\"evaluate\",\"after\"].filter(function(b){return a.hasOwnProperty(b)}).forEach(function(c){return b[c]=h(a[c])})};var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};q.prototype.matches=function(){\"use strict\";return!0},q.prototype.gather=function(a){\"use strict\";var b=axe.utils.select(this.selector,a);return this.excludeHidden?b.filter(function(a){return!axe.utils.isHidden(a.actualNode)}):b},q.prototype.runChecks=function(a,b,c,d,e){\"use strict\";var f=this,g=axe.utils.queue();this[a].forEach(function(a){var d=f._audit.checks[a.id||a],e=axe.utils.getCheckOption(d,f.id,c);g.defer(function(a,c){d.run(b,e,a,c)})}),g.then(function(b){b=b.filter(function(a){return a}),d({type:a,results:b})}).catch(e)},q.prototype.run=function(a,c,d,e){var f=this,g=axe.utils.queue(),h=new p(this),i=\"mark_runchecks_start_\"+this.id,j=\"mark_runchecks_end_\"+this.id,k=void 0;try{k=this.gather(a).filter(function(a){return f.matches(a.actualNode,a)})}catch(a){return void e(new b({cause:a,ruleId:this.id}))}c.performanceTimer&&(axe.log(\"gather (\",k.length,\"):\",axe.utils.performanceTimer.timeElapsed()+\"ms\"),axe.utils.performanceTimer.mark(i)),k.forEach(function(a){g.defer(function(b,d){var e=axe.utils.queue();e.defer(function(b,d){f.runChecks(\"any\",a,c,b,d)}),e.defer(function(b,d){f.runChecks(\"all\",a,c,b,d)}),e.defer(function(b,d){f.runChecks(\"none\",a,c,b,d)}),e.then(function(d){if(d.length){var e=!1,f={};d.forEach(function(a){var b=a.results.filter(function(a){return a});f[a.type]=b,b.length&&(e=!0)}),e&&(f.node=new axe.utils.DqElement(a.actualNode,c),h.nodes.push(f))}b()}).catch(function(a){return d(a)})})}),c.performanceTimer&&(axe.utils.performanceTimer.mark(j),axe.utils.performanceTimer.measure(\"runchecks_\"+this.id,i,j)),g.then(function(){return d(h)}).catch(function(a){return e(a)})},q.prototype.after=function(a,b){\"use strict\";var c=r(this),d=this.id;return c.forEach(function(c){var e=s(a.nodes,c.id),f=axe.utils.getCheckOption(c,d,b),g=c.after(e,f);e.forEach(function(a){-1===g.indexOf(a)&&(a.filtered=!0)})}),a.nodes=u(a),a},q.prototype.configure=function(a){\"use strict\";a.hasOwnProperty(\"selector\")&&(this.selector=a.selector),a.hasOwnProperty(\"excludeHidden\")&&(this.excludeHidden=\"boolean\"!=typeof a.excludeHidden||a.excludeHidden),a.hasOwnProperty(\"enabled\")&&(this.enabled=\"boolean\"!=typeof a.enabled||a.enabled),a.hasOwnProperty(\"pageLevel\")&&(this.pageLevel=\"boolean\"==typeof a.pageLevel&&a.pageLevel),a.hasOwnProperty(\"any\")&&(this.any=a.any),a.hasOwnProperty(\"all\")&&(this.all=a.all),a.hasOwnProperty(\"none\")&&(this.none=a.none),a.hasOwnProperty(\"tags\")&&(this.tags=a.tags),a.hasOwnProperty(\"matches\")&&(\"string\"==typeof a.matches?this.matches=new Function(\"return \"+a.matches+\";\")():this.matches=a.matches)},function(axe){var a=[{name:\"NA\",value:\"inapplicable\",priority:0,group:\"inapplicable\"},{name:\"PASS\",value:\"passed\",priority:1,group:\"passes\"},{name:\"CANTTELL\",value:\"cantTell\",priority:2,group:\"incomplete\"},{name:\"FAIL\",value:\"failed\",priority:3,group:\"violations\"}],b={helpUrlBase:\"https://dequeuniversity.com/rules/\",results:[],resultGroups:[],resultGroupMap:{},impact:Object.freeze([\"minor\",\"moderate\",\"serious\",\"critical\"])};a.forEach(function(a){var c=a.name,d=a.value,e=a.priority,f=a.group;b[c]=d,b[c+\"_PRIO\"]=e,b[c+\"_GROUP\"]=f,b.results[e]=d,b.resultGroups[e]=f,b.resultGroupMap[d]=f}),Object.freeze(b.results),Object.freeze(b.resultGroups),Object.freeze(b.resultGroupMap),Object.freeze(b),Object.defineProperty(axe,\"constants\",{value:b,enumerable:!0,configurable:!1,writable:!1})}(axe);var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};axe.log=function(){\"use strict\";\"object\"===(\"undefined\"==typeof console?\"undefined\":za(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},axe.cleanup=v,axe.configure=w,axe.getRules=function(a){\"use strict\";a=a||[];var b=a.length?axe._audit.rules.filter(function(b){return!!a.filter(function(a){return-1!==b.tags.indexOf(a)}).length}):axe._audit.rules,c=axe._audit.data.rules||{};return b.map(function(a){var b=c[a.id]||{};return{ruleId:a.id,description:b.description,help:b.help,helpUrl:b.helpUrl,tags:a.tags}})},axe._load=function(a){\"use strict\";axe.utils.respondable.subscribe(\"axe.ping\",function(a,b,c){c({axe:!0})}),axe.utils.respondable.subscribe(\"axe.start\",x),axe._audit=new e(a)};var axe=axe||{};axe.plugins={},y.prototype.run=function(){\"use strict\";return this._run.apply(this,arguments)},y.prototype.collect=function(){\"use strict\";return this._collect.apply(this,arguments)},y.prototype.cleanup=function(a){\"use strict\";var b=axe.utils.queue(),c=this;Object.keys(this._registry).forEach(function(a){b.defer(function(b){c._registry[a].cleanup(b)})}),b.then(function(){a()})},y.prototype.add=function(a){\"use strict\";this._registry[a.id]=a},axe.registerPlugin=function(a){\"use strict\";axe.plugins[a.id]=new y(a)};var Ba,Ca={};axe.getReporter=function(a){\"use strict\";return\"string\"==typeof a&&Ca[a]?Ca[a]:\"function\"==typeof a?a:Ba},axe.addReporter=function(a,b,c){\"use strict\";Ca[a]=b,c&&(Ba=b)},axe.reset=z,axe._runRules=A;var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a},Da=function(){};axe.run=function(a,b,c){\"use strict\";if(!axe._audit)throw new Error(\"No audit configured\");var d=C(a,b,c);a=d.context,b=d.options,c=d.callback,b.reporter=b.reporter||axe._audit.reporter||\"v1\",b.performanceTimer&&axe.utils.performanceTimer.start();var e=void 0,f=Da,g=Da;return window.Promise&&c===Da&&(e=new Promise(function(a,b){f=b,g=a})),axe._runRules(a,b,function(a){var d=function(a){try{c(null,a)}catch(a){axe.log(a)}g(a)};b.performanceTimer&&axe.utils.performanceTimer.end();try{var e=axe.getReporter(b.reporter),h=e(a,b,d);axe._selectorData=void 0,axe._tree=void 0,void 0!==h&&d(h)}catch(a){c(a),f(a)}},function(a){c(a),f(a)}),e},Aa.failureSummary=function(a){\"use strict\";var b={};return b.none=a.none.concat(a.all),b.any=a.any,Object.keys(b).map(function(a){if(b[a].length){var c=axe._audit.data.failureSummaries[a];return c&&\"function\"==typeof c.failureMessage?c.failureMessage(b[a].map(function(a){return a.message||\"\"})):void 0}}).filter(function(a){return void 0!==a}).join(\"\\n\\n\")},Aa.incompleteFallbackMessage=function(){\"use strict\";return axe._audit.data.incompleteFallbackMessage()};var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a},Ea=axe.constants.resultGroups;Aa.processAggregate=function(a,b){var c=axe.utils.aggregateResult(a);return c.timestamp=(new Date).toISOString(),c.url=window.location.href,Ea.forEach(function(a){b.resultTypes&&!b.resultTypes.includes(a)&&(c[a]||[]).forEach(function(a){Array.isArray(a.nodes)&&a.nodes.length>0&&(a.nodes=[a.nodes[0]])}),c[a]=(c[a]||[]).map(function(a){return a=Object.assign({},a),Array.isArray(a.nodes)&&a.nodes.length>0&&(a.nodes=a.nodes.map(function(a){return\"object\"===za(a.node)&&(a.html=a.node.source,b.elementRef&&!a.node.fromFrame&&(a.element=a.node.element),(!1!==b.selectors||a.node.fromFrame)&&(a.target=a.node.selector),b.xpath&&(a.xpath=a.node.xpath)),delete a.result,delete a.node,D(a,b),a})),Ea.forEach(function(b){return delete a[b]}),delete a.pageLevel,delete a.result,a})}),c},axe.addReporter(\"na\",function(a,b,c){\"use strict\";\"function\"==typeof b&&(c=b,b={});var d=Aa.processAggregate(a,b);c({violations:d.violations,passes:d.passes,incomplete:d.incomplete,inapplicable:d.inapplicable,timestamp:d.timestamp,url:d.url})}),axe.addReporter(\"no-passes\",function(a,b,c){\"use strict\";\"function\"==typeof b&&(c=b,b={}),b.resultTypes=[\"violations\"];var d=Aa.processAggregate(a,b);c({violations:d.violations,timestamp:d.timestamp,url:d.url})}),axe.addReporter(\"raw\",function(a,b,c){\"use strict\";\"function\"==typeof b&&(c=b,b={}),c(a)}),axe.addReporter(\"v1\",function(a,b,c){\"use strict\";\"function\"==typeof b&&(c=b,b={});var d=Aa.processAggregate(a,b);d.violations.forEach(function(a){return a.nodes.forEach(function(a){a.failureSummary=Aa.failureSummary(a)})}),c({violations:d.violations,passes:d.passes,incomplete:d.incomplete,inapplicable:d.inapplicable,timestamp:d.timestamp,url:d.url})}),axe.addReporter(\"v2\",function(a,b,c){\"use strict\";\"function\"==typeof b&&(c=b,b={});var d=Aa.processAggregate(a,b);c({violations:d.violations,passes:d.passes,incomplete:d.incomplete,inapplicable:d.inapplicable,timestamp:d.timestamp,url:d.url})},!0),axe.utils.aggregate=function(a,b,c){b=b.slice(),c&&b.push(c);var d=b.map(function(b){return a.indexOf(b)}).sort();return a[d.pop()]};var Fa=axe.constants,Ga=Fa.CANTTELL_PRIO,Ha=Fa.FAIL_PRIO,Ia=[];Ia[axe.constants.PASS_PRIO]=!0,Ia[axe.constants.CANTTELL_PRIO]=null,Ia[axe.constants.FAIL_PRIO]=!1;var Ja=[\"any\",\"all\",\"none\"];axe.utils.aggregateChecks=function(a){var b=Object.assign({},a);E(b,function(a,b){var c=Ia.indexOf(a.result);a.priority=-1!==c?c:axe.constants.CANTTELL_PRIO,\"none\"===b&&(a.priority=4-a.priority)});var c={all:b.all.reduce(function(a,b){return Math.max(a,b.priority)},0),none:b.none.reduce(function(a,b){return Math.max(a,b.priority)},0),any:b.any.reduce(function(a,b){return Math.min(a,b.priority)},4)%4};b.priority=Math.max(c.all,c.none,c.any);var d=[];return Ja.forEach(function(a){b[a]=b[a].filter(function(d){return d.priority===b.priority&&d.priority===c[a]}),b[a].forEach(function(a){return d.push(a.impact)})}),[Ga,Ha].includes(b.priority)?b.impact=axe.utils.aggregate(axe.constants.impact,d):b.impact=null,E(b,function(a){delete a.result,delete a.priority}),b.result=axe.constants.results[b.priority],delete b.priority,b},function(){axe.utils.aggregateNodeResults=function(a){var b={};if((a=a.map(function(a){if(a.any&&a.all&&a.none)return axe.utils.aggregateChecks(a);if(Array.isArray(a.node))return axe.utils.finalizeRuleResult(a);throw new TypeError(\"Invalid Result type\")}))&&a.length){var c=a.map(function(a){return a.result});b.result=axe.utils.aggregate(axe.constants.results,c,b.result)}else b.result=\"inapplicable\";axe.constants.resultGroups.forEach(function(a){return b[a]=[]}),a.forEach(function(a){var c=axe.constants.resultGroupMap[a.result];b[c].push(a)});var d=axe.constants.FAIL_GROUP;if(0===b[d].length&&(d=axe.constants.CANTTELL_GROUP),b[d].length>0){var e=b[d].map(function(a){return a.impact});b.impact=axe.utils.aggregate(axe.constants.impact,e)||null}else b.impact=null;return b}}(),axe.utils.aggregateResult=function(a){var b={};return axe.constants.resultGroups.forEach(function(a){return b[a]=[]}),a.forEach(function(a){a.error?F(b,a,axe.constants.CANTTELL_GROUP):a.result===axe.constants.NA?F(b,a,axe.constants.NA_GROUP):axe.constants.resultGroups.forEach(function(c){Array.isArray(a[c])&&a[c].length>0&&F(b,a,c)})}),b},axe.utils.areStylesSet=G,axe.utils.checkHelper=function(a,b,c,d){\"use strict\";return{isAsync:!1,async:function(){return this.isAsync=!0,function(b){b instanceof Error==!1?(a.result=b,c(a)):d(b)}},data:function(b){a.data=b},relatedNodes:function(c){c=c instanceof Node?[c]:axe.utils.toArray(c),a.relatedNodes=c.map(function(a){return new axe.utils.DqElement(a,b)})}}};var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};axe.utils.clone=function(a){\"use strict\";var b,c,d=a;if(null!==a&&\"object\"===(void 0===a?\"undefined\":za(a)))if(Array.isArray(a))for(d=[],b=0,c=a.length;b<c;b++)d[b]=axe.utils.clone(a[b]);else{d={};for(b in a)d[b]=axe.utils.clone(a[b])}return d},axe.utils.sendCommandToFrame=function(a,b,c,d){\"use strict\";var e=a.contentWindow;if(!e)return axe.log(\"Frame does not have a content window\",a),void c(null);var f=setTimeout(function(){f=setTimeout(function(){var e=H(\"No response from frame\",a);b.debug?d(e):(axe.log(e),c(null))},0)},500);axe.utils.respondable(e,\"axe.ping\",null,void 0,function(){clearTimeout(f);var g=b.options&&b.options.frameWaitTime||6e4;f=setTimeout(function(){d(H(\"Axe in frame timed out\",a))},g),axe.utils.respondable(e,\"axe.start\",b,void 0,function(a){clearTimeout(f),a instanceof Error==!1?c(a):d(a)})})},axe.utils.collectResultsFromFrames=I,axe.utils.contains=function(a,b){\"use strict\";function c(a,b){return a.shadowId===b.shadowId||!!a.children.find(function(a){return c(a,b)})}return a.shadowId||b.shadowId?c(a,b):\"function\"==typeof a.actualNode.contains?a.actualNode.contains(b.actualNode):!!(16&a.actualNode.compareDocumentPosition(b.actualNode))},function(axe){/*!\n  * The copyright below covers the code within this function block only\n  *\n  * Copyright (c) 2013 Dulin Marat\n  * \n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n  * \n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n  * \n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\nfunction a(){this.pseudos={},this.attrEqualityMods={},this.ruleNestingOperators={},this.substitutesEnabled=!1}function b(a){return a>=\"a\"&&a<=\"z\"||a>=\"A\"&&a<=\"Z\"||\"-\"===a||\"_\"===a}function c(a){return a>=\"a\"&&a<=\"z\"||a>=\"A\"&&a<=\"Z\"||a>=\"0\"&&a<=\"9\"||\"-\"===a||\"_\"===a}function d(a){return a>=\"a\"&&a<=\"f\"||a>=\"A\"&&a<=\"F\"||a>=\"0\"&&a<=\"9\"}function e(a,e,g,j,k,l){var m,n,o,p,q;return p=a.length,m=null,o=function(b,c){var f,g,h;for(h=\"\",e++,m=a.charAt(e);e<p;){if(m===b)return e++,h;if(\"\\\\\"===m)if(e++,(m=a.charAt(e))===b)h+=b;else if(f=c[m])h+=f;else{if(d(m)){for(g=m,e++,m=a.charAt(e);d(m);)g+=m,e++,m=a.charAt(e);\" \"===m&&(e++,m=a.charAt(e)),h+=String.fromCharCode(parseInt(g,16));continue}h+=m}else h+=m;e++,m=a.charAt(e)}return h},n=function(){var b=\"\";for(m=a.charAt(e);e<p;){if(c(m))b+=m;else{if(\"\\\\\"!==m)return b;if(++e>=p)throw Error(\"Expected symbol but end of file reached.\");if(m=a.charAt(e),f[m])b+=m;else{if(d(m)){var g=m;for(e++,m=a.charAt(e);d(m);)g+=m,e++,m=a.charAt(e);\" \"===m&&(e++,m=a.charAt(e)),b+=String.fromCharCode(parseInt(g,16));continue}b+=m}}e++,m=a.charAt(e)}return b},q=function(){m=a.charAt(e);for(var b=!1;\" \"===m||\"\\t\"===m||\"\\n\"===m||\"\\r\"===m||\"\\f\"===m;)b=!0,e++,m=a.charAt(e);return b},this.parse=function(){var b=this.parseSelector();if(e<p)throw Error('Rule expected but \"'+a.charAt(e)+'\" found.');return b},this.parseSelector=function(){var b,c=b=this.parseSingleSelector();for(m=a.charAt(e);\",\"===m;){if(e++,q(),\"selectors\"!==b.type&&(b={type:\"selectors\",selectors:[c]}),!(c=this.parseSingleSelector()))throw Error('Rule expected after \",\".');b.selectors.push(c)}return b},this.parseSingleSelector=function(){q();var b={type:\"ruleSet\"},c=this.parseRule();if(!c)return null;for(var d=b;c&&(c.type=\"rule\",d.rule=c,d=c,q(),m=a.charAt(e),!(e>=p||\",\"===m||\")\"===m));)if(k[m]){var f=m;if(e++,q(),!(c=this.parseRule()))throw Error('Rule expected after \"'+f+'\".');c.nestingOperator=f}else(c=this.parseRule())&&(c.nestingOperator=null);return b},this.parseRule=function(){for(var c=null;e<p;)if(\"*\"===(m=a.charAt(e)))e++,(c=c||{}).tagName=\"*\";else if(b(m)||\"\\\\\"===m)(c=c||{}).tagName=n();else if(\".\"===m)e++,c=c||{},(c.classNames=c.classNames||[]).push(n());else if(\"#\"===m)e++,(c=c||{}).id=n();else if(\"[\"===m){e++,q();var d={name:n()};if(q(),\"]\"===m)e++;else{var f=\"\";if(j[m]&&(f=m,e++,m=a.charAt(e)),e>=p)throw Error('Expected \"=\" but end of file reached.');if(\"=\"!==m)throw Error('Expected \"=\" but \"'+m+'\" found.');d.operator=f+\"=\",e++,q();var k=\"\";if(d.valueType=\"string\",'\"'===m)k=o('\"',i);else if(\"'\"===m)k=o(\"'\",h);else if(l&&\"$\"===m)e++,k=n(),d.valueType=\"substitute\";else{for(;e<p&&\"]\"!==m;)k+=m,e++,m=a.charAt(e);k=k.trim()}if(q(),e>=p)throw Error('Expected \"]\" but end of file reached.');if(\"]\"!==m)throw Error('Expected \"]\" but \"'+m+'\" found.');e++,d.value=k}c=c||{},(c.attrs=c.attrs||[]).push(d)}else{if(\":\"!==m)break;e++;var r=n(),s={name:r};if(\"(\"===m){e++;var t=\"\";if(q(),\"selector\"===g[r])s.valueType=\"selector\",t=this.parseSelector();else{if(s.valueType=g[r]||\"string\",'\"'===m)t=o('\"',i);else if(\"'\"===m)t=o(\"'\",h);else if(l&&\"$\"===m)e++,t=n(),s.valueType=\"substitute\";else{for(;e<p&&\")\"!==m;)t+=m,e++,m=a.charAt(e);t=t.trim()}q()}if(e>=p)throw Error('Expected \")\" but end of file reached.');if(\")\"!==m)throw Error('Expected \")\" but \"'+m+'\" found.');e++,s.value=t}c=c||{},(c.pseudos=c.pseudos||[]).push(s)}return c},this}a.prototype.registerSelectorPseudos=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],this.pseudos[a]=\"selector\";return this},a.prototype.unregisterSelectorPseudos=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],delete this.pseudos[a];return this},a.prototype.registerNumericPseudos=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],this.pseudos[a]=\"numeric\";return this},a.prototype.unregisterNumericPseudos=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],delete this.pseudos[a];return this},a.prototype.registerNestingOperators=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],this.ruleNestingOperators[a]=!0;return this},a.prototype.unregisterNestingOperators=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],delete this.ruleNestingOperators[a];return this},a.prototype.registerAttrEqualityMods=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],this.attrEqualityMods[a]=!0;return this},a.prototype.unregisterAttrEqualityMods=function(a){for(var b=0,c=arguments.length;b<c;b++)a=arguments[b],delete this.attrEqualityMods[a];return this},a.prototype.enableSubstitutes=function(){return this.substitutesEnabled=!0,this},a.prototype.disableSubstitutes=function(){return this.substitutesEnabled=!1,this};var f={\"!\":!0,'\"':!0,\"#\":!0,$:!0,\"%\":!0,\"&\":!0,\"'\":!0,\"(\":!0,\")\":!0,\"*\":!0,\"+\":!0,\",\":!0,\".\":!0,\"/\":!0,\";\":!0,\"<\":!0,\"=\":!0,\">\":!0,\"?\":!0,\"@\":!0,\"[\":!0,\"\\\\\":!0,\"]\":!0,\"^\":!0,\"`\":!0,\"{\":!0,\"|\":!0,\"}\":!0,\"~\":!0},g={\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\f\":\"\\\\f\",\"\\v\":\"\\\\v\"},h={n:\"\\n\",r:\"\\r\",t:\"\\t\",f:\"\\f\",\"\\\\\":\"\\\\\",\"'\":\"'\"},i={n:\"\\n\",r:\"\\r\",t:\"\\t\",f:\"\\f\",\"\\\\\":\"\\\\\",'\"':'\"'};a.prototype.parse=function(a){return new e(a,0,this.pseudos,this.attrEqualityMods,this.ruleNestingOperators,this.substitutesEnabled).parse()},a.prototype.escapeIdentifier=function(a){for(var b=\"\",c=0,d=a.length;c<d;){var e=a.charAt(c);if(f[e])b+=\"\\\\\"+e;else if(\"_\"===e||\"-\"===e||e>=\"A\"&&e<=\"Z\"||e>=\"a\"&&e<=\"z\"||0!==c&&e>=\"0\"&&e<=\"9\")b+=e;else{var g=e.charCodeAt(0);if(55296==(63488&g)){var h=a.charCodeAt(c++);if(55296!=(64512&g)||56320!=(64512&h))throw Error(\"UCS-2(decode): illegal sequence\");g=((1023&g)<<10)+(1023&h)+65536}b+=\"\\\\\"+g.toString(16)+\" \"}c++}return b},a.prototype.escapeStr=function(a){for(var b,c,d=\"\",e=0,f=a.length;e<f;)b=a.charAt(e),'\"'===b?b='\\\\\"':\"\\\\\"===b?b=\"\\\\\\\\\":(c=g[b])&&(b=c),d+=b,e++;return'\"'+d+'\"'},a.prototype.render=function(a){return this._renderEntity(a).trim()},a.prototype._renderEntity=function(a){var b,c,d;switch(d=\"\",a.type){case\"ruleSet\":for(b=a.rule,c=[];b;)b.nestingOperator&&c.push(b.nestingOperator),c.push(this._renderEntity(b)),b=b.rule;d=c.join(\" \");break;case\"selectors\":d=a.selectors.map(this._renderEntity,this).join(\", \");break;case\"rule\":a.tagName&&(d=\"*\"===a.tagName?\"*\":this.escapeIdentifier(a.tagName)),a.id&&(d+=\"#\"+this.escapeIdentifier(a.id)),a.classNames&&(d+=a.classNames.map(function(a){return\".\"+this.escapeIdentifier(a)},this).join(\"\")),a.attrs&&(d+=a.attrs.map(function(a){return a.operator?\"substitute\"===a.valueType?\"[\"+this.escapeIdentifier(a.name)+a.operator+\"$\"+a.value+\"]\":\"[\"+this.escapeIdentifier(a.name)+a.operator+this.escapeStr(a.value)+\"]\":\"[\"+this.escapeIdentifier(a.name)+\"]\"},this).join(\"\")),a.pseudos&&(d+=a.pseudos.map(function(a){return a.valueType?\"selector\"===a.valueType?\":\"+this.escapeIdentifier(a.name)+\"(\"+this._renderEntity(a.value)+\")\":\"substitute\"===a.valueType?\":\"+this.escapeIdentifier(a.name)+\"($\"+a.value+\")\":\"numeric\"===a.valueType?\":\"+this.escapeIdentifier(a.name)+\"(\"+a.value+\")\":\":\"+this.escapeIdentifier(a.name)+\"(\"+this.escapeIdentifier(a.value)+\")\":\":\"+this.escapeIdentifier(a.name)},this).join(\"\"));break;default:throw Error('Unknown entity type: \"'+a.type(NaN))}return d};var j=new a;j.registerNestingOperators(\">\"),axe.utils.cssParser=j}(axe),L.prototype={get selector(){return this.spec.selector||[axe.utils.getSelector(this.element,this._options)]},get xpath(){return this.spec.xpath||[axe.utils.getXpath(this.element)]},get element(){return this._element},get fromFrame(){return this._fromFrame},toJSON:function(){\"use strict\";return{selector:this.selector,source:this.source,xpath:this.xpath}}},L.fromFrame=function(a,b,c){return a.selector.unshift(c.selector),a.xpath.unshift(c.xpath),new axe.utils.DqElement(c.element,b,a)},axe.utils.DqElement=L,axe.utils.matchesSelector=function(){\"use strict\";function a(a){var b,c,d=a.Element.prototype,e=[\"matches\",\"matchesSelector\",\"mozMatchesSelector\",\"webkitMatchesSelector\",\"msMatchesSelector\"],f=e.length;for(b=0;b<f;b++)if(c=e[b],d[c])return c}var b;return function(c,d){return b&&c[b]||(b=a(c.ownerDocument.defaultView)),c[b](d)}}(),axe.utils.escapeSelector=function(a){\"use strict\";for(var b,c=String(a),d=c.length,e=-1,f=\"\",g=c.charCodeAt(0);++e<d;){if(0==(b=c.charCodeAt(e)))throw new Error(\"INVALID_CHARACTER_ERR\");b>=1&&b<=31||b>=127&&b<=159||0==e&&b>=48&&b<=57||1==e&&b>=48&&b<=57&&45==g?f+=\"\\\\\"+b.toString(16)+\" \":f+=(1!=e||45!=b||45!=g)&&(b>=128||45==b||95==b||b>=48&&b<=57||b>=65&&b<=90||b>=97&&b<=122)?c.charAt(e):\"\\\\\"+c.charAt(e)}return f},axe.utils.extendMetaData=function(a,b){Object.assign(a,b),Object.keys(b).filter(function(a){return\"function\"==typeof b[a]}).forEach(function(c){a[c]=null;try{a[c]=b[c](a)}catch(a){}})},axe.utils.finalizeRuleResult=function(a){return Object.assign(a,axe.utils.aggregateNodeResults(a.nodes)),delete a.nodes,a};var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};axe.utils.findBy=function(a,b,c){if(Array.isArray(a))return a.find(function(a){return\"object\"===(void 0===a?\"undefined\":za(a))&&a[b]===c})};var axe=axe||{utils:{}};axe.utils.getFlattenedTree=function(a,b){function c(a,c){var d=axe.utils.getFlattenedTree(c,b);return d&&(a=a.concat(d)),a}var d,e,f;if(a.documentElement&&(a=a.documentElement),f=a.nodeName.toLowerCase(),axe.utils.isShadowRoot(a))return d=M(a,b),b=\"a\"+Math.random().toString().substring(2),e=Array.from(a.shadowRoot.childNodes),d.children=e.reduce(c,[]),[d];if(\"content\"===f)return e=Array.from(a.getDistributedNodes()),e.reduce(c,[]);if(\"slot\"===f){e=Array.from(a.assignedNodes()),e.length||(e=N(a));window.getComputedStyle(a);return e.reduce(c,[])}return 1===a.nodeType?(d=M(a,b),e=Array.from(a.childNodes),d.children=e.reduce(c,[]),[d]):3===a.nodeType?[M(a)]:void 0},axe.utils.getNodeFromTree=function(a,b){var c;return a.actualNode===b?a:(a.children.forEach(function(a){var d;a.actualNode===b?c=a:(d=axe.utils.getNodeFromTree(a,b))&&(c=d)}),c)},axe.utils.getAllChecks=function(a){\"use strict\";return[].concat(a.any||[]).concat(a.all||[]).concat(a.none||[])},axe.utils.getCheckOption=function(a,b,c){var d=((c.rules&&c.rules[b]||{}).checks||{})[a.id],e=(c.checks||{})[a.id],f=a.enabled,g=a.options;return e&&(e.hasOwnProperty(\"enabled\")&&(f=e.enabled),e.hasOwnProperty(\"options\")&&(g=e.options)),d&&(d.hasOwnProperty(\"enabled\")&&(f=d.enabled),d.hasOwnProperty(\"options\")&&(g=d.options)),{enabled:f,options:g,absolutePaths:c.absolutePaths}};var Ka=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(a){e=!0,f=a}finally{try{!d&&h.return&&h.return()}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}}();axe.utils.getFriendlyUriEnd=function(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",b=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(a.length<=1||\"data:\"===a.substr(0,5)||\"javascript:\"===a.substr(0,11)||a.includes(\"?\"))){var c=b.currentDomain,d=b.maxLength,e=void 0===d?25:d,f=Q(a),g=f.path,h=f.domain,i=f.hash,j=g.substr(g.substr(0,g.length-2).lastIndexOf(\"/\")+1);if(i)return j&&(j+i).length<=e?j+i:j.length<2&&i.length>2&&i.length<=e?i:void 0;if(h&&h.length<e&&g.length<=1)return h+g;if(g===\"/\"+j&&h&&c&&h!==c&&(h+g).length<=e)return h+g;var k=j.lastIndexOf(\".\");return(-1===k||k>1)&&(-1!==k||j.length>2)&&j.length<=e&&!j.match(/index(\\.[a-zA-Z]{2-4})?/)&&!O(j)?j:void 0}};var La=axe.utils.escapeSelector,Ma=void 0,Na=[\"class\",\"style\",\"id\",\"selected\",\"checked\",\"disabled\",\"tabindex\",\"aria-checked\",\"aria-selected\",\"aria-invalid\",\"aria-activedescendant\",\"aria-busy\",\"aria-disabled\",\"aria-expanded\",\"aria-grabbed\",\"aria-pressed\",\"aria-valuenow\"],Oa=31;axe.utils.getSelectorData=function(a){var b={classes:{},tags:{},attributes:{}};a=Array.isArray(a)?a:[a];for(var c=a.slice(),d=[];c.length;)!function(){var a=c.pop(),e=a.actualNode;if(e.querySelectorAll){var f=e.nodeName;b.tags[f]?b.tags[f]++:b.tags[f]=1,e.classList&&Array.from(e.classList).forEach(function(a){var c=La(a);b.classes[c]?b.classes[c]++:b.classes[c]=1}),e.attributes&&Array.from(e.attributes).filter(T).forEach(function(a){var c=R(e,a);c&&(b.attributes[c]?b.attributes[c]++:b.attributes[c]=1)})}for(a.children.length&&(d.push(c),c=a.children.slice());!c.length&&d.length;)c=d.pop()}();return b},axe.utils.getSelector=function(a){var b=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!a)return\"\";var c=a.getRootNode&&a.getRootNode()||document;if(11===c.nodeType){for(var d=[];11===c.nodeType;)d.push({elm:a,doc:c}),a=c.host,c=a.getRootNode();return d.push({elm:a,doc:c}),d.reverse().map(function(a){return $(a.elm,b,a.doc)})}return $(a,b,c)},axe.utils.getXpath=function(a){return aa(_(a))};var Pa;axe.utils.injectStyle=ba,axe.utils.isHidden=function(a,b){\"use strict\";var c;if(9===a.nodeType)return!1;11===a.nodeType&&(a=a.host);var d=window.getComputedStyle(a,null);return!d||!a.parentNode||\"none\"===d.getPropertyValue(\"display\")||!b&&\"hidden\"===d.getPropertyValue(\"visibility\")||\"true\"===a.getAttribute(\"aria-hidden\")||(c=a.assignedSlot?a.assignedSlot:a.parentNode,axe.utils.isHidden(c,!0))};var Qa=[\"article\",\"aside\",\"blockquote\",\"body\",\"div\",\"footer\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"header\",\"main\",\"nav\",\"p\",\"section\",\"span\"];axe.utils.isShadowRoot=function(a){var b=a.nodeName.toLowerCase();return!(!a.shadowRoot||!/^[a-z][a-z0-9_.-]*-[a-z0-9_.-]*$/.test(b)&&!Qa.includes(b))},axe.utils.isXHTML=function(a){\"use strict\";return!!a.createElement&&\"A\"===a.createElement(\"A\").localName},axe.utils.mergeResults=function(a,b){\"use strict\";var c=[];return a.forEach(function(a){var d=ea(a);d&&d.length&&d.forEach(function(d){d.nodes&&a.frame&&ca(d.nodes,b,a.frameElement,a.frame);var e=axe.utils.findBy(c,\"id\",d.id);e?d.nodes.length&&da(e.nodes,d.nodes):c.push(d)})}),c},axe.utils.nodeSorter=function(a,b){\"use strict\";return a.actualNode===b.actualNode?0:4&a.actualNode.compareDocumentPosition(b.actualNode)?-1:1},utils.performanceTimer=function(){\"use strict\";function a(){if(window.performance&&window.performance)return window.performance.now()}var b=null,c=a();return{start:function(){this.mark(\"mark_axe_start\")},end:function(){this.mark(\"mark_axe_end\"),this.measure(\"axe\",\"mark_axe_start\",\"mark_axe_end\"),this.logMeasures(\"axe\")},auditStart:function(){this.mark(\"mark_audit_start\")},auditEnd:function(){this.mark(\"mark_audit_end\"),this.measure(\"audit_start_to_end\",\"mark_audit_start\",\"mark_audit_end\"),this.logMeasures()},mark:function(a){window.performance&&void 0!==window.performance.mark&&window.performance.mark(a)},measure:function(a,b,c){window.performance&&void 0!==window.performance.measure&&window.performance.measure(a,b,c)},logMeasures:function(a){function b(a){axe.log(\"Measure \"+a.name+\" took \"+a.duration+\"ms\")}if(window.performance&&void 0!==window.performance.getEntriesByType)for(var c=window.performance.getEntriesByType(\"measure\"),d=0;d<c.length;++d){var e=c[d];if(e.name===a)return void b(e);b(e)}},timeElapsed:function(){return a()-c},reset:function(){b||(b=a()),c=a()}}}(),\"function\"!=typeof Object.assign&&function(){Object.assign=function(a){\"use strict\";if(void 0===a||null===a)throw new TypeError(\"Cannot convert undefined or null to object\");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)d.hasOwnProperty(e)&&(b[e]=d[e])}return b}}(),Array.prototype.find||Object.defineProperty(Array.prototype,\"find\",{value:function(a){if(null===this)throw new TypeError(\"Array.prototype.find called on null or undefined\");if(\"function\"!=typeof a)throw new TypeError(\"predicate must be a function\");for(var b,c=Object(this),d=c.length>>>0,e=arguments[1],f=0;f<d;f++)if(b=c[f],a.call(e,b,f,c))return b}}),axe.utils.pollyfillElementsFromPoint=function(){if(document.elementsFromPoint)return document.elementsFromPoint;if(document.msElementsFromPoint)return document.msElementsFromPoint;var a=function(){var a=document.createElement(\"x\");return a.style.cssText=\"pointer-events:auto\",\"auto\"===a.style.pointerEvents}(),b=a?\"pointer-events\":\"visibility\",c=a?\"none\":\"hidden\",d=document.createElement(\"style\");return d.innerHTML=a?\"* { pointer-events: all }\":\"* { visibility: visible }\",function(a,e){var f,g,h,i=[],j=[];for(document.head.appendChild(d);(f=document.elementFromPoint(a,e))&&-1===i.indexOf(f);)i.push(f),j.push({value:f.style.getPropertyValue(b),priority:f.style.getPropertyPriority(b)}),f.style.setProperty(b,c,\"important\");for(i.indexOf(document.documentElement)<i.length-1&&(i.splice(i.indexOf(document.documentElement),1),i.push(document.documentElement)),g=j.length;h=j[--g];)i[g].style.setProperty(b,h.value?h.value:\"\",h.priority);return document.head.removeChild(d),i}},\"function\"==typeof window.addEventListener&&(document.elementsFromPoint=axe.utils.pollyfillElementsFromPoint()),Array.prototype.includes||Object.defineProperty(Array.prototype,\"includes\",{value:function(a){\"use strict\";var b=Object(this),c=parseInt(b.length,10)||0;if(0===c)return!1;var d,e=parseInt(arguments[1],10)||0;e>=0?d=e:(d=c+e)<0&&(d=0);for(var f;d<c;){if(f=b[d],a===f||a!==a&&f!==f)return!0;d++}return!1}}),Array.prototype.some||Object.defineProperty(Array.prototype,\"some\",{value:function(a){\"use strict\";if(null==this)throw new TypeError(\"Array.prototype.some called on null or undefined\");if(\"function\"!=typeof a)throw new TypeError;for(var b=Object(this),c=b.length>>>0,d=arguments.length>=2?arguments[1]:void 0,e=0;e<c;e++)if(e in b&&a.call(d,b[e],e,b))return!0;return!1}}),Array.from||Object.defineProperty(Array,\"from\",{value:function(){var a=Object.prototype.toString,b=function(b){return\"function\"==typeof b||\"[object Function]\"===a.call(b)},c=function(a){var b=Number(a);return isNaN(b)?0:0!==b&&isFinite(b)?(b>0?1:-1)*Math.floor(Math.abs(b)):b},d=Math.pow(2,53)-1,e=function(a){var b=c(a);return Math.min(Math.max(b,0),d)};return function(a){var c=this,d=Object(a);if(null==a)throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");var f,g=arguments.length>1?arguments[1]:void 0;if(void 0!==g){if(!b(g))throw new TypeError(\"Array.from: when provided, the second argument must be a function\");arguments.length>2&&(f=arguments[2])}for(var h,i=e(d.length),j=b(c)?Object(new c(i)):new Array(i),k=0;k<i;)h=d[k],j[k]=g?void 0===f?g(h,k):g.call(f,h,k):h,k+=1;return j.length=i,j}}()}),String.prototype.includes||(String.prototype.includes=function(a,b){return\"number\"!=typeof b&&(b=0),!(b+a.length>this.length)&&-1!==this.indexOf(a,b)});var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};axe.utils.publishMetaData=function(a){\"use strict\";var b=axe._audit.data.checks||{},c=axe._audit.data.rules||{},d=axe.utils.findBy(axe._audit.rules,\"id\",a.id)||{};a.tags=axe.utils.clone(d.tags||[]);var e=ga(b,!0),f=ga(b,!1);a.nodes.forEach(function(a){a.any.forEach(e),a.all.forEach(e),a.none.forEach(f)}),axe.utils.extendMetaData(a,axe.utils.clone(c[a.id]||{}))};var Ra=function(){},Sa=function(){},Ta=function(){/*! Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan <http://stevenlevithan.com/regex/xregexp/> MIT License */\nvar a=/(?=[\\-\\[\\]{}()*+?.\\\\\\^$|,#\\s])/g;return function(b){return b.replace(a,\"\\\\\")}}(),Ua=/\\\\/g;Ra=function(a){return a.map(function(a){for(var b=[],c=a.rule;c;)b.push({tag:c.tagName?c.tagName.toLowerCase():\"*\",combinator:c.nestingOperator?c.nestingOperator:\" \",id:c.id,attributes:ma(c.attrs),classes:na(c.classNames),pseudos:oa(c.pseudos)}),c=c.rule;return b})},Sa=function(a,b,c,d){for(var e=[],f=Array.isArray(a)?a:[a],g=pa(f,b,[],a[0].shadowId),h=[];g.nodes.length;){for(var i=g.nodes.pop(),j=[],k=[],l=g.anyLevel.slice().concat(g.thisLevel),m=!1,n=0;n<l.length;n++){var o=l[n];if(qa(i,o)&&(!o[0].id||i.shadowId===g.parentShadowId))if(1===o.length)m||d&&!d(i)||(h.push(i),m=!0);else{var p=o.slice(1);if(!1===[\" \",\">\"].includes(p[0].combinator))throw new Error(\"axe.utils.querySelectorAll does not support the combinator: \"+o[1].combinator);\">\"===p[0].combinator?j.push(p):k.push(p)}!g.anyLevel.includes(o)||o[0].id&&i.shadowId!==g.parentShadowId||k.push(o)}for(i.children&&i.children.length&&c&&(e.push(g),g=pa(i.children,k,j,i.shadowId));!g.nodes.length&&e.length;)g=e.pop()}return h},axe.utils.querySelectorAll=function(a,b){return axe.utils.querySelectorAllFilter(a,b)},axe.utils.querySelectorAllFilter=function(a,b,c){a=Array.isArray(a)?a:[a];var d=axe.utils.cssParser.parse(b);return d=d.selectors?d.selectors:[d],d=Ra(d),Sa(a,d,!0,c)};var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};!function(){\"use strict\";function a(){}function b(a){if(\"function\"!=typeof a)throw new TypeError(\"Queue methods require functions as arguments\")}function c(){function c(b){return function(c){g[b]=c,(i-=1)||j===a||(k=!0,j(g))}}function d(b){return j=a,m(b),g}function e(){for(var a=g.length;h<a;h++){var b=g[h];try{b.call(null,c(h),d)}catch(a){d(a)}}}var f,g=[],h=0,i=0,j=a,k=!1,l=function(a){f=a,setTimeout(function(){void 0!==f&&null!==f&&axe.log(\"Uncaught error (of queue)\",f)},1)},m=l,n={defer:function(a){if(\"object\"===(void 0===a?\"undefined\":za(a))&&a.then&&a.catch){var c=a;a=function(a,b){c.then(a).catch(b)}}if(b(a),void 0===f){if(k)throw new Error(\"Queue already completed\");return g.push(a),++i,e(),n}},then:function(c){if(b(c),j!==a)throw new Error(\"queue `then` already set\");return f||(j=c,i||(k=!0,j(g))),n},catch:function(a){if(b(a),m!==l)throw new Error(\"queue `catch` already set\");return f?(a(f),f=null):m=a,n},abort:d};return n}axe.utils.queue=c}();var za=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a};!function(a){\"use strict\";function b(){var a=\"axe\",b=\"\";return void 0!==axe&&axe._audit&&!axe._audit.application&&(a=axe._audit.application),void 0!==axe&&(b=axe.version),a+\".\"+b}function c(a){if(\"object\"===(void 0===a?\"undefined\":za(a))&&\"string\"==typeof a.uuid&&!0===a._respondable){var c=b();return a._source===c||\"axe.x.y.z\"===a._source||\"axe.x.y.z\"===c}return!1}function d(a,c,d,e,f,g){var h;d instanceof Error&&(h={name:d.name,message:d.message,stack:d.stack},d=void 0);var i={uuid:e,topic:c,message:d,error:h,_respondable:!0,_source:b(),_keepalive:f};\"function\"==typeof g&&(j[e]=g),a.postMessage(JSON.stringify(i),\"*\")}function e(a,b,c,e,f){d(a,b,c,Va.v1(),e,f)}function f(a,b,c){return function(e,f,g){d(a,b,e,c,f,g)}}function g(a,b,c){var d=b.topic,e=k[d];if(e){var g=f(a,null,b.uuid);e(b.message,c,g)}}function h(a){var b=a.message||\"Unknown error occurred\",c=l.includes(a.name)?a.name:\"Error\",d=window[c]||Error;return a.stack&&(b+=\"\\n\"+a.stack.replace(a.message,\"\")),new d(b)}function i(a){var b;if(\"string\"==typeof a){try{b=JSON.parse(a)}catch(a){}if(c(b))return\"object\"===za(b.error)?b.error=h(b.error):b.error=void 0,b}}var j={},k={},l=Object.freeze([\"EvalError\",\"RangeError\",\"ReferenceError\",\"SyntaxError\",\"TypeError\",\"URIError\"]);e.subscribe=function(a,b){k[a]=b},e.isInFrame=function(a){return a=a||window,!!a.frameElement},\"function\"==typeof window.addEventListener&&window.addEventListener(\"message\",function(a){var b=i(a.data);if(b){var c=b.uuid,e=b._keepalive,h=j[c];if(h){h(b.error||b.message,e,f(a.source,b.topic,c)),e||delete j[c]}if(!b.error)try{g(a.source,b,e)}catch(e){d(a.source,b.topic,e,c,!1)}}},!1),a.respondable=e}(utils),axe.utils.ruleShouldRun=function(a,b,c){\"use strict\";var d=c.runOnly||{},e=(c.rules||{})[a.id];return!(a.pageLevel&&!b.page)&&(\"rule\"===d.type?-1!==d.values.indexOf(a.id):e&&\"boolean\"==typeof e.enabled?e.enabled:\"tag\"===d.type&&d.values?ra(a,d.values):ra(a,[]))},axe.utils.getScrollState=function(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window,b=a.document.documentElement;return[void 0!==a.pageXOffset?{elm:a,top:a.pageYOffset,left:a.pageXOffset}:{elm:b,top:b.scrollTop,left:b.scrollLeft}].concat(ua(document.body))},axe.utils.setScrollState=function(a){a.forEach(function(a){return ta(a.elm,a.top,a.left)})},axe.utils.select=function(a,b){\"use strict\";var c,d=[];if(axe._selectCache)for(var e=0,f=axe._selectCache.length;e<f;e++){var g=axe._selectCache[e];if(g.selector===a)return g.result}for(var h=function(a){return function(b){return wa(b,a)}}(b),i=ya(b.include),j=0;j<i.length;j++)c=i[j],c.actualNode.nodeType===c.actualNode.ELEMENT_NODE&&axe.utils.matchesSelector(c.actualNode,a)&&h(c)&&(d=xa(d,[c])),d=xa(d,axe.utils.querySelectorAllFilter(c,a,h));return axe._selectCache&&axe._selectCache.push({selector:a,result:d}),d},axe.utils.toArray=function(a){\"use strict\";return Array.prototype.slice.call(a)},axe.utils.uniqueArray=function(a,b){return a.concat(b).filter(function(a,b,c){return c.indexOf(a)===b})};var Va;!function(a){function b(a,b,c){var d=b&&c||0,e=0;for(b=b||[],a.toLowerCase().replace(/[0-9a-f]{2}/g,function(a){e<16&&(b[d+e++]=l[a])});e<16;)b[d+e++]=0;return b}function c(a,b){var c=b||0,d=k;return d[a[c++]]+d[a[c++]]+d[a[c++]]+d[a[c++]]+\"-\"+d[a[c++]]+d[a[c++]]+\"-\"+d[a[c++]]+d[a[c++]]+\"-\"+d[a[c++]]+d[a[c++]]+\"-\"+d[a[c++]]+d[a[c++]]+d[a[c++]]+d[a[c++]]+d[a[c++]]+d[a[c++]]}function d(a,b,d){var e=b&&d||0,f=b||[];a=a||{};var g=null!=a.clockseq?a.clockseq:p,h=null!=a.msecs?a.msecs:(new Date).getTime(),i=null!=a.nsecs?a.nsecs:r+1,j=h-q+(i-r)/1e4;if(j<0&&null==a.clockseq&&(g=g+1&16383),(j<0||h>q)&&null==a.nsecs&&(i=0),i>=1e4)throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");q=h,r=i,p=g,h+=122192928e5;var k=(1e4*(268435455&h)+i)%4294967296;f[e++]=k>>>24&255,f[e++]=k>>>16&255,f[e++]=k>>>8&255,f[e++]=255&k;var l=h/4294967296*1e4&268435455;f[e++]=l>>>8&255,f[e++]=255&l,f[e++]=l>>>24&15|16,f[e++]=l>>>16&255,f[e++]=g>>>8|128,f[e++]=255&g;for(var m=a.node||o,n=0;n<6;n++)f[e+n]=m[n];return b||c(f)}function e(a,b,d){var e=b&&d||0;\"string\"==typeof a&&(b=\"binary\"==a?new j(16):null,a=null),a=a||{};var g=a.random||(a.rng||f)();if(g[6]=15&g[6]|64,g[8]=63&g[8]|128,b)for(var h=0;h<16;h++)b[e+h]=g[h];return b||c(g)}var f,g=a.crypto||a.msCrypto;if(!f&&g&&g.getRandomValues){var h=new Uint8Array(16);f=function(){return g.getRandomValues(h),h}}if(!f){var i=new Array(16);f=function(){for(var a,b=0;b<16;b++)0==(3&b)&&(a=4294967296*Math.random()),i[b]=a>>>((3&b)<<3)&255;return i}}for(var j=\"function\"==typeof a.Buffer?a.Buffer:Array,k=[],l={},m=0;m<256;m++)k[m]=(m+256).toString(16).substr(1),l[k[m]]=m;var n=f(),o=[1|n[0],n[1],n[2],n[3],n[4],n[5]],p=16383&(n[6]<<8|n[7]),q=0,r=0;Va=e,Va.v1=d,Va.v4=e,Va.parse=b,Va.unparse=c,Va.BufferClass=j}(window),axe._load({data:{rules:{accesskeys:{description:\"Ensures every accesskey attribute value is unique\",help:\"accesskey attribute value must be unique\"},\"area-alt\":{description:\"Ensures <area> elements of image maps have alternate text\",help:\"Active <area> elements must have alternate text\"},\"aria-allowed-attr\":{description:\"Ensures ARIA attributes are allowed for an element's role\",help:\"Elements must only use allowed ARIA attributes\"},\"aria-hidden-body\":{description:\"Ensures aria-hidden='true' is not present on the document body.\",help:\"aria-hidden='true' must not be present on the document body\"},\"aria-required-attr\":{description:\"Ensures elements with ARIA roles have all required ARIA attributes\",help:\"Required ARIA attributes must be provided\"},\"aria-required-children\":{description:\"Ensures elements with an ARIA role that require child roles contain them\",help:\"Certain ARIA roles must contain particular children\"},\"aria-required-parent\":{description:\"Ensures elements with an ARIA role that require parent roles are contained by them\",help:\"Certain ARIA roles must be contained by particular parents\"},\"aria-roles\":{description:\"Ensures all elements with a role attribute use a valid value\",help:\"ARIA roles used must conform to valid values\"},\"aria-valid-attr-value\":{description:\"Ensures all ARIA attributes have valid values\",help:\"ARIA attributes must conform to valid values\"},\"aria-valid-attr\":{description:\"Ensures attributes that begin with aria- are valid ARIA attributes\",help:\"ARIA attributes must conform to valid names\"},\"audio-caption\":{description:\"Ensures <audio> elements have captions\",help:\"<audio> elements must have a captions track\"},blink:{description:\"Ensures <blink> elements are not used\",help:\"<blink> elements are deprecated and must not be used\"},\"button-name\":{description:\"Ensures buttons have discernible text\",help:\"Buttons must have discernible text\"},bypass:{description:\"Ensures each page has at least one mechanism for a user to bypass navigation and jump straight to the content\",help:\"Page must have means to bypass repeated blocks\"},checkboxgroup:{description:'Ensures related <input type=\"checkbox\"> elements have a group and that that group designation is consistent',help:\"Checkbox inputs with the same name attribute value must be part of a group\"},\"color-contrast\":{description:\"Ensures the contrast between foreground and background colors meets WCAG 2 AA contrast ratio thresholds\",help:\"Elements must have sufficient color contrast\"},\"definition-list\":{description:\"Ensures <dl> elements are structured correctly\",help:\"<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script> or <template> elements\"},dlitem:{description:\"Ensures <dt> and <dd> elements are contained by a <dl>\",help:\"<dt> and <dd> elements must be contained by a <dl>\"},\"document-title\":{description:\"Ensures each HTML document contains a non-empty <title> element\",help:\"Documents must have <title> element to aid in navigation\"},\"duplicate-id\":{description:\"Ensures every id attribute value is unique\",help:\"id attribute value must be unique\"},\"empty-heading\":{description:\"Ensures headings have discernible text\",help:\"Headings must not be empty\"},\"focus-order-semantics\":{description:\"Ensures elements in the focus order have an appropriate role\",help:\"Elements in the focus order need a role appropriate for interactive content\"},\"frame-title-unique\":{description:\"Ensures <iframe> and <frame> elements contain a unique title attribute\",help:\"Frames must have a unique title attribute\"},\"frame-title\":{description:\"Ensures <iframe> and <frame> elements contain a non-empty title attribute\",help:\"Frames must have title attribute\"},\"heading-order\":{description:\"Ensures the order of headings is semantically correct\",help:\"Heading levels should only increase by one\"},\"hidden-content\":{description:\"Informs users about hidden content.\",help:\"Hidden content on the page cannot be analyzed\"},\"html-has-lang\":{description:\"Ensures every HTML document has a lang attribute\",help:\"<html> element must have a lang attribute\"},\"html-lang-valid\":{description:\"Ensures the lang attribute of the <html> element has a valid value\",help:\"<html> element must have a valid value for the lang attribute\"},\"image-alt\":{description:\"Ensures <img> elements have alternate text or a role of none or presentation\",help:\"Images must have alternate text\"},\"image-redundant-alt\":{description:\"Ensure button and link text is not repeated as image alternative\",help:\"Text of buttons and links should not be repeated in the image alternative\"},\"input-image-alt\":{description:'Ensures <input type=\"image\"> elements have alternate text',help:\"Image buttons must have alternate text\"},\"label-title-only\":{description:\"Ensures that every form element is not solely labeled using the title or aria-describedby attributes\",help:\"Form elements should have a visible label\"},label:{description:\"Ensures every form element has a label\",help:\"Form elements must have labels\"},\"landmark-main-is-top-level\":{description:\"The main landmark should not be contained in another landmark\",help:\"Main landmark is not at top level\"},\"landmark-one-main\":{description:\"Ensures a navigation point to the primary content of the page. If the page contains iframes, each iframe should contain either no main landmarks or just one.\",help:\"Page must contain one main landmark.\"},\"layout-table\":{description:\"Ensures presentational <table> elements do not use <th>, <caption> elements or the summary attribute\",help:\"Layout tables must not use data table elements\"},\"link-in-text-block\":{description:\"Links can be distinguished without relying on color\",help:\"Links must be distinguished from surrounding text in a way that does not rely on color\"},\"link-name\":{description:\"Ensures links have discernible text\",help:\"Links must have discernible text\"},list:{description:\"Ensures that lists are structured correctly\",help:\"<ul> and <ol> must only directly contain <li>, <script> or <template> elements\"},listitem:{description:\"Ensures <li> elements are used semantically\",help:\"<li> elements must be contained in a <ul> or <ol>\"},marquee:{description:\"Ensures <marquee> elements are not used\",help:\"<marquee> elements are deprecated and must not be used\"},\"meta-refresh\":{description:'Ensures <meta http-equiv=\"refresh\"> is not used',help:\"Timed refresh must not exist\"},\"meta-viewport-large\":{description:'Ensures <meta name=\"viewport\"> can scale a significant amount',help:\"Users should be able to zoom and scale the text up to 500%\"},\"meta-viewport\":{description:'Ensures <meta name=\"viewport\"> does not disable text scaling and zooming',help:\"Zooming and scaling must not be disabled\"},\"object-alt\":{description:\"Ensures <object> elements have alternate text\",help:\"<object> elements must have alternate text\"},\"p-as-heading\":{description:\"Ensure p elements are not used to style headings\",help:\"Bold, italic text and font-size are not used to style p elements as a heading\"},radiogroup:{description:'Ensures related <input type=\"radio\"> elements have a group and that the group designation is consistent',help:\"Radio inputs with the same name attribute value must be part of a group\"},region:{description:\"Ensures all content is contained within a landmark region\",help:\"Content should be contained in a landmark region\"},\"scope-attr-valid\":{description:\"Ensures the scope attribute is used correctly on tables\",help:\"scope attribute should be used correctly\"},\"server-side-image-map\":{description:\"Ensures that server-side image maps are not used\",help:\"Server-side image maps must not be used\"},\"skip-link\":{description:\"Ensure all skip links have a focusable target\",help:\"The skip-link target should exist and be focusable\"},tabindex:{description:\"Ensures tabindex attribute values are not greater than 0\",help:\"Elements should not have tabindex greater than zero\"},\"table-duplicate-name\":{description:\"Ensure that tables do not have the same summary and caption\",help:\"The <caption> element should not contain the same text as the summary attribute\"},\"table-fake-caption\":{description:\"Ensure that tables with a caption use the <caption> element.\",help:\"Data or header cells should not be used to give caption to a data table.\"},\"td-has-header\":{description:\"Ensure that each non-empty data cell in a large table has one or more table headers\",help:\"All non-empty td element in table larger than 3 by 3 must have an associated table header\"},\"td-headers-attr\":{description:\"Ensure that each cell in a table using the headers refers to another cell in that table\",help:\"All cells in a table element that use the headers attribute must only refer to other cells of that same table\"},\"th-has-data-cells\":{description:\"Ensure that each table header in a data table refers to data cells\",help:\"All th elements and elements with role=columnheader/rowheader must have data cells they describe\"},\"valid-lang\":{description:\"Ensures lang attributes have valid values\",help:\"lang attribute must have a valid value\"},\"video-caption\":{description:\"Ensures <video> elements have captions\",help:\"<video> elements must have captions\"},\"video-description\":{description:\"Ensures <video> elements have audio descriptions\",help:\"<video> elements must have an audio description track\"}},checks:{accesskeys:{impact:\"serious\",messages:{pass:function(a){return\"Accesskey attribute value is unique\"},fail:function(a){return\"Document has multiple elements with the same accesskey\"}}},\"non-empty-alt\":{impact:\"critical\",messages:{pass:function(a){return\"Element has a non-empty alt attribute\"},fail:function(a){return\"Element has no alt attribute or the alt attribute is empty\"}}},\"non-empty-title\":{impact:\"serious\",messages:{pass:function(a){return\"Element has a title attribute\"},fail:function(a){return\"Element has no title attribute or the title attribute is empty\"}}},\"aria-label\":{impact:\"serious\",messages:{pass:function(a){return\"aria-label attribute exists and is not empty\"},fail:function(a){return\"aria-label attribute does not exist or is empty\"}}},\"aria-labelledby\":{impact:\"serious\",messages:{pass:function(a){return\"aria-labelledby attribute exists and references elements that are visible to screen readers\"},fail:function(a){return\"aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty or not visible\"}}},\"aria-allowed-attr\":{impact:\"critical\",messages:{pass:function(a){return\"ARIA attributes are used correctly for the defined role\"},fail:function(a){var b=\"ARIA attribute\"+(a.data&&a.data.length>1?\"s are\":\" is\")+\" not allowed:\",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" \"+d;return b}}},\"aria-hidden-body\":{impact:\"critical\",messages:{pass:function(a){return\"No aria-hidden attribute is present on document body\"},fail:function(a){return\"aria-hidden=true should not be present on the document body\"}}},\"aria-required-attr\":{impact:\"critical\",messages:{pass:function(a){return\"All required ARIA attributes are present\"},fail:function(a){var b=\"Required ARIA attribute\"+(a.data&&a.data.length>1?\"s\":\"\")+\" not present:\",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" \"+d;return b}}},\"aria-required-children\":{impact:\"critical\",messages:{pass:function(a){return\"Required ARIA children are present\"},fail:function(a){var b=\"Required ARIA \"+(a.data&&a.data.length>1?\"children\":\"child\")+\" role not present:\",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" \"+d;return b}}},\"aria-required-parent\":{impact:\"critical\",messages:{pass:function(a){return\"Required ARIA parent role present\"},fail:function(a){var b=\"Required ARIA parent\"+(a.data&&a.data.length>1?\"s\":\"\")+\" role not present:\",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" \"+d;return b}}},invalidrole:{impact:\"critical\",messages:{pass:function(a){return\"ARIA role is valid\"},fail:function(a){return\"Role must be one of the valid ARIA roles\"}}},abstractrole:{impact:\"serious\",messages:{pass:function(a){return\"Abstract roles are not used\"},fail:function(a){return\"Abstract roles cannot be directly used\"}}},\"aria-valid-attr-value\":{impact:\"critical\",messages:{pass:function(a){return\"ARIA attribute values are valid\"},fail:function(a){var b=\"Invalid ARIA attribute value\"+(a.data&&a.data.length>1?\"s\":\"\")+\":\",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" \"+d;return b}}},\"aria-errormessage\":{impact:\"critical\",messages:{pass:function(a){return\"Uses a supported aria-errormessage technique\"},fail:function(a){var b=\"aria-errormessage value\"+(a.data&&a.data.length>1?\"s\":\"\")+\" \",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" `\"+d;return b+=\"` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)\"}}},\"aria-valid-attr\":{impact:\"critical\",messages:{pass:function(a){return\"ARIA attribute name\"+(a.data&&a.data.length>1?\"s\":\"\")+\" are valid\"},fail:function(a){var b=\"Invalid ARIA attribute name\"+(a.data&&a.data.length>1?\"s\":\"\")+\":\",c=a.data;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\" \"+d;return b}}},caption:{impact:\"critical\",messages:{pass:function(a){return\"The multimedia element has a captions track\"},fail:function(a){return\"The multimedia element does not have a captions track\"},incomplete:function(a){return\"A captions track for this element could not be found\"}}},\"is-on-screen\":{impact:\"serious\",messages:{pass:function(a){return\"Element is not visible\"},fail:function(a){return\"Element is visible\"}}},\"non-empty-if-present\":{impact:\"critical\",messages:{pass:function(a){var b=\"Element \";return a.data?b+=\"has a non-empty value attribute\":b+=\"does not have a value attribute\",b},fail:function(a){return\"Element has a value attribute and the value attribute is empty\"}}},\"non-empty-value\":{impact:\"critical\",messages:{pass:function(a){return\"Element has a non-empty value attribute\"},fail:function(a){return\"Element has no value attribute or the value attribute is empty\"}}},\"button-has-visible-text\":{impact:\"critical\",messages:{pass:function(a){return\"Element has inner text that is visible to screen readers\"},fail:function(a){return\"Element does not have inner text that is visible to screen readers\"}}},\"role-presentation\":{impact:\"minor\",messages:{pass:function(a){return'Element\\'s default semantics were overriden with role=\"presentation\"'},fail:function(a){return'Element\\'s default semantics were not overridden with role=\"presentation\"'}}},\"role-none\":{impact:\"minor\",messages:{pass:function(a){return'Element\\'s default semantics were overriden with role=\"none\"'},fail:function(a){return'Element\\'s default semantics were not overridden with role=\"none\"'}}},\"focusable-no-name\":{impact:\"serious\",messages:{pass:function(a){return\"Element is not in tab order or has accessible text\"},fail:function(a){return\"Element is in tab order and does not have accessible text\"}}},\"internal-link-present\":{impact:\"serious\",messages:{pass:function(a){return\"Valid skip link found\"},fail:function(a){return\"No valid skip link found\"}}},\"header-present\":{impact:\"serious\",messages:{pass:function(a){return\"Page has a header\"},fail:function(a){return\"Page does not have a header\"}}},landmark:{impact:\"serious\",messages:{pass:function(a){return\"Page has a landmark region\"},fail:function(a){return\"Page does not have a landmark region\"}}},\"group-labelledby\":{impact:\"critical\",messages:{pass:function(a){return'All elements with the name \"'+a.data.name+'\" reference the same element with aria-labelledby'},fail:function(a){return'All elements with the name \"'+a.data.name+'\" do not reference the same element with aria-labelledby'}}},fieldset:{impact:\"critical\",messages:{pass:function(a){return\"Element is contained in a fieldset\"},fail:function(a){var b=\"\",c=a.data&&a.data.failureCode;return b+=\"no-legend\"===c?\"Fieldset does not have a legend as its first child\":\"empty-legend\"===c?\"Legend does not have text that is visible to screen readers\":\"mixed-inputs\"===c?\"Fieldset contains unrelated inputs\":\"no-group-label\"===c?\"ARIA group does not have aria-label or aria-labelledby\":\"group-mixed-inputs\"===c?\"ARIA group contains unrelated inputs\":\"Element does not have a containing fieldset or ARIA group\"}}},\"color-contrast\":{impact:\"serious\",messages:{pass:function(a){return\"Element has sufficient color contrast of \"+a.data.contrastRatio},fail:function(a){return\"Element has insufficient color contrast of \"+a.data.contrastRatio+\" (foreground color: \"+a.data.fgColor+\", background color: \"+a.data.bgColor+\", font size: \"+a.data.fontSize+\", font weight: \"+a.data.fontWeight+\"). Expected contrast ratio of \"+a.data.expectedContrastRatio},incomplete:{bgImage:\"Element's background color could not be determined due to a background image\",bgGradient:\"Element's background color could not be determined due to a background gradient\",imgNode:\"Element's background color could not be determined because element contains an image node\",bgOverlap:\"Element's background color could not be determined because it is overlapped by another element\",fgAlpha:\"Element's foreground color could not be determined because of alpha transparency\",elmPartiallyObscured:\"Element's background color could not be determined because it's partially obscured by another element\",elmPartiallyObscuring:\"Element's background color could not be determined because it partially overlaps other elements\",outsideViewport:\"Element's background color could not be determined because it's outside the viewport\",equalRatio:\"Element has a 1:1 contrast ratio with the background\",default:\"Unable to determine contrast ratio\"}}},\"structured-dlitems\":{impact:\"serious\",messages:{pass:function(a){return\"When not empty, element has both <dt> and <dd> elements\"},fail:function(a){return\"When not empty, element does not have at least one <dt> element followed by at least one <dd> element\"}}},\"only-dlitems\":{impact:\"serious\",messages:{pass:function(a){return\"List element only has direct children that are allowed inside <dt> or <dd> elements\"},fail:function(a){return\"List element has direct children that are not allowed inside <dt> or <dd> elements\"}}},dlitem:{impact:\"serious\",messages:{pass:function(a){return\"Description list item has a <dl> parent element\"},fail:function(a){return\"Description list item does not have a <dl> parent element\"}}},\"doc-has-title\":{impact:\"serious\",messages:{pass:function(a){return\"Document has a non-empty <title> element\"},fail:function(a){return\"Document does not have a non-empty <title> element\"}}},\"duplicate-id\":{impact:\"moderate\",messages:{pass:function(a){return\"Document has no elements that share the same id attribute\"},fail:function(a){return\"Document has multiple elements with the same id attribute: \"+a.data}}},\"has-visible-text\":{impact:\"minor\",messages:{pass:function(a){return\"Element has text that is visible to screen readers\"},fail:function(a){return\"Element does not have text that is visible to screen readers\"}}},\"has-widget-role\":{impact:\"minor\",messages:{pass:function(a){return\"Element has a widget role.\"},fail:function(a){return\"Element does not have a widget role.\"}}},\"valid-scrollable-semantics\":{impact:\"minor\",messages:{pass:function(a){return\"Element has valid semantics for an element in the focus order.\"},fail:function(a){return\"Element has invalid semantics for an element in the focus order.\"}}},\"unique-frame-title\":{impact:\"serious\",messages:{pass:function(a){return\"Element's title attribute is unique\"},fail:function(a){return\"Element's title attribute is not unique\"}}},\"heading-order\":{impact:\"moderate\",messages:{pass:function(a){return\"Heading order valid\"},fail:function(a){return\"Heading order invalid\"}}},\"hidden-content\":{impact:\"minor\",messages:{pass:function(a){return\"All content on the page has been analyzed.\"},fail:function(a){return\"There were problems analyzing the content on this page.\"},incomplete:function(a){return\"There is hidden content on the page that was not analyzed. You will need to trigger the display of this content in order to analyze it.\"}}},\"has-lang\":{impact:\"serious\",messages:{pass:function(a){return\"The <html> element has a lang attribute\"},fail:function(a){return\"The <html> element does not have a lang attribute\"}}},\"valid-lang\":{impact:\"serious\",messages:{pass:function(a){return\"Value of lang attribute is included in the list of valid languages\"},fail:function(a){return\"Value of lang attribute not included in the list of valid languages\"}}},\"has-alt\":{impact:\"critical\",messages:{pass:function(a){return\"Element has an alt attribute\"},fail:function(a){return\"Element does not have an alt attribute\"}}},\"duplicate-img-label\":{impact:\"minor\",messages:{pass:function(a){return\"Element does not duplicate existing text in <img> alt text\"},fail:function(a){return\"Element contains <img> element with alt text that duplicates existing text\"}}},\"title-only\":{impact:\"serious\",messages:{pass:function(a){return\"Form element does not solely use title attribute for its label\"},fail:function(a){return\"Only title used to generate label for form element\"}}},\"implicit-label\":{impact:\"critical\",messages:{pass:function(a){return\"Form element has an implicit (wrapped) <label>\"},fail:function(a){return\"Form element does not have an implicit (wrapped) <label>\"}}},\"explicit-label\":{impact:\"critical\",messages:{pass:function(a){return\"Form element has an explicit <label>\"},fail:function(a){return\"Form element does not have an explicit <label>\"}}},\"help-same-as-label\":{impact:\"minor\",messages:{pass:function(a){return\"Help text (title or aria-describedby) does not duplicate label text\"},fail:function(a){return\"Help text (title or aria-describedby) text is the same as the label text\"}}},\"multiple-label\":{impact:\"serious\",messages:{pass:function(a){return\"Form element does not have multiple <label> elements\"},fail:function(a){return\"Form element has multiple <label> elements\"}}},\"main-is-top-level\":{impact:\"moderate\",messages:{pass:function(a){return\"The main landmark is at the top level.\"},fail:function(a){return\"The main landmark is contained in another landmark.\"}}},\"has-at-least-one-main\":{impact:\"moderate\",messages:{pass:function(a){return\"Document has at least one main landmark\"},fail:function(a){return\"Document has no main landmarks\"}}},\"has-no-more-than-one-main\":{impact:\"moderate\",messages:{pass:function(a){return\"Document has no more than one main landmark\"},fail:function(a){return\"Document has more than one main landmark\"}}},\"has-th\":{impact:\"serious\",messages:{pass:function(a){return\"Layout table does not use <th> elements\"},fail:function(a){return\"Layout table uses <th> elements\"}}},\"has-caption\":{impact:\"serious\",messages:{pass:function(a){return\"Layout table does not use <caption> element\"},fail:function(a){return\"Layout table uses <caption> element\"}}},\"has-summary\":{impact:\"serious\",messages:{pass:function(a){return\"Layout table does not use summary attribute\"},fail:function(a){return\"Layout table uses summary attribute\"}}},\"link-in-text-block\":{impact:\"serious\",messages:{pass:function(a){return\"Links can be distinguished from surrounding text in some way other than by color\"},fail:function(a){return\"Links need to be distinguished from surrounding text in some way other than by color\"},incomplete:{bgContrast:\"Element's contrast ratio could not be determined. Check for a distinct hover/focus style\",bgImage:\"Element's contrast ratio could not be determined due to a background image\",bgGradient:\"Element's contrast ratio could not be determined due to a background gradient\",imgNode:\"Element's contrast ratio could not be determined because element contains an image node\",bgOverlap:\"Element's contrast ratio could not be determined because of element overlap\",default:\"Unable to determine contrast ratio\"}}},\"only-listitems\":{impact:\"serious\",messages:{pass:function(a){return\"List element only has direct children that are allowed inside <li> elements\"},fail:function(a){return\"List element has direct children that are not allowed inside <li> elements\"}}},listitem:{impact:\"serious\",messages:{pass:function(a){return'List item has a <ul>, <ol> or role=\"list\" parent element'},fail:function(a){return'List item does not have a <ul>, <ol> or role=\"list\" parent element'}}},\"meta-refresh\":{impact:\"critical\",messages:{pass:function(a){return\"<meta> tag does not immediately refresh the page\"},fail:function(a){return\"<meta> tag forces timed refresh of page\"}}},\"meta-viewport-large\":{impact:\"minor\",messages:{pass:function(a){\nreturn\"<meta> tag does not prevent significant zooming on mobile devices\"},fail:function(a){return\"<meta> tag limits zooming on mobile devices\"}}},\"meta-viewport\":{impact:\"critical\",messages:{pass:function(a){return\"<meta> tag does not disable zooming on mobile devices\"},fail:function(a){return\"<meta> tag disables zooming on mobile devices\"}}},\"p-as-heading\":{impact:\"serious\",messages:{pass:function(a){return\"<p> elements are not styled as headings\"},fail:function(a){return\"Heading elements should be used instead of styled p elements\"}}},region:{impact:\"moderate\",messages:{pass:function(a){return\"Content contained by ARIA landmark\"},fail:function(a){return\"Content not contained by an ARIA landmark\"}}},\"html5-scope\":{impact:\"moderate\",messages:{pass:function(a){return\"Scope attribute is only used on table header elements (<th>)\"},fail:function(a){return\"In HTML 5, scope attributes may only be used on table header elements (<th>)\"}}},\"scope-value\":{impact:\"critical\",messages:{pass:function(a){return\"Scope attribute is used correctly\"},fail:function(a){return\"The value of the scope attribute may only be 'row' or 'col'\"}}},exists:{impact:\"minor\",messages:{pass:function(a){return\"Element does not exist\"},fail:function(a){return\"Element exists\"}}},\"skip-link\":{impact:\"moderate\",messages:{pass:function(a){return\"Skip link target exists\"},incomplete:function(a){return\"Skip link target should become visible on activation\"},fail:function(a){return\"No skip link target\"}}},tabindex:{impact:\"serious\",messages:{pass:function(a){return\"Element does not have a tabindex greater than 0\"},fail:function(a){return\"Element has a tabindex greater than 0\"}}},\"same-caption-summary\":{impact:\"minor\",messages:{pass:function(a){return\"Content of summary attribute and <caption> are not duplicated\"},fail:function(a){return\"Content of summary attribute and <caption> element are identical\"}}},\"caption-faked\":{impact:\"serious\",messages:{pass:function(a){return\"The first row of a table is not used as a caption\"},fail:function(a){return\"The first row of the table should be a caption instead of a table cell\"}}},\"td-has-header\":{impact:\"critical\",messages:{pass:function(a){return\"All non-empty data cells have table headers\"},fail:function(a){return\"Some non-empty data cells do not have table headers\"}}},\"td-headers-attr\":{impact:\"serious\",messages:{pass:function(a){return\"The headers attribute is exclusively used to refer to other cells in the table\"},fail:function(a){return\"The headers attribute is not exclusively used to refer to other cells in the table\"}}},\"th-has-data-cells\":{impact:\"serious\",messages:{pass:function(a){return\"All table header cells refer to data cells\"},fail:function(a){return\"Not all table header cells refer to data cells\"},incomplete:function(a){return\"Table data cells are missing or empty\"}}},description:{impact:\"critical\",messages:{pass:function(a){return\"The multimedia element has an audio description track\"},fail:function(a){return\"The multimedia element does not have an audio description track\"},incomplete:function(a){return\"An audio description track for this element could not be found\"}}}},failureSummaries:{any:{failureMessage:function(a){var b=\"Fix any of the following:\",c=a;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\"\\n  \"+d.split(\"\\n\").join(\"\\n  \");return b}},none:{failureMessage:function(a){var b=\"Fix all of the following:\",c=a;if(c)for(var d,e=-1,f=c.length-1;e<f;)d=c[e+=1],b+=\"\\n  \"+d.split(\"\\n\").join(\"\\n  \");return b}}},incompleteFallbackMessage:function(a){return\"aXe couldn't tell the reason. Time to break out the element inspector!\"}},rules:[{id:\"accesskeys\",selector:\"[accesskey]\",excludeHidden:!1,tags:[\"wcag2a\",\"wcag211\",\"cat.keyboard\"],all:[],any:[],none:[\"accesskeys\"]},{id:\"area-alt\",selector:\"map area[href]\",excludeHidden:!1,tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag111\",\"section508\",\"section508.22.a\"],all:[],any:[\"non-empty-alt\",\"non-empty-title\",\"aria-label\",\"aria-labelledby\"],none:[]},{id:\"aria-allowed-attr\",matches:function(a,b){var c=a.getAttribute(\"role\");c||(c=axe.commons.aria.implicitRole(a));var d=axe.commons.aria.allowedAttr(c);if(c&&d){var e=/^aria-/;if(a.hasAttributes())for(var f=a.attributes,g=0,h=f.length;g<h;g++)if(e.test(f[g].name))return!0}return!1},tags:[\"cat.aria\",\"wcag2a\",\"wcag411\",\"wcag412\"],all:[],any:[\"aria-allowed-attr\"],none:[]},{id:\"aria-hidden-body\",selector:\"body\",excludeHidden:!1,tags:[\"cat.aria\",\"wcag2a\",\"wcag412\"],all:[],any:[\"aria-hidden-body\"],none:[]},{id:\"aria-required-attr\",selector:\"[role]\",tags:[\"cat.aria\",\"wcag2a\",\"wcag411\",\"wcag412\"],all:[],any:[\"aria-required-attr\"],none:[]},{id:\"aria-required-children\",selector:\"[role]\",tags:[\"cat.aria\",\"wcag2a\",\"wcag131\"],all:[],any:[\"aria-required-children\"],none:[]},{id:\"aria-required-parent\",selector:\"[role]\",tags:[\"cat.aria\",\"wcag2a\",\"wcag131\"],all:[],any:[\"aria-required-parent\"],none:[]},{id:\"aria-roles\",selector:\"[role]\",tags:[\"cat.aria\",\"wcag2a\",\"wcag131\",\"wcag411\",\"wcag412\"],all:[],any:[],none:[\"invalidrole\",\"abstractrole\"]},{id:\"aria-valid-attr-value\",matches:function(a,b){var c=/^aria-/;if(a.hasAttributes())for(var d=a.attributes,e=0,f=d.length;e<f;e++)if(c.test(d[e].name))return!0;return!1},tags:[\"cat.aria\",\"wcag2a\",\"wcag131\",\"wcag411\",\"wcag412\"],all:[{options:[],id:\"aria-valid-attr-value\"},\"aria-errormessage\"],any:[],none:[]},{id:\"aria-valid-attr\",matches:function(a,b){var c=/^aria-/;if(a.hasAttributes())for(var d=a.attributes,e=0,f=d.length;e<f;e++)if(c.test(d[e].name))return!0;return!1},tags:[\"cat.aria\",\"wcag2a\",\"wcag411\"],all:[],any:[{options:[],id:\"aria-valid-attr\"}],none:[]},{id:\"audio-caption\",selector:\"audio\",excludeHidden:!1,tags:[\"cat.time-and-media\",\"wcag2a\",\"wcag121\",\"section508\",\"section508.22.a\"],all:[],any:[],none:[\"caption\"]},{id:\"blink\",selector:\"blink\",excludeHidden:!1,tags:[\"cat.time-and-media\",\"wcag2a\",\"wcag222\",\"section508\",\"section508.22.j\"],all:[],any:[],none:[\"is-on-screen\"]},{id:\"button-name\",selector:'button, [role=\"button\"], input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',tags:[\"cat.name-role-value\",\"wcag2a\",\"wcag412\",\"section508\",\"section508.22.a\"],all:[],any:[\"non-empty-if-present\",\"non-empty-value\",\"button-has-visible-text\",\"aria-label\",\"aria-labelledby\",\"role-presentation\",\"role-none\"],none:[\"focusable-no-name\"]},{id:\"bypass\",selector:\"html\",pageLevel:!0,matches:function(a,b){return!!a.querySelector(\"a[href]\")},tags:[\"cat.keyboard\",\"wcag2a\",\"wcag241\",\"section508\",\"section508.22.o\"],all:[],any:[\"internal-link-present\",\"header-present\",\"landmark\"],none:[]},{id:\"checkboxgroup\",selector:\"input[type=checkbox][name]\",tags:[\"cat.forms\",\"best-practice\"],all:[],any:[\"group-labelledby\",\"fieldset\"],none:[]},{id:\"color-contrast\",matches:function(a,b){var c=a.nodeName.toUpperCase(),d=a.type;if(\"true\"===a.getAttribute(\"aria-disabled\")||axe.commons.dom.findUpVirtual(b,'[aria-disabled=\"true\"]'))return!1;if(\"INPUT\"===c)return-1===[\"hidden\",\"range\",\"color\",\"checkbox\",\"radio\",\"image\"].indexOf(d)&&!a.disabled;if(\"SELECT\"===c)return!!a.options.length&&!a.disabled;if(\"TEXTAREA\"===c)return!a.disabled;if(\"OPTION\"===c)return!1;if(\"BUTTON\"===c&&a.disabled||axe.commons.dom.findUpVirtual(b,\"button[disabled]\"))return!1;if(\"FIELDSET\"===c&&a.disabled||axe.commons.dom.findUpVirtual(b,\"fieldset[disabled]\"))return!1;var e=axe.commons.dom.findUpVirtual(b,\"label\");if(\"LABEL\"===c||e){var f=a,g=b;e&&(f=e,g=axe.utils.getNodeFromTree(axe._tree[0],e));var h=axe.commons.dom.getRootNode(f),i=f.htmlFor&&h.getElementById(f.htmlFor);if(i&&i.disabled)return!1;var i=axe.utils.querySelectorAll(g,'input:not([type=\"hidden\"]):not([type=\"image\"]):not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]), select, textarea');if(i.length&&i[0].actualNode.disabled)return!1}if(a.getAttribute(\"id\")){var j=axe.commons.utils.escapeSelector(a.getAttribute(\"id\")),k=axe.commons.dom.getRootNode(a),i=k.querySelector(\"[aria-labelledby~=\"+j+\"]\");if(i&&i.disabled)return!1}if(\"\"===axe.commons.text.visibleVirtual(b,!1,!0))return!1;var l,m,n=document.createRange(),o=b.children,p=o.length;for(m=0;m<p;m++)l=o[m],3===l.actualNode.nodeType&&\"\"!==axe.commons.text.sanitize(l.actualNode.nodeValue)&&n.selectNodeContents(l.actualNode);var q=n.getClientRects();for(p=q.length,m=0;m<p;m++)if(axe.commons.dom.visuallyOverlaps(q[m],a))return!0;return!1},excludeHidden:!1,options:{noScroll:!1},tags:[\"cat.color\",\"wcag2aa\",\"wcag143\"],all:[],any:[\"color-contrast\"],none:[]},{id:\"definition-list\",selector:\"dl\",matches:function(a,b){return!a.getAttribute(\"role\")},tags:[\"cat.structure\",\"wcag2a\",\"wcag131\"],all:[],any:[],none:[\"structured-dlitems\",\"only-dlitems\"]},{id:\"dlitem\",selector:\"dd, dt\",matches:function(a,b){return!a.getAttribute(\"role\")},tags:[\"cat.structure\",\"wcag2a\",\"wcag131\"],all:[],any:[\"dlitem\"],none:[]},{id:\"document-title\",selector:\"html\",matches:function(a,b){return a.ownerDocument.defaultView.self===a.ownerDocument.defaultView.top},tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag242\"],all:[],any:[\"doc-has-title\"],none:[]},{id:\"duplicate-id\",selector:\"[id]\",excludeHidden:!1,tags:[\"cat.parsing\",\"wcag2a\",\"wcag411\"],all:[],any:[\"duplicate-id\"],none:[]},{id:\"empty-heading\",selector:'h1, h2, h3, h4, h5, h6, [role=\"heading\"]',matches:function(a,b){var c=void 0;return a.hasAttribute(\"role\")&&(c=a.getAttribute(\"role\").split(/\\s+/i).filter(axe.commons.aria.isValidRole)),c&&c.length>0?c.includes(\"heading\"):\"heading\"===axe.commons.aria.implicitRole(a)},tags:[\"cat.name-role-value\",\"best-practice\"],all:[],any:[\"has-visible-text\"],none:[]},{id:\"focus-order-semantics\",selector:\"div, h1, h2, h3, h4, h5, h6, [role=heading], p, span\",matches:function(a,b){return axe.commons.dom.insertedIntoFocusOrder(a)},tags:[\"cat.keyboard\",\"best-practice\",\"experimental\"],all:[],any:[{options:[],id:\"has-widget-role\"},{options:[],id:\"valid-scrollable-semantics\"}],none:[]},{id:\"frame-title-unique\",selector:\"frame[title], iframe[title]\",matches:function(a,b){var c=a.getAttribute(\"title\");return!!(c?axe.commons.text.sanitize(c).trim():\"\")},tags:[\"cat.text-alternatives\",\"best-practice\"],all:[],any:[],none:[\"unique-frame-title\"]},{id:\"frame-title\",selector:\"frame, iframe\",tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag241\",\"section508\",\"section508.22.i\"],all:[],any:[\"aria-label\",\"aria-labelledby\",\"non-empty-title\",\"role-presentation\",\"role-none\"],none:[]},{id:\"heading-order\",selector:\"h1, h2, h3, h4, h5, h6, [role=heading]\",matches:function(a,b){var c=void 0;return a.hasAttribute(\"role\")&&(c=a.getAttribute(\"role\").split(/\\s+/i).filter(axe.commons.aria.isValidRole)),c&&c.length>0?c.includes(\"heading\"):\"heading\"===axe.commons.aria.implicitRole(a)},tags:[\"cat.semantics\",\"best-practice\"],all:[],any:[\"heading-order\"],none:[]},{id:\"hidden-content\",selector:\"*\",excludeHidden:!1,tags:[\"experimental\",\"review-item\"],all:[],any:[\"hidden-content\"],none:[]},{id:\"html-has-lang\",selector:\"html\",tags:[\"cat.language\",\"wcag2a\",\"wcag311\"],all:[],any:[\"has-lang\"],none:[]},{id:\"html-lang-valid\",selector:\"html[lang]\",tags:[\"cat.language\",\"wcag2a\",\"wcag311\"],all:[],any:[],none:[\"valid-lang\"]},{id:\"image-alt\",selector:\"img, [role='img']:not(svg)\",tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag111\",\"section508\",\"section508.22.a\"],all:[],any:[\"has-alt\",\"aria-label\",\"aria-labelledby\",\"non-empty-title\",\"role-presentation\",\"role-none\"],none:[]},{id:\"image-redundant-alt\",selector:'button, [role=\"button\"], a[href], p, li, td, th',tags:[\"cat.text-alternatives\",\"best-practice\"],all:[],any:[],none:[\"duplicate-img-label\"]},{id:\"input-image-alt\",selector:'input[type=\"image\"]',tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag111\",\"section508\",\"section508.22.a\"],all:[],any:[\"non-empty-alt\",\"aria-label\",\"aria-labelledby\",\"non-empty-title\"],none:[]},{id:\"label-title-only\",selector:\"input, select, textarea\",matches:function(a,b){return\"input\"!==a.nodeName.toLowerCase()||!1===a.hasAttribute(\"type\")||!1===[\"hidden\",\"image\",\"button\",\"submit\",\"reset\"].includes(a.getAttribute(\"type\").toLowerCase())},tags:[\"cat.forms\",\"best-practice\"],all:[],any:[],none:[\"title-only\"]},{id:\"label\",selector:\"input, select, textarea\",matches:function(a,b){return\"input\"!==a.nodeName.toLowerCase()||!1===a.hasAttribute(\"type\")||!1===[\"hidden\",\"image\",\"button\",\"submit\",\"reset\"].includes(a.getAttribute(\"type\").toLowerCase())},tags:[\"cat.forms\",\"wcag2a\",\"wcag332\",\"wcag131\",\"section508\",\"section508.22.n\"],all:[],any:[\"aria-label\",\"aria-labelledby\",\"implicit-label\",\"explicit-label\",\"non-empty-title\"],none:[\"help-same-as-label\",\"multiple-label\"]},{id:\"landmark-main-is-top-level\",selector:\"main, [role=main]\",tags:[\"best-practice\"],all:[],any:[\"main-is-top-level\"],none:[]},{id:\"landmark-one-main\",selector:\"html\",tags:[\"best-practice\"],all:[\"has-at-least-one-main\",\"has-no-more-than-one-main\"],any:[],none:[]},{id:\"layout-table\",selector:\"table\",matches:function(a,b){return!axe.commons.table.isDataTable(a)},tags:[\"cat.semantics\",\"wcag2a\",\"wcag131\"],all:[],any:[],none:[\"has-th\",\"has-caption\",\"has-summary\"]},{id:\"link-in-text-block\",selector:\"a[href], [role=link]\",matches:function(a,b){var c=axe.commons.text.sanitize(a.textContent),d=a.getAttribute(\"role\");return(!d||\"link\"===d)&&(!!c&&(!!axe.commons.dom.isVisible(a,!1)&&axe.commons.dom.isInTextBlock(a)))},excludeHidden:!1,tags:[\"cat.color\",\"experimental\",\"wcag2a\",\"wcag141\"],all:[\"link-in-text-block\"],any:[],none:[]},{id:\"link-name\",selector:\"a[href], [role=link][href]\",matches:function(a,b){return\"button\"!==a.getAttribute(\"role\")},tags:[\"cat.name-role-value\",\"wcag2a\",\"wcag111\",\"wcag412\",\"wcag244\",\"section508\",\"section508.22.a\"],all:[],any:[\"has-visible-text\",\"aria-label\",\"aria-labelledby\",\"role-presentation\",\"role-none\"],none:[\"focusable-no-name\"]},{id:\"list\",selector:\"ul, ol\",matches:function(a,b){return!a.getAttribute(\"role\")},tags:[\"cat.structure\",\"wcag2a\",\"wcag131\"],all:[],any:[],none:[\"only-listitems\"]},{id:\"listitem\",selector:\"li\",matches:function(a,b){return!a.getAttribute(\"role\")},tags:[\"cat.structure\",\"wcag2a\",\"wcag131\"],all:[],any:[\"listitem\"],none:[]},{id:\"marquee\",selector:\"marquee\",excludeHidden:!1,tags:[\"cat.parsing\",\"wcag2a\",\"wcag222\"],all:[],any:[],none:[\"is-on-screen\"]},{id:\"meta-refresh\",selector:'meta[http-equiv=\"refresh\"]',excludeHidden:!1,tags:[\"cat.time\",\"wcag2a\",\"wcag2aaa\",\"wcag221\",\"wcag224\",\"wcag325\"],all:[],any:[\"meta-refresh\"],none:[]},{id:\"meta-viewport-large\",selector:'meta[name=\"viewport\"]',excludeHidden:!1,tags:[\"cat.sensory-and-visual-cues\",\"best-practice\"],all:[],any:[{options:{scaleMinimum:5,lowerBound:2},id:\"meta-viewport-large\"}],none:[]},{id:\"meta-viewport\",selector:'meta[name=\"viewport\"]',excludeHidden:!1,tags:[\"cat.sensory-and-visual-cues\",\"wcag2aa\",\"wcag144\"],all:[],any:[{options:{scaleMinimum:2},id:\"meta-viewport\"}],none:[]},{id:\"object-alt\",selector:\"object\",tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag111\",\"section508\",\"section508.22.a\"],all:[],any:[\"has-visible-text\",\"aria-label\",\"aria-labelledby\",\"non-empty-title\"],none:[]},{id:\"p-as-heading\",selector:\"p\",matches:function(a,b){var c=Array.from(a.parentNode.childNodes),d=a.textContent.trim(),e=/[.!?:;](?![.!?:;])/g;return!(0===d.length||(d.match(e)||[]).length>=2)&&0!==c.slice(c.indexOf(a)+1).filter(function(a){return\"P\"===a.nodeName.toUpperCase()&&\"\"!==a.textContent.trim()}).length},tags:[\"cat.semantics\",\"wcag2a\",\"wcag131\",\"experimental\"],all:[{options:{margins:[{weight:150,italic:!0},{weight:150,size:1.15},{italic:!0,size:1.15},{size:1.4}]},id:\"p-as-heading\"}],any:[],none:[]},{id:\"radiogroup\",selector:\"input[type=radio][name]\",tags:[\"cat.forms\",\"best-practice\"],all:[],any:[\"group-labelledby\",\"fieldset\"],none:[]},{id:\"region\",selector:\"html\",pageLevel:!0,tags:[\"cat.keyboard\",\"best-practice\"],all:[],any:[\"region\"],none:[]},{id:\"scope-attr-valid\",selector:\"td[scope], th[scope]\",tags:[\"cat.tables\",\"best-practice\"],all:[\"html5-scope\",\"scope-value\"],any:[],none:[]},{id:\"server-side-image-map\",selector:\"img[ismap]\",tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag211\",\"section508\",\"section508.22.f\"],all:[],any:[],none:[\"exists\"]},{id:\"skip-link\",selector:\"a[href]\",matches:function(a,b){var c=a.getAttribute(\"href\");return\"#\"===c[0]&&c.length>1},tags:[\"cat.keyboard\",\"best-practice\"],all:[],any:[\"skip-link\"],none:[]},{id:\"tabindex\",selector:\"[tabindex]\",tags:[\"cat.keyboard\",\"best-practice\"],all:[],any:[\"tabindex\"],none:[]},{id:\"table-duplicate-name\",selector:\"table\",tags:[\"cat.tables\",\"best-practice\"],all:[],any:[],none:[\"same-caption-summary\"]},{id:\"table-fake-caption\",selector:\"table\",matches:function(a,b){return axe.commons.table.isDataTable(a)},tags:[\"cat.tables\",\"experimental\",\"wcag2a\",\"wcag131\",\"section508\",\"section508.22.g\"],all:[\"caption-faked\"],any:[],none:[]},{id:\"td-has-header\",selector:\"table\",matches:function(a,b){if(axe.commons.table.isDataTable(a)){var c=axe.commons.table.toArray(a);return c.length>=3&&c[0].length>=3&&c[1].length>=3&&c[2].length>=3}return!1},tags:[\"cat.tables\",\"experimental\",\"wcag2a\",\"wcag131\",\"section508\",\"section508.22.g\"],all:[\"td-has-header\"],any:[],none:[]},{id:\"td-headers-attr\",selector:\"table\",tags:[\"cat.tables\",\"wcag2a\",\"wcag131\",\"section508\",\"section508.22.g\"],all:[\"td-headers-attr\"],any:[],none:[]},{id:\"th-has-data-cells\",selector:\"table\",matches:function(a,b){return axe.commons.table.isDataTable(a)},tags:[\"cat.tables\",\"wcag2a\",\"wcag131\",\"section508\",\"section508.22.g\"],all:[\"th-has-data-cells\"],any:[],none:[]},{id:\"valid-lang\",selector:\"[lang], [xml\\\\:lang]\",matches:function(a,b){return\"html\"!==a.nodeName.toLowerCase()},tags:[\"cat.language\",\"wcag2aa\",\"wcag312\"],all:[],any:[],none:[\"valid-lang\"]},{id:\"video-caption\",selector:\"video\",excludeHidden:!1,tags:[\"cat.text-alternatives\",\"wcag2a\",\"wcag122\",\"wcag123\",\"section508\",\"section508.22.a\"],all:[],any:[],none:[\"caption\"]},{id:\"video-description\",selector:\"video\",excludeHidden:!1,tags:[\"cat.text-alternatives\",\"wcag2aa\",\"wcag125\",\"section508\",\"section508.22.b\"],all:[],any:[],none:[\"description\"]}],checks:[{id:\"abstractrole\",evaluate:function(a,b,c){return\"abstract\"===axe.commons.aria.getRoleType(a.getAttribute(\"role\"))}},{id:\"aria-allowed-attr\",evaluate:function(a,b,c){b=b||{};var d,e,f,g=[],h=a.getAttribute(\"role\"),i=a.attributes;if(h||(h=axe.commons.aria.implicitRole(a)),f=axe.commons.aria.allowedAttr(h),Array.isArray(b[h])&&(f=axe.utils.uniqueArray(b[h].concat(f))),h&&f)for(var j=0,k=i.length;j<k;j++)d=i[j],e=d.name,axe.commons.aria.validateAttr(e)&&!f.includes(e)&&g.push(e+'=\"'+d.nodeValue+'\"');return!g.length||(this.data(g),!1)}},{id:\"aria-hidden-body\",evaluate:function(a,b,c){return\"true\"!==a.getAttribute(\"aria-hidden\")}},{id:\"aria-errormessage\",evaluate:function(a,b,c){b=Array.isArray(b)?b:[];var d=a.getAttribute(\"aria-errormessage\"),e=a.hasAttribute(\"aria-errormessage\"),f=axe.commons.dom.getRootNode(a);return!(-1===b.indexOf(d)&&e&&!function(){var b=d&&f.getElementById(d);if(b)return\"alert\"===b.getAttribute(\"role\")||\"assertive\"===b.getAttribute(\"aria-live\")||axe.utils.tokenList(a.getAttribute(\"aria-describedby\")||\"\").indexOf(d)>-1}())||(this.data(d),!1)}},{id:\"has-widget-role\",evaluate:function(a,b,c){var d=a.getAttribute(\"role\");if(null===d)return!1;var e=axe.commons.aria.getRoleType(d);return\"widget\"===e||\"composite\"===e},options:[]},{id:\"invalidrole\",evaluate:function(a,b,c){return!axe.commons.aria.isValidRole(a.getAttribute(\"role\"))}},{id:\"aria-required-attr\",evaluate:function(a,b,c){b=b||{};var d=[];if(a.hasAttributes()){var e,f=a.getAttribute(\"role\"),g=axe.commons.aria.requiredAttr(f);if(Array.isArray(b[f])&&(g=axe.utils.uniqueArray(b[f],g)),f&&g)for(var h=0,i=g.length;h<i;h++)e=g[h],a.getAttribute(e)||d.push(e)}return!d.length||(this.data(d),!1)}},{id:\"aria-required-children\",evaluate:function(a,b,c){function d(a,b,c,d){if(null===a)return!1;var e=g(c),f=['[role=\"'+c+'\"]'];return e&&(f=f.concat(e)),f=f.join(\",\"),d?h(a,f)||!!axe.utils.querySelectorAll(b,f)[0]:!!axe.utils.querySelectorAll(b,f)[0]}function e(a,b){var c,e;for(c=0,e=a.length;c<e;c++)if(null!==a[c]){var f=axe.utils.getNodeFromTree(axe._tree[0],a[c]);if(d(a[c],f,b,!0))return!0}return!1}var f=axe.commons.aria.requiredOwned,g=axe.commons.aria.implicitNodes,h=axe.commons.utils.matchesSelector,i=axe.commons.dom.idrefs,j=a.getAttribute(\"role\"),k=f(j);if(!k)return!0;var l=!1,m=k.one;if(!m){var l=!0;m=k.all}var n=function(a,b,f,g){var h,j=b.length,k=[],l=i(a,\"aria-owns\");for(h=0;h<j;h++){var m=b[h];if(d(a,c,m)||e(l,m)){if(!f)return null}else f&&k.push(m)}if(\"combobox\"===g){var n=k.indexOf(\"textbox\"),o=[\"text\",\"search\",\"email\",\"url\",\"tel\"];n>=0&&\"INPUT\"===a.tagName&&o.includes(a.type)&&k.splice(n,1);var p=k.indexOf(\"listbox\"),q=a.getAttribute(\"aria-expanded\");p>=0&&(!q||\"false\"===q)&&k.splice(p,1)}return k.length?k:!f&&b.length?b:null}(a,m,l,j);return!n||(this.data(n),!1)}},{id:\"aria-required-parent\",evaluate:function(a,b,c){function d(a){return(axe.commons.aria.implicitNodes(a)||[]).concat('[role=\"'+a+'\"]').join(\",\")}function e(a,b,c){var e,f,g=a.actualNode.getAttribute(\"role\"),h=[];if(b||(b=axe.commons.aria.requiredContext(g)),!b)return null;for(e=0,f=b.length;e<f;e++){if(c&&axe.utils.matchesSelector(a.actualNode,d(b[e])))return null;if(axe.commons.dom.findUpVirtual(a,d(b[e])))return null;h.push(b[e])}return h}var f=e(c);if(!f)return!0;var g=function(a){for(var b=[],c=null;a;){if(a.getAttribute(\"id\")){var d=axe.commons.utils.escapeSelector(a.getAttribute(\"id\"));c=axe.commons.dom.getRootNode(a).querySelector(\"[aria-owns~=\"+d+\"]\"),c&&b.push(c)}a=a.parentElement}return b.length?b:null}(a);if(g)for(var h=0,i=g.length;h<i;h++)if(!(f=e(axe.utils.getNodeFromTree(axe._tree[0],g[h]),f,!0)))return!0;return this.data(f),!1}},{id:\"aria-valid-attr-value\",evaluate:function(a,b,c){b=Array.isArray(b)?b:[];for(var d,e,f=[],g=/^aria-/,h=a.attributes,i=[\"aria-errormessage\"],j=0,k=h.length;j<k;j++)d=h[j],e=d.name,i.includes(e)||-1===b.indexOf(e)&&g.test(e)&&!axe.commons.aria.validateAttrValue(a,e)&&f.push(e+'=\"'+d.nodeValue+'\"');return!f.length||(this.data(f),!1)},options:[]},{id:\"aria-valid-attr\",evaluate:function(a,b,c){b=Array.isArray(b)?b:[];for(var d,e=[],f=/^aria-/,g=a.attributes,h=0,i=g.length;h<i;h++)d=g[h].name,-1===b.indexOf(d)&&f.test(d)&&!axe.commons.aria.validateAttr(d)&&e.push(d);return!e.length||(this.data(e),!1)},options:[]},{id:\"valid-scrollable-semantics\",evaluate:function(a,b,c){function d(a){var b=a.tagName.toUpperCase();return f[b]||!1}function e(a){var b=a.getAttribute(\"role\");return!!b&&(g[b.toLowerCase()]||!1)}var f={ARTICLE:!0,ASIDE:!0,NAV:!0,SECTION:!0},g={banner:!1,complementary:!0,contentinfo:!0,form:!0,main:!0,navigation:!0,region:!0,search:!1};return function(a){return e(a)||d(a)}(a)},options:[]},{id:\"color-contrast\",evaluate:function(a,b,c){if(!axe.commons.dom.isVisible(a,!1))return!0;var d,e=!!(b||{}).noScroll,f=[],g=axe.commons.color.getBackgroundColor(a,f,e),h=axe.commons.color.getForegroundColor(a,e),i=window.getComputedStyle(a),j=parseFloat(i.getPropertyValue(\"font-size\")),k=i.getPropertyValue(\"font-weight\"),l=-1!==[\"bold\",\"bolder\",\"600\",\"700\",\"800\",\"900\"].indexOf(k),m=axe.commons.color.hasValidContrastRatio(g,h,j,l),n=Math.floor(100*m.contrastRatio)/100;null===g&&(d=axe.commons.color.incompleteData.get(\"bgColor\"));var o=!1;1===n&&(o=!0,d=axe.commons.color.incompleteData.set(\"bgColor\",\"equalRatio\"));var p={fgColor:h?h.toHexString():void 0,bgColor:g?g.toHexString():void 0,contrastRatio:m?n:void 0,fontSize:(72*j/96).toFixed(1)+\"pt\",fontWeight:l?\"bold\":\"normal\",missingData:d,expectedContrastRatio:m.expectedContrastRatio+\":1\"};return this.data(p),null===h||null===g||o?(d=null,axe.commons.color.incompleteData.clear(),void this.relatedNodes(f)):(m.isValid||this.relatedNodes(f),m.isValid)}},{id:\"link-in-text-block\",evaluate:function(a,b,c){function d(a,b){var c=a.getRelativeLuminance(),d=b.getRelativeLuminance();return(Math.max(c,d)+.05)/(Math.min(c,d)+.05)}function e(a){var b=window.getComputedStyle(a).getPropertyValue(\"display\");return-1!==i.indexOf(b)||\"table-\"===b.substr(0,6)}var f=axe.commons,g=f.color,h=f.dom,i=[\"block\",\"list-item\",\"table\",\"flex\",\"grid\",\"inline-block\"];if(e(a))return!1;for(var j=h.getComposedParent(a);1===j.nodeType&&!e(j);)j=h.getComposedParent(j);if(this.relatedNodes([j]),g.elementIsDistinct(a,j))return!0;var k,l;if(k=g.getForegroundColor(a),l=g.getForegroundColor(j),k&&l){var m=d(k,l);if(1===m)return!0;if(m>=3)return axe.commons.color.incompleteData.set(\"fgColor\",\"bgContrast\"),this.data({missingData:axe.commons.color.incompleteData.get(\"fgColor\")}),void axe.commons.color.incompleteData.clear();if(k=g.getBackgroundColor(a),l=g.getBackgroundColor(j),!k||!l||d(k,l)>=3){var n=void 0;return n=k&&l?\"bgContrast\":axe.commons.color.incompleteData.get(\"bgColor\"),axe.commons.color.incompleteData.set(\"fgColor\",n),this.data({missingData:axe.commons.color.incompleteData.get(\"fgColor\")}),void axe.commons.color.incompleteData.clear()}return!1}}},{id:\"fieldset\",evaluate:function(a,b,c){function d(a,b){return axe.commons.utils.toArray(a.querySelectorAll('select,textarea,button,input:not([name=\"'+b+'\"]):not([type=\"hidden\"])'))}function e(a,b){var c=a.firstElementChild;if(!c||\"LEGEND\"!==c.nodeName.toUpperCase())return i.relatedNodes([a]),h=\"no-legend\",!1;if(!axe.commons.text.accessibleText(c))return i.relatedNodes([c]),h=\"empty-legend\",!1;var e=d(a,b);return!e.length||(i.relatedNodes(e),h=\"mixed-inputs\",!1)}function f(a,b){var c=axe.commons.dom.idrefs(a,\"aria-labelledby\").some(function(a){return a&&axe.commons.text.accessibleText(a)}),e=a.getAttribute(\"aria-label\");if(!(c||e&&axe.commons.text.sanitize(e)))return i.relatedNodes(a),h=\"no-group-label\",!1;var f=d(a,b);return!f.length||(i.relatedNodes(f),h=\"group-mixed-inputs\",!1)}function g(a,b){return axe.commons.utils.toArray(a).filter(function(a){return a!==b})}var h,i=this,j={name:a.getAttribute(\"name\"),type:a.getAttribute(\"type\")},k=function(a){var b=axe.commons.utils.escapeSelector(a.actualNode.name),c=axe.commons.dom.getRootNode(a.actualNode),d=c.querySelectorAll('input[type=\"'+axe.commons.utils.escapeSelector(a.actualNode.type)+'\"][name=\"'+b+'\"]');if(d.length<2)return!0;var j=axe.commons.dom.findUpVirtual(a,\"fieldset\"),k=axe.commons.dom.findUpVirtual(a,'[role=\"group\"]'+(\"radio\"===a.actualNode.type?',[role=\"radiogroup\"]':\"\"));return k||j?j?e(j,b):f(k,b):(h=\"no-group\",i.relatedNodes(g(d,a.actualNode)),!1)}(c);return k||(j.failureCode=h),this.data(j),k},after:function(a,b){var c={};return a.filter(function(a){if(a.result)return!0;var b=a.data;if(b){if(c[b.type]=c[b.type]||{},!c[b.type][b.name])return c[b.type][b.name]=[b],!0;var d=c[b.type][b.name].some(function(a){return a.failureCode===b.failureCode});return d||c[b.type][b.name].push(b),!d}return!1})}},{id:\"group-labelledby\",evaluate:function(a,b,c){this.data({name:a.getAttribute(\"name\"),type:a.getAttribute(\"type\")});var d=axe.commons.dom.getRootNode(a),e=d.querySelectorAll('input[type=\"'+axe.commons.utils.escapeSelector(a.type)+'\"][name=\"'+axe.commons.utils.escapeSelector(a.name)+'\"]');return e.length<=1||0!==[].map.call(e,function(a){var b=a.getAttribute(\"aria-labelledby\");return b?b.split(/\\s+/):[]}).reduce(function(a,b){return a.filter(function(a){return b.includes(a)})}).filter(function(a){var b=d.getElementById(a);return b&&axe.commons.text.accessibleText(b,!0)}).length},after:function(a,b){var c={};return a.filter(function(a){var b=a.data;return!(!b||(c[b.type]=c[b.type]||{},c[b.type][b.name]))&&(c[b.type][b.name]=!0,!0)})}},{id:\"accesskeys\",evaluate:function(a,b,c){return axe.commons.dom.isVisible(a,!1)&&(this.data(a.getAttribute(\"accesskey\")),this.relatedNodes([a])),!0},after:function(a,b){var c={};return a.filter(function(a){if(!a.data)return!1;var b=a.data.toUpperCase();return c[b]?(c[b].relatedNodes.push(a.relatedNodes[0]),!1):(c[b]=a,a.relatedNodes=[],!0)}).map(function(a){return a.result=!!a.relatedNodes.length,a})}},{id:\"focusable-no-name\",evaluate:function(a,b,c){var d=a.getAttribute(\"tabindex\");return!!(axe.commons.dom.isFocusable(a)&&d>-1)&&!axe.commons.text.accessibleTextVirtual(c)}},{id:\"has-at-least-one-main\",evaluate:function(a,b,c){var d=axe.utils.querySelectorAll(c,\"main,[role=main]\");return this.data(!!d[0]),!!d[0]},after:function(a,b){for(var c=!1,d=0;d<a.length&&!c;d++)c=a[d].data;for(var d=0;d<a.length;d++)a[d].result=c;return a}},{id:\"has-no-more-than-one-main\",evaluate:function(a,b,c){return axe.utils.querySelectorAll(c,\"main,[role=main]\").length<=1}},{id:\"main-is-top-level\",evaluate:function(a,b,c){for(var d=axe.commons.aria.getRolesByType(\"landmark\"),e=axe.commons.dom.getComposedParent(a);e;){var f=e.getAttribute(\"role\");if(f||\"form\"===e.tagName.toLowerCase()||(f=axe.commons.aria.implicitRole(e)),f&&d.includes(f))return!1;e=axe.commons.dom.getComposedParent(e)}return!0}},{id:\"tabindex\",evaluate:function(a,b,c){return a.tabIndex<=0}},{id:\"duplicate-img-label\",evaluate:function(a,b,c){var d=axe.commons.text.visibleVirtual(c,!0).toLowerCase();return\"\"!==d&&axe.utils.querySelectorAll(c,\"img\").filter(function(a){var b=a.actualNode;return axe.commons.dom.isVisible(b)&&![\"none\",\"presentation\"].includes(b.getAttribute(\"role\"))}).some(function(a){return d===axe.commons.text.accessibleTextVirtual(a).toLowerCase()})}},{id:\"explicit-label\",evaluate:function(a,b,c){if(a.getAttribute(\"id\")){var d=axe.commons.dom.getRootNode(a),e=axe.commons.utils.escapeSelector(a.getAttribute(\"id\")),f=d.querySelector('label[for=\"'+e+'\"]');if(f)return!!axe.commons.text.accessibleText(f)}return!1}},{id:\"help-same-as-label\",evaluate:function(a,b,c){var d=axe.commons.text.labelVirtual(c),e=a.getAttribute(\"title\");if(!d)return!1;if(!e&&(e=\"\",a.getAttribute(\"aria-describedby\"))){e=axe.commons.dom.idrefs(a,\"aria-describedby\").map(function(a){return a?axe.commons.text.accessibleText(a):\"\"}).join(\"\")}return axe.commons.text.sanitize(e)===axe.commons.text.sanitize(d)},enabled:!1},{id:\"implicit-label\",evaluate:function(a,b,c){var d=axe.commons.dom.findUpVirtual(c,\"label\");return!!d&&!!axe.commons.text.accessibleTextVirtual(d)}},{id:\"multiple-label\",evaluate:function(a,b,c){var d=axe.commons.utils.escapeSelector(a.getAttribute(\"id\")),e=Array.from(document.querySelectorAll('label[for=\"'+d+'\"]')),f=a.parentNode;for(e.length&&(e=e.filter(function(a,b){if(0===b&&!axe.commons.dom.isVisible(a,!0)||axe.commons.dom.isVisible(a,!0))return a}));f;)\"LABEL\"===f.tagName&&-1===e.indexOf(f)&&e.push(f),f=f.parentNode;return this.relatedNodes(e),e.length>1}},{id:\"title-only\",evaluate:function(a,b,c){return!(axe.commons.text.labelVirtual(c)||!a.getAttribute(\"title\")&&!a.getAttribute(\"aria-describedby\"))}},{id:\"has-lang\",evaluate:function(a,b,c){return!!(a.getAttribute(\"lang\")||a.getAttribute(\"xml:lang\")||\"\").trim()}},{id:\"valid-lang\",evaluate:function(a,b,c){function d(a){return a.trim().split(\"-\")[0].toLowerCase()}var e,f;return e=(b||axe.commons.utils.validLangs()).map(d),f=[\"lang\",\"xml:lang\"].reduce(function(b,c){var f=a.getAttribute(c);if(\"string\"!=typeof f)return b;var g=d(f);return\"\"!==g&&-1===e.indexOf(g)&&b.push(c+'=\"'+a.getAttribute(c)+'\"'),b},[]),!!f.length&&(this.data(f),!0)}},{id:\"dlitem\",evaluate:function(a,b,c){return\"DL\"===axe.commons.dom.getComposedParent(a).nodeName.toUpperCase()}},{id:\"has-listitem\",evaluate:function(a,b,c){return c.children.every(function(a){return\"LI\"!==a.actualNode.nodeName.toUpperCase()})}},{id:\"listitem\",evaluate:function(a,b,c){var d=axe.commons.dom.getComposedParent(a);return[\"UL\",\"OL\"].includes(d.nodeName.toUpperCase())||\"list\"===(d.getAttribute(\"role\")||\"\").toLowerCase()}},{id:\"only-dlitems\",evaluate:function(a,b,c){var d=[],e=[\"STYLE\",\"META\",\"LINK\",\"MAP\",\"AREA\",\"SCRIPT\",\"DATALIST\",\"TEMPLATE\"],f=!1;return c.children.forEach(function(a){var b=a.actualNode,c=b.nodeName.toUpperCase();1===b.nodeType&&\"DT\"!==c&&\"DD\"!==c&&-1===e.indexOf(c)?d.push(b):3===b.nodeType&&\"\"!==b.nodeValue.trim()&&(f=!0)}),d.length&&this.relatedNodes(d),!!d.length||f}},{id:\"only-listitems\",evaluate:function(a,b,c){var d=[],e=[\"STYLE\",\"META\",\"LINK\",\"MAP\",\"AREA\",\"SCRIPT\",\"DATALIST\",\"TEMPLATE\"],f=!1;return c.children.forEach(function(a){var b=a.actualNode,c=b.nodeName.toUpperCase();1===b.nodeType&&\"LI\"!==c&&-1===e.indexOf(c)?d.push(b):3===b.nodeType&&\"\"!==b.nodeValue.trim()&&(f=!0)}),d.length&&this.relatedNodes(d),!!d.length||f}},{id:\"structured-dlitems\",\nevaluate:function(a,b,c){var d=c.children;if(!d||!d.length)return!1;for(var e,f=!1,g=!1,h=0;h<d.length;h++){if(e=d[h].actualNode.nodeName.toUpperCase(),\"DT\"===e&&(f=!0),f&&\"DD\"===e)return!1;\"DD\"===e&&(g=!0)}return f||g}},{id:\"caption\",evaluate:function(a,b,c){var d=axe.utils.querySelectorAll(c,\"track\");if(d.length)return!d.some(function(a){return\"captions\"===(a.actualNode.getAttribute(\"kind\")||\"\").toLowerCase()})}},{id:\"description\",evaluate:function(a,b,c){var d=axe.utils.querySelectorAll(c,\"track\");if(d.length){return!d.some(function(a){return\"descriptions\"===(a.actualNode.getAttribute(\"kind\")||\"\").toLowerCase()})}}},{id:\"meta-viewport-large\",evaluate:function(a,b,c){b=b||{};for(var d,e=a.getAttribute(\"content\")||\"\",f=e.split(/[;,]/),g={},h=b.scaleMinimum||2,i=b.lowerBound||!1,j=0,k=f.length;j<k;j++){d=f[j].split(\"=\");var l=d.shift().toLowerCase();l&&d.length&&(g[l.trim()]=d.shift().trim().toLowerCase())}return!!(i&&g[\"maximum-scale\"]&&parseFloat(g[\"maximum-scale\"])<i)||!(!i&&\"no\"===g[\"user-scalable\"])&&!(g[\"maximum-scale\"]&&parseFloat(g[\"maximum-scale\"])<h)},options:{scaleMinimum:5,lowerBound:2}},{id:\"meta-viewport\",evaluate:function(a,b,c){b=b||{};for(var d,e=a.getAttribute(\"content\")||\"\",f=e.split(/[;,]/),g={},h=b.scaleMinimum||2,i=b.lowerBound||!1,j=0,k=f.length;j<k;j++){d=f[j].split(\"=\");var l=d.shift().toLowerCase();l&&d.length&&(g[l.trim()]=d.shift().trim().toLowerCase())}return!!(i&&g[\"maximum-scale\"]&&parseFloat(g[\"maximum-scale\"])<i)||!(!i&&\"no\"===g[\"user-scalable\"])&&!(g[\"maximum-scale\"]&&parseFloat(g[\"maximum-scale\"])<h)},options:{scaleMinimum:2}},{id:\"header-present\",evaluate:function(a,b,c){return!!axe.utils.querySelectorAll(c,'h1, h2, h3, h4, h5, h6, [role=\"heading\"]')[0]}},{id:\"heading-order\",evaluate:function(a,b,c){var d=a.getAttribute(\"aria-level\");if(null!==d)return this.data(parseInt(d,10)),!0;var e=a.tagName.match(/H(\\d)/);return!e||(this.data(parseInt(e[1],10)),!0)},after:function(a,b){if(a.length<2)return a;for(var c=a[0].data,d=1;d<a.length;d++)a[d].result&&a[d].data>c+1&&(a[d].result=!1),c=a[d].data;return a}},{id:\"internal-link-present\",evaluate:function(a,b,c){return axe.utils.querySelectorAll(c,\"a[href]\").some(function(a){return\"#\"===a.actualNode.getAttribute(\"href\")[0]})}},{id:\"landmark\",evaluate:function(a,b,c){return axe.utils.querySelectorAll(c,'main, [role=\"main\"]').length>0}},{id:\"meta-refresh\",evaluate:function(a,b,c){var d=a.getAttribute(\"content\")||\"\",e=d.split(/[;,]/);return\"\"===d||\"0\"===e[0]}},{id:\"p-as-heading\",evaluate:function(a,b,c){function d(a){for(var b=a,c=a.textContent.trim(),d=c;d===c&&void 0!==b;){var e=-1;if(a=b,0===a.children.length)return a;do{e++,d=a.children[e].textContent.trim()}while(\"\"===d&&e+1<a.children.length);b=a.children[e]}return a}function e(a){switch(a){case\"lighter\":return 100;case\"normal\":return 400;case\"bold\":return 700;case\"bolder\":return 900}return a=parseInt(a),isNaN(a)?400:a}function f(a){var b=window.getComputedStyle(d(a));return{fontWeight:e(b.getPropertyValue(\"font-weight\")),fontSize:parseInt(b.getPropertyValue(\"font-size\")),isItalic:\"italic\"===b.getPropertyValue(\"font-style\")}}function g(a,b,c){return c.reduce(function(c,d){return c||(!d.size||a.fontSize/d.size>b.fontSize)&&(!d.weight||a.fontWeight-d.weight>b.fontWeight)&&(!d.italic||a.isItalic&&!b.isItalic)},!1)}var h=Array.from(a.parentNode.children),i=h.indexOf(a);b=b||{};var j=b.margins||[],k=h.slice(i+1).find(function(a){return\"P\"===a.nodeName.toUpperCase()}),l=h.slice(0,i).reverse().find(function(a){return\"P\"===a.nodeName.toUpperCase()}),m=f(a),n=k?f(k):null,o=l?f(l):null;if(!n||!g(m,n,j))return!0;var p=axe.commons.dom.findUpVirtual(c,\"blockquote\");return!!(p&&\"BLOCKQUOTE\"===p.nodeName.toUpperCase()||o&&!g(m,o,j))&&void 0},options:{margins:[{weight:150,italic:!0},{weight:150,size:1.15},{italic:!0,size:1.15},{size:1.4}]}},{id:\"region\",evaluate:function(a,b,c){function d(a){return j&&j===a}function e(a){return a.hasAttribute(\"role\")?k.includes(a.getAttribute(\"role\").toLowerCase()):l.some(function(b){return axe.utils.matchesSelector(a,b)})}function f(a){var b=a.actualNode;return e(b)||d(b)||!h.isVisible(b,!0)?[]:h.hasContent(b,!0)?[b]:a.children.filter(function(a){return 1===a.actualNode.nodeType}).map(f).reduce(function(a,b){return a.concat(b)},[])}var g=axe.commons,h=g.dom,i=g.aria,j=function(a){var b=axe.utils.querySelectorAll(a,\"a[href]\")[0];if(b&&axe.commons.dom.getElementByReference(b.actualNode,\"href\"))return b.actualNode}(c),k=i.getRolesByType(\"landmark\"),l=k.reduce(function(a,b){return a.concat(i.implicitNodes(b))},[]).filter(function(a){return null!==a}),m=f(c);return this.relatedNodes(m),0===m.length},after:function(a,b){return[a[0]]}},{id:\"skip-link\",evaluate:function(a,b,c){var d=axe.commons.dom.getElementByReference(a,\"href\");return!!d&&(axe.commons.dom.isVisible(d,!0)||void 0)}},{id:\"unique-frame-title\",evaluate:function(a,b,c){var d=axe.commons.text.sanitize(a.title).trim().toLowerCase();return this.data(d),!0},after:function(a,b){var c={};return a.forEach(function(a){c[a.data]=void 0!==c[a.data]?++c[a.data]:0}),a.forEach(function(a){a.result=!!c[a.data]}),a}},{id:\"aria-label\",evaluate:function(a,b,c){var d=a.getAttribute(\"aria-label\");return!!(d?axe.commons.text.sanitize(d).trim():\"\")}},{id:\"aria-labelledby\",evaluate:function(a,b,c){return(0,axe.commons.dom.idrefs)(a,\"aria-labelledby\").some(function(a){return a&&axe.commons.text.accessibleText(a,!0)})}},{id:\"button-has-visible-text\",evaluate:function(a,b,c){var d=a.nodeName.toUpperCase(),e=a.getAttribute(\"role\"),f=void 0;return(\"BUTTON\"===d||\"button\"===e&&\"INPUT\"!==d)&&(f=axe.commons.text.accessibleTextVirtual(c),this.data(f),!!f)}},{id:\"doc-has-title\",evaluate:function(a,b,c){var d=document.title;return!!(d?axe.commons.text.sanitize(d).trim():\"\")}},{id:\"duplicate-id\",evaluate:function(a,b,c){var d=a.getAttribute(\"id\").trim();if(!d)return!0;var e=axe.commons.dom.getRootNode(a),f=Array.from(e.querySelectorAll('[id=\"'+axe.commons.utils.escapeSelector(d)+'\"]')).filter(function(b){return b!==a});return f.length&&this.relatedNodes(f),this.data(d),0===f.length},after:function(a,b){var c=[];return a.filter(function(a){return-1===c.indexOf(a.data)&&(c.push(a.data),!0)})}},{id:\"exists\",evaluate:function(a,b,c){return!0}},{id:\"has-alt\",evaluate:function(a,b,c){var d=a.nodeName.toLowerCase();return a.hasAttribute(\"alt\")&&(\"img\"===d||\"input\"===d||\"area\"===d)}},{id:\"has-visible-text\",evaluate:function(a,b,c){return axe.commons.text.accessibleTextVirtual(c).length>0}},{id:\"is-on-screen\",evaluate:function(a,b,c){return axe.commons.dom.isVisible(a,!1)&&!axe.commons.dom.isOffscreen(a)}},{id:\"non-empty-alt\",evaluate:function(a,b,c){var d=a.getAttribute(\"alt\");return!!(d?axe.commons.text.sanitize(d).trim():\"\")}},{id:\"non-empty-if-present\",evaluate:function(a,b,c){var d=a.nodeName.toUpperCase(),e=(a.getAttribute(\"type\")||\"\").toLowerCase(),f=a.getAttribute(\"value\");return this.data(f),!(\"INPUT\"!==d||![\"submit\",\"reset\"].includes(e))&&null===f}},{id:\"non-empty-title\",evaluate:function(a,b,c){var d=a.getAttribute(\"title\");return!!(d?axe.commons.text.sanitize(d).trim():\"\")}},{id:\"non-empty-value\",evaluate:function(a,b,c){var d=a.getAttribute(\"value\");return!!(d?axe.commons.text.sanitize(d).trim():\"\")}},{id:\"role-none\",evaluate:function(a,b,c){return\"none\"===a.getAttribute(\"role\")}},{id:\"role-presentation\",evaluate:function(a,b,c){return\"presentation\"===a.getAttribute(\"role\")}},{id:\"caption-faked\",evaluate:function(a,b,c){var d=axe.commons.table.toGrid(a),e=d[0];return d.length<=1||e.length<=1||a.rows.length<=1||e.reduce(function(a,b,c){return a||b!==e[c+1]&&void 0!==e[c+1]},!1)}},{id:\"has-caption\",evaluate:function(a,b,c){return!!a.caption}},{id:\"has-summary\",evaluate:function(a,b,c){return!!a.summary}},{id:\"has-th\",evaluate:function(a,b,c){for(var d,e,f=[],g=0,h=a.rows.length;g<h;g++){d=a.rows[g];for(var i=0,j=d.cells.length;i<j;i++)e=d.cells[i],\"TH\"!==e.nodeName.toUpperCase()&&-1===[\"rowheader\",\"columnheader\"].indexOf(e.getAttribute(\"role\"))||f.push(e)}return!!f.length&&(this.relatedNodes(f),!0)}},{id:\"html5-scope\",evaluate:function(a,b,c){return!axe.commons.dom.isHTML5(document)||\"TH\"===a.nodeName.toUpperCase()}},{id:\"same-caption-summary\",evaluate:function(a,b,c){return!(!a.summary||!a.caption)&&a.summary===axe.commons.text.accessibleText(a.caption)}},{id:\"scope-value\",evaluate:function(a,b,c){b=b||{};var d=a.getAttribute(\"scope\").toLowerCase();return-1!==([\"row\",\"col\",\"rowgroup\",\"colgroup\"]||b.values).indexOf(d)}},{id:\"td-has-header\",evaluate:function(a,b,c){var d=axe.commons.table,e=[];return d.getAllCells(a).forEach(function(a){if(axe.commons.dom.hasContent(a)&&d.isDataCell(a)&&!axe.commons.aria.label(a)){var b=d.getHeaders(a);(b=b.reduce(function(a,b){return a||null!==b&&!!axe.commons.dom.hasContent(b)},!1))||e.push(a)}}),!e.length||(this.relatedNodes(e),!1)}},{id:\"td-headers-attr\",evaluate:function(a,b,c){for(var d=[],e=0,f=a.rows.length;e<f;e++)for(var g=a.rows[e],h=0,i=g.cells.length;h<i;h++)d.push(g.cells[h]);var j=d.reduce(function(a,b){return b.getAttribute(\"id\")&&a.push(b.getAttribute(\"id\")),a},[]),k=d.reduce(function(a,b){var c,d,e=(b.getAttribute(\"headers\")||\"\").split(/\\s/).reduce(function(a,b){return b=b.trim(),b&&a.push(b),a},[]);return 0!==e.length&&(b.getAttribute(\"id\")&&(c=-1!==e.indexOf(b.getAttribute(\"id\").trim())),d=e.reduce(function(a,b){return a||-1===j.indexOf(b)},!1),(c||d)&&a.push(b)),a},[]);return!(k.length>0)||(this.relatedNodes(k),!1)}},{id:\"th-has-data-cells\",evaluate:function(a,b,c){var d=axe.commons.table,e=d.getAllCells(a),f=this,g=[];e.forEach(function(a){var b=a.getAttribute(\"headers\");b&&(g=g.concat(b.split(/\\s+/)));var c=a.getAttribute(\"aria-labelledby\");c&&(g=g.concat(c.split(/\\s+/)))});var h=e.filter(function(a){return\"\"!==axe.commons.text.sanitize(a.textContent)&&(\"TH\"===a.nodeName.toUpperCase()||-1!==[\"rowheader\",\"columnheader\"].indexOf(a.getAttribute(\"role\")))}),i=d.toGrid(a);return!!h.reduce(function(a,b){if(b.getAttribute(\"id\")&&g.includes(b.getAttribute(\"id\")))return!!a||a;var c=!1,e=d.getCellPosition(b,i);return d.isColumnHeader(b)&&(c=d.traverse(\"down\",e,i).reduce(function(a,b){return a||axe.commons.dom.hasContent(b)&&!d.isColumnHeader(b)},!1)),!c&&d.isRowHeader(b)&&(c=d.traverse(\"right\",e,i).reduce(function(a,b){return a||axe.commons.dom.hasContent(b)&&!d.isRowHeader(b)},!1)),c||f.relatedNodes(b),a&&c},!0)||void 0}},{id:\"hidden-content\",evaluate:function(a,b,c){if(![\"SCRIPT\",\"HEAD\",\"TITLE\",\"NOSCRIPT\",\"STYLE\",\"TEMPLATE\"].includes(a.tagName.toUpperCase())&&axe.commons.dom.hasContentVirtual(c)){var d=window.getComputedStyle(a);if(\"none\"===d.getPropertyValue(\"display\"))return;if(\"hidden\"===d.getPropertyValue(\"visibility\")){var e=axe.commons.dom.getComposedParent(a),f=e&&window.getComputedStyle(e);if(!f||\"hidden\"!==f.getPropertyValue(\"visibility\"))return}}return!0}}],commons:function(){function a(a){return a.getPropertyValue(\"font-family\").split(/[,;]/g).map(function(a){return a.trim().toLowerCase()})}function b(b,c){var d=window.getComputedStyle(b);if(\"none\"!==d.getPropertyValue(\"background-image\"))return!0;if([\"border-bottom\",\"border-top\",\"outline\"].reduce(function(a,b){var c=new C.Color;return c.parseRgbString(d.getPropertyValue(b+\"-color\")),a||\"none\"!==d.getPropertyValue(b+\"-style\")&&parseFloat(d.getPropertyValue(b+\"-width\"))>0&&0!==c.alpha},!1))return!0;var e=window.getComputedStyle(c);if(a(d)[0]!==a(e)[0])return!0;var f=[\"text-decoration-line\",\"text-decoration-style\",\"font-weight\",\"font-style\",\"font-size\"].reduce(function(a,b){return a||d.getPropertyValue(b)!==e.getPropertyValue(b)},!1),g=d.getPropertyValue(\"text-decoration\");return g.split(\" \").length<3&&(f=f||g!==e.getPropertyValue(\"text-decoration\")),f}function c(a,b){var c=a.nodeName.toUpperCase();if(G.includes(c))return axe.commons.color.incompleteData.set(\"bgColor\",\"imgNode\"),!0;b=b||window.getComputedStyle(a);var d=b.getPropertyValue(\"background-image\"),e=\"none\"!==d;if(e){var f=/gradient/.test(d);axe.commons.color.incompleteData.set(\"bgColor\",f?\"bgGradient\":\"bgImage\")}return e}function d(a,b){b=b||window.getComputedStyle(a);var c=new C.Color;if(c.parseRgbString(b.getPropertyValue(\"background-color\")),0!==c.alpha){var d=b.getPropertyValue(\"opacity\");c.alpha=c.alpha*d}return c}function e(a,b){var c=a.getClientRects()[0],d=D.shadowElementsFromPoint(c.left,c.top);if(d)for(var e=0;e<d.length;e++)if(d[e]!==a&&d[e]===b)return!0;return!1}function f(a,b,c){var f=0;if(a>0)for(var g=a-1;g>=0;g--){var h=b[g],i=window.getComputedStyle(h),j=d(h,i);j.alpha&&e(c,h)?f+=j.alpha:b.splice(g,1)}return f}function g(a,b,c){var d=a!==b&&!D.visuallyContains(a,b)&&0!==c.alpha;return d&&axe.commons.color.incompleteData.set(\"bgColor\",\"elmPartiallyObscured\"),d}function h(a,b){var c={TD:[\"TR\",\"TBODY\"],TH:[\"TR\",\"THEAD\"],INPUT:[\"LABEL\"]},d=a.map(function(a){return a.tagName}),e=a;for(var f in c)if(d.includes(f))for(var g in c[f])if(f.hasOwnProperty(g)){var h=axe.commons.dom.findUp(b,c[f][g]);if(h&&-1===a.indexOf(h)){var i=axe.commons.dom.visuallyOverlaps(b.getBoundingClientRect(),h);i&&e.splice(d.indexOf(f)+1,0,h)}b.tagName===c[f][g]&&-1===d.indexOf(b.tagName)&&e.splice(d.indexOf(f)+1,0,b)}return e}function i(a){var b=a.indexOf(document.body),e=a;return b>1&&!c(document.documentElement)&&0===d(document.documentElement).alpha&&(e.splice(b,1),e.splice(a.indexOf(document.documentElement),1),e.push(document.body)),e}function j(a){if(!H.includes(a.actualNode.nodeName.toUpperCase()))return a.children.some(function(a){var b=a.actualNode;return 3===b.nodeType&&b.nodeValue.trim()})}function k(a){return a.disabled||!D.isVisible(a,!0)&&\"AREA\"!==a.nodeName.toUpperCase()}function l(a,b){!1!==b(a.actualNode)&&a.children.forEach(function(a){return l(a,b)})}function m(a){var b=window.getComputedStyle(a).getPropertyValue(\"display\");return I.includes(b)||\"table-\"===b.substr(0,6)}function n(a){for(var b=D.getComposedParent(a);b&&!m(b);)b=D.getComposedParent(b);return axe.utils.getNodeFromTree(axe._tree[0],b)}function o(a,b){for(a=D.getComposedParent(a);a&&\"html\"!==a.nodeName.toLowerCase();){if(a.scrollTop&&(b+=a.scrollTop)>=0)return!1;a=D.getComposedParent(a)}return!0}function p(a){\"use strict\";var b=a.match(/rect\\s*\\(([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px\\s*\\)/);return!(!b||5!==b.length)&&(b[3]-b[1]<=0&&b[2]-b[4]<=0)}function q(a){var b=void 0;return b=a.actualNode.id?D.findElmsInContext({elm:\"label\",attr:\"for\",value:a.actualNode.id,context:a.actualNode})[0]:D.findUpVirtual(a,\"label\"),axe.utils.getNodeFromTree(axe._tree[0],b)}function r(a){return[\"button\",\"reset\",\"submit\"].includes(a.actualNode.type.toLowerCase())}function s(a){var b=a.actualNode,c=b.nodeName.toUpperCase();return\"TEXTAREA\"===c||\"SELECT\"===c||\"INPUT\"===c&&\"hidden\"!==b.type.toLowerCase()}function t(a){return[\"BUTTON\",\"SUMMARY\",\"A\"].includes(a.actualNode.nodeName.toUpperCase())}function u(a){return[\"TABLE\",\"FIGURE\"].includes(a.actualNode.nodeName.toUpperCase())}function v(a){var b=a.actualNode,c=b.nodeName.toUpperCase();if(\"INPUT\"===c)return!b.hasAttribute(\"type\")||L.includes(b.type.toLowerCase())?b.value:\"\";if(\"SELECT\"===c){var d=b.options;if(d&&d.length){for(var e=\"\",f=0;f<d.length;f++)d[f].selected&&(e+=\" \"+d[f].text);return F.sanitize(e)}return\"\"}return\"TEXTAREA\"===c&&b.value?b.value:\"\"}function w(a,b){var c=a.actualNode,d=c.querySelector(b.toLowerCase());return d?F.accessibleText(d):\"\"}function x(a){if(!a)return!1;var b=a.actualNode;switch(b.nodeName.toUpperCase()){case\"SELECT\":case\"TEXTAREA\":return!0;case\"INPUT\":return!b.hasAttribute(\"type\")||L.includes(b.getAttribute(\"type\").toLowerCase());default:return!1}}function y(a){var b=a.actualNode,c=b.nodeName.toUpperCase();return[\"IMG\",\"APPLET\",\"AREA\"].includes(c)||\"INPUT\"===c&&\"image\"===b.type.toLowerCase()}function z(a){return!!F.sanitize(a)}var commons={},A=commons.aria={},B=A.lookupTable={};B.attributes={\"aria-activedescendant\":{type:\"idref\"},\"aria-atomic\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-autocomplete\":{type:\"nmtoken\",values:[\"inline\",\"list\",\"both\",\"none\"]},\"aria-busy\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-checked\":{type:\"nmtoken\",values:[\"true\",\"false\",\"mixed\",\"undefined\"]},\"aria-colcount\":{type:\"int\"},\"aria-colindex\":{type:\"int\"},\"aria-colspan\":{type:\"int\"},\"aria-controls\":{type:\"idrefs\"},\"aria-current\":{type:\"nmtoken\",values:[\"page\",\"step\",\"location\",\"date\",\"time\",\"true\",\"false\"]},\"aria-describedby\":{type:\"idrefs\"},\"aria-disabled\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-dropeffect\":{type:\"nmtokens\",values:[\"copy\",\"move\",\"reference\",\"execute\",\"popup\",\"none\"]},\"aria-errormessage\":{type:\"idref\"},\"aria-expanded\":{type:\"nmtoken\",values:[\"true\",\"false\",\"undefined\"]},\"aria-flowto\":{type:\"idrefs\"},\"aria-grabbed\":{type:\"nmtoken\",values:[\"true\",\"false\",\"undefined\"]},\"aria-haspopup\":{type:\"nmtoken\",values:[\"true\",\"false\",\"menu\",\"listbox\",\"tree\",\"grid\",\"dialog\"]},\"aria-hidden\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-invalid\":{type:\"nmtoken\",values:[\"true\",\"false\",\"spelling\",\"grammar\"]},\"aria-keyshortcuts\":{type:\"string\"},\"aria-label\":{type:\"string\"},\"aria-labelledby\":{type:\"idrefs\"},\"aria-level\":{type:\"int\"},\"aria-live\":{type:\"nmtoken\",values:[\"off\",\"polite\",\"assertive\"]},\"aria-modal\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-multiline\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-multiselectable\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-orientation\":{type:\"nmtoken\",values:[\"horizontal\",\"vertical\"]},\"aria-owns\":{type:\"idrefs\"},\"aria-placeholder\":{type:\"string\"},\"aria-posinset\":{type:\"int\"},\"aria-pressed\":{type:\"nmtoken\",values:[\"true\",\"false\",\"mixed\",\"undefined\"]},\"aria-readonly\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-relevant\":{type:\"nmtokens\",values:[\"additions\",\"removals\",\"text\",\"all\"]},\"aria-required\":{type:\"boolean\",values:[\"true\",\"false\"]},\"aria-rowcount\":{type:\"int\"},\"aria-rowindex\":{type:\"int\"},\"aria-rowspan\":{type:\"int\"},\"aria-selected\":{type:\"nmtoken\",values:[\"true\",\"false\",\"undefined\"]},\"aria-setsize\":{type:\"int\"},\"aria-sort\":{type:\"nmtoken\",values:[\"ascending\",\"descending\",\"other\",\"none\"]},\"aria-valuemax\":{type:\"decimal\"},\"aria-valuemin\":{type:\"decimal\"},\"aria-valuenow\":{type:\"decimal\"},\"aria-valuetext\":{type:\"string\"}},B.globalAttributes=[\"aria-atomic\",\"aria-busy\",\"aria-controls\",\"aria-current\",\"aria-describedby\",\"aria-disabled\",\"aria-dropeffect\",\"aria-flowto\",\"aria-grabbed\",\"aria-haspopup\",\"aria-hidden\",\"aria-invalid\",\"aria-keyshortcuts\",\"aria-label\",\"aria-labelledby\",\"aria-live\",\"aria-owns\",\"aria-relevant\"],B.role={alert:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},alertdialog:{type:\"widget\",attributes:{allowed:[\"aria-expanded\",\"aria-modal\"]},owned:null,nameFrom:[\"author\"],context:null},application:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},article:{type:\"structure\",attributes:{allowed:[\"aria-expanded\",\"aria-posinset\",\"aria-setsize\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"article\"]},banner:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"header\"]},button:{type:\"widget\",attributes:{allowed:[\"aria-expanded\",\"aria-pressed\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null,implicit:[\"button\",'input[type=\"button\"]','input[type=\"image\"]','input[type=\"reset\"]','input[type=\"submit\"]',\"summary\"]},cell:{type:\"structure\",attributes:{allowed:[\"aria-colindex\",\"aria-colspan\",\"aria-rowindex\",\"aria-rowspan\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"row\"],implicit:[\"td\",\"th\"]},checkbox:{type:\"widget\",attributes:{allowed:[\"aria-checked\",\"aria-required\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null,implicit:['input[type=\"checkbox\"]']},columnheader:{type:\"structure\",attributes:{allowed:[\"aria-colindex\",\"aria-colspan\",\"aria-expanded\",\"aria-rowindex\",\"aria-rowspan\",\"aria-required\",\"aria-readonly\",\"aria-selected\",\"aria-sort\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"row\"],implicit:[\"th\"]},combobox:{type:\"composite\",attributes:{allowed:[\"aria-expanded\",\"aria-autocomplete\",\"aria-required\",\"aria-activedescendant\",\"aria-orientation\"]},owned:{all:[\"listbox\",\"textbox\"]},nameFrom:[\"author\"],context:null},command:{nameFrom:[\"author\"],type:\"abstract\"},complementary:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"aside\"]},composite:{nameFrom:[\"author\"],type:\"abstract\"},contentinfo:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"footer\"]},definition:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"dd\",\"dfn\"]},dialog:{type:\"widget\",attributes:{allowed:[\"aria-expanded\",\"aria-modal\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"dialog\"]},directory:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null},document:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"body\"]},feed:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:{one:[\"article\"]},nameFrom:[\"author\"],context:null},form:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"form\"]},grid:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\",\"aria-colcount\",\"aria-level\",\"aria-multiselectable\",\"aria-readonly\",\"aria-rowcount\"]},owned:{one:[\"rowgroup\",\"row\"]},nameFrom:[\"author\"],context:null,implicit:[\"table\"]},gridcell:{type:\"widget\",attributes:{allowed:[\"aria-colindex\",\"aria-colspan\",\"aria-expanded\",\"aria-rowindex\",\"aria-rowspan\",\"aria-selected\",\"aria-readonly\",\"aria-required\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"row\"],implicit:[\"td\",\"th\"]},group:{type:\"structure\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"details\",\"optgroup\"]},heading:{type:\"structure\",attributes:{allowed:[\"aria-level\",\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null,implicit:[\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\"]},img:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"img\"]},input:{nameFrom:[\"author\"],type:\"abstract\"},landmark:{nameFrom:[\"author\"],type:\"abstract\"},link:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null,implicit:[\"a[href]\"]},list:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:{all:[\"listitem\"]},nameFrom:[\"author\"],context:null,implicit:[\"ol\",\"ul\",\"dl\"]},listbox:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-multiselectable\",\"aria-required\",\"aria-expanded\",\"aria-orientation\"]},owned:{all:[\"option\"]},nameFrom:[\"author\"],context:null,implicit:[\"select\"]},listitem:{type:\"structure\",attributes:{allowed:[\"aria-level\",\"aria-posinset\",\"aria-setsize\",\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"list\"],implicit:[\"li\",\"dt\"]},log:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},main:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"main\"]},marquee:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},math:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"math\"]},menu:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\",\"aria-orientation\"]},owned:{one:[\"menuitem\",\"menuitemradio\",\"menuitemcheckbox\"]},nameFrom:[\"author\"],context:null,implicit:['menu[type=\"context\"]']},menubar:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\",\"aria-orientation\"]},owned:null,nameFrom:[\"author\"],context:null},menuitem:{type:\"widget\",attributes:{allowed:[\"aria-posinset\",\"aria-setsize\",\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"menu\",\"menubar\"],implicit:['menuitem[type=\"command\"]']},menuitemcheckbox:{type:\"widget\",attributes:{allowed:[\"aria-checked\",\"aria-posinset\",\"aria-setsize\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"menu\",\"menubar\"],implicit:['menuitem[type=\"checkbox\"]']},menuitemradio:{type:\"widget\",attributes:{allowed:[\"aria-checked\",\"aria-selected\",\"aria-posinset\",\"aria-setsize\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"menu\",\"menubar\"],implicit:['menuitem[type=\"radio\"]']},navigation:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"nav\"]},none:{type:\"structure\",attributes:null,owned:null,nameFrom:[\"author\"],context:null},note:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},option:{type:\"widget\",attributes:{allowed:[\"aria-selected\",\"aria-posinset\",\"aria-setsize\",\"aria-checked\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"listbox\"],implicit:[\"option\"]},presentation:{type:\"structure\",attributes:null,owned:null,nameFrom:[\"author\"],context:null},progressbar:{type:\"widget\",attributes:{allowed:[\"aria-valuetext\",\"aria-valuenow\",\"aria-valuemax\",\"aria-valuemin\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"progress\"]},radio:{type:\"widget\",attributes:{allowed:[\"aria-checked\",\"aria-selected\",\"aria-posinset\",\"aria-setsize\",\"aria-required\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null,implicit:['input[type=\"radio\"]']},radiogroup:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-required\",\"aria-expanded\"]},owned:{all:[\"radio\"]},nameFrom:[\"author\"],context:null},range:{nameFrom:[\"author\"],type:\"abstract\"},region:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"section[aria-label]\",\"section[aria-labelledby]\",\"section[title]\"]},roletype:{type:\"abstract\"},row:{type:\"structure\",attributes:{allowed:[\"aria-activedescendant\",\"aria-colindex\",\"aria-expanded\",\"aria-level\",\"aria-selected\",\"aria-rowindex\"]},owned:{one:[\"cell\",\"columnheader\",\"rowheader\",\"gridcell\"]},nameFrom:[\"author\",\"contents\"],context:[\"rowgroup\",\"grid\",\"treegrid\",\"table\"],implicit:[\"tr\"]},rowgroup:{type:\"structure\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\"]},owned:{all:[\"row\"]},nameFrom:[\"author\",\"contents\"],context:[\"grid\",\"table\"],implicit:[\"tbody\",\"thead\",\"tfoot\"]},rowheader:{type:\"structure\",attributes:{allowed:[\"aria-colindex\",\"aria-colspan\",\"aria-expanded\",\"aria-rowindex\",\"aria-rowspan\",\"aria-required\",\"aria-readonly\",\"aria-selected\",\"aria-sort\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"row\"],implicit:[\"th\"]},scrollbar:{type:\"widget\",attributes:{required:[\"aria-controls\",\"aria-valuenow\",\"aria-valuemax\",\"aria-valuemin\"],allowed:[\"aria-valuetext\",\"aria-orientation\"]},owned:null,nameFrom:[\"author\"],context:null},search:{type:\"landmark\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},searchbox:{type:\"widget\",attributes:{allowed:[\"aria-activedescendant\",\"aria-autocomplete\",\"aria-multiline\",\"aria-readonly\",\"aria-required\",\"aria-placeholder\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:['input[type=\"search\"]']},section:{nameFrom:[\"author\",\"contents\"],type:\"abstract\"},sectionhead:{nameFrom:[\"author\",\"contents\"],type:\"abstract\"},select:{nameFrom:[\"author\"],type:\"abstract\"},separator:{type:\"structure\",attributes:{allowed:[\"aria-expanded\",\"aria-orientation\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"hr\"]},slider:{type:\"widget\",attributes:{allowed:[\"aria-valuetext\",\"aria-orientation\"],required:[\"aria-valuenow\",\"aria-valuemax\",\"aria-valuemin\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:['input[type=\"range\"]']},spinbutton:{type:\"widget\",attributes:{allowed:[\"aria-valuetext\",\"aria-required\"],required:[\"aria-valuenow\",\"aria-valuemax\",\"aria-valuemin\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:['input[type=\"number\"]']},status:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:[\"output\"]},structure:{type:\"abstract\"},switch:{type:\"widget\",attributes:{required:[\"aria-checked\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null},tab:{type:\"widget\",attributes:{allowed:[\"aria-selected\",\"aria-expanded\",\"aria-setsize\",\"aria-posinset\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"tablist\"]},table:{type:\"structure\",attributes:{allowed:[\"aria-colcount\",\"aria-rowcount\"]},owned:{one:[\"rowgroup\",\"row\"]},nameFrom:[\"author\"],context:null,implicit:[\"table\"]},tablist:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\",\"aria-level\",\"aria-multiselectable\",\"aria-orientation\"]},owned:{all:[\"tab\"]},nameFrom:[\"author\"],context:null},tabpanel:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},term:{type:\"structure\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null,implicit:[\"dt\"]},text:{type:\"structure\",owned:null,nameFrom:[\"author\",\"contents\"],context:null},textbox:{type:\"widget\",attributes:{allowed:[\"aria-activedescendant\",\"aria-autocomplete\",\"aria-multiline\",\"aria-readonly\",\"aria-required\",\"aria-placeholder\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:['input[type=\"text\"]','input[type=\"email\"]','input[type=\"password\"]','input[type=\"tel\"]','input[type=\"url\"]',\"input:not([type])\",\"textarea\"]},timer:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null},toolbar:{type:\"structure\",attributes:{allowed:[\"aria-activedescendant\",\"aria-expanded\"]},owned:null,nameFrom:[\"author\"],context:null,implicit:['menu[type=\"toolbar\"]']},tooltip:{type:\"widget\",attributes:{allowed:[\"aria-expanded\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:null},tree:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-multiselectable\",\"aria-required\",\"aria-expanded\",\"aria-orientation\"]},owned:{all:[\"treeitem\"]},nameFrom:[\"author\"],context:null},treegrid:{type:\"composite\",attributes:{allowed:[\"aria-activedescendant\",\"aria-colcount\",\"aria-expanded\",\"aria-level\",\"aria-multiselectable\",\"aria-readonly\",\"aria-required\",\"aria-rowcount\",\"aria-orientation\"]},owned:{one:[\"rowgroup\",\"row\"]},nameFrom:[\"author\"],context:null},treeitem:{type:\"widget\",attributes:{allowed:[\"aria-checked\",\"aria-selected\",\"aria-expanded\",\"aria-level\",\"aria-posinset\",\"aria-setsize\"]},owned:null,nameFrom:[\"author\",\"contents\"],context:[\"group\",\"tree\"]},widget:{type:\"abstract\"},window:{nameFrom:[\"author\"],type:\"abstract\"}};var C={};commons.color=C;var D=commons.dom={},E=commons.table={},F=commons.text={EdgeFormDefaults:{}};commons.utils=axe.utils;A.requiredAttr=function(a){\"use strict\";var b=A.lookupTable.role[a];return b&&b.attributes&&b.attributes.required||[]},A.allowedAttr=function(a){\"use strict\";var b=A.lookupTable.role[a],c=b&&b.attributes&&b.attributes.allowed||[],d=b&&b.attributes&&b.attributes.required||[];return c.concat(A.lookupTable.globalAttributes).concat(d)},A.validateAttr=function(a){\"use strict\";return!!A.lookupTable.attributes[a]},A.validateAttrValue=function(a,b){\"use strict\";var c,d,e=a.getAttribute(b),f=A.lookupTable.attributes[b],g=D.getRootNode(a);if(!f)return!0;switch(f.type){case\"boolean\":case\"nmtoken\":return\"string\"==typeof e&&-1!==f.values.indexOf(e.toLowerCase());case\"nmtokens\":return d=axe.utils.tokenList(e),d.reduce(function(a,b){return a&&-1!==f.values.indexOf(b)},0!==d.length);case\"idref\":return!(!e||!g.getElementById(e));case\"idrefs\":return d=axe.utils.tokenList(e),d.reduce(function(a,b){return!(!a||!g.getElementById(b))},0!==d.length);case\"string\":return!0;case\"decimal\":return!(!(c=e.match(/^[-+]?([0-9]*)\\.?([0-9]*)$/))||!c[1]&&!c[2]);case\"int\":return/^[-+]?[0-9]+$/.test(e)}},A.labelVirtual=function(a){var b=a.actualNode,c=void 0,d=void 0;return b.getAttribute(\"aria-labelledby\")&&(c=D.idrefs(b,\"aria-labelledby\"),d=c.map(function(a){\nvar b=axe.utils.getNodeFromTree(axe._tree[0],a);return b?F.visibleVirtual(b,!0):\"\"}).join(\" \").trim())?d:(d=b.getAttribute(\"aria-label\"),d&&(d=F.sanitize(d).trim())?d:null)},A.label=function(a){return a=axe.utils.getNodeFromTree(axe._tree[0],a),A.labelVirtual(a)},A.isValidRole=function(a){\"use strict\";return!!A.lookupTable.role[a]},A.getRolesWithNameFromContents=function(){return Object.keys(A.lookupTable.role).filter(function(a){return A.lookupTable.role[a].nameFrom&&-1!==A.lookupTable.role[a].nameFrom.indexOf(\"contents\")})},A.getRolesByType=function(a){return Object.keys(A.lookupTable.role).filter(function(b){return A.lookupTable.role[b].type===a})},A.getRoleType=function(a){var b=A.lookupTable.role[a];return b&&b.type||null},A.requiredOwned=function(a){\"use strict\";var b=null,c=A.lookupTable.role[a];return c&&(b=axe.utils.clone(c.owned)),b},A.requiredContext=function(a){\"use strict\";var b=null,c=A.lookupTable.role[a];return c&&(b=axe.utils.clone(c.context)),b},A.implicitNodes=function(a){\"use strict\";var b=null,c=A.lookupTable.role[a];return c&&c.implicit&&(b=axe.utils.clone(c.implicit)),b},A.implicitRole=function(a){\"use strict\";var b=function(b,c){var d=function(b){return axe.utils.matchesSelector(a,b)};return c.implicit&&c.implicit.some(d)&&b.push(c.name),b},c=Object.keys(A.lookupTable.role).map(function(a){var b=A.lookupTable.role[a];return{name:a,implicit:b&&b.implicit}}),d=c.reduce(b,[]);if(!d.length)return null;for(var e=a.attributes,f=[],g=0,h=e.length;g<h;g++){var i=e[g];i.name.match(/^aria-/)&&f.push(i.name)}return function(a,b){var c=function(a){return A.allowedAttr(a).reduce(function(a,c){return a+(b.indexOf(c)>-1?1:0)},0)};return a.map(function(a){return{score:c(a),name:a}}).sort(function(a,b){return b.score-a.score}).map(function(a){return a.name})}(d,f).shift()},C.Color=function(a,b,c,d){this.red=a,this.green=b,this.blue=c,this.alpha=d,this.toHexString=function(){var a=Math.round(this.red).toString(16),b=Math.round(this.green).toString(16),c=Math.round(this.blue).toString(16);return\"#\"+(this.red>15.5?a:\"0\"+a)+(this.green>15.5?b:\"0\"+b)+(this.blue>15.5?c:\"0\"+c)};var e=/^rgb\\((\\d+), (\\d+), (\\d+)\\)$/,f=/^rgba\\((\\d+), (\\d+), (\\d+), (\\d*(\\.\\d+)?)\\)/;this.parseRgbString=function(a){if(\"transparent\"===a)return this.red=0,this.green=0,this.blue=0,void(this.alpha=0);var b=a.match(e);return b?(this.red=parseInt(b[1],10),this.green=parseInt(b[2],10),this.blue=parseInt(b[3],10),void(this.alpha=1)):(b=a.match(f),b?(this.red=parseInt(b[1],10),this.green=parseInt(b[2],10),this.blue=parseInt(b[3],10),void(this.alpha=parseFloat(b[4]))):void 0)},this.getRelativeLuminance=function(){var a=this.red/255,b=this.green/255,c=this.blue/255;return.2126*(a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4))+.7152*(b<=.03928?b/12.92:Math.pow((b+.055)/1.055,2.4))+.0722*(c<=.03928?c/12.92:Math.pow((c+.055)/1.055,2.4))}},C.flattenColors=function(a,b){var c=a.alpha,d=(1-c)*b.red+c*a.red,e=(1-c)*b.green+c*a.green,f=(1-c)*b.blue+c*a.blue,g=a.alpha+b.alpha*(1-a.alpha);return new C.Color(d,e,f,g)},C.getContrast=function(a,b){if(!b||!a)return null;b.alpha<1&&(b=C.flattenColors(b,a));var c=a.getRelativeLuminance(),d=b.getRelativeLuminance();return(Math.max(d,c)+.05)/(Math.min(d,c)+.05)},C.hasValidContrastRatio=function(a,b,c,d){var e=C.getContrast(a,b),f=d&&Math.ceil(72*c)/96<14||!d&&Math.ceil(72*c)/96<18,g=f?4.5:3;return{isValid:e>g,contrastRatio:e,expectedContrastRatio:g}},C.elementIsDistinct=b;var G=[\"IMG\",\"CANVAS\",\"OBJECT\",\"IFRAME\",\"VIDEO\",\"SVG\"];C.getCoords=function(a){var b=void 0,c=void 0;if(!(a.left>window.innerWidth||a.top>window.innerHeight))return b=Math.min(Math.ceil(a.left+a.width/2),window.innerWidth-1),c=Math.min(Math.ceil(a.top+a.height/2),window.innerHeight-1),{x:b,y:c}},C.getRectStack=function(a){var b=C.getCoords(a.getBoundingClientRect());if(b){var c=D.shadowElementsFromPoint(b.x,b.y),d=Array.from(a.getClientRects());if(d&&d.length>1){var e=d.filter(function(a){return a.width&&a.width>0}).map(function(a){var b=C.getCoords(a);if(b)return D.shadowElementsFromPoint(b.x,b.y)});return e.splice(0,0,c),e}return[c]}return null},C.filteredRectStack=function(a){var b=C.getRectStack(a);if(b&&1===b.length)return b[0];if(b&&b.length>1){var c=b.shift(),d=void 0;return b.forEach(function(e,f){if(0!==f){var g=b[f-1],h=b[f];d=g.every(function(a,b){return a===h[b]})||c.includes(a)}}),d?b[0]:(axe.commons.color.incompleteData.set(\"bgColor\",\"elmPartiallyObscuring\"),null)}return axe.commons.color.incompleteData.set(\"bgColor\",\"outsideViewport\"),null},C.getBackgroundStack=function(a){var b=C.filteredRectStack(a);if(null===b)return null;b=h(b,a),b=D.reduceToElementsBelowFloating(b,a),b=i(b);var c=b.indexOf(a);return f(c,b,a)>=.99?(axe.commons.color.incompleteData.set(\"bgColor\",\"bgOverlap\"),null):-1!==c?b:null},C.getBackgroundColor=function(a){var b=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(!0!==(arguments.length>2&&void 0!==arguments[2]&&arguments[2])){var e=a.clientHeight-2>=2*window.innerHeight;a.scrollIntoView(e)}var f=[],h=C.getBackgroundStack(a);if((h||[]).some(function(e){var h=window.getComputedStyle(e),i=d(e,h);return g(a,e,i)||c(e,h)?(f=null,b.push(e),!0):0!==i.alpha&&(b.push(e),f.push(i),1===i.alpha)}),null!==f&&null!==h){f.push(new C.Color(255,255,255,1));return f.reduce(C.flattenColors)}return null},D.isOpaque=function(a){var b=window.getComputedStyle(a);return c(a,b)||1===d(a,b).alpha},C.getForegroundColor=function(a,b){var c=window.getComputedStyle(a),d=new C.Color;d.parseRgbString(c.getPropertyValue(\"color\"));var e=c.getPropertyValue(\"opacity\");if(d.alpha=d.alpha*e,1===d.alpha)return d;var f=C.getBackgroundColor(a,[],b);if(null===f){var g=axe.commons.color.incompleteData.get(\"bgColor\");return axe.commons.color.incompleteData.set(\"fgColor\",g),null}return C.flattenColors(d,f)},C.incompleteData=function(){var a={};return{set:function(b,c){if(\"string\"!=typeof b)throw new Error(\"Incomplete data: key must be a string\");return c&&(a[b]=c),a[b]},get:function(b){return a[b]},clear:function(){a={}}}}(),D.reduceToElementsBelowFloating=function(a,b){var c,d,e,f=[\"fixed\",\"sticky\"],g=[],h=!1;for(c=0;c<a.length;++c)d=a[c],d===b&&(h=!0),e=window.getComputedStyle(d),h||-1===f.indexOf(e.position)?g.push(d):g=[];return g},D.findElmsInContext=function(a){var b=a.context,c=a.value,d=a.attr,e=a.elm,f=void 0===e?\"\":e,g=void 0,h=axe.utils.escapeSelector(c);return g=9===b.nodeType||11===b.nodeType?b:D.getRootNode(b),Array.from(g.querySelectorAll(f+\"[\"+d+\"=\"+h+\"]\"))},D.findUp=function(a,b){return D.findUpVirtual(axe.utils.getNodeFromTree(axe._tree[0],a),b)},D.findUpVirtual=function(a,b){var c=void 0;if(c=a.actualNode,!a.shadowId&&\"function\"==typeof a.actualNode.closest){var d=a.actualNode.closest(b);return d||null}do{(c=c.assignedSlot?c.assignedSlot:c.parentNode)&&11===c.nodeType&&(c=c.host)}while(c&&!axe.utils.matchesSelector(c,b)&&c!==document.documentElement);return axe.utils.matchesSelector(c,b)?c:null},D.getComposedParent=function a(b){if(b.assignedSlot)return a(b.assignedSlot);if(b.parentNode){var c=b.parentNode;if(1===c.nodeType)return c;if(c.host)return c.host}return null},D.getElementByReference=function(a,b){var c=a.getAttribute(b);if(c&&\"#\"===c.charAt(0)){c=c.substring(1);var d=document.getElementById(c);if(d)return d;if(d=document.getElementsByName(c),d.length)return d[0]}return null},D.getElementCoordinates=function(a){\"use strict\";var b=D.getScrollOffset(document),c=b.left,d=b.top,e=a.getBoundingClientRect();return{top:e.top+d,right:e.right+c,bottom:e.bottom+d,left:e.left+c,width:e.right-e.left,height:e.bottom-e.top}},D.getRootNode=function(a){var b=a.getRootNode&&a.getRootNode()||document;return b===a&&(b=document),b},D.getScrollOffset=function(a){\"use strict\";if(!a.nodeType&&a.document&&(a=a.document),9===a.nodeType){var b=a.documentElement,c=a.body;return{left:b&&b.scrollLeft||c&&c.scrollLeft||0,top:b&&b.scrollTop||c&&c.scrollTop||0}}return{left:a.scrollLeft,top:a.scrollTop}},D.getViewportSize=function(a){\"use strict\";var b,c=a.document,d=c.documentElement;return a.innerWidth?{width:a.innerWidth,height:a.innerHeight}:d?{width:d.clientWidth,height:d.clientHeight}:(b=c.body,{width:b.clientWidth,height:b.clientHeight})};var H=[\"HEAD\",\"TITLE\",\"TEMPLATE\",\"SCRIPT\",\"STYLE\",\"IFRAME\",\"OBJECT\",\"VIDEO\",\"AUDIO\",\"NOSCRIPT\"];D.hasContentVirtual=function(a,b){return j(a)||D.isVisualContent(a.actualNode)||!!A.labelVirtual(a)||!b&&a.children.some(function(a){return 1===a.actualNode.nodeType&&D.hasContentVirtual(a)})},D.hasContent=function(a,b){return a=axe.utils.getNodeFromTree(axe._tree[0],a),D.hasContentVirtual(a,b)},D.idrefs=function(a,b){\"use strict\";var c,d,e=D.getRootNode(a),f=[],g=a.getAttribute(b);if(g)for(g=axe.utils.tokenList(g),c=0,d=g.length;c<d;c++)f.push(e.getElementById(g[c]));return f},D.isFocusable=function(a){\"use strict\";if(k(a))return!1;if(D.isNativelyFocusable(a))return!0;var b=a.getAttribute(\"tabindex\");return!(!b||isNaN(parseInt(b,10)))},D.isNativelyFocusable=function(a){\"use strict\";if(!a||k(a))return!1;switch(a.nodeName.toUpperCase()){case\"A\":case\"AREA\":if(a.href)return!0;break;case\"INPUT\":return\"hidden\"!==a.type;case\"TEXTAREA\":case\"SELECT\":case\"DETAILS\":case\"BUTTON\":return!0}return!1},D.insertedIntoFocusOrder=function(a){return a.tabIndex>-1&&D.isFocusable(a)&&!D.isNativelyFocusable(a)},D.isHTML5=function(a){var b=a.doctype;return null!==b&&(\"html\"===b.name&&!b.publicId&&!b.systemId)};var I=[\"block\",\"list-item\",\"table\",\"flex\",\"grid\",\"inline-block\"];D.isInTextBlock=function(a){if(m(a))return!1;var b=n(a),c=\"\",d=\"\",e=0;return l(b,function(b){if(2===e)return!1;if(3===b.nodeType&&(c+=b.nodeValue),1===b.nodeType){var f=(b.nodeName||\"\").toUpperCase();if([\"BR\",\"HR\"].includes(f))0===e?(c=\"\",d=\"\"):e=2;else{if(\"none\"===b.style.display||\"hidden\"===b.style.overflow||![\"\",null,\"none\"].includes(b.style.float)||![\"\",null,\"relative\"].includes(b.style.position))return!1;if(\"A\"===f&&b.href||\"link\"===(b.getAttribute(\"role\")||\"\").toLowerCase())return b===a&&(e=1),d+=b.textContent,!1}}}),c=axe.commons.text.sanitize(c),d=axe.commons.text.sanitize(d),c.length>d.length},D.isNode=function(a){\"use strict\";return a instanceof Node},D.isOffscreen=function(a){var b=void 0,c=document.documentElement,d=window.getComputedStyle(a),e=window.getComputedStyle(document.body||c).getPropertyValue(\"direction\"),f=D.getElementCoordinates(a);if(f.bottom<0&&(o(a,f.bottom)||\"absolute\"===d.position))return!0;if(0===f.left&&0===f.right)return!1;if(\"ltr\"===e){if(f.right<=0)return!0}else if(b=Math.max(c.scrollWidth,D.getViewportSize(window).width),f.left>=b)return!0;return!1},D.isVisible=function(a,b,c){\"use strict\";var d,e,f;return 9===a.nodeType||(11===a.nodeType&&(a=a.host),null!==(d=window.getComputedStyle(a,null))&&(e=a.nodeName.toUpperCase(),!(\"none\"===d.getPropertyValue(\"display\")||\"STYLE\"===e.toUpperCase()||\"SCRIPT\"===e.toUpperCase()||!b&&p(d.getPropertyValue(\"clip\"))||!c&&(\"hidden\"===d.getPropertyValue(\"visibility\")||!b&&D.isOffscreen(a))||b&&\"true\"===a.getAttribute(\"aria-hidden\"))&&(!!(f=a.assignedSlot?a.assignedSlot:a.parentNode)&&D.isVisible(f,b,!0))))};var J=[\"checkbox\",\"img\",\"radio\",\"range\",\"slider\",\"spinbutton\",\"textbox\"];D.isVisualContent=function(a){var b=a.getAttribute(\"role\");if(b)return-1!==J.indexOf(b);switch(a.tagName.toUpperCase()){case\"IMG\":case\"IFRAME\":case\"OBJECT\":case\"VIDEO\":case\"AUDIO\":case\"CANVAS\":case\"SVG\":case\"MATH\":case\"BUTTON\":case\"SELECT\":case\"TEXTAREA\":case\"KEYGEN\":case\"PROGRESS\":case\"METER\":return!0;case\"INPUT\":return\"hidden\"!==a.type;default:return!1}},D.shadowElementsFromPoint=function(a,b){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:document).elementsFromPoint(a,b).reduce(function(c,d){if(axe.utils.isShadowRoot(d)){var e=D.shadowElementsFromPoint(a,b,d.shadowRoot);c=c.concat(e),c.length&&axe.commons.dom.visuallyContains(c[0],d)&&c.push(d)}else c.push(d);return c},[])},D.visuallyContains=function(a,b){var c=a.getBoundingClientRect(),d={top:c.top+.01,bottom:c.bottom-.01,left:c.left+.01,right:c.right-.01},e=b.getBoundingClientRect(),f=e.top,g=e.left,h={top:f-b.scrollTop,bottom:f-b.scrollTop+b.scrollHeight,left:g-b.scrollLeft,right:g-b.scrollLeft+b.scrollWidth},i=window.getComputedStyle(b);return\"inline\"===i.getPropertyValue(\"display\")||!(d.left<h.left&&d.left<e.left||d.top<h.top&&d.top<e.top||d.right>h.right&&d.right>e.right||d.bottom>h.bottom&&d.bottom>e.bottom)&&(!(d.right>e.right||d.bottom>e.bottom)||(\"scroll\"===i.overflow||\"auto\"===i.overflow||\"hidden\"===i.overflow||b instanceof HTMLBodyElement||b instanceof HTMLHtmlElement))},D.visuallyOverlaps=function(a,b){var c=b.getBoundingClientRect(),d=c.top,e=c.left,f={top:d-b.scrollTop,bottom:d-b.scrollTop+b.scrollHeight,left:e-b.scrollLeft,right:e-b.scrollLeft+b.scrollWidth};if(a.left>f.right&&a.left>c.right||a.top>f.bottom&&a.top>c.bottom||a.right<f.left&&a.right<c.left||a.bottom<f.top&&a.bottom<c.top)return!1;var g=window.getComputedStyle(b);return!(a.left>c.right||a.top>c.bottom)||(\"scroll\"===g.overflow||\"auto\"===g.overflow||b instanceof HTMLBodyElement||b instanceof HTMLHtmlElement)},E.getAllCells=function(a){var b,c,d,e,f=[];for(b=0,d=a.rows.length;b<d;b++)for(c=0,e=a.rows[b].cells.length;c<e;c++)f.push(a.rows[b].cells[c]);return f},E.getCellPosition=function(a,b){var c,d;for(b||(b=E.toGrid(D.findUp(a,\"table\"))),c=0;c<b.length;c++)if(b[c]&&-1!==(d=b[c].indexOf(a)))return{x:d,y:c}},E.getHeaders=function(a){if(a.hasAttribute(\"headers\"))return commons.dom.idrefs(a,\"headers\");var b=commons.table.toGrid(commons.dom.findUp(a,\"table\")),c=commons.table.getCellPosition(a,b);return[].concat(E.traverse(\"left\",c,b).filter(function(a){return E.isRowHeader(a)}),E.traverse(\"up\",c,b).filter(function(a){return E.isColumnHeader(a)})).reverse()},E.getScope=function(a){var b=a.getAttribute(\"scope\"),c=a.getAttribute(\"role\");if(a instanceof Element==!1||-1===[\"TD\",\"TH\"].indexOf(a.nodeName.toUpperCase()))throw new TypeError(\"Expected TD or TH element\");if(\"columnheader\"===c)return\"col\";if(\"rowheader\"===c)return\"row\";if(\"col\"===b||\"row\"===b)return b;if(\"TH\"!==a.nodeName.toUpperCase())return!1;var d=E.toGrid(D.findUp(a,\"table\")),e=E.getCellPosition(a);return d[e.y].reduce(function(a,b){return a&&\"TH\"===b.nodeName.toUpperCase()},!0)?\"col\":d.map(function(a){return a[e.x]}).reduce(function(a,b){return a&&\"TH\"===b.nodeName.toUpperCase()},!0)?\"row\":\"auto\"},E.isColumnHeader=function(a){return-1!==[\"col\",\"auto\"].indexOf(E.getScope(a))},E.isDataCell=function(a){return!(!a.children.length&&!a.textContent.trim())&&\"TD\"===a.nodeName.toUpperCase()},E.isDataTable=function(a){var b=(a.getAttribute(\"role\")||\"\").toLowerCase();if((\"presentation\"===b||\"none\"===b)&&!D.isFocusable(a))return!1;if(\"true\"===a.getAttribute(\"contenteditable\")||D.findUp(a,'[contenteditable=\"true\"]'))return!0;if(\"grid\"===b||\"treegrid\"===b||\"table\"===b)return!0;if(\"landmark\"===commons.aria.getRoleType(b))return!0;if(\"0\"===a.getAttribute(\"datatable\"))return!1;if(a.getAttribute(\"summary\"))return!0;if(a.tHead||a.tFoot||a.caption)return!0;for(var c=0,d=a.children.length;c<d;c++)if(\"COLGROUP\"===a.children[c].nodeName.toUpperCase())return!0;for(var e,f,g=0,h=a.rows.length,i=!1,j=0;j<h;j++){e=a.rows[j];for(var k=0,l=e.cells.length;k<l;k++){if(f=e.cells[k],\"TH\"===f.nodeName.toUpperCase())return!0;if(i||f.offsetWidth===f.clientWidth&&f.offsetHeight===f.clientHeight||(i=!0),f.getAttribute(\"scope\")||f.getAttribute(\"headers\")||f.getAttribute(\"abbr\"))return!0;if([\"columnheader\",\"rowheader\"].includes((f.getAttribute(\"role\")||\"\").toLowerCase()))return!0;if(1===f.children.length&&\"ABBR\"===f.children[0].nodeName.toUpperCase())return!0;g++}}if(a.getElementsByTagName(\"table\").length)return!1;if(h<2)return!1;var m=a.rows[Math.ceil(h/2)];if(1===m.cells.length&&1===m.cells[0].colSpan)return!1;if(m.cells.length>=5)return!0;if(i)return!0;var n,o;for(j=0;j<h;j++){if(e=a.rows[j],n&&n!==window.getComputedStyle(e).getPropertyValue(\"background-color\"))return!0;if(n=window.getComputedStyle(e).getPropertyValue(\"background-color\"),o&&o!==window.getComputedStyle(e).getPropertyValue(\"background-image\"))return!0;o=window.getComputedStyle(e).getPropertyValue(\"background-image\")}return h>=20||!(D.getElementCoordinates(a).width>.95*D.getViewportSize(window).width)&&(!(g<10)&&!a.querySelector(\"object, embed, iframe, applet\"))},E.isHeader=function(a){if(E.isColumnHeader(a)||E.isRowHeader(a))return!0;if(a.getAttribute(\"id\")){var b=axe.utils.escapeSelector(a.getAttribute(\"id\"));return!!document.querySelector('[headers~=\"'+b+'\"]')}return!1},E.isRowHeader=function(a){return[\"row\",\"auto\"].includes(E.getScope(a))},E.toGrid=function(a){for(var b=[],c=a.rows,d=0,e=c.length;d<e;d++){var f=c[d].cells;b[d]=b[d]||[];for(var g=0,h=0,i=f.length;h<i;h++)for(var j=0;j<f[h].colSpan;j++){for(var k=0;k<f[h].rowSpan;k++){for(b[d+k]=b[d+k]||[];b[d+k][g];)g++;b[d+k][g]=f[h]}g++}}return b},E.toArray=E.toGrid,function(a){var b=function a(b,c,d,e){var f,g=d[c.y]?d[c.y][c.x]:void 0;return g?\"function\"==typeof e&&!0===(f=e(g,c,d))?[g]:(f=a(b,{x:c.x+b.x,y:c.y+b.y},d,e),f.unshift(g),f):[]};a.traverse=function(a,c,d,e){if(Array.isArray(c)&&(e=d,d=c,c={x:0,y:0}),\"string\"==typeof a)switch(a){case\"left\":a={x:-1,y:0};break;case\"up\":a={x:0,y:-1};break;case\"right\":a={x:1,y:0};break;case\"down\":a={x:0,y:1}}return b(a,{x:c.x+a.x,y:c.y+a.y},d,e)}}(E);var K={submit:\"Submit\",reset:\"Reset\"},L=[\"text\",\"search\",\"tel\",\"url\",\"email\",\"date\",\"time\",\"number\",\"range\",\"color\"],M=[\"A\",\"EM\",\"STRONG\",\"SMALL\",\"MARK\",\"ABBR\",\"DFN\",\"I\",\"B\",\"S\",\"U\",\"CODE\",\"VAR\",\"SAMP\",\"KBD\",\"SUP\",\"SUB\",\"Q\",\"CITE\",\"SPAN\",\"BDO\",\"BDI\",\"BR\",\"WBR\",\"INS\",\"DEL\",\"IMG\",\"EMBED\",\"OBJECT\",\"IFRAME\",\"MAP\",\"AREA\",\"SCRIPT\",\"NOSCRIPT\",\"RUBY\",\"VIDEO\",\"AUDIO\",\"INPUT\",\"TEXTAREA\",\"SELECT\",\"BUTTON\",\"LABEL\",\"OUTPUT\",\"DATALIST\",\"KEYGEN\",\"PROGRESS\",\"COMMAND\",\"CANVAS\",\"TIME\",\"METER\"];F.accessibleText=function(a,b){var c=axe.utils.getNodeFromTree(axe._tree[0],a);return axe.commons.text.accessibleTextVirtual(c,b)},F.accessibleTextVirtual=function(a,b){function c(a,b,c){return a.children.reduce(function(a,d){var e=d.actualNode;return 3===e.nodeType?a+=e.nodeValue:1===e.nodeType&&(M.includes(e.nodeName.toUpperCase())||(a+=\" \"),a+=g(d,b,c)),a},\"\")}function d(a){return axe.commons.table.isDataTable(a.actualNode)||1!==axe.commons.table.getAllCells(a.actualNode).length?\"\":c(a,!1,!1).trim()}function e(a,b,e){var f=\"\",h=a.actualNode,i=h.nodeName.toUpperCase();if(t(a)&&(f=c(a,!1,!1)||\"\",z(f)))return f;if(\"FIGURE\"===i&&(f=w(a,\"figcaption\"),z(f)))return f;if(\"TABLE\"===i){if(f=w(a,\"caption\"),z(f))return f;if(f=h.getAttribute(\"title\")||h.getAttribute(\"summary\")||d(a)||\"\",z(f))return f}if(y(a))return h.getAttribute(\"alt\")||\"\";if(s(a)&&!e){if(r(a))return h.value||h.title||K[h.type]||\"\";var j=q(a);if(j)return g(j,b,!0)}return\"\"}function f(a,b,c){var d=\"\",e=a.actualNode;return!b&&e.hasAttribute(\"aria-labelledby\")&&(d=F.sanitize(D.idrefs(e,\"aria-labelledby\").map(function(a){if(null!==a){e===a&&h.pop();var b=axe.utils.getNodeFromTree(axe._tree[0],a);return g(b,!0,e!==a)}return\"\"}).join(\" \"))),d||c&&x(a)||!e.hasAttribute(\"aria-label\")?d:F.sanitize(e.getAttribute(\"aria-label\"))}var g=void 0,h=[];return a instanceof Node&&(a=axe.utils.getNodeFromTree(axe._tree[0],a)),g=function(a,b,d){var g=void 0;if(!a||h.includes(a))return\"\";if(null!==a&&a.actualNode instanceof Node!=!0)throw new Error(\"Invalid argument. Virtual Node must be provided\");if(!b&&!D.isVisible(a.actualNode,!0))return\"\";h.push(a);var i=a.actualNode.getAttribute(\"role\");return g=f(a,b,d),z(g)?g:(g=e(a,b,d),z(g)?g:d&&(g=v(a),z(g))?g:u(a)||i&&-1===A.getRolesWithNameFromContents().indexOf(i)||(g=c(a,b,d),!z(g))?a.actualNode.hasAttribute(\"title\")?a.actualNode.getAttribute(\"title\"):\"\":g)},F.sanitize(g(a,b))},F.labelVirtual=function(a){var b,c,d;if(c=A.labelVirtual(a))return c;if(a.actualNode.id){var e=axe.commons.utils.escapeSelector(a.actualNode.getAttribute(\"id\"));if(d=axe.commons.dom.getRootNode(a.actualNode),b=d.querySelector('label[for=\"'+e+'\"]'),c=b&&F.visible(b,!0))return c}return b=D.findUpVirtual(a,\"label\"),(c=b&&F.visible(b,!0))||null},F.label=function(a){return a=axe.utils.getNodeFromTree(axe._tree[0],a),F.labelVirtual(a)},F.sanitize=function(a){\"use strict\";return a.replace(/\\r\\n/g,\"\\n\").replace(/\\u00A0/g,\" \").replace(/[\\s]{2,}/g,\" \").trim()},F.visibleVirtual=function(a,b,c){var d=a.children.map(function(d){if(3===d.actualNode.nodeType){var e=d.actualNode.nodeValue;if(e&&D.isVisible(a.actualNode,b))return e}else if(!c)return F.visibleVirtual(d,b)}).join(\"\");return F.sanitize(d)},F.visible=function(a,b,c){return a=axe.utils.getNodeFromTree(axe._tree[0],a),F.visibleVirtual(a,b,c)},axe.utils.tokenList=function(a){\"use strict\";return a.trim().replace(/\\s{2,}/g,\" \").split(\" \")}\n;var N=[\"aa\",\"ab\",\"ae\",\"af\",\"ak\",\"am\",\"an\",\"ar\",\"as\",\"av\",\"ay\",\"az\",\"ba\",\"be\",\"bg\",\"bh\",\"bi\",\"bm\",\"bn\",\"bo\",\"br\",\"bs\",\"ca\",\"ce\",\"ch\",\"co\",\"cr\",\"cs\",\"cu\",\"cv\",\"cy\",\"da\",\"de\",\"dv\",\"dz\",\"ee\",\"el\",\"en\",\"eo\",\"es\",\"et\",\"eu\",\"fa\",\"ff\",\"fi\",\"fj\",\"fo\",\"fr\",\"fy\",\"ga\",\"gd\",\"gl\",\"gn\",\"gu\",\"gv\",\"ha\",\"he\",\"hi\",\"ho\",\"hr\",\"ht\",\"hu\",\"hy\",\"hz\",\"ia\",\"id\",\"ie\",\"ig\",\"ii\",\"ik\",\"in\",\"io\",\"is\",\"it\",\"iu\",\"iw\",\"ja\",\"ji\",\"jv\",\"jw\",\"ka\",\"kg\",\"ki\",\"kj\",\"kk\",\"kl\",\"km\",\"kn\",\"ko\",\"kr\",\"ks\",\"ku\",\"kv\",\"kw\",\"ky\",\"la\",\"lb\",\"lg\",\"li\",\"ln\",\"lo\",\"lt\",\"lu\",\"lv\",\"mg\",\"mh\",\"mi\",\"mk\",\"ml\",\"mn\",\"mo\",\"mr\",\"ms\",\"mt\",\"my\",\"na\",\"nb\",\"nd\",\"ne\",\"ng\",\"nl\",\"nn\",\"no\",\"nr\",\"nv\",\"ny\",\"oc\",\"oj\",\"om\",\"or\",\"os\",\"pa\",\"pi\",\"pl\",\"ps\",\"pt\",\"qu\",\"rm\",\"rn\",\"ro\",\"ru\",\"rw\",\"sa\",\"sc\",\"sd\",\"se\",\"sg\",\"sh\",\"si\",\"sk\",\"sl\",\"sm\",\"sn\",\"so\",\"sq\",\"sr\",\"ss\",\"st\",\"su\",\"sv\",\"sw\",\"ta\",\"te\",\"tg\",\"th\",\"ti\",\"tk\",\"tl\",\"tn\",\"to\",\"tr\",\"ts\",\"tt\",\"tw\",\"ty\",\"ug\",\"uk\",\"ur\",\"uz\",\"ve\",\"vi\",\"vo\",\"wa\",\"wo\",\"xh\",\"yi\",\"yo\",\"za\",\"zh\",\"zu\",\"aaa\",\"aab\",\"aac\",\"aad\",\"aae\",\"aaf\",\"aag\",\"aah\",\"aai\",\"aak\",\"aal\",\"aam\",\"aan\",\"aao\",\"aap\",\"aaq\",\"aas\",\"aat\",\"aau\",\"aav\",\"aaw\",\"aax\",\"aaz\",\"aba\",\"abb\",\"abc\",\"abd\",\"abe\",\"abf\",\"abg\",\"abh\",\"abi\",\"abj\",\"abl\",\"abm\",\"abn\",\"abo\",\"abp\",\"abq\",\"abr\",\"abs\",\"abt\",\"abu\",\"abv\",\"abw\",\"abx\",\"aby\",\"abz\",\"aca\",\"acb\",\"acd\",\"ace\",\"acf\",\"ach\",\"aci\",\"ack\",\"acl\",\"acm\",\"acn\",\"acp\",\"acq\",\"acr\",\"acs\",\"act\",\"acu\",\"acv\",\"acw\",\"acx\",\"acy\",\"acz\",\"ada\",\"adb\",\"add\",\"ade\",\"adf\",\"adg\",\"adh\",\"adi\",\"adj\",\"adl\",\"adn\",\"ado\",\"adp\",\"adq\",\"adr\",\"ads\",\"adt\",\"adu\",\"adw\",\"adx\",\"ady\",\"adz\",\"aea\",\"aeb\",\"aec\",\"aed\",\"aee\",\"aek\",\"ael\",\"aem\",\"aen\",\"aeq\",\"aer\",\"aes\",\"aeu\",\"aew\",\"aey\",\"aez\",\"afa\",\"afb\",\"afd\",\"afe\",\"afg\",\"afh\",\"afi\",\"afk\",\"afn\",\"afo\",\"afp\",\"afs\",\"aft\",\"afu\",\"afz\",\"aga\",\"agb\",\"agc\",\"agd\",\"age\",\"agf\",\"agg\",\"agh\",\"agi\",\"agj\",\"agk\",\"agl\",\"agm\",\"agn\",\"ago\",\"agp\",\"agq\",\"agr\",\"ags\",\"agt\",\"agu\",\"agv\",\"agw\",\"agx\",\"agy\",\"agz\",\"aha\",\"ahb\",\"ahg\",\"ahh\",\"ahi\",\"ahk\",\"ahl\",\"ahm\",\"ahn\",\"aho\",\"ahp\",\"ahr\",\"ahs\",\"aht\",\"aia\",\"aib\",\"aic\",\"aid\",\"aie\",\"aif\",\"aig\",\"aih\",\"aii\",\"aij\",\"aik\",\"ail\",\"aim\",\"ain\",\"aio\",\"aip\",\"aiq\",\"air\",\"ais\",\"ait\",\"aiw\",\"aix\",\"aiy\",\"aja\",\"ajg\",\"aji\",\"ajn\",\"ajp\",\"ajt\",\"aju\",\"ajw\",\"ajz\",\"akb\",\"akc\",\"akd\",\"ake\",\"akf\",\"akg\",\"akh\",\"aki\",\"akj\",\"akk\",\"akl\",\"akm\",\"ako\",\"akp\",\"akq\",\"akr\",\"aks\",\"akt\",\"aku\",\"akv\",\"akw\",\"akx\",\"aky\",\"akz\",\"ala\",\"alc\",\"ald\",\"ale\",\"alf\",\"alg\",\"alh\",\"ali\",\"alj\",\"alk\",\"all\",\"alm\",\"aln\",\"alo\",\"alp\",\"alq\",\"alr\",\"als\",\"alt\",\"alu\",\"alv\",\"alw\",\"alx\",\"aly\",\"alz\",\"ama\",\"amb\",\"amc\",\"ame\",\"amf\",\"amg\",\"ami\",\"amj\",\"amk\",\"aml\",\"amm\",\"amn\",\"amo\",\"amp\",\"amq\",\"amr\",\"ams\",\"amt\",\"amu\",\"amv\",\"amw\",\"amx\",\"amy\",\"amz\",\"ana\",\"anb\",\"anc\",\"and\",\"ane\",\"anf\",\"ang\",\"anh\",\"ani\",\"anj\",\"ank\",\"anl\",\"anm\",\"ann\",\"ano\",\"anp\",\"anq\",\"anr\",\"ans\",\"ant\",\"anu\",\"anv\",\"anw\",\"anx\",\"any\",\"anz\",\"aoa\",\"aob\",\"aoc\",\"aod\",\"aoe\",\"aof\",\"aog\",\"aoh\",\"aoi\",\"aoj\",\"aok\",\"aol\",\"aom\",\"aon\",\"aor\",\"aos\",\"aot\",\"aou\",\"aox\",\"aoz\",\"apa\",\"apb\",\"apc\",\"apd\",\"ape\",\"apf\",\"apg\",\"aph\",\"api\",\"apj\",\"apk\",\"apl\",\"apm\",\"apn\",\"apo\",\"app\",\"apq\",\"apr\",\"aps\",\"apt\",\"apu\",\"apv\",\"apw\",\"apx\",\"apy\",\"apz\",\"aqa\",\"aqc\",\"aqd\",\"aqg\",\"aql\",\"aqm\",\"aqn\",\"aqp\",\"aqr\",\"aqt\",\"aqz\",\"arb\",\"arc\",\"ard\",\"are\",\"arh\",\"ari\",\"arj\",\"ark\",\"arl\",\"arn\",\"aro\",\"arp\",\"arq\",\"arr\",\"ars\",\"art\",\"aru\",\"arv\",\"arw\",\"arx\",\"ary\",\"arz\",\"asa\",\"asb\",\"asc\",\"asd\",\"ase\",\"asf\",\"asg\",\"ash\",\"asi\",\"asj\",\"ask\",\"asl\",\"asn\",\"aso\",\"asp\",\"asq\",\"asr\",\"ass\",\"ast\",\"asu\",\"asv\",\"asw\",\"asx\",\"asy\",\"asz\",\"ata\",\"atb\",\"atc\",\"atd\",\"ate\",\"atg\",\"ath\",\"ati\",\"atj\",\"atk\",\"atl\",\"atm\",\"atn\",\"ato\",\"atp\",\"atq\",\"atr\",\"ats\",\"att\",\"atu\",\"atv\",\"atw\",\"atx\",\"aty\",\"atz\",\"aua\",\"aub\",\"auc\",\"aud\",\"aue\",\"auf\",\"aug\",\"auh\",\"aui\",\"auj\",\"auk\",\"aul\",\"aum\",\"aun\",\"auo\",\"aup\",\"auq\",\"aur\",\"aus\",\"aut\",\"auu\",\"auw\",\"aux\",\"auy\",\"auz\",\"avb\",\"avd\",\"avi\",\"avk\",\"avl\",\"avm\",\"avn\",\"avo\",\"avs\",\"avt\",\"avu\",\"avv\",\"awa\",\"awb\",\"awc\",\"awd\",\"awe\",\"awg\",\"awh\",\"awi\",\"awk\",\"awm\",\"awn\",\"awo\",\"awr\",\"aws\",\"awt\",\"awu\",\"awv\",\"aww\",\"awx\",\"awy\",\"axb\",\"axe\",\"axg\",\"axk\",\"axl\",\"axm\",\"axx\",\"aya\",\"ayb\",\"ayc\",\"ayd\",\"aye\",\"ayg\",\"ayh\",\"ayi\",\"ayk\",\"ayl\",\"ayn\",\"ayo\",\"ayp\",\"ayq\",\"ayr\",\"ays\",\"ayt\",\"ayu\",\"ayx\",\"ayy\",\"ayz\",\"aza\",\"azb\",\"azc\",\"azd\",\"azg\",\"azj\",\"azm\",\"azn\",\"azo\",\"azt\",\"azz\",\"baa\",\"bab\",\"bac\",\"bad\",\"bae\",\"baf\",\"bag\",\"bah\",\"bai\",\"baj\",\"bal\",\"ban\",\"bao\",\"bap\",\"bar\",\"bas\",\"bat\",\"bau\",\"bav\",\"baw\",\"bax\",\"bay\",\"baz\",\"bba\",\"bbb\",\"bbc\",\"bbd\",\"bbe\",\"bbf\",\"bbg\",\"bbh\",\"bbi\",\"bbj\",\"bbk\",\"bbl\",\"bbm\",\"bbn\",\"bbo\",\"bbp\",\"bbq\",\"bbr\",\"bbs\",\"bbt\",\"bbu\",\"bbv\",\"bbw\",\"bbx\",\"bby\",\"bbz\",\"bca\",\"bcb\",\"bcc\",\"bcd\",\"bce\",\"bcf\",\"bcg\",\"bch\",\"bci\",\"bcj\",\"bck\",\"bcl\",\"bcm\",\"bcn\",\"bco\",\"bcp\",\"bcq\",\"bcr\",\"bcs\",\"bct\",\"bcu\",\"bcv\",\"bcw\",\"bcy\",\"bcz\",\"bda\",\"bdb\",\"bdc\",\"bdd\",\"bde\",\"bdf\",\"bdg\",\"bdh\",\"bdi\",\"bdj\",\"bdk\",\"bdl\",\"bdm\",\"bdn\",\"bdo\",\"bdp\",\"bdq\",\"bdr\",\"bds\",\"bdt\",\"bdu\",\"bdv\",\"bdw\",\"bdx\",\"bdy\",\"bdz\",\"bea\",\"beb\",\"bec\",\"bed\",\"bee\",\"bef\",\"beg\",\"beh\",\"bei\",\"bej\",\"bek\",\"bem\",\"beo\",\"bep\",\"beq\",\"ber\",\"bes\",\"bet\",\"beu\",\"bev\",\"bew\",\"bex\",\"bey\",\"bez\",\"bfa\",\"bfb\",\"bfc\",\"bfd\",\"bfe\",\"bff\",\"bfg\",\"bfh\",\"bfi\",\"bfj\",\"bfk\",\"bfl\",\"bfm\",\"bfn\",\"bfo\",\"bfp\",\"bfq\",\"bfr\",\"bfs\",\"bft\",\"bfu\",\"bfw\",\"bfx\",\"bfy\",\"bfz\",\"bga\",\"bgb\",\"bgc\",\"bgd\",\"bge\",\"bgf\",\"bgg\",\"bgi\",\"bgj\",\"bgk\",\"bgl\",\"bgm\",\"bgn\",\"bgo\",\"bgp\",\"bgq\",\"bgr\",\"bgs\",\"bgt\",\"bgu\",\"bgv\",\"bgw\",\"bgx\",\"bgy\",\"bgz\",\"bha\",\"bhb\",\"bhc\",\"bhd\",\"bhe\",\"bhf\",\"bhg\",\"bhh\",\"bhi\",\"bhj\",\"bhk\",\"bhl\",\"bhm\",\"bhn\",\"bho\",\"bhp\",\"bhq\",\"bhr\",\"bhs\",\"bht\",\"bhu\",\"bhv\",\"bhw\",\"bhx\",\"bhy\",\"bhz\",\"bia\",\"bib\",\"bic\",\"bid\",\"bie\",\"bif\",\"big\",\"bij\",\"bik\",\"bil\",\"bim\",\"bin\",\"bio\",\"bip\",\"biq\",\"bir\",\"bit\",\"biu\",\"biv\",\"biw\",\"bix\",\"biy\",\"biz\",\"bja\",\"bjb\",\"bjc\",\"bjd\",\"bje\",\"bjf\",\"bjg\",\"bjh\",\"bji\",\"bjj\",\"bjk\",\"bjl\",\"bjm\",\"bjn\",\"bjo\",\"bjp\",\"bjq\",\"bjr\",\"bjs\",\"bjt\",\"bju\",\"bjv\",\"bjw\",\"bjx\",\"bjy\",\"bjz\",\"bka\",\"bkb\",\"bkc\",\"bkd\",\"bkf\",\"bkg\",\"bkh\",\"bki\",\"bkj\",\"bkk\",\"bkl\",\"bkm\",\"bkn\",\"bko\",\"bkp\",\"bkq\",\"bkr\",\"bks\",\"bkt\",\"bku\",\"bkv\",\"bkw\",\"bkx\",\"bky\",\"bkz\",\"bla\",\"blb\",\"blc\",\"bld\",\"ble\",\"blf\",\"blg\",\"blh\",\"bli\",\"blj\",\"blk\",\"bll\",\"blm\",\"bln\",\"blo\",\"blp\",\"blq\",\"blr\",\"bls\",\"blt\",\"blv\",\"blw\",\"blx\",\"bly\",\"blz\",\"bma\",\"bmb\",\"bmc\",\"bmd\",\"bme\",\"bmf\",\"bmg\",\"bmh\",\"bmi\",\"bmj\",\"bmk\",\"bml\",\"bmm\",\"bmn\",\"bmo\",\"bmp\",\"bmq\",\"bmr\",\"bms\",\"bmt\",\"bmu\",\"bmv\",\"bmw\",\"bmx\",\"bmy\",\"bmz\",\"bna\",\"bnb\",\"bnc\",\"bnd\",\"bne\",\"bnf\",\"bng\",\"bni\",\"bnj\",\"bnk\",\"bnl\",\"bnm\",\"bnn\",\"bno\",\"bnp\",\"bnq\",\"bnr\",\"bns\",\"bnt\",\"bnu\",\"bnv\",\"bnw\",\"bnx\",\"bny\",\"bnz\",\"boa\",\"bob\",\"boe\",\"bof\",\"bog\",\"boh\",\"boi\",\"boj\",\"bok\",\"bol\",\"bom\",\"bon\",\"boo\",\"bop\",\"boq\",\"bor\",\"bot\",\"bou\",\"bov\",\"bow\",\"box\",\"boy\",\"boz\",\"bpa\",\"bpb\",\"bpd\",\"bpg\",\"bph\",\"bpi\",\"bpj\",\"bpk\",\"bpl\",\"bpm\",\"bpn\",\"bpo\",\"bpp\",\"bpq\",\"bpr\",\"bps\",\"bpt\",\"bpu\",\"bpv\",\"bpw\",\"bpx\",\"bpy\",\"bpz\",\"bqa\",\"bqb\",\"bqc\",\"bqd\",\"bqf\",\"bqg\",\"bqh\",\"bqi\",\"bqj\",\"bqk\",\"bql\",\"bqm\",\"bqn\",\"bqo\",\"bqp\",\"bqq\",\"bqr\",\"bqs\",\"bqt\",\"bqu\",\"bqv\",\"bqw\",\"bqx\",\"bqy\",\"bqz\",\"bra\",\"brb\",\"brc\",\"brd\",\"brf\",\"brg\",\"brh\",\"bri\",\"brj\",\"brk\",\"brl\",\"brm\",\"brn\",\"bro\",\"brp\",\"brq\",\"brr\",\"brs\",\"brt\",\"bru\",\"brv\",\"brw\",\"brx\",\"bry\",\"brz\",\"bsa\",\"bsb\",\"bsc\",\"bse\",\"bsf\",\"bsg\",\"bsh\",\"bsi\",\"bsj\",\"bsk\",\"bsl\",\"bsm\",\"bsn\",\"bso\",\"bsp\",\"bsq\",\"bsr\",\"bss\",\"bst\",\"bsu\",\"bsv\",\"bsw\",\"bsx\",\"bsy\",\"bta\",\"btb\",\"btc\",\"btd\",\"bte\",\"btf\",\"btg\",\"bth\",\"bti\",\"btj\",\"btk\",\"btl\",\"btm\",\"btn\",\"bto\",\"btp\",\"btq\",\"btr\",\"bts\",\"btt\",\"btu\",\"btv\",\"btw\",\"btx\",\"bty\",\"btz\",\"bua\",\"bub\",\"buc\",\"bud\",\"bue\",\"buf\",\"bug\",\"buh\",\"bui\",\"buj\",\"buk\",\"bum\",\"bun\",\"buo\",\"bup\",\"buq\",\"bus\",\"but\",\"buu\",\"buv\",\"buw\",\"bux\",\"buy\",\"buz\",\"bva\",\"bvb\",\"bvc\",\"bvd\",\"bve\",\"bvf\",\"bvg\",\"bvh\",\"bvi\",\"bvj\",\"bvk\",\"bvl\",\"bvm\",\"bvn\",\"bvo\",\"bvp\",\"bvq\",\"bvr\",\"bvt\",\"bvu\",\"bvv\",\"bvw\",\"bvx\",\"bvy\",\"bvz\",\"bwa\",\"bwb\",\"bwc\",\"bwd\",\"bwe\",\"bwf\",\"bwg\",\"bwh\",\"bwi\",\"bwj\",\"bwk\",\"bwl\",\"bwm\",\"bwn\",\"bwo\",\"bwp\",\"bwq\",\"bwr\",\"bws\",\"bwt\",\"bwu\",\"bww\",\"bwx\",\"bwy\",\"bwz\",\"bxa\",\"bxb\",\"bxc\",\"bxd\",\"bxe\",\"bxf\",\"bxg\",\"bxh\",\"bxi\",\"bxj\",\"bxk\",\"bxl\",\"bxm\",\"bxn\",\"bxo\",\"bxp\",\"bxq\",\"bxr\",\"bxs\",\"bxu\",\"bxv\",\"bxw\",\"bxx\",\"bxz\",\"bya\",\"byb\",\"byc\",\"byd\",\"bye\",\"byf\",\"byg\",\"byh\",\"byi\",\"byj\",\"byk\",\"byl\",\"bym\",\"byn\",\"byo\",\"byp\",\"byq\",\"byr\",\"bys\",\"byt\",\"byv\",\"byw\",\"byx\",\"byy\",\"byz\",\"bza\",\"bzb\",\"bzc\",\"bzd\",\"bze\",\"bzf\",\"bzg\",\"bzh\",\"bzi\",\"bzj\",\"bzk\",\"bzl\",\"bzm\",\"bzn\",\"bzo\",\"bzp\",\"bzq\",\"bzr\",\"bzs\",\"bzt\",\"bzu\",\"bzv\",\"bzw\",\"bzx\",\"bzy\",\"bzz\",\"caa\",\"cab\",\"cac\",\"cad\",\"cae\",\"caf\",\"cag\",\"cah\",\"cai\",\"caj\",\"cak\",\"cal\",\"cam\",\"can\",\"cao\",\"cap\",\"caq\",\"car\",\"cas\",\"cau\",\"cav\",\"caw\",\"cax\",\"cay\",\"caz\",\"cba\",\"cbb\",\"cbc\",\"cbd\",\"cbe\",\"cbg\",\"cbh\",\"cbi\",\"cbj\",\"cbk\",\"cbl\",\"cbn\",\"cbo\",\"cbq\",\"cbr\",\"cbs\",\"cbt\",\"cbu\",\"cbv\",\"cbw\",\"cby\",\"cca\",\"ccc\",\"ccd\",\"cce\",\"ccg\",\"cch\",\"ccj\",\"ccl\",\"ccm\",\"ccn\",\"cco\",\"ccp\",\"ccq\",\"ccr\",\"ccs\",\"cda\",\"cdc\",\"cdd\",\"cde\",\"cdf\",\"cdg\",\"cdh\",\"cdi\",\"cdj\",\"cdm\",\"cdn\",\"cdo\",\"cdr\",\"cds\",\"cdy\",\"cdz\",\"cea\",\"ceb\",\"ceg\",\"cek\",\"cel\",\"cen\",\"cet\",\"cfa\",\"cfd\",\"cfg\",\"cfm\",\"cga\",\"cgc\",\"cgg\",\"cgk\",\"chb\",\"chc\",\"chd\",\"chf\",\"chg\",\"chh\",\"chj\",\"chk\",\"chl\",\"chm\",\"chn\",\"cho\",\"chp\",\"chq\",\"chr\",\"cht\",\"chw\",\"chx\",\"chy\",\"chz\",\"cia\",\"cib\",\"cic\",\"cid\",\"cie\",\"cih\",\"cik\",\"cim\",\"cin\",\"cip\",\"cir\",\"ciw\",\"ciy\",\"cja\",\"cje\",\"cjh\",\"cji\",\"cjk\",\"cjm\",\"cjn\",\"cjo\",\"cjp\",\"cjr\",\"cjs\",\"cjv\",\"cjy\",\"cka\",\"ckb\",\"ckh\",\"ckl\",\"ckn\",\"cko\",\"ckq\",\"ckr\",\"cks\",\"ckt\",\"cku\",\"ckv\",\"ckx\",\"cky\",\"ckz\",\"cla\",\"clc\",\"cld\",\"cle\",\"clh\",\"cli\",\"clj\",\"clk\",\"cll\",\"clm\",\"clo\",\"clt\",\"clu\",\"clw\",\"cly\",\"cma\",\"cmc\",\"cme\",\"cmg\",\"cmi\",\"cmk\",\"cml\",\"cmm\",\"cmn\",\"cmo\",\"cmr\",\"cms\",\"cmt\",\"cna\",\"cnb\",\"cnc\",\"cng\",\"cnh\",\"cni\",\"cnk\",\"cnl\",\"cno\",\"cns\",\"cnt\",\"cnu\",\"cnw\",\"cnx\",\"coa\",\"cob\",\"coc\",\"cod\",\"coe\",\"cof\",\"cog\",\"coh\",\"coj\",\"cok\",\"col\",\"com\",\"con\",\"coo\",\"cop\",\"coq\",\"cot\",\"cou\",\"cov\",\"cow\",\"cox\",\"coy\",\"coz\",\"cpa\",\"cpb\",\"cpc\",\"cpe\",\"cpf\",\"cpg\",\"cpi\",\"cpn\",\"cpo\",\"cpp\",\"cps\",\"cpu\",\"cpx\",\"cpy\",\"cqd\",\"cqu\",\"cra\",\"crb\",\"crc\",\"crd\",\"crf\",\"crg\",\"crh\",\"cri\",\"crj\",\"crk\",\"crl\",\"crm\",\"crn\",\"cro\",\"crp\",\"crq\",\"crr\",\"crs\",\"crt\",\"crv\",\"crw\",\"crx\",\"cry\",\"crz\",\"csa\",\"csb\",\"csc\",\"csd\",\"cse\",\"csf\",\"csg\",\"csh\",\"csi\",\"csj\",\"csk\",\"csl\",\"csm\",\"csn\",\"cso\",\"csq\",\"csr\",\"css\",\"cst\",\"csu\",\"csv\",\"csw\",\"csy\",\"csz\",\"cta\",\"ctc\",\"ctd\",\"cte\",\"ctg\",\"cth\",\"ctl\",\"ctm\",\"ctn\",\"cto\",\"ctp\",\"cts\",\"ctt\",\"ctu\",\"ctz\",\"cua\",\"cub\",\"cuc\",\"cug\",\"cuh\",\"cui\",\"cuj\",\"cuk\",\"cul\",\"cum\",\"cuo\",\"cup\",\"cuq\",\"cur\",\"cus\",\"cut\",\"cuu\",\"cuv\",\"cuw\",\"cux\",\"cvg\",\"cvn\",\"cwa\",\"cwb\",\"cwd\",\"cwe\",\"cwg\",\"cwt\",\"cya\",\"cyb\",\"cyo\",\"czh\",\"czk\",\"czn\",\"czo\",\"czt\",\"daa\",\"dac\",\"dad\",\"dae\",\"daf\",\"dag\",\"dah\",\"dai\",\"daj\",\"dak\",\"dal\",\"dam\",\"dao\",\"dap\",\"daq\",\"dar\",\"das\",\"dau\",\"dav\",\"daw\",\"dax\",\"day\",\"daz\",\"dba\",\"dbb\",\"dbd\",\"dbe\",\"dbf\",\"dbg\",\"dbi\",\"dbj\",\"dbl\",\"dbm\",\"dbn\",\"dbo\",\"dbp\",\"dbq\",\"dbr\",\"dbt\",\"dbu\",\"dbv\",\"dbw\",\"dby\",\"dcc\",\"dcr\",\"dda\",\"ddd\",\"dde\",\"ddg\",\"ddi\",\"ddj\",\"ddn\",\"ddo\",\"ddr\",\"dds\",\"ddw\",\"dec\",\"ded\",\"dee\",\"def\",\"deg\",\"deh\",\"dei\",\"dek\",\"del\",\"dem\",\"den\",\"dep\",\"deq\",\"der\",\"des\",\"dev\",\"dez\",\"dga\",\"dgb\",\"dgc\",\"dgd\",\"dge\",\"dgg\",\"dgh\",\"dgi\",\"dgk\",\"dgl\",\"dgn\",\"dgo\",\"dgr\",\"dgs\",\"dgt\",\"dgu\",\"dgw\",\"dgx\",\"dgz\",\"dha\",\"dhd\",\"dhg\",\"dhi\",\"dhl\",\"dhm\",\"dhn\",\"dho\",\"dhr\",\"dhs\",\"dhu\",\"dhv\",\"dhw\",\"dhx\",\"dia\",\"dib\",\"dic\",\"did\",\"dif\",\"dig\",\"dih\",\"dii\",\"dij\",\"dik\",\"dil\",\"dim\",\"din\",\"dio\",\"dip\",\"diq\",\"dir\",\"dis\",\"dit\",\"diu\",\"diw\",\"dix\",\"diy\",\"diz\",\"dja\",\"djb\",\"djc\",\"djd\",\"dje\",\"djf\",\"dji\",\"djj\",\"djk\",\"djl\",\"djm\",\"djn\",\"djo\",\"djr\",\"dju\",\"djw\",\"dka\",\"dkk\",\"dkl\",\"dkr\",\"dks\",\"dkx\",\"dlg\",\"dlk\",\"dlm\",\"dln\",\"dma\",\"dmb\",\"dmc\",\"dmd\",\"dme\",\"dmg\",\"dmk\",\"dml\",\"dmm\",\"dmn\",\"dmo\",\"dmr\",\"dms\",\"dmu\",\"dmv\",\"dmw\",\"dmx\",\"dmy\",\"dna\",\"dnd\",\"dne\",\"dng\",\"dni\",\"dnj\",\"dnk\",\"dnn\",\"dnr\",\"dnt\",\"dnu\",\"dnv\",\"dnw\",\"dny\",\"doa\",\"dob\",\"doc\",\"doe\",\"dof\",\"doh\",\"doi\",\"dok\",\"dol\",\"don\",\"doo\",\"dop\",\"doq\",\"dor\",\"dos\",\"dot\",\"dov\",\"dow\",\"dox\",\"doy\",\"doz\",\"dpp\",\"dra\",\"drb\",\"drc\",\"drd\",\"dre\",\"drg\",\"drh\",\"dri\",\"drl\",\"drn\",\"dro\",\"drq\",\"drr\",\"drs\",\"drt\",\"dru\",\"drw\",\"dry\",\"dsb\",\"dse\",\"dsh\",\"dsi\",\"dsl\",\"dsn\",\"dso\",\"dsq\",\"dta\",\"dtb\",\"dtd\",\"dth\",\"dti\",\"dtk\",\"dtm\",\"dtn\",\"dto\",\"dtp\",\"dtr\",\"dts\",\"dtt\",\"dtu\",\"dty\",\"dua\",\"dub\",\"duc\",\"dud\",\"due\",\"duf\",\"dug\",\"duh\",\"dui\",\"duj\",\"duk\",\"dul\",\"dum\",\"dun\",\"duo\",\"dup\",\"duq\",\"dur\",\"dus\",\"duu\",\"duv\",\"duw\",\"dux\",\"duy\",\"duz\",\"dva\",\"dwa\",\"dwl\",\"dwr\",\"dws\",\"dwu\",\"dww\",\"dwy\",\"dya\",\"dyb\",\"dyd\",\"dyg\",\"dyi\",\"dym\",\"dyn\",\"dyo\",\"dyu\",\"dyy\",\"dza\",\"dzd\",\"dze\",\"dzg\",\"dzl\",\"dzn\",\"eaa\",\"ebg\",\"ebk\",\"ebo\",\"ebr\",\"ebu\",\"ecr\",\"ecs\",\"ecy\",\"eee\",\"efa\",\"efe\",\"efi\",\"ega\",\"egl\",\"ego\",\"egx\",\"egy\",\"ehu\",\"eip\",\"eit\",\"eiv\",\"eja\",\"eka\",\"ekc\",\"eke\",\"ekg\",\"eki\",\"ekk\",\"ekl\",\"ekm\",\"eko\",\"ekp\",\"ekr\",\"eky\",\"ele\",\"elh\",\"eli\",\"elk\",\"elm\",\"elo\",\"elp\",\"elu\",\"elx\",\"ema\",\"emb\",\"eme\",\"emg\",\"emi\",\"emk\",\"emm\",\"emn\",\"emo\",\"emp\",\"ems\",\"emu\",\"emw\",\"emx\",\"emy\",\"ena\",\"enb\",\"enc\",\"end\",\"enf\",\"enh\",\"enl\",\"enm\",\"enn\",\"eno\",\"enq\",\"enr\",\"enu\",\"env\",\"enw\",\"enx\",\"eot\",\"epi\",\"era\",\"erg\",\"erh\",\"eri\",\"erk\",\"ero\",\"err\",\"ers\",\"ert\",\"erw\",\"ese\",\"esg\",\"esh\",\"esi\",\"esk\",\"esl\",\"esm\",\"esn\",\"eso\",\"esq\",\"ess\",\"esu\",\"esx\",\"esy\",\"etb\",\"etc\",\"eth\",\"etn\",\"eto\",\"etr\",\"ets\",\"ett\",\"etu\",\"etx\",\"etz\",\"euq\",\"eve\",\"evh\",\"evn\",\"ewo\",\"ext\",\"eya\",\"eyo\",\"eza\",\"eze\",\"faa\",\"fab\",\"fad\",\"faf\",\"fag\",\"fah\",\"fai\",\"faj\",\"fak\",\"fal\",\"fam\",\"fan\",\"fap\",\"far\",\"fat\",\"fau\",\"fax\",\"fay\",\"faz\",\"fbl\",\"fcs\",\"fer\",\"ffi\",\"ffm\",\"fgr\",\"fia\",\"fie\",\"fil\",\"fip\",\"fir\",\"fit\",\"fiu\",\"fiw\",\"fkk\",\"fkv\",\"fla\",\"flh\",\"fli\",\"fll\",\"fln\",\"flr\",\"fly\",\"fmp\",\"fmu\",\"fnb\",\"fng\",\"fni\",\"fod\",\"foi\",\"fom\",\"fon\",\"for\",\"fos\",\"fox\",\"fpe\",\"fqs\",\"frc\",\"frd\",\"frk\",\"frm\",\"fro\",\"frp\",\"frq\",\"frr\",\"frs\",\"frt\",\"fse\",\"fsl\",\"fss\",\"fub\",\"fuc\",\"fud\",\"fue\",\"fuf\",\"fuh\",\"fui\",\"fuj\",\"fum\",\"fun\",\"fuq\",\"fur\",\"fut\",\"fuu\",\"fuv\",\"fuy\",\"fvr\",\"fwa\",\"fwe\",\"gaa\",\"gab\",\"gac\",\"gad\",\"gae\",\"gaf\",\"gag\",\"gah\",\"gai\",\"gaj\",\"gak\",\"gal\",\"gam\",\"gan\",\"gao\",\"gap\",\"gaq\",\"gar\",\"gas\",\"gat\",\"gau\",\"gav\",\"gaw\",\"gax\",\"gay\",\"gaz\",\"gba\",\"gbb\",\"gbc\",\"gbd\",\"gbe\",\"gbf\",\"gbg\",\"gbh\",\"gbi\",\"gbj\",\"gbk\",\"gbl\",\"gbm\",\"gbn\",\"gbo\",\"gbp\",\"gbq\",\"gbr\",\"gbs\",\"gbu\",\"gbv\",\"gbw\",\"gbx\",\"gby\",\"gbz\",\"gcc\",\"gcd\",\"gce\",\"gcf\",\"gcl\",\"gcn\",\"gcr\",\"gct\",\"gda\",\"gdb\",\"gdc\",\"gdd\",\"gde\",\"gdf\",\"gdg\",\"gdh\",\"gdi\",\"gdj\",\"gdk\",\"gdl\",\"gdm\",\"gdn\",\"gdo\",\"gdq\",\"gdr\",\"gds\",\"gdt\",\"gdu\",\"gdx\",\"gea\",\"geb\",\"gec\",\"ged\",\"geg\",\"geh\",\"gei\",\"gej\",\"gek\",\"gel\",\"gem\",\"geq\",\"ges\",\"gev\",\"gew\",\"gex\",\"gey\",\"gez\",\"gfk\",\"gft\",\"gfx\",\"gga\",\"ggb\",\"ggd\",\"gge\",\"ggg\",\"ggk\",\"ggl\",\"ggn\",\"ggo\",\"ggr\",\"ggt\",\"ggu\",\"ggw\",\"gha\",\"ghc\",\"ghe\",\"ghh\",\"ghk\",\"ghl\",\"ghn\",\"gho\",\"ghr\",\"ghs\",\"ght\",\"gia\",\"gib\",\"gic\",\"gid\",\"gie\",\"gig\",\"gih\",\"gil\",\"gim\",\"gin\",\"gio\",\"gip\",\"giq\",\"gir\",\"gis\",\"git\",\"giu\",\"giw\",\"gix\",\"giy\",\"giz\",\"gji\",\"gjk\",\"gjm\",\"gjn\",\"gjr\",\"gju\",\"gka\",\"gke\",\"gkn\",\"gko\",\"gkp\",\"gku\",\"glc\",\"gld\",\"glh\",\"gli\",\"glj\",\"glk\",\"gll\",\"glo\",\"glr\",\"glu\",\"glw\",\"gly\",\"gma\",\"gmb\",\"gmd\",\"gme\",\"gmg\",\"gmh\",\"gml\",\"gmm\",\"gmn\",\"gmq\",\"gmu\",\"gmv\",\"gmw\",\"gmx\",\"gmy\",\"gmz\",\"gna\",\"gnb\",\"gnc\",\"gnd\",\"gne\",\"gng\",\"gnh\",\"gni\",\"gnk\",\"gnl\",\"gnm\",\"gnn\",\"gno\",\"gnq\",\"gnr\",\"gnt\",\"gnu\",\"gnw\",\"gnz\",\"goa\",\"gob\",\"goc\",\"god\",\"goe\",\"gof\",\"gog\",\"goh\",\"goi\",\"goj\",\"gok\",\"gol\",\"gom\",\"gon\",\"goo\",\"gop\",\"goq\",\"gor\",\"gos\",\"got\",\"gou\",\"gow\",\"gox\",\"goy\",\"goz\",\"gpa\",\"gpe\",\"gpn\",\"gqa\",\"gqi\",\"gqn\",\"gqr\",\"gqu\",\"gra\",\"grb\",\"grc\",\"grd\",\"grg\",\"grh\",\"gri\",\"grj\",\"grk\",\"grm\",\"gro\",\"grq\",\"grr\",\"grs\",\"grt\",\"gru\",\"grv\",\"grw\",\"grx\",\"gry\",\"grz\",\"gse\",\"gsg\",\"gsl\",\"gsm\",\"gsn\",\"gso\",\"gsp\",\"gss\",\"gsw\",\"gta\",\"gti\",\"gtu\",\"gua\",\"gub\",\"guc\",\"gud\",\"gue\",\"guf\",\"gug\",\"guh\",\"gui\",\"guk\",\"gul\",\"gum\",\"gun\",\"guo\",\"gup\",\"guq\",\"gur\",\"gus\",\"gut\",\"guu\",\"guv\",\"guw\",\"gux\",\"guz\",\"gva\",\"gvc\",\"gve\",\"gvf\",\"gvj\",\"gvl\",\"gvm\",\"gvn\",\"gvo\",\"gvp\",\"gvr\",\"gvs\",\"gvy\",\"gwa\",\"gwb\",\"gwc\",\"gwd\",\"gwe\",\"gwf\",\"gwg\",\"gwi\",\"gwj\",\"gwm\",\"gwn\",\"gwr\",\"gwt\",\"gwu\",\"gww\",\"gwx\",\"gxx\",\"gya\",\"gyb\",\"gyd\",\"gye\",\"gyf\",\"gyg\",\"gyi\",\"gyl\",\"gym\",\"gyn\",\"gyr\",\"gyy\",\"gza\",\"gzi\",\"gzn\",\"haa\",\"hab\",\"hac\",\"had\",\"hae\",\"haf\",\"hag\",\"hah\",\"hai\",\"haj\",\"hak\",\"hal\",\"ham\",\"han\",\"hao\",\"hap\",\"haq\",\"har\",\"has\",\"hav\",\"haw\",\"hax\",\"hay\",\"haz\",\"hba\",\"hbb\",\"hbn\",\"hbo\",\"hbu\",\"hca\",\"hch\",\"hdn\",\"hds\",\"hdy\",\"hea\",\"hed\",\"heg\",\"heh\",\"hei\",\"hem\",\"hgm\",\"hgw\",\"hhi\",\"hhr\",\"hhy\",\"hia\",\"hib\",\"hid\",\"hif\",\"hig\",\"hih\",\"hii\",\"hij\",\"hik\",\"hil\",\"him\",\"hio\",\"hir\",\"hit\",\"hiw\",\"hix\",\"hji\",\"hka\",\"hke\",\"hkk\",\"hks\",\"hla\",\"hlb\",\"hld\",\"hle\",\"hlt\",\"hlu\",\"hma\",\"hmb\",\"hmc\",\"hmd\",\"hme\",\"hmf\",\"hmg\",\"hmh\",\"hmi\",\"hmj\",\"hmk\",\"hml\",\"hmm\",\"hmn\",\"hmp\",\"hmq\",\"hmr\",\"hms\",\"hmt\",\"hmu\",\"hmv\",\"hmw\",\"hmx\",\"hmy\",\"hmz\",\"hna\",\"hnd\",\"hne\",\"hnh\",\"hni\",\"hnj\",\"hnn\",\"hno\",\"hns\",\"hnu\",\"hoa\",\"hob\",\"hoc\",\"hod\",\"hoe\",\"hoh\",\"hoi\",\"hoj\",\"hok\",\"hol\",\"hom\",\"hoo\",\"hop\",\"hor\",\"hos\",\"hot\",\"hov\",\"how\",\"hoy\",\"hoz\",\"hpo\",\"hps\",\"hra\",\"hrc\",\"hre\",\"hrk\",\"hrm\",\"hro\",\"hrp\",\"hrr\",\"hrt\",\"hru\",\"hrw\",\"hrx\",\"hrz\",\"hsb\",\"hsh\",\"hsl\",\"hsn\",\"hss\",\"hti\",\"hto\",\"hts\",\"htu\",\"htx\",\"hub\",\"huc\",\"hud\",\"hue\",\"huf\",\"hug\",\"huh\",\"hui\",\"huj\",\"huk\",\"hul\",\"hum\",\"huo\",\"hup\",\"huq\",\"hur\",\"hus\",\"hut\",\"huu\",\"huv\",\"huw\",\"hux\",\"huy\",\"huz\",\"hvc\",\"hve\",\"hvk\",\"hvn\",\"hvv\",\"hwa\",\"hwc\",\"hwo\",\"hya\",\"hyx\",\"iai\",\"ian\",\"iap\",\"iar\",\"iba\",\"ibb\",\"ibd\",\"ibe\",\"ibg\",\"ibh\",\"ibi\",\"ibl\",\"ibm\",\"ibn\",\"ibr\",\"ibu\",\"iby\",\"ica\",\"ich\",\"icl\",\"icr\",\"ida\",\"idb\",\"idc\",\"idd\",\"ide\",\"idi\",\"idr\",\"ids\",\"idt\",\"idu\",\"ifa\",\"ifb\",\"ife\",\"iff\",\"ifk\",\"ifm\",\"ifu\",\"ify\",\"igb\",\"ige\",\"igg\",\"igl\",\"igm\",\"ign\",\"igo\",\"igs\",\"igw\",\"ihb\",\"ihi\",\"ihp\",\"ihw\",\"iin\",\"iir\",\"ijc\",\"ije\",\"ijj\",\"ijn\",\"ijo\",\"ijs\",\"ike\",\"iki\",\"ikk\",\"ikl\",\"iko\",\"ikp\",\"ikr\",\"iks\",\"ikt\",\"ikv\",\"ikw\",\"ikx\",\"ikz\",\"ila\",\"ilb\",\"ilg\",\"ili\",\"ilk\",\"ill\",\"ilm\",\"ilo\",\"ilp\",\"ils\",\"ilu\",\"ilv\",\"ilw\",\"ima\",\"ime\",\"imi\",\"iml\",\"imn\",\"imo\",\"imr\",\"ims\",\"imy\",\"inb\",\"inc\",\"ine\",\"ing\",\"inh\",\"inj\",\"inl\",\"inm\",\"inn\",\"ino\",\"inp\",\"ins\",\"int\",\"inz\",\"ior\",\"iou\",\"iow\",\"ipi\",\"ipo\",\"iqu\",\"iqw\",\"ira\",\"ire\",\"irh\",\"iri\",\"irk\",\"irn\",\"iro\",\"irr\",\"iru\",\"irx\",\"iry\",\"isa\",\"isc\",\"isd\",\"ise\",\"isg\",\"ish\",\"isi\",\"isk\",\"ism\",\"isn\",\"iso\",\"isr\",\"ist\",\"isu\",\"itb\",\"itc\",\"itd\",\"ite\",\"iti\",\"itk\",\"itl\",\"itm\",\"ito\",\"itr\",\"its\",\"itt\",\"itv\",\"itw\",\"itx\",\"ity\",\"itz\",\"ium\",\"ivb\",\"ivv\",\"iwk\",\"iwm\",\"iwo\",\"iws\",\"ixc\",\"ixl\",\"iya\",\"iyo\",\"iyx\",\"izh\",\"izi\",\"izr\",\"izz\",\"jaa\",\"jab\",\"jac\",\"jad\",\"jae\",\"jaf\",\"jah\",\"jaj\",\"jak\",\"jal\",\"jam\",\"jan\",\"jao\",\"jaq\",\"jar\",\"jas\",\"jat\",\"jau\",\"jax\",\"jay\",\"jaz\",\"jbe\",\"jbi\",\"jbj\",\"jbk\",\"jbn\",\"jbo\",\"jbr\",\"jbt\",\"jbu\",\"jbw\",\"jcs\",\"jct\",\"jda\",\"jdg\",\"jdt\",\"jeb\",\"jee\",\"jeg\",\"jeh\",\"jei\",\"jek\",\"jel\",\"jen\",\"jer\",\"jet\",\"jeu\",\"jgb\",\"jge\",\"jgk\",\"jgo\",\"jhi\",\"jhs\",\"jia\",\"jib\",\"jic\",\"jid\",\"jie\",\"jig\",\"jih\",\"jii\",\"jil\",\"jim\",\"jio\",\"jiq\",\"jit\",\"jiu\",\"jiv\",\"jiy\",\"jje\",\"jjr\",\"jka\",\"jkm\",\"jko\",\"jkp\",\"jkr\",\"jku\",\"jle\",\"jls\",\"jma\",\"jmb\",\"jmc\",\"jmd\",\"jmi\",\"jml\",\"jmn\",\"jmr\",\"jms\",\"jmw\",\"jmx\",\"jna\",\"jnd\",\"jng\",\"jni\",\"jnj\",\"jnl\",\"jns\",\"job\",\"jod\",\"jog\",\"jor\",\"jos\",\"jow\",\"jpa\",\"jpr\",\"jpx\",\"jqr\",\"jra\",\"jrb\",\"jrr\",\"jrt\",\"jru\",\"jsl\",\"jua\",\"jub\",\"juc\",\"jud\",\"juh\",\"jui\",\"juk\",\"jul\",\"jum\",\"jun\",\"juo\",\"jup\",\"jur\",\"jus\",\"jut\",\"juu\",\"juw\",\"juy\",\"jvd\",\"jvn\",\"jwi\",\"jya\",\"jye\",\"jyy\",\"kaa\",\"kab\",\"kac\",\"kad\",\"kae\",\"kaf\",\"kag\",\"kah\",\"kai\",\"kaj\",\"kak\",\"kam\",\"kao\",\"kap\",\"kaq\",\"kar\",\"kav\",\"kaw\",\"kax\",\"kay\",\"kba\",\"kbb\",\"kbc\",\"kbd\",\"kbe\",\"kbf\",\"kbg\",\"kbh\",\"kbi\",\"kbj\",\"kbk\",\"kbl\",\"kbm\",\"kbn\",\"kbo\",\"kbp\",\"kbq\",\"kbr\",\"kbs\",\"kbt\",\"kbu\",\"kbv\",\"kbw\",\"kbx\",\"kby\",\"kbz\",\"kca\",\"kcb\",\"kcc\",\"kcd\",\"kce\",\"kcf\",\"kcg\",\"kch\",\"kci\",\"kcj\",\"kck\",\"kcl\",\"kcm\",\"kcn\",\"kco\",\"kcp\",\"kcq\",\"kcr\",\"kcs\",\"kct\",\"kcu\",\"kcv\",\"kcw\",\"kcx\",\"kcy\",\"kcz\",\"kda\",\"kdc\",\"kdd\",\"kde\",\"kdf\",\"kdg\",\"kdh\",\"kdi\",\"kdj\",\"kdk\",\"kdl\",\"kdm\",\"kdn\",\"kdo\",\"kdp\",\"kdq\",\"kdr\",\"kdt\",\"kdu\",\"kdv\",\"kdw\",\"kdx\",\"kdy\",\"kdz\",\"kea\",\"keb\",\"kec\",\"ked\",\"kee\",\"kef\",\"keg\",\"keh\",\"kei\",\"kej\",\"kek\",\"kel\",\"kem\",\"ken\",\"keo\",\"kep\",\"keq\",\"ker\",\"kes\",\"ket\",\"keu\",\"kev\",\"kew\",\"kex\",\"key\",\"kez\",\"kfa\",\"kfb\",\"kfc\",\"kfd\",\"kfe\",\"kff\",\"kfg\",\"kfh\",\"kfi\",\"kfj\",\"kfk\",\"kfl\",\"kfm\",\"kfn\",\"kfo\",\"kfp\",\"kfq\",\"kfr\",\"kfs\",\"kft\",\"kfu\",\"kfv\",\"kfw\",\"kfx\",\"kfy\",\"kfz\",\"kga\",\"kgb\",\"kgc\",\"kgd\",\"kge\",\"kgf\",\"kgg\",\"kgh\",\"kgi\",\"kgj\",\"kgk\",\"kgl\",\"kgm\",\"kgn\",\"kgo\",\"kgp\",\"kgq\",\"kgr\",\"kgs\",\"kgt\",\"kgu\",\"kgv\",\"kgw\",\"kgx\",\"kgy\",\"kha\",\"khb\",\"khc\",\"khd\",\"khe\",\"khf\",\"khg\",\"khh\",\"khi\",\"khj\",\"khk\",\"khl\",\"khn\",\"kho\",\"khp\",\"khq\",\"khr\",\"khs\",\"kht\",\"khu\",\"khv\",\"khw\",\"khx\",\"khy\",\"khz\",\"kia\",\"kib\",\"kic\",\"kid\",\"kie\",\"kif\",\"kig\",\"kih\",\"kii\",\"kij\",\"kil\",\"kim\",\"kio\",\"kip\",\"kiq\",\"kis\",\"kit\",\"kiu\",\"kiv\",\"kiw\",\"kix\",\"kiy\",\"kiz\",\"kja\",\"kjb\",\"kjc\",\"kjd\",\"kje\",\"kjf\",\"kjg\",\"kjh\",\"kji\",\"kjj\",\"kjk\",\"kjl\",\"kjm\",\"kjn\",\"kjo\",\"kjp\",\"kjq\",\"kjr\",\"kjs\",\"kjt\",\"kju\",\"kjv\",\"kjx\",\"kjy\",\"kjz\",\"kka\",\"kkb\",\"kkc\",\"kkd\",\"kke\",\"kkf\",\"kkg\",\"kkh\",\"kki\",\"kkj\",\"kkk\",\"kkl\",\"kkm\",\"kkn\",\"kko\",\"kkp\",\"kkq\",\"kkr\",\"kks\",\"kkt\",\"kku\",\"kkv\",\"kkw\",\"kkx\",\"kky\",\"kkz\",\"kla\",\"klb\",\"klc\",\"kld\",\"kle\",\"klf\",\"klg\",\"klh\",\"kli\",\"klj\",\"klk\",\"kll\",\"klm\",\"kln\",\"klo\",\"klp\",\"klq\",\"klr\",\"kls\",\"klt\",\"klu\",\"klv\",\"klw\",\"klx\",\"kly\",\"klz\",\"kma\",\"kmb\",\"kmc\",\"kmd\",\"kme\",\"kmf\",\"kmg\",\"kmh\",\"kmi\",\"kmj\",\"kmk\",\"kml\",\"kmm\",\"kmn\",\"kmo\",\"kmp\",\"kmq\",\"kmr\",\"kms\",\"kmt\",\"kmu\",\"kmv\",\"kmw\",\"kmx\",\"kmy\",\"kmz\",\"kna\",\"knb\",\"knc\",\"knd\",\"kne\",\"knf\",\"kng\",\"kni\",\"knj\",\"knk\",\"knl\",\"knm\",\"knn\",\"kno\",\"knp\",\"knq\",\"knr\",\"kns\",\"knt\",\"knu\",\"knv\",\"knw\",\"knx\",\"kny\",\"knz\",\"koa\",\"koc\",\"kod\",\"koe\",\"kof\",\"kog\",\"koh\",\"koi\",\"koj\",\"kok\",\"kol\",\"koo\",\"kop\",\"koq\",\"kos\",\"kot\",\"kou\",\"kov\",\"kow\",\"kox\",\"koy\",\"koz\",\"kpa\",\"kpb\",\"kpc\",\"kpd\",\"kpe\",\"kpf\",\"kpg\",\"kph\",\"kpi\",\"kpj\",\"kpk\",\"kpl\",\"kpm\",\"kpn\",\"kpo\",\"kpp\",\"kpq\",\"kpr\",\"kps\",\"kpt\",\"kpu\",\"kpv\",\"kpw\",\"kpx\",\"kpy\",\"kpz\",\"kqa\",\"kqb\",\"kqc\",\"kqd\",\"kqe\",\"kqf\",\"kqg\",\"kqh\",\"kqi\",\"kqj\",\"kqk\",\"kql\",\"kqm\",\"kqn\",\"kqo\",\"kqp\",\"kqq\",\"kqr\",\"kqs\",\"kqt\",\"kqu\",\"kqv\",\"kqw\",\"kqx\",\"kqy\",\"kqz\",\"kra\",\"krb\",\"krc\",\"krd\",\"kre\",\"krf\",\"krh\",\"kri\",\"krj\",\"krk\",\"krl\",\"krm\",\"krn\",\"kro\",\"krp\",\"krr\",\"krs\",\"krt\",\"kru\",\"krv\",\"krw\",\"krx\",\"kry\",\"krz\",\"ksa\",\"ksb\",\"ksc\",\"ksd\",\"kse\",\"ksf\",\"ksg\",\"ksh\",\"ksi\",\"ksj\",\"ksk\",\"ksl\",\"ksm\",\"ksn\",\"kso\",\"ksp\",\"ksq\",\"ksr\",\"kss\",\"kst\",\"ksu\",\"ksv\",\"ksw\",\"ksx\",\"ksy\",\"ksz\",\"kta\",\"ktb\",\"ktc\",\"ktd\",\"kte\",\"ktf\",\"ktg\",\"kth\",\"kti\",\"ktj\",\"ktk\",\"ktl\",\"ktm\",\"ktn\",\"kto\",\"ktp\",\"ktq\",\"ktr\",\"kts\",\"ktt\",\"ktu\",\"ktv\",\"ktw\",\"ktx\",\"kty\",\"ktz\",\"kub\",\"kuc\",\"kud\",\"kue\",\"kuf\",\"kug\",\"kuh\",\"kui\",\"kuj\",\"kuk\",\"kul\",\"kum\",\"kun\",\"kuo\",\"kup\",\"kuq\",\"kus\",\"kut\",\"kuu\",\"kuv\",\"kuw\",\"kux\",\"kuy\",\"kuz\",\"kva\",\"kvb\",\"kvc\",\"kvd\",\"kve\",\"kvf\",\"kvg\",\"kvh\",\"kvi\",\"kvj\",\"kvk\",\"kvl\",\"kvm\",\"kvn\",\"kvo\",\"kvp\",\"kvq\",\"kvr\",\"kvs\",\"kvt\",\"kvu\",\"kvv\",\"kvw\",\"kvx\",\"kvy\",\"kvz\",\"kwa\",\"kwb\",\"kwc\",\"kwd\",\"kwe\",\"kwf\",\"kwg\",\"kwh\",\"kwi\",\"kwj\",\"kwk\",\"kwl\",\"kwm\",\"kwn\",\"kwo\",\"kwp\",\"kwq\",\"kwr\",\"kws\",\"kwt\",\"kwu\",\"kwv\",\"kww\",\"kwx\",\"kwy\",\"kwz\",\"kxa\",\"kxb\",\"kxc\",\"kxd\",\"kxe\",\"kxf\",\"kxh\",\"kxi\",\"kxj\",\"kxk\",\"kxl\",\"kxm\",\"kxn\",\"kxo\",\"kxp\",\"kxq\",\"kxr\",\"kxs\",\"kxt\",\"kxu\",\"kxv\",\"kxw\",\"kxx\",\"kxy\",\"kxz\",\"kya\",\"kyb\",\"kyc\",\"kyd\",\"kye\",\"kyf\",\"kyg\",\"kyh\",\"kyi\",\"kyj\",\"kyk\",\"kyl\",\"kym\",\"kyn\",\"kyo\",\"kyp\",\"kyq\",\"kyr\",\"kys\",\"kyt\",\"kyu\",\"kyv\",\"kyw\",\"kyx\",\"kyy\",\"kyz\",\"kza\",\"kzb\",\"kzc\",\"kzd\",\"kze\",\"kzf\",\"kzg\",\"kzh\",\"kzi\",\"kzj\",\"kzk\",\"kzl\",\"kzm\",\"kzn\",\"kzo\",\"kzp\",\"kzq\",\"kzr\",\"kzs\",\"kzt\",\"kzu\",\"kzv\",\"kzw\",\"kzx\",\"kzy\",\"kzz\",\"laa\",\"lab\",\"lac\",\"lad\",\"lae\",\"laf\",\"lag\",\"lah\",\"lai\",\"laj\",\"lak\",\"lal\",\"lam\",\"lan\",\"lap\",\"laq\",\"lar\",\"las\",\"lau\",\"law\",\"lax\",\"lay\",\"laz\",\"lba\",\"lbb\",\"lbc\",\"lbe\",\"lbf\",\"lbg\",\"lbi\",\"lbj\",\"lbk\",\"lbl\",\"lbm\",\"lbn\",\"lbo\",\"lbq\",\"lbr\",\"lbs\",\"lbt\",\"lbu\",\"lbv\",\"lbw\",\"lbx\",\"lby\",\"lbz\",\"lcc\",\"lcd\",\"lce\",\"lcf\",\"lch\",\"lcl\",\"lcm\",\"lcp\",\"lcq\",\"lcs\",\"lda\",\"ldb\",\"ldd\",\"ldg\",\"ldh\",\"ldi\",\"ldj\",\"ldk\",\"ldl\",\"ldm\",\"ldn\",\"ldo\",\"ldp\",\"ldq\",\"lea\",\"leb\",\"lec\",\"led\",\"lee\",\"lef\",\"leg\",\"leh\",\"lei\",\"lej\",\"lek\",\"lel\",\"lem\",\"len\",\"leo\",\"lep\",\"leq\",\"ler\",\"les\",\"let\",\"leu\",\"lev\",\"lew\",\"lex\",\"ley\",\"lez\",\"lfa\",\"lfn\",\"lga\",\"lgb\",\"lgg\",\"lgh\",\"lgi\",\"lgk\",\"lgl\",\"lgm\",\"lgn\",\"lgq\",\"lgr\",\"lgt\",\"lgu\",\"lgz\",\"lha\",\"lhh\",\"lhi\",\"lhl\",\"lhm\",\"lhn\",\"lhp\",\"lhs\",\"lht\",\"lhu\",\"lia\",\"lib\",\"lic\",\"lid\",\"lie\",\"lif\",\"lig\",\"lih\",\"lii\",\"lij\",\"lik\",\"lil\",\"lio\",\"lip\",\"liq\",\"lir\",\"lis\",\"liu\",\"liv\",\"liw\",\"lix\",\"liy\",\"liz\",\"lja\",\"lje\",\"lji\",\"ljl\",\"ljp\",\"ljw\",\"ljx\",\"lka\",\"lkb\",\"lkc\",\"lkd\",\"lke\",\"lkh\",\"lki\",\"lkj\",\"lkl\",\"lkm\",\"lkn\",\"lko\",\"lkr\",\"lks\",\"lkt\",\"lku\",\"lky\",\"lla\",\"llb\",\"llc\",\"lld\",\"lle\",\"llf\",\"llg\",\"llh\",\"lli\",\"llj\",\"llk\",\"lll\",\"llm\",\"lln\",\"llo\",\"llp\",\"llq\",\"lls\",\"llu\",\"llx\",\"lma\",\"lmb\",\"lmc\",\"lmd\",\"lme\",\"lmf\",\"lmg\",\"lmh\",\"lmi\",\"lmj\",\"lmk\",\"lml\",\"lmm\",\"lmn\",\"lmo\",\"lmp\",\"lmq\",\"lmr\",\"lmu\",\"lmv\",\"lmw\",\"lmx\",\"lmy\",\"lmz\",\"lna\",\"lnb\",\"lnd\",\"lng\",\"lnh\",\"lni\",\"lnj\",\"lnl\",\"lnm\",\"lnn\",\"lno\",\"lns\",\"lnu\",\"lnw\",\"lnz\",\"loa\",\"lob\",\"loc\",\"loe\",\"lof\",\"log\",\"loh\",\"loi\",\"loj\",\"lok\",\"lol\",\"lom\",\"lon\",\"loo\",\"lop\",\"loq\",\"lor\",\"los\",\"lot\",\"lou\",\"lov\",\"low\",\"lox\",\"loy\",\"loz\",\"lpa\",\"lpe\",\"lpn\",\"lpo\",\"lpx\",\"lra\",\"lrc\",\"lre\",\"lrg\",\"lri\",\"lrk\",\"lrl\",\"lrm\",\"lrn\",\"lro\",\"lrr\",\"lrt\",\"lrv\",\"lrz\",\"lsa\",\"lsd\",\"lse\",\"lsg\",\"lsh\",\"lsi\",\"lsl\",\"lsm\",\"lso\",\"lsp\",\"lsr\",\"lss\",\"lst\",\"lsy\",\"ltc\",\"ltg\",\"lth\",\"lti\",\"ltn\",\"lto\",\"lts\",\"ltu\",\"lua\",\"luc\",\"lud\",\"lue\",\"luf\",\"lui\",\"luj\",\"luk\",\"lul\",\"lum\",\"lun\",\"luo\",\"lup\",\"luq\",\"lur\",\"lus\",\"lut\",\"luu\",\"luv\",\"luw\",\"luy\",\"luz\",\"lva\",\"lvk\",\"lvs\",\"lvu\",\"lwa\",\"lwe\",\"lwg\",\"lwh\",\"lwl\",\"lwm\",\"lwo\",\"lwt\",\"lwu\",\"lww\",\"lya\",\"lyg\",\"lyn\",\"lzh\",\"lzl\",\"lzn\",\"lzz\",\"maa\",\"mab\",\"mad\",\"mae\",\"maf\",\"mag\",\"mai\",\"maj\",\"mak\",\"mam\",\"man\",\"map\",\"maq\",\"mas\",\"mat\",\"mau\",\"mav\",\"maw\",\"max\",\"maz\",\"mba\",\"mbb\",\"mbc\",\"mbd\",\"mbe\",\"mbf\",\"mbh\",\"mbi\",\"mbj\",\"mbk\",\"mbl\",\"mbm\",\"mbn\",\"mbo\",\"mbp\",\"mbq\",\"mbr\",\"mbs\",\"mbt\",\"mbu\",\"mbv\",\"mbw\",\"mbx\",\"mby\",\"mbz\",\"mca\",\"mcb\",\"mcc\",\"mcd\",\"mce\",\"mcf\",\"mcg\",\"mch\",\"mci\",\"mcj\",\"mck\",\"mcl\",\"mcm\",\"mcn\",\"mco\",\"mcp\",\"mcq\",\"mcr\",\"mcs\",\"mct\",\"mcu\",\"mcv\",\"mcw\",\"mcx\",\"mcy\",\"mcz\",\"mda\",\"mdb\",\"mdc\",\"mdd\",\"mde\",\"mdf\",\"mdg\",\"mdh\",\"mdi\",\"mdj\",\"mdk\",\"mdl\",\"mdm\",\"mdn\",\"mdp\",\"mdq\",\"mdr\",\"mds\",\"mdt\",\"mdu\",\"mdv\",\"mdw\",\"mdx\",\"mdy\",\"mdz\",\"mea\",\"meb\",\"mec\",\"med\",\"mee\",\"mef\",\"meg\",\"meh\",\"mei\",\"mej\",\"mek\",\"mel\",\"mem\",\"men\",\"meo\",\"mep\",\"meq\",\"mer\",\"mes\",\"met\",\"meu\",\"mev\",\"mew\",\"mey\",\"mez\",\"mfa\",\"mfb\",\"mfc\",\"mfd\",\"mfe\",\"mff\",\"mfg\",\"mfh\",\"mfi\",\"mfj\",\"mfk\",\"mfl\",\"mfm\",\"mfn\",\"mfo\",\"mfp\",\"mfq\",\"mfr\",\"mfs\",\"mft\",\"mfu\",\"mfv\",\"mfw\",\"mfx\",\"mfy\",\"mfz\",\"mga\",\"mgb\",\"mgc\",\"mgd\",\"mge\",\"mgf\",\"mgg\",\"mgh\",\"mgi\",\"mgj\",\"mgk\",\"mgl\",\"mgm\",\"mgn\",\"mgo\",\"mgp\",\"mgq\",\"mgr\",\"mgs\",\"mgt\",\"mgu\",\"mgv\",\"mgw\",\"mgx\",\"mgy\",\"mgz\",\"mha\",\"mhb\",\"mhc\",\"mhd\",\"mhe\",\"mhf\",\"mhg\",\"mhh\",\"mhi\",\"mhj\",\"mhk\",\"mhl\",\"mhm\",\"mhn\",\"mho\",\"mhp\",\"mhq\",\"mhr\",\"mhs\",\"mht\",\"mhu\",\"mhw\",\"mhx\",\"mhy\",\"mhz\",\"mia\",\"mib\",\"mic\",\"mid\",\"mie\",\"mif\",\"mig\",\"mih\",\"mii\",\"mij\",\"mik\",\"mil\",\"mim\",\"min\",\"mio\",\"mip\",\"miq\",\"mir\",\"mis\",\"mit\",\"miu\",\"miw\",\"mix\",\"miy\",\"miz\",\"mja\",\"mjb\",\"mjc\",\"mjd\",\"mje\",\"mjg\",\"mjh\",\"mji\",\"mjj\",\"mjk\",\"mjl\",\"mjm\",\"mjn\",\"mjo\",\"mjp\",\"mjq\",\"mjr\",\"mjs\",\"mjt\",\"mju\",\"mjv\",\"mjw\",\"mjx\",\"mjy\",\"mjz\",\"mka\",\"mkb\",\"mkc\",\"mke\",\"mkf\",\"mkg\",\"mkh\",\"mki\",\"mkj\",\"mkk\",\"mkl\",\"mkm\",\"mkn\",\"mko\",\"mkp\",\"mkq\",\"mkr\",\"mks\",\"mkt\",\"mku\",\"mkv\",\"mkw\",\"mkx\",\"mky\",\"mkz\",\"mla\",\"mlb\",\"mlc\",\"mld\",\"mle\",\"mlf\",\"mlh\",\"mli\",\"mlj\",\"mlk\",\"mll\",\"mlm\",\"mln\",\"mlo\",\"mlp\",\"mlq\",\"mlr\",\"mls\",\"mlu\",\"mlv\",\"mlw\",\"mlx\",\"mlz\",\"mma\",\"mmb\",\"mmc\",\"mmd\",\"mme\",\"mmf\",\"mmg\",\"mmh\",\"mmi\",\"mmj\",\"mmk\",\"mml\",\"mmm\",\"mmn\",\"mmo\",\"mmp\",\"mmq\",\"mmr\",\"mmt\",\"mmu\",\"mmv\",\"mmw\",\"mmx\",\"mmy\",\"mmz\",\"mna\",\"mnb\",\"mnc\",\"mnd\",\"mne\",\"mnf\",\"mng\",\"mnh\",\"mni\",\"mnj\",\"mnk\",\"mnl\",\"mnm\",\"mnn\",\"mno\",\"mnp\",\"mnq\",\"mnr\",\"mns\",\"mnt\",\"mnu\",\"mnv\",\"mnw\",\"mnx\",\"mny\",\"mnz\",\"moa\",\"moc\",\"mod\",\"moe\",\"mof\",\"mog\",\"moh\",\"moi\",\"moj\",\"mok\",\"mom\",\"moo\",\"mop\",\"moq\",\"mor\",\"mos\",\"mot\",\"mou\",\"mov\",\"mow\",\"mox\",\"moy\",\"moz\",\"mpa\",\"mpb\",\"mpc\",\"mpd\",\"mpe\",\"mpg\",\"mph\",\"mpi\",\"mpj\",\"mpk\",\"mpl\",\"mpm\",\"mpn\",\"mpo\",\"mpp\",\"mpq\",\"mpr\",\"mps\",\"mpt\",\"mpu\",\"mpv\",\"mpw\",\"mpx\",\"mpy\",\"mpz\",\"mqa\",\"mqb\",\"mqc\",\"mqe\",\"mqf\",\"mqg\",\"mqh\",\"mqi\",\"mqj\",\"mqk\",\"mql\",\"mqm\",\"mqn\",\"mqo\",\"mqp\",\"mqq\",\"mqr\",\"mqs\",\"mqt\",\"mqu\",\"mqv\",\"mqw\",\"mqx\",\"mqy\",\"mqz\",\"mra\",\"mrb\",\"mrc\",\"mrd\",\"mre\",\"mrf\",\"mrg\",\"mrh\",\"mrj\",\"mrk\",\"mrl\",\"mrm\",\"mrn\",\"mro\",\"mrp\",\"mrq\",\"mrr\",\"mrs\",\"mrt\",\"mru\",\"mrv\",\"mrw\",\"mrx\",\"mry\",\"mrz\",\"msb\",\"msc\",\"msd\",\"mse\",\"msf\",\"msg\",\"msh\",\"msi\",\"msj\",\"msk\",\"msl\",\"msm\",\"msn\",\"mso\",\"msp\",\"msq\",\"msr\",\"mss\",\"mst\",\"msu\",\"msv\",\"msw\",\"msx\",\"msy\",\"msz\",\"mta\",\"mtb\",\"mtc\",\"mtd\",\"mte\",\"mtf\",\"mtg\",\"mth\",\"mti\",\"mtj\",\"mtk\",\"mtl\",\"mtm\",\"mtn\",\"mto\",\"mtp\",\"mtq\",\"mtr\",\"mts\",\"mtt\",\"mtu\",\"mtv\",\"mtw\",\"mtx\",\"mty\",\"mua\",\"mub\",\"muc\",\"mud\",\"mue\",\"mug\",\"muh\",\"mui\",\"muj\",\"muk\",\"mul\",\"mum\",\"mun\",\"muo\",\"mup\",\"muq\",\"mur\",\"mus\",\"mut\",\"muu\",\"muv\",\"mux\",\"muy\",\"muz\",\"mva\",\"mvb\",\"mvd\",\"mve\",\"mvf\",\"mvg\",\"mvh\",\"mvi\",\"mvk\",\"mvl\",\"mvm\",\"mvn\",\"mvo\",\"mvp\",\"mvq\",\"mvr\",\"mvs\",\"mvt\",\"mvu\",\"mvv\",\"mvw\",\"mvx\",\"mvy\",\"mvz\",\"mwa\",\"mwb\",\"mwc\",\"mwd\",\"mwe\",\"mwf\",\"mwg\",\"mwh\",\"mwi\",\"mwj\",\"mwk\",\"mwl\",\"mwm\",\"mwn\",\"mwo\",\"mwp\",\"mwq\",\"mwr\",\"mws\",\"mwt\",\"mwu\",\"mwv\",\"mww\",\"mwx\",\"mwy\",\"mwz\",\"mxa\",\"mxb\",\"mxc\",\"mxd\",\"mxe\",\"mxf\",\"mxg\",\"mxh\",\"mxi\",\"mxj\",\"mxk\",\"mxl\",\"mxm\",\"mxn\",\"mxo\",\"mxp\",\"mxq\",\"mxr\",\"mxs\",\"mxt\",\"mxu\",\"mxv\",\"mxw\",\"mxx\",\"mxy\",\"mxz\",\"myb\",\"myc\",\"myd\",\"mye\",\"myf\",\"myg\",\"myh\",\"myi\",\"myj\",\"myk\",\"myl\",\"mym\",\"myn\",\"myo\",\"myp\",\"myq\",\"myr\",\"mys\",\"myt\",\"myu\",\"myv\",\"myw\",\"myx\",\"myy\",\"myz\",\"mza\",\"mzb\",\"mzc\",\"mzd\",\"mze\",\"mzg\",\"mzh\",\"mzi\",\"mzj\",\"mzk\",\"mzl\",\"mzm\",\"mzn\",\"mzo\",\"mzp\",\"mzq\",\"mzr\",\"mzs\",\"mzt\",\"mzu\",\"mzv\",\"mzw\",\"mzx\",\"mzy\",\"mzz\",\"naa\",\"nab\",\"nac\",\"nad\",\"nae\",\"naf\",\"nag\",\"nah\",\"nai\",\"naj\",\"nak\",\"nal\",\"nam\",\"nan\",\"nao\",\"nap\",\"naq\",\"nar\",\"nas\",\"nat\",\"naw\",\"nax\",\"nay\",\"naz\",\"nba\",\"nbb\",\"nbc\",\"nbd\",\"nbe\",\"nbf\",\"nbg\",\"nbh\",\"nbi\",\"nbj\",\"nbk\",\"nbm\",\"nbn\",\"nbo\",\"nbp\",\"nbq\",\"nbr\",\"nbs\",\"nbt\",\"nbu\",\"nbv\",\"nbw\",\"nbx\",\"nby\",\"nca\",\"ncb\",\"ncc\",\"ncd\",\"nce\",\"ncf\",\"ncg\",\"nch\",\"nci\",\"ncj\",\"nck\",\"ncl\",\"ncm\",\"ncn\",\"nco\",\"ncp\",\"ncq\",\"ncr\",\"ncs\",\"nct\",\"ncu\",\"ncx\",\"ncz\",\"nda\",\"ndb\",\"ndc\",\"ndd\",\"ndf\",\"ndg\",\"ndh\",\"ndi\",\"ndj\",\"ndk\",\"ndl\",\"ndm\",\"ndn\",\"ndp\",\"ndq\",\"ndr\",\"nds\",\"ndt\",\"ndu\",\"ndv\",\"ndw\",\"ndx\",\"ndy\",\"ndz\",\"nea\",\"neb\",\"nec\",\"ned\",\"nee\",\"nef\",\"neg\",\"neh\",\"nei\",\"nej\",\"nek\",\"nem\",\"nen\",\"neo\",\"neq\",\"ner\",\"nes\",\"net\",\"neu\",\"nev\",\"new\",\"nex\",\"ney\",\"nez\",\"nfa\",\"nfd\",\"nfl\",\"nfr\",\"nfu\",\"nga\",\"ngb\",\"ngc\",\"ngd\",\"nge\",\"ngf\",\"ngg\",\"ngh\",\"ngi\",\"ngj\",\"ngk\",\"ngl\",\"ngm\",\"ngn\",\"ngo\",\"ngp\",\"ngq\",\"ngr\",\"ngs\",\"ngt\",\"ngu\",\"ngv\",\"ngw\",\"ngx\",\"ngy\",\"ngz\",\"nha\",\"nhb\",\"nhc\",\"nhd\",\"nhe\",\"nhf\",\"nhg\",\"nhh\",\"nhi\",\"nhk\",\"nhm\",\"nhn\",\"nho\",\"nhp\",\"nhq\",\"nhr\",\"nht\",\"nhu\",\"nhv\",\"nhw\",\"nhx\",\"nhy\",\"nhz\",\"nia\",\"nib\",\"nic\",\"nid\",\"nie\",\"nif\",\"nig\",\"nih\",\"nii\",\"nij\",\"nik\",\"nil\",\"nim\",\"nin\",\"nio\",\"niq\",\"nir\",\"nis\",\"nit\",\"niu\",\"niv\",\"niw\",\"nix\",\"niy\",\"niz\",\"nja\",\"njb\",\"njd\",\"njh\",\"nji\",\"njj\",\"njl\",\"njm\",\"njn\",\"njo\",\"njr\",\"njs\",\"njt\",\"nju\",\"njx\",\"njy\",\"njz\",\"nka\",\"nkb\",\"nkc\",\"nkd\",\"nke\",\"nkf\",\"nkg\",\"nkh\",\"nki\",\"nkj\",\"nkk\",\"nkm\",\"nkn\",\"nko\",\"nkp\",\"nkq\",\"nkr\",\"nks\",\"nkt\",\"nku\",\"nkv\",\"nkw\",\"nkx\",\"nkz\",\"nla\",\"nlc\",\"nle\",\"nlg\",\"nli\",\"nlj\",\"nlk\",\"nll\",\"nln\",\"nlo\",\"nlq\",\"nlr\",\"nlu\",\"nlv\",\"nlw\",\"nlx\",\"nly\",\"nlz\",\"nma\",\"nmb\",\"nmc\",\"nmd\",\"nme\",\"nmf\",\"nmg\",\"nmh\",\"nmi\",\"nmj\",\"nmk\",\"nml\",\"nmm\",\"nmn\",\"nmo\",\"nmp\",\"nmq\",\"nmr\",\"nms\",\"nmt\",\"nmu\",\"nmv\",\"nmw\",\"nmx\",\"nmy\",\"nmz\",\"nna\",\"nnb\",\"nnc\",\"nnd\",\"nne\",\"nnf\",\"nng\",\"nnh\",\"nni\",\"nnj\",\"nnk\",\"nnl\",\"nnm\",\"nnn\",\"nnp\",\"nnq\",\"nnr\",\"nns\",\"nnt\",\"nnu\",\"nnv\",\"nnw\",\"nnx\",\"nny\",\"nnz\",\"noa\",\"noc\",\"nod\",\"noe\",\"nof\",\"nog\",\"noh\",\"noi\",\"noj\",\"nok\",\"nol\",\"nom\",\"non\",\"noo\",\"nop\",\"noq\",\"nos\",\"not\",\"nou\",\"nov\",\"now\",\"noy\",\"noz\",\"npa\",\"npb\",\"npg\",\"nph\",\"npi\",\"npl\",\"npn\",\"npo\",\"nps\",\"npu\",\"npx\",\"npy\",\"nqg\",\"nqk\",\"nql\",\"nqm\",\"nqn\",\"nqo\",\"nqq\",\"nqy\",\"nra\",\"nrb\",\"nrc\",\"nre\",\"nrf\",\"nrg\",\"nri\",\"nrk\",\"nrl\",\"nrm\",\"nrn\",\"nrp\",\"nrr\",\"nrt\",\"nru\",\"nrx\",\"nrz\",\"nsa\",\"nsc\",\"nsd\",\"nse\",\"nsf\",\"nsg\",\"nsh\",\"nsi\",\"nsk\",\"nsl\",\"nsm\",\"nsn\",\"nso\",\"nsp\",\"nsq\",\"nsr\",\"nss\",\"nst\",\"nsu\",\"nsv\",\"nsw\",\"nsx\",\"nsy\",\"nsz\",\"ntd\",\"nte\",\"ntg\",\"nti\",\"ntj\",\"ntk\",\"ntm\",\"nto\",\"ntp\",\"ntr\",\"nts\",\"ntu\",\"ntw\",\"ntx\",\"nty\",\"ntz\",\"nua\",\"nub\",\"nuc\",\"nud\",\"nue\",\"nuf\",\"nug\",\"nuh\",\"nui\",\"nuj\",\"nuk\",\"nul\",\"num\",\"nun\",\"nuo\",\"nup\",\"nuq\",\"nur\",\"nus\",\"nut\",\"nuu\",\"nuv\",\"nuw\",\"nux\",\"nuy\",\"nuz\",\"nvh\",\"nvm\",\"nvo\",\"nwa\",\"nwb\",\"nwc\",\"nwe\",\"nwg\",\"nwi\",\"nwm\",\"nwo\",\"nwr\",\"nwx\",\"nwy\",\"nxa\",\"nxd\",\"nxe\",\"nxg\",\"nxi\",\"nxk\",\"nxl\",\"nxm\",\"nxn\",\"nxo\",\"nxq\",\"nxr\",\"nxu\",\"nxx\",\"nyb\",\"nyc\",\"nyd\",\"nye\",\"nyf\",\"nyg\",\"nyh\",\"nyi\",\"nyj\",\"nyk\",\"nyl\",\"nym\",\"nyn\",\"nyo\",\"nyp\",\"nyq\",\"nyr\",\"nys\",\"nyt\",\"nyu\",\"nyv\",\"nyw\",\"nyx\",\"nyy\",\"nza\",\"nzb\",\"nzi\",\"nzk\",\"nzm\",\"nzs\",\"nzu\",\"nzy\",\"nzz\",\"oaa\",\"oac\",\"oar\",\"oav\",\"obi\",\"obk\",\"obl\",\"obm\",\"obo\",\"obr\",\"obt\",\"obu\",\"oca\",\"och\",\"oco\",\"ocu\",\"oda\",\"odk\",\"odt\",\"odu\",\"ofo\",\"ofs\",\"ofu\",\"ogb\",\"ogc\",\"oge\",\"ogg\",\"ogo\",\"ogu\",\"oht\",\"ohu\",\"oia\",\"oin\",\"ojb\",\"ojc\",\"ojg\",\"ojp\",\"ojs\",\"ojv\",\"ojw\",\"oka\",\"okb\",\"okd\",\"oke\",\"okg\",\"okh\",\"oki\",\"okj\",\"okk\",\"okl\",\"okm\",\"okn\",\"oko\",\"okr\",\"oks\",\"oku\",\"okv\",\"okx\",\"ola\",\"old\",\"ole\",\"olk\",\"olm\",\"olo\",\"olr\",\"olt\",\"olu\",\"oma\",\"omb\",\"omc\",\"ome\",\"omg\",\"omi\",\"omk\",\"oml\",\"omn\",\"omo\",\"omp\",\"omq\",\"omr\",\"omt\",\"omu\",\"omv\",\"omw\",\"omx\",\"ona\",\"onb\",\"one\",\"ong\",\"oni\",\"onj\",\"onk\",\"onn\",\"ono\",\"onp\",\"onr\",\"ons\",\"ont\",\"onu\",\"onw\",\"onx\",\"ood\",\"oog\",\"oon\",\"oor\",\"oos\",\"opa\",\"opk\",\"opm\",\"opo\",\"opt\",\"opy\",\"ora\",\"orc\",\"ore\",\"org\",\"orh\",\"orn\",\"oro\",\"orr\",\"ors\",\"ort\",\"oru\",\"orv\",\"orw\",\"orx\",\"ory\",\"orz\",\"osa\",\"osc\",\"osi\",\"oso\",\"osp\",\"ost\",\"osu\",\"osx\",\"ota\",\"otb\",\"otd\",\"ote\",\"oti\",\"otk\",\"otl\",\"otm\",\"otn\",\"oto\",\"otq\",\"otr\",\"ots\",\"ott\",\"otu\",\"otw\",\"otx\",\"oty\",\"otz\",\"oua\",\"oub\",\"oue\",\"oui\",\"oum\",\"oun\",\"ovd\",\"owi\",\"owl\",\"oyb\",\"oyd\",\"oym\",\"oyy\",\"ozm\",\"paa\",\"pab\",\"pac\",\"pad\",\"pae\",\"paf\",\"pag\",\"pah\",\"pai\",\"pak\",\"pal\",\"pam\",\"pao\",\"pap\",\"paq\",\"par\",\"pas\",\"pat\",\"pau\",\"pav\",\"paw\",\"pax\",\"pay\",\"paz\",\"pbb\",\"pbc\",\"pbe\",\"pbf\",\"pbg\",\"pbh\",\"pbi\",\"pbl\",\"pbn\",\"pbo\",\"pbp\",\"pbr\",\"pbs\",\"pbt\",\"pbu\",\"pbv\",\"pby\",\"pbz\",\"pca\",\"pcb\",\"pcc\",\"pcd\",\"pce\",\"pcf\",\"pcg\",\"pch\",\"pci\",\"pcj\",\"pck\",\"pcl\",\"pcm\",\"pcn\",\"pcp\",\"pcr\",\"pcw\",\"pda\",\"pdc\",\"pdi\",\"pdn\",\"pdo\",\"pdt\",\"pdu\",\"pea\",\"peb\",\"ped\",\"pee\",\"pef\",\"peg\",\"peh\",\"pei\",\"pej\",\"pek\",\"pel\",\"pem\",\"peo\",\"pep\",\"peq\",\"pes\",\"pev\",\"pex\",\"pey\",\"pez\",\"pfa\",\"pfe\",\"pfl\",\"pga\",\"pgd\",\"pgg\",\"pgi\",\"pgk\",\"pgl\",\"pgn\",\"pgs\",\"pgu\",\"pgy\",\"pgz\",\"pha\",\"phd\",\"phg\",\"phh\",\"phi\",\"phk\",\"phl\",\"phm\",\"phn\",\"pho\",\"phq\",\"phr\",\"pht\",\"phu\",\"phv\",\"phw\",\"pia\",\"pib\",\"pic\",\"pid\",\"pie\",\"pif\",\"pig\",\"pih\",\"pii\",\"pij\",\"pil\",\"pim\",\"pin\",\"pio\",\"pip\",\"pir\",\"pis\",\"pit\",\"piu\",\"piv\",\"piw\",\"pix\",\"piy\",\"piz\",\"pjt\",\"pka\",\"pkb\",\"pkc\",\"pkg\",\"pkh\",\"pkn\",\"pko\",\"pkp\",\"pkr\",\"pks\",\"pkt\",\"pku\",\"pla\",\"plb\",\"plc\",\"pld\",\"ple\",\"plf\",\"plg\",\"plh\",\"plj\",\"plk\",\"pll\",\"pln\",\"plo\",\"plp\",\"plq\",\"plr\",\"pls\",\"plt\",\"plu\",\"plv\",\"plw\",\"ply\",\"plz\",\"pma\",\"pmb\",\"pmc\",\"pmd\",\"pme\",\"pmf\",\"pmh\",\"pmi\",\"pmj\",\"pmk\",\"pml\",\"pmm\",\"pmn\",\"pmo\",\"pmq\",\"pmr\",\"pms\",\"pmt\",\"pmu\",\"pmw\",\"pmx\",\"pmy\",\"pmz\",\"pna\",\"pnb\",\"pnc\",\"pne\",\"png\",\"pnh\",\"pni\",\"pnj\",\"pnk\",\"pnl\",\"pnm\",\"pnn\",\"pno\",\"pnp\",\"pnq\",\"pnr\",\"pns\",\"pnt\",\"pnu\",\"pnv\",\"pnw\",\"pnx\",\"pny\",\"pnz\",\"poc\",\"pod\",\"poe\",\"pof\",\"pog\",\"poh\",\"poi\",\"pok\",\"pom\",\"pon\",\"poo\",\"pop\",\"poq\",\"pos\",\"pot\",\"pov\",\"pow\",\"pox\",\"poy\",\"poz\",\"ppa\",\"ppe\",\"ppi\",\"ppk\",\"ppl\",\"ppm\",\"ppn\",\"ppo\",\"ppp\",\"ppq\",\"ppr\",\"pps\",\"ppt\",\"ppu\",\"pqa\",\"pqe\",\"pqm\",\"pqw\",\"pra\",\"prb\",\"prc\",\"prd\",\"pre\",\"prf\",\"prg\",\"prh\",\"pri\",\"prk\",\"prl\",\"prm\",\"prn\",\"pro\",\"prp\",\"prq\",\"prr\",\"prs\",\"prt\",\"pru\",\"prw\",\"prx\",\"pry\",\"prz\",\"psa\",\"psc\",\"psd\",\"pse\",\"psg\",\"psh\",\"psi\",\"psl\",\"psm\",\"psn\",\"pso\",\"psp\",\"psq\",\"psr\",\"pss\",\"pst\",\"psu\",\"psw\",\"psy\",\"pta\",\"pth\",\"pti\",\"ptn\",\"pto\",\"ptp\",\"ptq\",\"ptr\",\"ptt\",\"ptu\",\"ptv\",\"ptw\",\"pty\",\"pua\",\"pub\",\"puc\",\"pud\",\"pue\",\"puf\",\"pug\",\"pui\",\"puj\",\"puk\",\"pum\",\"puo\",\"pup\",\"puq\",\"pur\",\"put\",\"puu\",\"puw\",\"pux\",\"puy\",\"puz\",\"pwa\",\"pwb\",\"pwg\",\"pwi\",\"pwm\",\"pwn\",\"pwo\",\"pwr\",\"pww\",\"pxm\",\"pye\",\"pym\",\"pyn\",\"pys\",\"pyu\",\"pyx\",\"pyy\",\"pzn\",\"qaa..qtz\",\"qua\",\"qub\",\"quc\",\"qud\",\"quf\",\"qug\",\"quh\",\"qui\",\"quk\",\"qul\",\"qum\",\"qun\",\"qup\",\"quq\",\"qur\",\"qus\",\"quv\",\"quw\",\"qux\",\"quy\",\"quz\",\"qva\",\"qvc\",\"qve\",\"qvh\",\"qvi\",\"qvj\",\"qvl\",\"qvm\",\"qvn\",\"qvo\",\"qvp\",\"qvs\",\"qvw\",\"qvy\",\"qvz\",\"qwa\",\"qwc\",\"qwe\",\"qwh\",\"qwm\",\"qws\",\"qwt\",\"qxa\",\"qxc\",\"qxh\",\"qxl\",\"qxn\",\"qxo\",\"qxp\",\"qxq\",\"qxr\",\"qxs\",\"qxt\",\"qxu\",\"qxw\",\"qya\",\"qyp\",\"raa\",\"rab\",\"rac\",\"rad\",\"raf\",\"rag\",\"rah\",\"rai\",\"raj\",\"rak\",\"ral\",\"ram\",\"ran\",\"rao\",\"rap\",\"raq\",\"rar\",\"ras\",\"rat\",\"rau\",\"rav\",\"raw\",\"rax\",\"ray\",\"raz\",\"rbb\",\"rbk\",\"rbl\",\"rbp\",\"rcf\",\"rdb\",\"rea\",\"reb\",\"ree\",\"reg\",\"rei\",\"rej\",\"rel\",\"rem\",\"ren\",\"rer\",\"res\",\"ret\",\"rey\",\"rga\",\"rge\",\"rgk\",\"rgn\",\"rgr\",\"rgs\",\"rgu\",\"rhg\",\"rhp\",\"ria\",\"rie\",\"rif\",\"ril\",\"rim\",\"rin\",\"rir\",\"rit\",\"riu\",\"rjg\",\"rji\",\"rjs\",\"rka\",\"rkb\",\"rkh\",\"rki\",\"rkm\",\"rkt\",\"rkw\",\"rma\",\"rmb\",\"rmc\",\"rmd\",\"rme\",\"rmf\",\"rmg\",\"rmh\",\"rmi\",\"rmk\",\"rml\",\"rmm\",\"rmn\",\"rmo\",\"rmp\",\"rmq\",\"rmr\",\"rms\",\"rmt\",\"rmu\",\"rmv\",\"rmw\",\"rmx\",\"rmy\",\"rmz\",\"rna\",\"rnd\",\"rng\",\"rnl\",\"rnn\",\"rnp\",\"rnr\",\"rnw\",\"roa\",\"rob\",\"roc\",\"rod\",\"roe\",\"rof\",\"rog\",\"rol\",\"rom\",\"roo\",\"rop\",\"ror\",\"rou\",\"row\",\"rpn\",\"rpt\",\"rri\",\"rro\",\"rrt\",\"rsb\",\"rsi\",\"rsl\",\"rsm\",\"rtc\",\"rth\",\"rtm\",\"rts\",\"rtw\",\"rub\",\"ruc\",\"rue\",\"ruf\",\"rug\",\"ruh\",\"rui\",\"ruk\",\"ruo\",\"rup\",\"ruq\",\"rut\",\"ruu\",\"ruy\",\"ruz\",\"rwa\",\"rwk\",\"rwm\",\"rwo\",\"rwr\",\"rxd\",\"rxw\",\"ryn\",\"rys\",\"ryu\",\"rzh\",\"saa\",\"sab\",\"sac\",\"sad\",\"sae\",\"saf\",\"sah\",\"sai\",\"saj\",\"sak\",\"sal\",\"sam\",\"sao\",\"sap\",\"saq\",\"sar\",\"sas\",\"sat\",\"sau\",\"sav\",\"saw\",\"sax\",\"say\",\"saz\",\"sba\",\"sbb\",\"sbc\",\"sbd\",\"sbe\",\"sbf\",\"sbg\",\"sbh\",\"sbi\",\"sbj\",\"sbk\",\"sbl\",\"sbm\",\"sbn\",\"sbo\",\"sbp\",\"sbq\",\"sbr\",\"sbs\",\"sbt\",\"sbu\",\"sbv\",\"sbw\",\"sbx\",\"sby\",\"sbz\",\"sca\",\"scb\",\"sce\",\"scf\",\"scg\",\"sch\",\"sci\",\"sck\",\"scl\",\"scn\",\"sco\",\"scp\",\"scq\",\"scs\",\"sct\",\"scu\",\"scv\",\"scw\",\"scx\",\"sda\",\"sdb\",\"sdc\",\"sde\",\"sdf\",\"sdg\",\"sdh\",\"sdj\",\"sdk\",\"sdl\",\"sdm\",\"sdn\",\"sdo\",\"sdp\",\"sdr\",\"sds\",\"sdt\",\"sdu\",\"sdv\",\"sdx\",\"sdz\",\"sea\",\"seb\",\"sec\",\"sed\",\"see\",\"sef\",\"seg\",\"seh\",\"sei\",\"sej\",\"sek\",\"sel\",\"sem\",\"sen\",\"seo\",\"sep\",\"seq\",\"ser\",\"ses\",\"set\",\"seu\",\"sev\",\"sew\",\"sey\",\"sez\",\"sfb\",\"sfe\",\"sfm\",\"sfs\",\"sfw\",\"sga\",\"sgb\",\"sgc\",\"sgd\",\"sge\",\"sgg\",\"sgh\",\"sgi\",\"sgj\",\"sgk\",\"sgl\",\"sgm\",\"sgn\",\"sgo\",\"sgp\",\"sgr\",\"sgs\",\"sgt\",\"sgu\",\"sgw\",\"sgx\",\"sgy\",\"sgz\",\"sha\",\"shb\",\"shc\",\"shd\",\"she\",\"shg\",\"shh\",\"shi\",\"shj\",\"shk\",\"shl\",\"shm\",\"shn\",\"sho\",\"shp\",\"shq\",\"shr\",\"shs\",\"sht\",\"shu\",\"shv\",\"shw\",\"shx\",\"shy\",\"shz\",\"sia\",\"sib\",\"sid\",\"sie\",\"sif\",\"sig\",\"sih\",\"sii\",\"sij\",\"sik\",\"sil\",\"sim\",\"sio\",\"sip\",\"siq\",\"sir\",\"sis\",\"sit\",\"siu\",\"siv\",\"siw\",\"six\",\"siy\",\"siz\",\"sja\",\"sjb\",\"sjd\",\"sje\",\"sjg\",\"sjk\",\"sjl\",\"sjm\",\"sjn\",\"sjo\",\"sjp\",\"sjr\",\"sjs\",\"sjt\",\"sju\",\"sjw\",\"ska\",\"skb\",\"skc\",\"skd\",\"ske\",\"skf\",\"skg\",\"skh\",\"ski\",\"skj\",\"skk\",\"skm\",\"skn\",\"sko\",\"skp\",\"skq\",\"skr\",\"sks\",\"skt\",\"sku\",\"skv\",\"skw\",\"skx\",\"sky\",\"skz\",\"sla\",\"slc\",\"sld\",\"sle\",\"slf\",\"slg\",\"slh\",\"sli\",\"slj\",\"sll\",\"slm\",\"sln\",\"slp\",\"slq\",\"slr\",\"sls\",\"slt\",\"slu\",\"slw\",\"slx\",\"sly\",\"slz\",\"sma\",\"smb\",\"smc\",\"smd\",\"smf\",\"smg\",\"smh\",\"smi\",\"smj\",\"smk\",\"sml\",\"smm\",\"smn\",\"smp\",\"smq\",\"smr\",\"sms\",\"smt\",\"smu\",\"smv\",\"smw\",\"smx\",\"smy\",\"smz\",\"snb\",\"snc\",\"sne\",\"snf\",\"sng\",\"snh\",\"sni\",\"snj\",\"snk\",\"snl\",\"snm\",\"snn\",\"sno\",\"snp\",\"snq\",\"snr\",\"sns\",\"snu\",\"snv\",\"snw\",\"snx\",\"sny\",\"snz\",\"soa\",\"sob\",\"soc\",\"sod\",\"soe\",\"sog\",\"soh\",\"soi\",\"soj\",\"sok\",\"sol\",\"son\",\"soo\",\"sop\",\"soq\",\"sor\",\"sos\",\"sou\",\"sov\",\"sow\",\"sox\",\"soy\",\"soz\",\"spb\",\"spc\",\"spd\",\"spe\",\"spg\",\"spi\",\"spk\",\"spl\",\"spm\",\"spn\",\"spo\",\"spp\",\"spq\",\"spr\",\"sps\",\"spt\",\"spu\",\"spv\",\"spx\",\"spy\",\"sqa\",\"sqh\",\"sqj\",\"sqk\",\"sqm\",\"sqn\",\"sqo\",\"sqq\",\"sqr\",\"sqs\",\"sqt\",\"squ\",\"sra\",\"srb\",\"src\",\"sre\",\"srf\",\"srg\",\"srh\",\"sri\",\"srk\",\"srl\",\"srm\",\"srn\",\"sro\",\"srq\",\"srr\",\"srs\",\"srt\",\"sru\",\"srv\",\"srw\",\"srx\",\"sry\",\"srz\",\"ssa\",\"ssb\",\"ssc\",\"ssd\",\"sse\",\"ssf\",\"ssg\",\"ssh\",\"ssi\",\"ssj\",\"ssk\",\"ssl\",\"ssm\",\"ssn\",\"sso\",\"ssp\",\"ssq\",\"ssr\",\"sss\",\"sst\",\"ssu\",\"ssv\",\"ssx\",\"ssy\",\"ssz\",\"sta\",\"stb\",\"std\",\"ste\",\"stf\",\"stg\",\"sth\",\"sti\",\"stj\",\"stk\",\"stl\",\"stm\",\"stn\",\"sto\",\"stp\",\"stq\",\"str\",\"sts\",\"stt\",\"stu\",\"stv\",\"stw\",\"sty\",\"sua\",\"sub\",\"suc\",\"sue\",\"sug\",\"sui\",\"suj\",\"suk\",\"sul\",\"sum\",\"suq\",\"sur\",\"sus\",\"sut\",\"suv\",\"suw\",\"sux\",\"suy\",\"suz\",\"sva\",\"svb\",\"svc\",\"sve\",\"svk\",\"svm\",\"svr\",\"svs\",\"svx\",\"swb\",\"swc\",\"swf\",\"swg\",\"swh\",\"swi\",\"swj\",\"swk\",\"swl\",\"swm\",\"swn\",\"swo\",\"swp\",\"swq\",\"swr\",\"sws\",\"swt\",\"swu\",\"swv\",\"sww\",\"swx\",\"swy\",\"sxb\",\"sxc\",\"sxe\",\"sxg\",\"sxk\",\"sxl\",\"sxm\",\"sxn\",\"sxo\",\"sxr\",\"sxs\",\"sxu\",\"sxw\",\"sya\",\"syb\",\"syc\",\"syd\",\"syi\",\"syk\",\"syl\",\"sym\",\"syn\",\"syo\",\"syr\",\"sys\",\"syw\",\"syx\",\"syy\",\"sza\",\"szb\",\"szc\",\"szd\",\"sze\",\"szg\",\"szl\",\"szn\",\"szp\",\"szs\",\"szv\",\"szw\",\"taa\",\"tab\",\"tac\",\"tad\",\"tae\",\"taf\",\"tag\",\"tai\",\"taj\",\"tak\",\"tal\",\"tan\",\"tao\",\"tap\",\"taq\",\"tar\",\"tas\",\"tau\",\"tav\",\"taw\",\"tax\",\"tay\",\"taz\",\"tba\",\"tbb\",\"tbc\",\"tbd\",\"tbe\",\"tbf\",\"tbg\",\"tbh\",\"tbi\",\"tbj\",\"tbk\",\"tbl\",\"tbm\",\"tbn\",\"tbo\",\"tbp\",\"tbq\",\"tbr\",\"tbs\",\"tbt\",\"tbu\",\"tbv\",\"tbw\",\"tbx\",\"tby\",\"tbz\",\"tca\",\"tcb\",\"tcc\",\"tcd\",\"tce\",\"tcf\",\"tcg\",\"tch\",\"tci\",\"tck\",\"tcl\",\"tcm\",\"tcn\",\"tco\",\"tcp\",\"tcq\",\"tcs\",\"tct\",\"tcu\",\"tcw\",\"tcx\",\"tcy\",\"tcz\",\"tda\",\"tdb\",\"tdc\",\"tdd\",\"tde\",\"tdf\",\"tdg\",\"tdh\",\"tdi\",\"tdj\",\"tdk\",\"tdl\",\"tdm\",\"tdn\",\"tdo\",\"tdq\",\"tdr\",\"tds\",\"tdt\",\"tdu\",\"tdv\",\"tdx\",\"tdy\",\"tea\",\"teb\",\"tec\",\"ted\",\"tee\",\"tef\",\"teg\",\"teh\",\"tei\",\"tek\",\"tem\",\"ten\",\"teo\",\"tep\",\"teq\",\"ter\",\"tes\",\"tet\",\"teu\",\"tev\",\"tew\",\"tex\",\"tey\",\"tfi\",\"tfn\",\"tfo\",\"tfr\",\"tft\",\"tga\",\"tgb\",\"tgc\",\"tgd\",\"tge\",\"tgf\",\"tgg\",\"tgh\",\"tgi\",\"tgj\",\"tgn\",\"tgo\",\"tgp\",\"tgq\",\"tgr\",\"tgs\",\"tgt\",\"tgu\",\"tgv\",\"tgw\",\"tgx\",\"tgy\",\"tgz\",\"thc\",\"thd\",\"the\",\"thf\",\"thh\",\"thi\",\"thk\",\"thl\",\"thm\",\"thn\",\"thp\",\"thq\",\"thr\",\"ths\",\"tht\",\"thu\",\"thv\",\"thw\",\"thx\",\"thy\",\"thz\",\"tia\",\"tic\",\"tid\",\"tie\",\"tif\",\"tig\",\"tih\",\"tii\",\"tij\",\"tik\",\"til\",\"tim\",\"tin\",\"tio\",\"tip\",\"tiq\",\"tis\",\"tit\",\"tiu\",\"tiv\",\"tiw\",\"tix\",\"tiy\",\"tiz\",\"tja\",\"tjg\",\"tji\",\"tjl\",\"tjm\",\"tjn\",\"tjo\",\"tjs\",\"tju\",\"tjw\",\"tka\",\"tkb\",\"tkd\",\"tke\",\"tkf\",\"tkg\",\"tkk\",\"tkl\",\"tkm\",\"tkn\",\"tkp\",\"tkq\",\"tkr\",\"tks\",\"tkt\",\"tku\",\"tkv\",\"tkw\",\"tkx\",\"tkz\",\"tla\",\"tlb\",\"tlc\",\"tld\",\"tlf\",\"tlg\",\"tlh\",\"tli\",\"tlj\",\"tlk\",\"tll\",\"tlm\",\"tln\",\"tlo\",\"tlp\",\"tlq\",\"tlr\",\"tls\",\"tlt\",\"tlu\",\"tlv\",\"tlw\",\"tlx\",\"tly\",\"tma\",\"tmb\",\"tmc\",\"tmd\",\"tme\",\"tmf\",\"tmg\",\"tmh\",\"tmi\",\"tmj\",\"tmk\",\"tml\",\"tmm\",\"tmn\",\"tmo\",\"tmp\",\"tmq\",\"tmr\",\"tms\",\"tmt\",\"tmu\",\"tmv\",\"tmw\",\"tmy\",\"tmz\",\"tna\",\"tnb\",\"tnc\",\"tnd\",\"tne\",\"tnf\",\"tng\",\"tnh\",\"tni\",\"tnk\",\"tnl\",\"tnm\",\"tnn\",\"tno\",\"tnp\",\"tnq\",\"tnr\",\"tns\",\"tnt\",\"tnu\",\"tnv\",\"tnw\",\"tnx\",\"tny\",\"tnz\",\"tob\",\"toc\",\"tod\",\"toe\",\"tof\",\"tog\",\"toh\",\"toi\",\"toj\",\"tol\",\"tom\",\"too\",\"top\",\"toq\",\"tor\",\"tos\",\"tou\",\"tov\",\"tow\",\"tox\",\"toy\",\"toz\",\"tpa\",\"tpc\",\"tpe\",\"tpf\",\"tpg\",\"tpi\",\"tpj\",\"tpk\",\"tpl\",\"tpm\",\"tpn\",\"tpo\",\"tpp\",\"tpq\",\"tpr\",\"tpt\",\"tpu\",\"tpv\",\"tpw\",\"tpx\",\"tpy\",\"tpz\",\"tqb\",\"tql\",\"tqm\",\"tqn\",\"tqo\",\"tqp\",\"tqq\",\"tqr\",\"tqt\",\"tqu\",\"tqw\",\"tra\",\"trb\",\"trc\",\"trd\",\"tre\",\"trf\",\"trg\",\"trh\",\"tri\",\"trj\",\"trk\",\"trl\",\"trm\",\"trn\",\"tro\",\"trp\",\"trq\",\"trr\",\"trs\",\"trt\",\"tru\",\"trv\",\"trw\",\"trx\",\"try\",\"trz\",\"tsa\",\"tsb\",\"tsc\",\"tsd\",\"tse\",\"tsf\",\"tsg\",\"tsh\",\"tsi\",\"tsj\",\"tsk\",\"tsl\",\"tsm\",\"tsp\",\"tsq\",\"tsr\",\"tss\",\"tst\",\"tsu\",\"tsv\",\"tsw\",\"tsx\",\"tsy\",\"tsz\",\"tta\",\"ttb\",\"ttc\",\"ttd\",\"tte\",\"ttf\",\"ttg\",\"tth\",\"tti\",\"ttj\",\"ttk\",\"ttl\",\"ttm\",\"ttn\",\"tto\",\"ttp\",\"ttq\",\"ttr\",\"tts\",\"ttt\",\"ttu\",\"ttv\",\"ttw\",\"tty\",\"ttz\",\"tua\",\"tub\",\"tuc\",\"tud\",\"tue\",\"tuf\",\"tug\",\"tuh\",\"tui\",\"tuj\",\"tul\",\"tum\",\"tun\",\"tuo\",\"tup\",\"tuq\",\"tus\",\"tut\",\"tuu\",\"tuv\",\"tuw\",\"tux\",\"tuy\",\"tuz\",\"tva\",\"tvd\",\"tve\",\"tvk\",\"tvl\",\"tvm\",\"tvn\",\"tvo\",\"tvs\",\"tvt\",\"tvu\",\"tvw\",\"tvy\",\"twa\",\"twb\",\"twc\",\"twd\",\"twe\",\"twf\",\"twg\",\"twh\",\"twl\",\"twm\",\"twn\",\"two\",\"twp\",\"twq\",\"twr\",\"twt\",\"twu\",\"tww\",\"twx\",\"twy\",\"txa\",\"txb\",\"txc\",\"txe\",\"txg\",\"txh\",\"txi\",\"txj\",\"txm\",\"txn\",\"txo\",\"txq\",\"txr\",\"txs\",\"txt\",\"txu\",\"txx\",\"txy\",\"tya\",\"tye\",\"tyh\",\"tyi\",\"tyj\",\"tyl\",\"tyn\",\"typ\",\"tyr\",\"tys\",\"tyt\",\"tyu\",\"tyv\",\"tyx\",\"tyz\",\"tza\",\"tzh\",\"tzj\",\"tzl\",\"tzm\",\"tzn\",\"tzo\",\"tzx\",\"uam\",\"uan\",\"uar\",\"uba\",\"ubi\",\"ubl\",\"ubr\",\"ubu\",\"uby\",\"uda\",\"ude\",\"udg\",\"udi\",\"udj\",\"udl\",\"udm\",\"udu\",\"ues\",\"ufi\",\"uga\",\"ugb\",\"uge\",\"ugn\",\"ugo\",\"ugy\",\"uha\",\"uhn\",\"uis\",\"uiv\",\"uji\",\"uka\",\"ukg\",\"ukh\",\"ukk\",\"ukl\",\"ukp\",\"ukq\",\"uks\",\"uku\",\"ukw\",\"uky\",\"ula\",\"ulb\",\"ulc\",\"ule\",\"ulf\",\"uli\",\"ulk\",\"ull\",\"ulm\",\"uln\",\"ulu\",\"ulw\",\"uma\",\"umb\",\"umc\",\"umd\",\"umg\",\"umi\",\"umm\",\"umn\",\"umo\",\"ump\",\"umr\",\"ums\",\"umu\",\"una\",\"und\",\"une\",\"ung\",\"unk\",\"unm\",\"unn\",\"unp\",\"unr\",\"unu\",\"unx\",\"unz\",\"uok\",\"upi\",\"upv\",\"ura\",\"urb\",\"urc\",\"ure\",\"urf\",\"urg\",\"urh\",\"uri\",\"urj\",\"urk\",\"url\",\"urm\",\"urn\",\"uro\",\"urp\",\"urr\",\"urt\",\"uru\",\"urv\",\"urw\",\"urx\",\"ury\",\"urz\",\"usa\",\"ush\",\"usi\",\"usk\",\"usp\",\"usu\",\"uta\",\"ute\",\"utp\",\"utr\",\"utu\",\"uum\",\"uun\",\"uur\",\"uuu\",\"uve\",\"uvh\",\"uvl\",\"uwa\",\"uya\",\"uzn\",\"uzs\",\"vaa\",\"vae\",\"vaf\",\"vag\",\"vah\",\"vai\",\"vaj\",\"val\",\"vam\",\"van\",\"vao\",\"vap\",\"var\",\"vas\",\"vau\",\"vav\",\"vay\",\"vbb\",\"vbk\",\"vec\",\"ved\",\"vel\",\"vem\",\"veo\",\"vep\",\"ver\",\"vgr\",\"vgt\",\"vic\",\"vid\",\"vif\",\"vig\",\"vil\",\"vin\",\"vis\",\"vit\",\"viv\",\"vka\",\"vki\",\"vkj\",\"vkk\",\"vkl\",\"vkm\",\"vko\",\"vkp\",\"vkt\",\"vku\",\"vlp\",\"vls\",\"vma\",\"vmb\",\"vmc\",\"vmd\",\"vme\",\"vmf\",\"vmg\",\"vmh\",\"vmi\",\"vmj\",\"vmk\",\"vml\",\"vmm\",\"vmp\",\"vmq\",\"vmr\",\"vms\",\"vmu\",\"vmv\",\"vmw\",\"vmx\",\"vmy\",\"vmz\",\"vnk\",\"vnm\",\"vnp\",\"vor\",\"vot\",\"vra\",\"vro\",\"vrs\",\"vrt\",\"vsi\",\"vsl\",\"vsv\",\"vto\",\"vum\",\"vun\",\"vut\",\"vwa\",\"waa\",\"wab\",\"wac\",\"wad\",\"wae\",\"waf\",\"wag\",\"wah\",\"wai\",\"waj\",\"wak\",\"wal\",\"wam\",\"wan\",\"wao\",\"wap\",\"waq\",\"war\",\"was\",\"wat\",\"wau\",\"wav\",\"waw\",\"wax\",\"way\",\"waz\",\"wba\",\"wbb\",\"wbe\",\"wbf\",\"wbh\",\"wbi\",\"wbj\",\"wbk\",\"wbl\",\"wbm\",\"wbp\",\"wbq\",\"wbr\",\"wbs\",\"wbt\",\"wbv\",\"wbw\",\"wca\",\"wci\",\"wdd\",\"wdg\",\"wdj\",\"wdk\",\"wdu\",\"wdy\",\"wea\",\"wec\",\"wed\",\"weg\",\"weh\",\"wei\",\"wem\",\"wen\",\"weo\",\"wep\",\"wer\",\"wes\",\"wet\",\"weu\",\"wew\",\"wfg\",\"wga\",\"wgb\",\"wgg\",\"wgi\",\"wgo\",\"wgu\",\"wgw\",\"wgy\",\"wha\",\"whg\",\"whk\",\"whu\",\"wib\",\"wic\",\"wie\",\"wif\",\"wig\",\"wih\",\"wii\",\"wij\",\"wik\",\"wil\",\"wim\",\"win\",\"wir\",\"wit\",\"wiu\",\"wiv\",\"wiw\",\"wiy\",\"wja\",\"wji\",\"wka\",\"wkb\",\"wkd\",\"wkl\",\"wku\",\"wkw\",\"wky\",\"wla\",\"wlc\",\"wle\",\"wlg\",\"wli\",\"wlk\",\"wll\",\"wlm\",\"wlo\",\"wlr\",\"wls\",\"wlu\",\"wlv\",\"wlw\",\"wlx\",\"wly\",\"wma\",\"wmb\",\"wmc\",\"wmd\",\"wme\",\"wmh\",\"wmi\",\"wmm\",\"wmn\",\"wmo\",\"wms\",\"wmt\",\"wmw\",\"wmx\",\"wnb\",\"wnc\",\"wnd\",\"wne\",\"wng\",\"wni\",\"wnk\",\"wnm\",\"wnn\",\"wno\",\"wnp\",\"wnu\",\"wnw\",\"wny\",\"woa\",\"wob\",\"woc\",\"wod\",\"woe\",\"wof\",\"wog\",\"woi\",\"wok\",\"wom\",\"won\",\"woo\",\"wor\",\"wos\",\"wow\",\"woy\",\"wpc\",\"wra\",\"wrb\",\"wrd\",\"wrg\",\"wrh\",\"wri\",\"wrk\",\"wrl\",\"wrm\",\"wrn\",\"wro\",\"wrp\",\"wrr\",\"wrs\",\"wru\",\"wrv\",\"wrw\",\"wrx\",\"wry\",\"wrz\",\"wsa\",\"wsg\",\"wsi\",\"wsk\",\"wsr\",\"wss\",\"wsu\",\"wsv\",\"wtf\",\"wth\",\"wti\",\"wtk\",\"wtm\",\"wtw\",\"wua\",\"wub\",\"wud\",\"wuh\",\"wul\",\"wum\",\"wun\",\"wur\",\"wut\",\"wuu\",\"wuv\",\"wux\",\"wuy\",\"wwa\",\"wwb\",\"wwo\",\"wwr\",\"www\",\"wxa\",\"wxw\",\"wya\",\"wyb\",\"wyi\",\"wym\",\"wyr\",\"wyy\",\"xaa\",\"xab\",\"xac\",\"xad\",\"xae\",\"xag\",\"xai\",\"xaj\",\"xak\",\"xal\",\"xam\",\"xan\",\"xao\",\"xap\",\"xaq\",\"xar\",\"xas\",\"xat\",\"xau\",\"xav\",\"xaw\",\"xay\",\"xba\",\"xbb\",\"xbc\",\"xbd\",\"xbe\",\"xbg\",\"xbi\",\"xbj\",\"xbm\",\"xbn\",\"xbo\",\"xbp\",\"xbr\",\"xbw\",\"xbx\",\"xby\",\"xcb\",\"xcc\",\"xce\",\"xcg\",\"xch\",\"xcl\",\"xcm\",\"xcn\",\"xco\",\"xcr\",\"xct\",\"xcu\",\"xcv\",\"xcw\",\"xcy\",\"xda\",\"xdc\",\"xdk\",\"xdm\",\"xdo\",\"xdy\",\"xeb\",\"xed\",\"xeg\",\"xel\",\"xem\",\"xep\",\"xer\",\"xes\",\"xet\",\"xeu\",\"xfa\",\"xga\",\"xgb\",\"xgd\",\"xgf\",\"xgg\",\"xgi\",\"xgl\",\"xgm\",\"xgn\",\"xgr\",\"xgu\",\"xgw\",\"xha\",\"xhc\",\"xhd\",\"xhe\",\"xhr\",\"xht\",\"xhu\",\"xhv\",\"xia\",\"xib\",\"xii\",\"xil\",\"xin\",\"xip\",\"xir\",\"xis\",\"xiv\",\"xiy\",\"xjb\",\"xjt\",\"xka\",\"xkb\",\"xkc\",\"xkd\",\"xke\",\"xkf\",\"xkg\",\"xkh\",\"xki\",\"xkj\",\"xkk\",\"xkl\",\"xkn\",\"xko\",\"xkp\",\"xkq\",\"xkr\",\"xks\",\"xkt\",\"xku\",\"xkv\",\"xkw\",\"xkx\",\"xky\",\"xkz\",\"xla\",\"xlb\",\"xlc\",\"xld\",\"xle\",\"xlg\",\"xli\",\"xln\",\"xlo\",\"xlp\",\"xls\",\"xlu\",\"xly\",\"xma\",\"xmb\",\"xmc\",\"xmd\",\"xme\",\"xmf\",\"xmg\",\"xmh\",\"xmj\",\"xmk\",\"xml\",\"xmm\",\"xmn\",\"xmo\",\"xmp\",\"xmq\",\"xmr\",\"xms\",\"xmt\",\"xmu\",\"xmv\",\"xmw\",\"xmx\",\"xmy\",\"xmz\",\"xna\",\"xnb\",\"xnd\",\"xng\",\"xnh\",\"xni\",\"xnk\",\"xnn\",\"xno\",\"xnr\",\"xns\",\"xnt\",\"xnu\",\"xny\",\"xnz\",\"xoc\",\"xod\",\"xog\",\"xoi\",\"xok\",\"xom\",\"xon\",\"xoo\",\"xop\",\"xor\",\"xow\",\"xpa\",\"xpc\",\"xpe\",\"xpg\",\"xpi\",\"xpj\",\"xpk\",\"xpm\",\"xpn\",\"xpo\",\"xpp\",\"xpq\",\"xpr\",\"xps\",\"xpt\",\"xpu\",\"xpy\",\"xqa\",\"xqt\",\"xra\",\"xrb\",\"xrd\",\"xre\",\"xrg\",\"xri\",\"xrm\",\"xrn\",\"xrq\",\"xrr\",\"xrt\",\"xru\",\"xrw\",\"xsa\",\"xsb\",\"xsc\",\"xsd\",\"xse\",\"xsh\",\"xsi\",\"xsj\",\"xsl\",\"xsm\",\"xsn\",\"xso\",\"xsp\",\"xsq\",\"xsr\",\"xss\",\"xsu\",\"xsv\",\"xsy\",\"xta\",\"xtb\",\"xtc\",\"xtd\",\"xte\",\"xtg\",\"xth\",\"xti\",\"xtj\",\"xtl\",\"xtm\",\"xtn\",\"xto\",\"xtp\",\"xtq\",\"xtr\",\"xts\",\"xtt\",\"xtu\",\"xtv\",\"xtw\",\"xty\",\"xtz\",\"xua\",\"xub\",\"xud\",\"xug\",\"xuj\",\"xul\",\"xum\",\"xun\",\"xuo\",\"xup\",\"xur\",\"xut\",\"xuu\",\"xve\",\"xvi\",\"xvn\",\"xvo\",\"xvs\",\"xwa\",\"xwc\",\"xwd\",\"xwe\",\"xwg\",\"xwj\",\"xwk\",\"xwl\",\"xwo\",\"xwr\",\"xwt\",\"xww\",\"xxb\",\"xxk\",\"xxm\",\"xxr\",\"xxt\",\"xya\",\"xyb\",\"xyj\",\"xyk\",\"xyl\",\"xyt\",\"xyy\",\"xzh\",\"xzm\",\"xzp\",\"yaa\",\"yab\",\"yac\",\"yad\",\"yae\",\"yaf\",\"yag\",\"yah\",\"yai\",\"yaj\",\"yak\",\"yal\",\"yam\",\"yan\",\"yao\",\"yap\",\"yaq\",\"yar\",\"yas\",\"yat\",\"yau\",\"yav\",\"yaw\",\"yax\",\"yay\",\"yaz\",\"yba\",\"ybb\",\"ybd\",\"ybe\",\"ybh\",\"ybi\",\"ybj\",\"ybk\",\"ybl\",\"ybm\",\"ybn\",\"ybo\",\"ybx\",\"yby\",\"ych\",\"ycl\",\"ycn\",\"ycp\",\"yda\",\"ydd\",\"yde\",\"ydg\",\"ydk\",\"yds\",\"yea\",\"yec\",\"yee\",\"yei\",\"yej\",\"yel\",\"yen\",\"yer\",\"yes\",\"yet\",\"yeu\",\"yev\",\"yey\",\"yga\",\"ygi\",\"ygl\",\"ygm\",\"ygp\",\"ygr\",\"ygs\",\"ygu\",\"ygw\",\"yha\",\"yhd\",\"yhl\",\"yhs\",\"yia\",\"yif\",\"yig\",\"yih\",\"yii\",\"yij\",\"yik\",\"yil\",\"yim\",\"yin\",\"yip\",\"yiq\",\"yir\",\"yis\",\"yit\",\"yiu\",\"yiv\",\"yix\",\"yiy\",\"yiz\",\"yka\",\"ykg\",\"yki\",\"ykk\",\"ykl\",\"ykm\",\"ykn\",\"yko\",\"ykr\",\"ykt\",\"yku\",\"yky\",\"yla\",\"ylb\",\"yle\",\"ylg\",\"yli\",\"yll\",\"ylm\",\"yln\",\"ylo\",\"ylr\",\"ylu\",\"yly\",\"yma\",\"ymb\",\"ymc\",\"ymd\",\"yme\",\"ymg\",\"ymh\",\"ymi\",\"ymk\",\"yml\",\"ymm\",\"ymn\",\"ymo\",\"ymp\",\"ymq\",\"ymr\",\"yms\",\"ymt\",\"ymx\",\"ymz\",\"yna\",\"ynd\",\"yne\",\"yng\",\"ynh\",\"ynk\",\"ynl\",\"ynn\",\"yno\",\"ynq\",\"yns\",\"ynu\",\"yob\",\"yog\",\"yoi\",\"yok\",\"yol\",\"yom\",\"yon\",\"yos\",\"yot\",\"yox\",\"yoy\",\"ypa\",\"ypb\",\"ypg\",\"yph\",\"ypk\",\"ypm\",\"ypn\",\"ypo\",\"ypp\",\"ypz\",\"yra\",\"yrb\",\"yre\",\"yri\",\"yrk\",\"yrl\",\"yrm\",\"yrn\",\"yro\",\"yrs\",\"yrw\",\"yry\",\"ysc\",\"ysd\",\"ysg\",\"ysl\",\"ysn\",\"yso\",\"ysp\",\"ysr\",\"yss\",\"ysy\",\"yta\",\"ytl\",\"ytp\",\"ytw\",\"yty\",\"yua\",\"yub\",\"yuc\",\"yud\",\"yue\",\"yuf\",\"yug\",\"yui\",\"yuj\",\"yuk\",\"yul\",\"yum\",\"yun\",\"yup\",\"yuq\",\"yur\",\"yut\",\"yuu\",\"yuw\",\"yux\",\"yuy\",\"yuz\",\"yva\",\"yvt\",\"ywa\",\"ywg\",\"ywl\",\"ywn\",\"ywq\",\"ywr\",\"ywt\",\"ywu\",\"yww\",\"yxa\",\"yxg\",\"yxl\",\"yxm\",\"yxu\",\"yxy\",\"yyr\",\"yyu\",\"yyz\",\"yzg\",\"yzk\",\"zaa\",\"zab\",\"zac\",\"zad\",\"zae\",\"zaf\",\"zag\",\"zah\",\"zai\",\"zaj\",\"zak\",\"zal\",\"zam\",\"zao\",\"zap\",\"zaq\",\"zar\",\"zas\",\"zat\",\"zau\",\"zav\",\"zaw\",\"zax\",\"zay\",\"zaz\",\"zbc\",\"zbe\",\"zbl\",\"zbt\",\"zbw\",\"zca\",\"zch\",\"zdj\",\"zea\",\"zeg\",\"zeh\",\"zen\",\"zga\",\"zgb\",\"zgh\",\"zgm\",\"zgn\",\"zgr\",\"zhb\",\"zhd\",\"zhi\",\"zhn\",\"zhw\",\"zhx\",\"zia\",\"zib\",\"zik\",\"zil\",\"zim\",\"zin\",\"zir\",\"ziw\",\"ziz\",\"zka\",\"zkb\",\"zkd\",\"zkg\",\"zkh\",\"zkk\",\"zkn\",\"zko\",\"zkp\",\"zkr\",\"zkt\",\"zku\",\"zkv\",\"zkz\",\"zle\",\"zlj\",\"zlm\",\"zln\",\"zlq\",\"zls\",\"zlw\",\"zma\",\"zmb\",\"zmc\",\"zmd\",\"zme\",\"zmf\",\"zmg\",\"zmh\",\"zmi\",\"zmj\",\"zmk\",\"zml\",\"zmm\",\"zmn\",\"zmo\",\"zmp\",\"zmq\",\"zmr\",\"zms\",\"zmt\",\"zmu\",\"zmv\",\"zmw\",\"zmx\",\"zmy\",\"zmz\",\"zna\",\"znd\",\"zne\",\"zng\",\"znk\",\"zns\",\"zoc\",\"zoh\",\"zom\",\"zoo\",\"zoq\",\"zor\",\"zos\",\"zpa\",\"zpb\",\"zpc\",\"zpd\",\"zpe\",\"zpf\",\"zpg\",\"zph\",\"zpi\",\"zpj\",\"zpk\",\"zpl\",\"zpm\",\"zpn\",\"zpo\",\"zpp\",\"zpq\",\"zpr\",\"zps\",\"zpt\",\"zpu\",\"zpv\",\"zpw\",\"zpx\",\"zpy\",\"zpz\",\"zqe\",\"zra\",\"zrg\",\"zrn\",\"zro\",\"zrp\",\"zrs\",\"zsa\",\"zsk\",\"zsl\",\"zsm\",\"zsr\",\"zsu\",\"zte\",\"ztg\",\"ztl\",\"ztm\",\"ztn\",\"ztp\",\"ztq\",\"zts\",\"ztt\",\"ztu\",\"ztx\",\"zty\",\"zua\",\"zuh\",\"zum\",\"zun\",\"zuy\",\"zwa\",\"zxx\",\"zyb\",\"zyg\",\"zyj\",\"zyn\",\"zyp\",\"zza\",\"zzj\"]\n;return axe.utils.validLangs=function(){\"use strict\";return N},commons}()})}(\"object\"==typeof window?window:this);";
const pageFunctions=require('../../lib/page-functions');








function runA11yChecks(){

return window.axe.run(document,{
elementRef:true,
runOnly:{
type:'tag',
values:[
'wcag2a',
'wcag2aa']},


resultTypes:['violations','inapplicable'],
rules:{
'tabindex':{enabled:true},
'table-fake-caption':{enabled:true},
'td-has-header':{enabled:true},
'area-alt':{enabled:false},
'blink':{enabled:false},
'server-side-image-map':{enabled:false}}}).


then(axeResult=>{


axeResult.violations.forEach(v=>v.nodes.forEach(node=>{
node.path=getNodePath(node.element);

node.snippet=getOuterHTMLSnippet(node.element);

node.element=node.any=node.all=node.none=undefined;
}));


axeResult={violations:axeResult.violations,notApplicable:axeResult.inapplicable};
return axeResult;
});







function getNodePath(node){

function getNodeIndex(node){
let index=0;
let prevNode;
while(prevNode=node.previousSibling){
node=prevNode;

if(node.nodeType===Node.TEXT_NODE&&node.textContent&&
node.textContent.trim().length===0)continue;
index++;
}
return index;
}

const path=[];
while(node&&node.parentNode){
const index=getNodeIndex(node);
path.push([index,node.nodeName]);
node=node.parentNode;
}
path.reverse();
return path.join(',');
}
}

class Accessibility extends Gatherer{




afterPass(passContext){
const driver=passContext.driver;
const expression=`(function () {
      ${pageFunctions.getOuterHTMLSnippetString};
      ${axeLibSource};
      return (${runA11yChecks.toString()}());
    })()`;

return driver.evaluateAsync(expression,{useIsolation:true}).then(returnedValue=>{
if(!returnedValue){
throw new Error('No axe-core results returned');
}
if(!Array.isArray(returnedValue.violations)){
throw new Error('Unable to parse axe results'+returnedValue);
}
return returnedValue;
});
}}


module.exports=Accessibility;

},{"../../lib/page-functions":89,"./gatherer":21}],"../gather/gatherers/cache-contents":[function(require,module,exports){





'use strict';



const Gatherer=require('./gatherer');






function getCacheContents(){

return caches.keys().


then(cacheNames=>Promise.all(cacheNames.map(cacheName=>caches.open(cacheName)))).

then(caches=>{

const requests=[];


return Promise.all(caches.map(cache=>{
return cache.keys().
then(reqs=>{
requests.push(...reqs.map(r=>r.url));
});
})).then(_=>{
return requests;
});
});
}

class CacheContents extends Gatherer{





async afterPass(passContext){
const driver=passContext.driver;


const cacheUrls=await driver.evaluateAsync(`(${getCacheContents.toString()}())`);
if(!cacheUrls||!Array.isArray(cacheUrls)){
throw new Error('Unable to retrieve cache contents');
}

return cacheUrls;
}}


module.exports=CacheContents;

},{"./gatherer":21}],"../gather/gatherers/chrome-console-messages":[function(require,module,exports){










'use strict';

const Gatherer=require('./gatherer');

class ChromeConsoleMessages extends Gatherer{
constructor(){
super();

this._logEntries=[];
this._onConsoleEntryAdded=this.onConsoleEntry.bind(this);
}




onConsoleEntry(entry){
this._logEntries.push(entry);
}




async beforePass(passContext){
const driver=passContext.driver;
driver.on('Log.entryAdded',this._onConsoleEntryAdded);
await driver.sendCommand('Log.enable');
await driver.sendCommand('Log.startViolationsReport',{
config:[{name:'discouragedAPIUse',threshold:-1}]});

}





async afterPass(passContext){
await passContext.driver.sendCommand('Log.stopViolationsReport');
await passContext.driver.off('Log.entryAdded',this._onConsoleEntryAdded);
await passContext.driver.sendCommand('Log.disable');
return this._logEntries;
}}


module.exports=ChromeConsoleMessages;

},{"./gatherer":21}],"../gather/gatherers/css-usage":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');




class CSSUsage extends Gatherer{




async afterPass(passContext){
const driver=passContext.driver;


const stylesheets=[];

const onStylesheetAdded=sheet=>stylesheets.push(sheet);
driver.on('CSS.styleSheetAdded',onStylesheetAdded);

await driver.sendCommand('DOM.enable');
await driver.sendCommand('CSS.enable');
await driver.sendCommand('CSS.startRuleUsageTracking');
await driver.evaluateAsync('getComputedStyle(document.body)');
driver.off('CSS.styleSheetAdded',onStylesheetAdded);


const promises=stylesheets.map(sheet=>{
const styleSheetId=sheet.header.styleSheetId;
return driver.sendCommand('CSS.getStyleSheetText',{styleSheetId}).then(content=>{
return{
header:sheet.header,
content:content.text};

});
});
const styleSheetInfo=await Promise.all(promises);

const ruleUsageResponse=await driver.sendCommand('CSS.stopRuleUsageTracking');
await driver.sendCommand('CSS.disable');
await driver.sendCommand('DOM.disable');

const dedupedStylesheets=new Map(styleSheetInfo.map(sheet=>{
return[sheet.content,sheet];
}));
return{
rules:ruleUsageResponse.ruleUsage,
stylesheets:Array.from(dedupedStylesheets.values())};

}}


module.exports=CSSUsage;

},{"./gatherer":21}],"../gather/gatherers/dobetterweb/anchors-with-no-rel-noopener":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');
const pageFunctions=require('../../../lib/page-functions.js');

class AnchorsWithNoRelNoopener extends Gatherer{




afterPass(passContext){
const expression=`(function() {
      ${pageFunctions.getOuterHTMLSnippetString};
      ${pageFunctions.getElementsInDocumentString}; // define function on page
      const selector = 'a[target="_blank"]:not([rel~="noopener"]):not([rel~="noreferrer"])';
      const elements = getElementsInDocument(selector);
      return elements.map(node => ({
        href: node.href,
        rel: node.getAttribute('rel'),
        target: node.getAttribute('target'),
        outerHTML: getOuterHTMLSnippet(node),
      }));
    })()`;

return passContext.driver.evaluateAsync(expression);
}}


module.exports=AnchorsWithNoRelNoopener;

},{"../../../lib/page-functions.js":89,"../gatherer":21}],"../gather/gatherers/dobetterweb/appcache":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');

class AppCacheManifest extends Gatherer{






afterPass(passContext){
const driver=passContext.driver;

return driver.querySelector('html').
then(node=>node&&node.getAttribute('manifest'));
}}


module.exports=AppCacheManifest;

},{"../gatherer":21}],"../gather/gatherers/dobetterweb/doctype":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');






function getDoctype(){

if(!document.doctype){
return null;
}

const{name,publicId,systemId}=document.doctype;
return{name,publicId,systemId};
}

class Doctype extends Gatherer{




afterPass(passContext){
const driver=passContext.driver;
return driver.evaluateAsync(`(${getDoctype.toString()}())`);
}}


module.exports=Doctype;

},{"../gatherer":21}],"../gather/gatherers/dobetterweb/domstats":[function(require,module,exports){













'use strict';

const Gatherer=require('../gatherer');
const pageFunctions=require('../../../lib/page-functions');








function createSelectorsLabel(element){
let name=element.localName||'';
const idAttr=element.getAttribute&&element.getAttribute('id');
if(idAttr){
name+=`#${idAttr}`;
}


if(element.classList){
const className=element.classList.toString();
if(className){
name+=`.${className.trim().replace(/\s+/g,'.')}`;
}
}else if(ShadowRoot.prototype.isPrototypeOf(element)){
name+='#shadow-root';
}

return name;
}






function elementPathInDOM(element){
const visited=new Set();
const path=[createSelectorsLabel(element)];
let node=element;
while(node){
visited.add(node);



if(ShadowRoot.prototype.isPrototypeOf(node)){
const isShadowHost=node.host&&node.localName!=='a';
node=isShadowHost?node.host:node.parentElement;
}else{
const isShadowHost=node.parentNode&&node.parentNode.host&&
node.parentNode.localName!=='a';
node=isShadowHost?node.parentNode.host:node.parentElement;
}

if(visited.has(node)){
node=null;
}

if(node){
path.unshift(createSelectorsLabel(node));
}
}
return path;
}








function getDOMStats(element,deep=true){
let deepestNode=null;
let maxDepth=0;
let maxWidth=0;
let parentWithMostChildren=null;





const _calcDOMWidthAndHeight=function(element,depth=1){
if(depth>maxDepth){
deepestNode=element;
maxDepth=depth;
}
if(element.children.length>maxWidth){
parentWithMostChildren=element;
maxWidth=element.children.length;
}

let child=element.firstElementChild;
while(child){
_calcDOMWidthAndHeight(child,depth+1);

if(deep&&child.shadowRoot){
_calcDOMWidthAndHeight(child.shadowRoot,depth+1);
}
child=child.nextElementSibling;
}

return{maxDepth,maxWidth};
};

const result=_calcDOMWidthAndHeight(element);

return{
depth:{
max:result.maxDepth,
pathToElement:elementPathInDOM(deepestNode),

snippet:getOuterHTMLSnippet(deepestNode,['style'])},

width:{
max:result.maxWidth,
pathToElement:elementPathInDOM(parentWithMostChildren),
snippet:getOuterHTMLSnippet(parentWithMostChildren,['style'])}};


}

class DOMStats extends Gatherer{




afterPass(passContext){
const expression=`(function() {
      ${pageFunctions.getOuterHTMLSnippetString};
      ${createSelectorsLabel.toString()};
      ${elementPathInDOM.toString()};
      return (${getDOMStats.toString()}(document.documentElement));
    })()`;
return passContext.driver.sendCommand('DOM.enable').
then(()=>passContext.driver.evaluateAsync(expression,{useIsolation:true})).
then(results=>passContext.driver.getElementsInDocument().then(allNodes=>{
results.totalDOMNodes=allNodes.length;
return passContext.driver.sendCommand('DOM.disable').then(()=>results);
}));
}}


module.exports=DOMStats;

},{"../../../lib/page-functions":89,"../gatherer":21}],"../gather/gatherers/dobetterweb/js-libraries":[function(require,module,exports){













'use strict';

const Gatherer=require('../gatherer');

const libDetectorSource="var UNKNOWN_VERSION = null;\nvar d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests = {\n\n    'GWT': {\n        icon: 'gwt',\n        url: 'http://www.gwtproject.org/',\n        test: function(win) {\n            // pretty complicated, many possible tell tales\n            var doc = win.document,\n                hasHistFrame = doc.getElementById('__gwt_historyFrame'),\n                hasGwtUid = doc.gwt_uid,\n                hasBodyListener = doc.body.__listener,\n                hasBodyEventBits = doc.body.__eventBits,\n                hasModules = win.__gwt_activeModules,\n                hasJsonP = win.__gwt_jsonp__,\n                hasRootWinApp = win.__gwt_scriptsLoaded || win.__gwt_stylesLoaded || win.__gwt_activeModules;\n\n            // use the many possible indicators\n            if(hasHistFrame || hasGwtUid || hasBodyListener || hasBodyEventBits || hasModules || hasJsonP || hasRootWinApp) {\n\n                // carefully look at frames, but only if certain is GWT frame\n                var frames = doc.getElementsByTagName('iframe'),\n                    gwtVersion = UNKNOWN_VERSION;\n                for(var n=0; n<frames.length; n++) {\n                    // catch security access errors\n                    try {\n                        var hasNegativeTabIndex = frames[n].tabIndex < 0; // on for GWT\n                        if(hasNegativeTabIndex && frames[n].contentWindow && frames[n].contentWindow.$gwt_version) {\n                            gwtVersion = frames[n].contentWindow.$gwt_version;\n                            break;\n                        }\n                    }\n                    catch(e) {}\n                }\n\n                if(gwtVersion=='0.0.999') {\n                  gwtVersion = 'Google Internal';\n                }\n\n                return { version: gwtVersion };\n            }\n            return false;\n        }\n    },\n\n    'Ink': {\n        icon: 'ink',\n        url: 'http://ink.sapo.pt/',\n        test: function(win) {\n            if (win.Ink && win.Ink.createModule) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Vaadin': {\n        icon: 'vaadin',\n        url: 'https://vaadin.com/',\n        test: function(win) {\n            if (win.vaadin && win.vaadin.registerWidgetset) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Bootstrap': {\n        icon: 'bootstrap',\n        url: 'http://getbootstrap.com/',\n        npm: 'bootstrap',\n        // look for a function Boostrap has added to jQuery - regex for BS 2 & 3\n        test: function(win) {\n            var jQueryAvailable = win.$ && win.$.fn,\n                RE_PREFIX_V2 = '\\\\$this\\\\.data\\\\((?:\\'|\")',\n                RE_PREFIX_V3 = '\\\\$this\\\\.data\\\\((?:\\'|\")(?:bs\\\\.){1}',\n                bootstrapComponents = [\n                    'affix', 'alert', 'button', 'carousel', 'collapse', 'dropdown',\n                    'modal', 'popover', 'scrollspy', 'tab', 'tooltip'\n                ];\n\n            if(jQueryAvailable) {\n                var bootstrapVersion;\n\n                bootstrapComponents.some(function(component) {\n                    if(win.$.fn[component]) {\n                        // Bootstrap >= 3.2.0 detection\n                        if(win.$.fn[component].Constructor && win.$.fn[component].Constructor.VERSION) {\n                            bootstrapVersion = win.$.fn[component].Constructor.VERSION;\n                            return true;\n                        // Bootstrap >= 2.0.0 and <= 3.1.0 detection\n                        } else if(new RegExp(RE_PREFIX_V3 + component).test(win.$.fn[component].toString())) {\n                            bootstrapVersion = '>= 3.0.0 & <= 3.1.1';\n                            return true;\n                        // Bootstrap < 3.1.0 detection\n                        } else if(new RegExp(RE_PREFIX_V2 + component).test(win.$.fn[component].toString())) {\n                            bootstrapVersion = '>= 2.0.0 & <= 2.3.2';\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n\n                if (bootstrapVersion) {\n                    return { version: bootstrapVersion };\n                }\n            }\n\n            return false;\n        }\n    },\n\n    'Zurb': {\n        icon: 'zurb',\n        url: 'https://foundation.zurb.com/',\n        npm: 'foundation-sites',\n        test: function(win) {\n            if(win.Foundation && win.Foundation.Toggler) {\n                return { version: win.Foundation.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Polymer': {\n        icon: 'polymer',\n        url: 'https://www.polymer-project.org/',\n        npm: '@polymer/polymer',\n        test: function(win) {\n            if(win.Polymer && win.Polymer.dom) {\n                return { version: win.Polymer.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Highcharts': {\n        icon: 'highcharts',\n        url: 'http://www.highcharts.com',\n        npm: 'highcharts',\n        test: function(win) {\n            if(win.Highcharts && win.Highcharts.Point) {\n                return { version: win.Highcharts.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'InfoVis': {\n        icon: 'jit',\n        url: 'http://philogb.github.com/jit/',\n        test: function test(win) {\n            if(win.$jit && win.$jit.PieChart) {\n                return { version: win.$jit.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'FlotCharts': {\n        icon: 'flotcharts',\n        url: 'http://www.flotcharts.org/',\n        npm: 'flot',\n        test: function(win) {\n            if(win.$ && win.$.plot) {\n                return { version: win.$.plot.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'CreateJS': {\n        icon: 'createjs',\n        url: 'https://createjs.com/',\n        npm: 'createjs',\n        test: function(win) {\n            if(win.createjs && win.createjs.promote) {\n                return { version: UNKNOWN_VERSION}; // no version info available\n            }\n            return false;\n        }\n    },\n\n    'Google Maps': {\n        icon: 'gmaps',\n        url: 'https://developers.google.com/maps/',\n        test: function(win) {\n            if (win.google && win.google.maps) {\n                return { version: win.google.maps.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'jQuery': {\n        icon: 'jquery',\n        url: 'http://jquery.com',\n        npm: 'jquery',\n        test: function(win) {\n            var jq = win.jQuery || win.$;\n            if (jq && jq.fn) {\n                return { version: jq.fn.jquery.replace(/[^\\d+\\.+]/g, '') || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'jQuery UI': {\n        icon: 'jquery_ui',\n        url: 'http://jqueryui.com',\n        npm: 'jquery-ui',\n        test: function(win) {\n            var jq = win.jQuery || win.$ || win.$jq || win.$j;\n            if(jq && jq.fn && jq.fn.jquery && jq.ui) {\n                var plugins = 'accordion,datepicker,dialog,draggable,droppable,progressbar,resizable,selectable,slider,menu,grid,tabs'.split(','), concat = [];\n                for (var i=0; i < plugins.length; i++) { if(jq.ui[plugins[i]]) concat.push(plugins[i].substr(0,1).toUpperCase() + plugins[i].substr(1)); }\n                return { version: jq.ui.version || UNKNOWN_VERSION, details: concat.length ? 'Plugins used: '+concat.join(',') : '' };\n            }\n            return false;\n        }\n    },\n\n    'Dojo': {\n        icon: 'dojo',\n        url: 'http://dojotoolkit.org',\n        npm: 'dojo',\n        test: function(win) {\n            if(win.dojo && win.dojo.delegate) {\n                var version = win.dojo.version ? win.dojo.version.toString() : UNKNOWN_VERSION;\n                return { version: version, details: 'Details: '+(win.dijit ? 'Uses Dijit' : 'none') };\n            }\n            return false;\n        }\n    },\n\n    'Prototype': {\n        icon: 'prototype',\n        url: 'http://prototypejs.org',\n        test: function(win) {\n            if(win.Prototype && win.Prototype.BrowserFeatures) {\n                return { version: win.Prototype.Version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Scriptaculous': {\n        icon: 'scriptaculous',\n        url: 'http://script.aculo.us',\n        test: function(win) {\n            if(win.Scriptaculous && win.Scriptaculous.load) {\n                return { version: win.Scriptaculous.Version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'MooTools': {\n        icon: 'mootools',\n        url: 'https://mootools.net/',\n        test: function(win) {\n            if(win.MooTools && win.MooTools.build) {\n                return { version: win.MooTools.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Spry': {\n        icon: 'spry',\n        url: 'http://labs.adobe.com/technologies/spry',\n        test: function(win) {\n            if (win.Spry && win.Spry.Data) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'YUI 2': {\n        icon: 'yui',\n        url: 'http://developer.yahoo.com/yui/2/',\n        test: function(win) {\n            if (win.YAHOO && win.YAHOO.util) {\n                return { version: win.YAHOO.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'YUI 3': {\n        icon: 'yui3',\n        url: 'https://yuilibrary.com/',\n        npm: 'yui',\n        test: function(win) {\n            if (win.YUI && win.YUI.Env) {\n                return { version: win.YUI.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Qooxdoo': {\n        icon: 'qooxdoo',\n        url: 'http://www.qooxdoo.org/',\n        npm: 'qooxdoo',\n        test: function(win) {\n            if(win.qx && win.qx.Bootstrap) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Ext JS': {\n        icon: 'extjs',\n        url: 'https://www.sencha.com/products/extjs/',\n        test: function(win) {\n            if (win.Ext && win.Ext.versions) {\n                return { version: win.Ext.versions.core.version };\n            }\n            else if(win.Ext) {\n                return { version: win.Ext.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'base2': {\n        icon: 'base2',\n        url: 'http://code.google.com/p/base2',\n        test: function(win) {\n            if(win.base2 && win.base2.dom) {\n                return { version: win.base2.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Closure Library': {\n        icon: 'closure',\n        url: 'https://developers.google.com/closure/library/',\n        npm: 'google-closure-library',\n        test: function(win) {\n            if(win.goog && win.goog.provide) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Rapha&euml;l': {\n        icon: 'raphael',\n        url: 'http://dmitrybaranovskiy.github.io/raphael/',\n        test: function(win) {\n            if (win.Raphael && win.Raphael.circle) {\n                return { version: win.Raphael.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'React': {\n        icon: 'react',\n        url: 'https://reactjs.org/',\n        npm: 'react',\n        test: function(win) {\n            function isReactNode(node) {\n                return node._reactRootContainer!=null;\n            }\n            var reactRoot = document.getElementById('react-root');\n            var altHasReact = document.querySelector('*[data-reactroot]');\n            var bodyReactRoot = isReactNode(document.body) || isReactNode(document.body.firstElementChild || {});\n            var hasReactRoot = bodyReactRoot|| document.createTreeWalker(document.body, 3, isReactNode).nextNode() != null;\n            if (hasReactRoot || reactRoot && reactRoot.innerText.length > 0 || altHasReact || win.React && win.React.Component) {\n                return { version: win.React && win.React.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Preact': {\n        icon: 'preact',\n        url: 'https://preactjs.com/',\n        npm: 'preact',\n        test: function(win) {\n            var expando = typeof Symbol!='undefined' && Symbol.for && Symbol.for('preactattr');\n            function isPreactNode(node) {\n                if (node._component!=null || node.__preactattr_!=null || expando && node[expando]!=null) {\n                    return node;\n                }\n                return null;\n            }\n            var preactRoot = isPreactNode(document.body) || isPreactNode(document.body.firstElementChild || {});\n            if (!preactRoot) {\n                preactRoot = document.createTreeWalker(document.body, 3, isPreactNode).nextNode();\n            }\n            if (preactRoot || win.preact) {\n                var version = UNKNOWN_VERSION;\n                if (expando && preactRoot && preactRoot[expando]!=null) {\n                    version = '7';\n                }\n                return { version: version };\n            }\n            return false;\n        }\n    },\n\n    'Modernizr': {\n        icon: 'modernizr',\n        url: 'https://modernizr.com/',\n        npm: 'modernizr',\n        test: function(win) {\n            if (win.Modernizr && win.Modernizr.addTest) {\n                return { version: win.Modernizr._version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Processing.js': {\n        icon: 'processingjs',\n        url: 'http://processingjs.org',\n        npm: 'processing-js',\n        test: function(win) {\n            if(win.Processing && win.Processing.box) {\n                return { version: Processing.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Backbone': {\n        icon: 'backbone',\n        url: 'http://backbonejs.org/',\n        npm: 'backbone',\n        test: function(win) {\n            if (win.Backbone && win.Backbone.Model.extend) {\n                return {version: win.Backbone.VERSION || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Leaflet': {\n        icon: 'leaflet',\n        url: 'http://leafletjs.com',\n        npm: 'leaflet',\n        test: function(win) {\n            // Leaflet 3.1 uses L.Marker and L.VERSION; later versions use L.marker and L.version\n            if (win.L && win.L.GeoJSON && (win.L.marker || win.L.Marker)) {\n                return { version: win.L.version || win.L.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Mapbox': {\n        icon: 'mapbox',\n        url: 'https://www.mapbox.com/',\n        npm: 'mapbox-gl',\n        test: function(win) {\n            if (win.L && win.L.mapbox && win.L.mapbox.geocoder) {\n                return { version: win.L.mapbox.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Lo-Dash': {\n        icon: 'lodash',\n        url: 'https://lodash.com/',\n        npm: 'lodash',\n        test: function(win) {\n            var _ = typeof (_ = win._) == 'function' && _,\n                chain = typeof (chain = _ && _.chain) == 'function' && chain,\n                wrapper = (chain || _ || function() { return {}; })(1);\n\n            if (_ && wrapper.__wrapped__) {\n                return { version: _.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Underscore': {\n        icon: 'underscore',\n        url: 'http://underscorejs.org/',\n        npm: 'underscore',\n        test: function(win) {\n            if (win._ && typeof win._.tap === 'function' &&\n                !d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests['Lo-Dash'].test(win)) {\n                return {version: win._.VERSION || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Sammy': {\n        icon: 'sammy',\n        url: 'http://sammyjs.org',\n        test: function(win) {\n            if (win.Sammy && win.Sammy.Application.curry) {\n                return {version: win.Sammy.VERSION || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Rico': {\n        icon: 'rico',\n        url: 'http://openrico.sourceforge.net/examples/index.html',\n        test:  function(win) {\n            if (win.Rico && window.Rico.checkIfComplete) {\n                return {version: win.Rico.Version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'MochiKit': {\n        icon: 'mochikit',\n        url: 'https://mochi.github.io/mochikit/',\n        test: function(win) {\n            if (win.MochiKit && win.MochiKit.Base.module) {\n                return {version: MochiKit.VERSION || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'gRapha&euml;l': {\n        icon: 'graphael',\n        url: 'https://github.com/DmitryBaranovskiy/g.raphael',\n        test: function(win) {\n            if (win.Raphael && win.Raphael.fn.g) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Glow': {\n        icon: 'glow',\n        url: 'http://www.bbc.co.uk/glow/',\n        test: function(win) {\n            if (win.gloader && win.gloader.getRequests) {\n                return {version: UNKNOWN_VERSION};\n            }\n            else if (win.glow && win.glow.dom) {\n                return {version: win.glow.VERSION || UNKNOWN_VERSION};\n            }\n            else if (win.Glow) {\n                return {version: win.Glow.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Socket.IO': {\n        icon: 'socketio', // currently has no icon\n        url: 'https://socket.io/',\n        npm: 'socket.io',\n        test: function(win) {\n            // version 0.6.2 uses only io.Socket; more recent versions also have io.sockets\n            if (win.io && (win.io.sockets || win.io.Socket)) {\n                return {version: win.io.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Mustache': {\n        icon: 'mustache',\n        url: 'http://mustache.github.io/',\n        npm: 'mustache',\n        test: function(win) {\n            if (win.Mustache && win.Mustache.to_html) {\n                return {version: win.Mustache.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Fabric.js': {\n        icon: 'icon38', // currently has no icon\n        url: 'http://fabricjs.com/',\n        npm: 'fabric',\n        test: function(win) {\n            if (win.fabric && win.fabric.util) {\n                return {version: win.fabric.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'FuseJS': {\n        icon: 'fusejs',\n        url: 'http://fusejs.io/',\n        npm: 'fuse.js',\n        test: function(win) {\n            if (win.Fuse) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Tween.js': {\n        icon: 'icon38', // currently has no icon\n        url: 'https://github.com/tweenjs/tween.js',\n        npm: 'tween.js',\n        test: function(win) {\n            if (win.TWEEN && win.TWEEN.Easing) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'SproutCore': {\n       icon: 'sproutcore',\n       url: 'http://sproutcore.com/',\n       test: function(win) {\n           if (win.SC && win.SC.Application) {\n               return {version: UNKNOWN_VERSION};\n           }\n           return false;\n       }\n    },\n\n    'Zepto.js': {\n       icon: 'zepto',\n       url: 'http://zeptojs.com',\n       npm: 'zepto',\n       test: function(win) {\n           if (win.Zepto && win.Zepto.fn) {\n               return {version: UNKNOWN_VERSION};\n           }\n           return false;\n       }\n    },\n\n    'three.js': {\n       icon: 'icon38', // currently has no icon\n       url: 'https://threejs.org/',\n       npm: 'three',\n       test: function(win) {\n           if (win.THREE && win.THREE.REVISION) {\n               return {version: 'r' + win.THREE.REVISION};\n           }\n           else if (win.THREE) {\n               return {version: UNKNOWN_VERSION};\n           }\n           return false;\n       }\n    },\n\n    'PhiloGL': {\n       icon: 'philogl',\n       url: 'http://www.senchalabs.org/philogl/',\n       npm: 'philogl',\n       test: function(win) {\n           if (win.PhiloGL && win.PhiloGL.Camera) {\n               return {version: win.PhiloGL.version || UNKNOWN_VERSION};\n           }\n           return false;\n       }\n    },\n\n    'CamanJS': {\n        icon: 'camanjs',\n        url: 'http://camanjs.com/',\n        npm: 'caman',\n        test: function(win) {\n            if (win.Caman && win.Caman.version) {\n                return {version: win.Caman.version.release};\n            }\n            else if (win.Caman) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'yepnope': {\n        icon: 'yepnope',\n        url: 'http://yepnopejs.com/',\n        test: function(win) {\n            if (win.yepnope && win.yepnope.injectJs) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'LABjs': {\n        icon: 'icon38',\n        url: 'https://github.com/getify/LABjs',\n        test: function(win) {\n            if (win.$LAB && win.$LAB.setOptions) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'Head JS': {\n        icon: 'headjs',\n        url: 'http://headjs.com/',\n        npm: 'headjs',\n        test: function(win) {\n            if (win.head && win.head.js) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'ControlJS': {\n        icon: 'icon38',\n        url: 'http://stevesouders.com/controljs/',\n        test: function(win) {\n            if (win.CJS && win.CJS.start) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'RequireJS': {\n        icon: 'requirejs',\n        url: 'http://requirejs.org/',\n        npm: 'requirejs',\n        test: function(win) {\n            var req = win.require || win.requirejs;\n            if (req && (req.load || (req.s && req.s.contexts && req.s.contexts._ && (req.s.contexts._.loaded || req.s.contexts._.load)))) {\n                return { version: req.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'RightJS': {\n        icon: 'rightjs',\n        url: 'http://rightjs.org/',\n        test: function(win) {\n            if (win.RightJS && win.RightJS.isNode) {\n                return { version: win.RightJS.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'jQuery Tools': {\n       icon: 'jquerytools',\n       url: 'http://jquerytools.github.io/',\n       test: function(win) {\n            var jq = win.jQuery || win.$;\n            if(jq && jq.tools) {\n               return { version: jq.tools.version || UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'Pusher': {\n       icon: 'pusher',\n       url: 'https://pusher.com/docs/',\n       npm: 'pusher-js',\n       test: function(win) {\n            if(win.Pusher && win.Pusher.Channel) {\n               return { version: win.Pusher.VERSION || UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'Paper.js': {\n       icon: 'paperjs',\n       url: 'http://paperjs.org/',\n       npm: 'paper',\n       test: function(win) {\n            if(win.paper && win.paper.Point) {\n               return { version: win.paper.version || UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'Swiffy': {\n       icon: 'icon38',\n       url: 'https://developers.google.com/swiffy/',\n       test: function(win) {\n            if(win.swiffy && win.swiffy.Stage) {\n               return { version: UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'Move': {\n       icon: 'move',\n       url: 'https://github.com/rsms/move',\n       npm: 'move',\n       test: function(win) {\n            if(win.move && win.move.compile) {\n               return { version: win.move.version() || UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'AmplifyJS': {\n       icon: 'amplifyjs',\n       url: 'http://amplifyjs.com/',\n       npm: 'amplifyjs',\n       test: function(win) {\n            if(win.amplify && win.amplify.publish) {\n               return { version: UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'Popcorn.js': {\n       icon: 'popcornjs',\n       url: 'https://github.com/mozilla/popcorn-js/',\n       test: function(win) {\n            if (win.Popcorn && win.Popcorn.Events) {\n               return { version: win.Popcorn.version || UNKNOWN_VERSION };\n           }\n           return false;\n       }\n    },\n\n    'D3': {\n        icon: 'd3',\n        url: 'https://d3js.org/',\n        npm: 'd3',\n        test: function(win) {\n            if (win.d3 && win.d3.select) {\n                return { version: win.d3.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Handlebars': {\n        icon: 'handlebars',\n        url: 'http://handlebarsjs.com/',\n        npm: 'handlebars',\n        test: function(win) {\n            if(win.Handlebars && win.Handlebars.compile) {\n                return { version: win.Handlebars.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Knockout': {\n        icon: 'knockout',\n        url: 'http://knockoutjs.com/',\n        npm: 'knockout',\n        test: function(win) {\n            if (win.ko && win.ko.applyBindings) {\n                return { version: win.ko.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Spine': {\n        icon: 'icon38',\n        url: 'http://spine.github.io/',\n        test: function(win) {\n            if (win.Spine && win.Spine.Controller) {\n                return {version: win.Spine.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n\n    'jQuery Mobile': {\n        icon: 'jquery_mobile',\n        url: 'http://jquerymobile.com/',\n        npm: 'jquery-mobile',\n        test: function(win) {\n            var jq = win.jQuery || win.$ || win.$jq || win.$j;\n            if(jq && jq.fn && jq.fn.jquery && jq.mobile) {\n                return { version: jq.mobile.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'WebFont Loader': {\n        icon: 'icon38',\n        url: 'https://github.com/typekit/webfontloader',\n        npm: 'webfontloader',\n        test: function(win) {\n            if(win.WebFont && win.WebFont.load) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Angular': {\n        icon: 'angular',\n        url: 'https://angular.io/',\n        npm: '@angular/core',\n        test: function(win) {\n            var ng = win.document.querySelector('[ng-version]');\n            if (ng) {\n                return { version: ng.getAttribute('ng-version') || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'AngularJS': {\n        icon: 'angularjs',\n        url: 'https://angularjs.org/',\n        npm: 'angular',\n        test: function(win) {\n            var ng = win.angular;\n            if(ng && ng.version && ng.version.full) {\n                return { version: ng.version.full };\n            }\n            else if (ng) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Ember.js': {\n        icon: 'emberjs',\n        url: 'https://emberjs.com/',\n        npm: 'ember-source',\n        test: function(win) {\n            var ember = win.Ember || win.Em;\n            if (ember && ember.propertyDidChange) {\n                return { version: ember.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Hammer.js': {\n        icon: 'hammerjs',\n        url: 'http://eightmedia.github.io/hammer.js/',\n        npm: 'hammerjs',\n        test: function(win) {\n            if(win.Hammer && win.Hammer.Pinch) {\n                // Hammer.VERSION available in 1.0.10+\n                return { version: win.Hammer.VERSION || \"&lt; 1.0.10\" };\n            }\n            return false;\n        }\n    },\n\n    'Visibility.js': {\n        icon: 'icon38',\n        url: 'https://github.com/ai/visibilityjs',\n        npm: 'visibilityjs',\n        test: function(win) {\n            if(win.Visibility && win.Visibility.every) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'Velocity.js': {\n        icon: 'icon38',\n        url: 'http://velocityjs.org/',\n        npm: 'velocity-animate',\n        test: function(win) {\n            var jq = win.jQuery || win.$,\n                velocity = jq ? jq.Velocity : win.Velocity;\n\n            if(velocity && velocity.RegisterEffect && velocity.version) {\n                return {\n                    version:\n                        velocity.version.major + \".\" +\n                        velocity.version.minor + \".\" +\n                        velocity.version.patch\n                };\n            }\n            else if (velocity && velocity.RegisterEffect) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n\n    'IfVisible.js': {\n        icon: 'icon38',\n        url: 'http://serkanyersen.github.io/ifvisible.js/',\n        npm: 'ifvisible.js',\n        test: function(win) {\n            var iv = win.ifvisible;\n            if(iv && iv.__ceGUID === \"ifvisible.object.event.identifier\") {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Pixi.js': {\n        icon: 'pixi',\n        url: 'http://www.pixijs.com/',\n        npm: 'pixi.js',\n        test: function(win) {\n            var px = win.PIXI;\n            if(px && px.WebGLRenderer && px.VERSION) {\n                // version 4.4.3 returns simply \"4.4.3\"; version 1.5.2 returns \"v1.5.2\"\n                return { version: px.VERSION.replace('v', '') || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'DC.js': {\n        icon: 'dcjs',\n        url: 'http://dc-js.github.io/dc.js/',\n        npm: 'dc',\n        test: function(win) {\n            var dc = win.dc;\n            if(dc && dc.registerChart) {\n                return { version: dc.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'GreenSock JS': {\n        icon: 'greensock',\n        url: 'https://greensock.com/gsap',\n        npm: 'gsap',\n        test: function(win) {\n            if (win.TweenMax && win.TweenMax.pauseAll) {\n                return { version: win.TweenMax.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'FastClick': {\n        icon: 'fastclick',\n        url: 'https://github.com/ftlabs/fastclick',\n        npm: 'fastclick',\n        test: function(win) {\n            if(win.FastClick && win.FastClick.notNeeded) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Isotope': {\n        icon: 'isotope',\n        url: 'https://isotope.metafizzy.co/',\n        npm: 'isotope-layout',\n        test: function(win) {\n            if(win.Isotope || (win.$ != null && win.$.Isotope)) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Marionette': {\n        icon: 'marionette',\n        url: 'https://marionettejs.com/',\n        npm: 'backbone.marionette',\n        test: function(win) {\n            if(win.Marionette && win.Marionette.Application) {\n                return { version: win.Marionette.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Can': {\n        icon: 'canjs',\n        url: 'https://canjs.com/',\n        npm: 'can',\n        test: function (win) {\n            if (win.can && win.can.Construct) {\n                return { version: win.can.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Vue': {\n        icon: 'vue',\n        url: 'https://vuejs.org/',\n        npm: 'vue',\n        test: function(win) {\n            if (win.Vue && win.Vue.nextTick) {\n                return { version: win.Vue.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Two': {\n        icon: 'two',\n        url: 'https://two.js.org/',\n        npm: 'two.js',\n        test: function(win) {\n            if (win.Two && win.Two.Utils) {\n                return { version: win.Two.Version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Brewser': {\n        icon: 'brewser',\n        url: 'https://robertpataki.github.io/brewser/',\n        npm: 'brewser',\n        test: function(win) {\n            if(win.BREWSER && win.BREWSER.ua) {\n                return { version: BREWSER.VERSION || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Material Design Lite': {\n        icon: 'mdl',\n        url: 'https://getmdl.io/',\n        npm: 'material-design-lite',\n        test: function(win) {\n            if(win.componentHandler && win.componentHandler.upgradeElement) {\n                return { version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n    'Kendo UI': {\n        icon: 'kendoui',\n        url: 'https://github.com/telerik/kendo-ui-core',\n        npm: 'kendo-ui-core',\n        test: function(win) {\n            if (win.kendo && win.kendo.View && win.kendo.View.extend) {\n                return {version: win.kendo.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n    'Matter.js': {\n        icon: 'matter-js',\n        url: 'http://brm.io/matter-js/',\n        npm: 'matter-js',\n        test: function(win) {\n            if (win.Matter && win.Matter.Engine) {\n                return {version: UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n    'Riot': {\n        icon: 'riot',\n        url: 'http://riotjs.com/',\n        npm: 'riot',\n        test: function(win) {\n            if (win.riot && win.riot.mixin) {\n                return { version: win.riot.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Sea.js': {\n        icon: 'icon38',\n        url: 'https://seajs.github.io/seajs/docs/',\n        npm: 'seajs',\n        test: function(win) {\n            if(win.seajs && win.seajs.use) {\n                return { version: win.seajs.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Moment.js': {\n        icon: 'momentjs',\n        url: 'http://momentjs.com/',\n        npm: 'moment',\n        test: function(win) {\n            if(win.moment && (win.moment.isMoment || win.moment.lang)) {\n                // version 1.0.0 has neither \"isMoment\" nor \"version\"\n                return { version: win.moment.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Moment Timezone': {\n        icon: 'momentjs',\n        url: 'http://momentjs.com/timezone/',\n        npm: 'moment-timezone',\n        test: function(win) {\n            if (win.moment && win.moment.tz) {\n                return { version: win.moment.tz.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'ScrollMagic': {\n        icon: 'scrollmagic',\n        url: 'http://scrollmagic.io/',\n        npm: 'scrollmagic',\n        test: function(win) {\n            if (win.ScrollMagic && win.ScrollMagic.Controller) {\n                return {version: ScrollMagic.version || UNKNOWN_VERSION};\n            }\n            return false;\n        }\n    },\n    'SWFObject': {\n        icon: 'icon38', // currently has no icon\n        url: 'https://github.com/swfobject/swfobject',\n        test: function(win) {\n            if (win.swfobject && win.swfobject.embedSWF) {\n                // 2.x - exact version only for 2.3\n                return { version: win.swfobject.version || UNKNOWN_VERSION };\n            } else if(win.deconcept && win.deconcept.SWFObject) {\n                // 1.x\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'FlexSlider': {\n        icon: 'icon38', // currently has no icon\n        url: 'https://woocommerce.com/flexslider/',\n        npm: 'flexslider',\n        test: function(win) {\n            var jq = win.jQuery || win.$ || win.$jq || win.$j;\n            if (jq && jq.fn && jq.fn.jquery && jq.flexslider){\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'SPF': {\n        icon: 'icon38', // currently has no icon\n        url: 'https://youtube.github.io/spfjs/',\n        npm: 'spf',\n        test: function(win) {\n            if (win.spf && win.spf.init) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Numeral.js': {\n        icon: 'icon38', // currently has no icon\n        url: 'http://numeraljs.com/',\n        npm: 'numeraljs',\n        test: function(win) {\n            if (win.numeral && win.isNumeral) {\n                return { version: win.numeral.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'boomerang.js': {\n        icon: 'icon38', // currently has no icon\n        url: 'https://soasta.github.io/boomerang/',\n        npm: 'boomerangjs',\n        test: function(win) {\n            if (win.BOOMR && win.BOOMR.utils && win.BOOMR.init) {\n                return { version: win.BOOMR.version || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Framer': {\n        icon: 'framer',\n        url: 'https://framer.com/',\n        npm: 'framerjs',\n        test: function(win) {\n            if (win.Framer && win.Framer.Layer) {\n                return { version: win.Framer.Version.build || UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'Marko': {\n        icon: 'marko',\n        url: 'https://markojs.com/',\n        npm: 'marko',\n        test: function (win) {\n            var selector = '[data-marko-key], [data-marko]';\n            var markoElement = document.querySelector(selector);\n            if (markoElement) {\n                return { version: UNKNOWN_VERSION };\n            }\n            return false;\n        }\n    },\n    'AMP': {\n        icon: 'amp',\n        url: 'https://ampproject.org/',\n        npm: null,\n        test: function (win) {\n            var version = win.document.documentElement.getAttribute(\"amp-version\");\n            return version ? { version: version } : false;\n        }\n    },\n    'Workbox': {\n      icon: 'workbox',\n      url: 'https://developers.google.com/web/tools/workbox/',\n      npm: 'workbox-sw',\n      test: async function (win) {\n        var nav = win.navigator;\n        // Service Workers not supported\n        if (!('serviceWorker' in nav)) {\n          return false;\n        }\n        return nav.serviceWorker.getRegistration()\n        .then(function(registration) {\n          var scriptURL = nav.serviceWorker.controller.scriptURL;\n          return fetch(scriptURL, { credentials: 'include',\n            headers: { 'service-worker': 'script' }\n          })\n          .then(function(response) {\n            return response.text();\n          })\n          .then(function(scriptContent) {\n            var workboxRegExp = /new Workbox|new workbox|workbox\\.precaching\\.|workbox\\.strategies/gm;\n            if (workboxRegExp.test(scriptContent)) {\n              // Adapted from\n              // https://github.com/semver/semver/issues/232#issue-48635632\n              var semVerRegExp = /workbox.*?\\b((0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?)\\b/gim;\n              var matches = semVerRegExp.exec(scriptContent);\n              var version = UNKNOWN_VERSION;\n              if (Array.isArray(matches) && matches.length > 1 && matches[1]) {\n                version = matches[1];\n              }\n              return { version: version };\n            }\n            return false;\n          });\n        }).catch(function(exception) {\n          return false;\n        });\n      }\n    }\n};\n";





function detectLibraries(){

const libraries=[];




Object.entries(d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests).forEach(([name,lib])=>{
try{
const result=lib.test(window);
if(result){
libraries.push({
name:name,
version:result.version,
npmPkgName:lib.npm});

}
}catch(e){}
});

return libraries;
}

class JSLibraries extends Gatherer{




afterPass(passContext){
const expression=`(function () {
      ${libDetectorSource};
      return (${detectLibraries.toString()}());
    })()`;

return passContext.driver.evaluateAsync(expression);
}}


module.exports=JSLibraries;

},{"../gatherer":21}],"../gather/gatherers/dobetterweb/optimized-images":[function(require,module,exports){










'use strict';

const Gatherer=require('../gatherer');
const URL=require('../../../lib/url-shim');
const NetworkRequest=require('../../../lib/network-request');
const Sentry=require('../../../lib/sentry');
const Driver=require('../../driver.js');

const JPEG_QUALITY=0.92;
const WEBP_QUALITY=0.85;

const MINIMUM_IMAGE_SIZE=4096;

const IMAGE_REGEX=/^image\/((x|ms|x-ms)-)?(png|bmp|jpeg)$/;











function getOptimizedNumBytes(url){
return new Promise(function(resolve,reject){
const img=new Image();
const canvas=document.createElement('canvas');
const context=canvas.getContext('2d');
if(!context){
return reject(new Error('unable to create canvas context'));
}






function getTypeStats(type,quality){
const dataURI=canvas.toDataURL(type,quality);
const base64=dataURI.slice(dataURI.indexOf(',')+1);
return{base64:base64.length,binary:atob(base64).length};
}

img.addEventListener('error',reject);
img.addEventListener('load',()=>{
try{
canvas.height=img.height;
canvas.width=img.width;
context.drawImage(img,0,0);

const jpeg=getTypeStats('image/jpeg',0.92);
const webp=getTypeStats('image/webp',0.85);

resolve({jpeg,webp});
}catch(err){
reject(err);
}
},false);

img.src=url;
});
}

class OptimizedImages extends Gatherer{





static filterImageRequests(pageUrl,networkRecords){

const seenUrls=new Set();
return networkRecords.reduce((prev,record)=>{
if(seenUrls.has(record.url)||!record.finished){
return prev;
}

seenUrls.add(record.url);
const isOptimizableImage=record.resourceType===NetworkRequest.TYPES.Image&&
IMAGE_REGEX.test(record.mimeType);
const isSameOrigin=URL.originsMatch(pageUrl,record.url);
const isBase64DataUri=/^data:.{2,40}base64\s*,/.test(record.url);

const actualResourceSize=Math.min(record.resourceSize||0,record.transferSize||0);
if(isOptimizableImage&&actualResourceSize>MINIMUM_IMAGE_SIZE){
prev.push({
isSameOrigin,
isBase64DataUri,
requestId:record.requestId,
url:record.url,
mimeType:record.mimeType,
resourceSize:actualResourceSize});

}

return prev;
},[]);
}







_getEncodedResponse(driver,requestId,encoding){
requestId=NetworkRequest.getRequestIdForBackend(requestId);

const quality=encoding==='jpeg'?JPEG_QUALITY:WEBP_QUALITY;
const params={requestId,encoding,quality,sizeOnly:true};
return driver.sendCommand('Audits.getEncodedResponse',params);
}






calculateImageStats(driver,networkRecord){


return Promise.resolve(networkRecord.requestId).then(requestId=>{
if(this._getEncodedResponseUnsupported)return;
return this._getEncodedResponse(driver,requestId,'jpeg').then(jpegData=>{
return this._getEncodedResponse(driver,requestId,'webp').then(webpData=>{
return{
fromProtocol:true,
originalSize:networkRecord.resourceSize,
jpegSize:jpegData.encodedSize,
webpSize:webpData.encodedSize};

});
}).catch(err=>{
if(/wasn't found/.test(err.message)){

this._getEncodedResponseUnsupported=true;
}else{
throw err;
}
});
}).then(result=>{
if(result)return result;



if(!networkRecord.isSameOrigin&&!networkRecord.isBase64DataUri)return null;

const script=`(${getOptimizedNumBytes.toString()})(${JSON.stringify(networkRecord.url)})`;
return driver.evaluateAsync(script).then(stats=>{
if(!stats)return null;
const isBase64DataUri=networkRecord.isBase64DataUri;
const base64Length=networkRecord.url.length-networkRecord.url.indexOf(',')-1;
return{
fromProtocol:false,
originalSize:isBase64DataUri?base64Length:networkRecord.resourceSize,
jpegSize:isBase64DataUri?stats.jpeg.base64:stats.jpeg.binary,
webpSize:isBase64DataUri?stats.webp.base64:stats.webp.binary};

});
});
}






async computeOptimizedImages(driver,imageRecords){

const results=[];

for(const record of imageRecords){
try{
const stats=await this.calculateImageStats(driver,record);
if(stats===null){
continue;
}


const image={failed:false,...stats,...record};
results.push(image);
}catch(err){


Sentry.captureException(err,{
tags:{gatherer:'OptimizedImages'},
extra:{imageUrl:URL.elideDataURI(record.url)},
level:'warning'});



const imageError={failed:true,errMsg:err.message,...record};
results.push(imageError);
}
}

return results;
}






afterPass(passContext,loadData){
const networkRecords=loadData.networkRecords;
const imageRecords=OptimizedImages.filterImageRequests(passContext.url,networkRecords);

return Promise.resolve().
then(_=>this.computeOptimizedImages(passContext.driver,imageRecords)).
then(results=>{
const successfulResults=results.filter(result=>!result.failed);
if(results.length&&!successfulResults.length){
throw new Error('All image optimizations failed');
}

return results;
});
}}


module.exports=OptimizedImages;

},{"../../../lib/network-request":88,"../../../lib/sentry":90,"../../../lib/url-shim":"url","../../driver.js":19,"../gatherer":21}],"../gather/gatherers/dobetterweb/password-inputs-with-prevented-paste":[function(require,module,exports){





'use strict';



const Gatherer=require('../gatherer');
const pageFunctions=require('../../../lib/page-functions');






function findPasswordInputsWithPreventedPaste(){
return Array.from(document.querySelectorAll('input[type="password"]')).
filter(passwordInput=>
!passwordInput.dispatchEvent(
new ClipboardEvent('paste',{cancelable:true}))).


map(passwordInput=>({

snippet:getOuterHTMLSnippet(passwordInput)}));

}

class PasswordInputsWithPreventedPaste extends Gatherer{




afterPass(passContext){
return passContext.driver.evaluateAsync(`(() => {
      ${pageFunctions.getOuterHTMLSnippetString};
      return (${findPasswordInputsWithPreventedPaste.toString()}());
    })()`);
}}



module.exports=PasswordInputsWithPreventedPaste;

},{"../../../lib/page-functions":89,"../gatherer":21}],"../gather/gatherers/dobetterweb/response-compression":[function(require,module,exports){
(function(Buffer){










'use strict';

const Gatherer=require('../gatherer');
const URL=require('../../../lib/url-shim');
const Sentry=require('../../../lib/sentry');
const NetworkRequest=require('../../../lib/network-request');
const gzip=require('zlib').gzip;

const CHROME_EXTENSION_PROTOCOL='chrome-extension:';
const compressionHeaders=['content-encoding','x-original-content-encoding'];
const compressionTypes=['gzip','br','deflate'];
const binaryMimeTypes=['image','audio','video'];

const textResourceTypes=[
NetworkRequest.TYPES.Document,
NetworkRequest.TYPES.Script,
NetworkRequest.TYPES.Stylesheet,
NetworkRequest.TYPES.XHR,
NetworkRequest.TYPES.Fetch,
NetworkRequest.TYPES.EventSource];


class ResponseCompression extends Gatherer{




static filterUnoptimizedResponses(networkRecords){

const unoptimizedResponses=[];

networkRecords.forEach(record=>{
const mimeType=record.mimeType;
const resourceType=record.resourceType||NetworkRequest.TYPES.Other;
const resourceSize=record.resourceSize;

const isBinaryResource=mimeType&&binaryMimeTypes.some(type=>mimeType.startsWith(type));
const isTextResource=!isBinaryResource&&textResourceTypes.includes(resourceType);
const isChromeExtensionResource=record.url.startsWith(CHROME_EXTENSION_PROTOCOL);

if(!isTextResource||!resourceSize||!record.finished||
isChromeExtensionResource||!record.transferSize||record.statusCode===304){
return;
}

const isContentEncoded=(record.responseHeaders||[]).find(header=>
compressionHeaders.includes(header.name.toLowerCase())&&
compressionTypes.includes(header.value));


if(!isContentEncoded){
unoptimizedResponses.push({
requestId:record.requestId,
url:record.url,
mimeType:mimeType,
transferSize:record.transferSize,
resourceSize:resourceSize,
gzipSize:0});

}
});

return unoptimizedResponses;
}






afterPass(passContext,loadData){
const networkRecords=loadData.networkRecords;
const textRecords=ResponseCompression.filterUnoptimizedResponses(networkRecords);

const driver=passContext.driver;
return Promise.all(textRecords.map(record=>{
return driver.getRequestContent(record.requestId).then(content=>{

if(!content){
return record;
}

return new Promise((resolve,reject)=>{
return gzip(content,(err,res)=>{
if(err){
return reject(err);
}


record.gzipSize=Buffer.byteLength(res,'utf8');

resolve(record);
});
});
}).catch(err=>{
Sentry.captureException(err,{
tags:{gatherer:'ResponseCompression'},
extra:{url:URL.elideDataURI(record.url)},
level:'warning'});


record.gzipSize=undefined;
return record;
});
}));
}}


module.exports=ResponseCompression;

}).call(this,require("buffer").Buffer);
},{"../../../lib/network-request":88,"../../../lib/sentry":90,"../../../lib/url-shim":"url","../gatherer":21,"buffer":109,"zlib":106}],"../gather/gatherers/dobetterweb/tags-blocking-first-paint":[function(require,module,exports){



















'use strict';

const Gatherer=require('../gatherer');
const Driver=require('../../driver.js');




function installMediaListener(){
window.___linkMediaChanges=[];
Object.defineProperty(HTMLLinkElement.prototype,'media',{
set:function(val){
window.___linkMediaChanges.push({
href:this.href,
media:val,
msSinceHTMLEnd:Date.now()-window.performance.timing.responseEnd,
matches:window.matchMedia(val).matches});


return this.setAttribute('media',val);
}});

}





function collectTagsThatBlockFirstPaint(){
return new Promise((resolve,reject)=>{
try{
const tagList=[...document.querySelectorAll('link, head script[src]')].
filter(tag=>{
if(tag.tagName==='SCRIPT'){
const scriptTag=tag;
return(
!scriptTag.hasAttribute('async')&&
!scriptTag.hasAttribute('defer')&&
!/^data:/.test(scriptTag.src)&&
scriptTag.getAttribute('type')!=='module');

}else if(tag.tagName==='LINK'){



const linkTag=tag;
const blockingStylesheet=linkTag.rel==='stylesheet'&&
window.matchMedia(linkTag.media).matches&&!linkTag.disabled;
const blockingImport=linkTag.rel==='import'&&!linkTag.hasAttribute('async');
return blockingStylesheet||blockingImport;
}

return false;
}).
map(tag=>{
return{
tagName:tag.tagName,
url:tag.tagName==='LINK'?tag.href:tag.src,
src:tag.src,
href:tag.href,
rel:tag.rel,
media:tag.media,
disabled:tag.disabled,
mediaChanges:window.___linkMediaChanges.filter(item=>item.href===tag.href)};

});
resolve(tagList);
}catch(e){
const friendly='Unable to gather Scripts/Stylesheets/HTML Imports on the page';
reject(new Error(`${friendly}: ${e.message}`));
}
});
}

class TagsBlockingFirstPaint extends Gatherer{



static _filteredAndIndexedByUrl(networkRecords){

const result={};

return networkRecords.reduce((prev,record)=>{
if(!record.finished){
return prev;
}

const isParserGenerated=record.initiator.type==='parser';


const isParserScriptOrStyle=/(css|script)/.test(record.mimeType)&&isParserGenerated;
const isFailedRequest=record._failed;
const isHtml=record.mimeType&&record.mimeType.includes('html');



if(isHtml||isParserScriptOrStyle||isFailedRequest&&isParserGenerated){
prev[record.url]={
isLinkPreload:!!record.isLinkPreload,
transferSize:record.transferSize,
startTime:record.startTime,
endTime:record.endTime};

}

return prev;
},result);
}





static findBlockingTags(driver,networkRecords){
const scriptSrc=`(${collectTagsThatBlockFirstPaint.toString()}())`;
const firstRequestEndTime=networkRecords.reduce(
(min,record)=>Math.min(min,record.endTime),
Infinity);

return driver.evaluateAsync(scriptSrc).then(tags=>{
const requests=TagsBlockingFirstPaint._filteredAndIndexedByUrl(networkRecords);

return tags.reduce((prev,tag)=>{
const request=requests[tag.url];
if(request&&!request.isLinkPreload){



const timesResourceBecameNonBlocking=(tag.mediaChanges||[]).
filter(change=>!change.matches).
map(change=>change.msSinceHTMLEnd);
const earliestNonBlockingTime=Math.min(...timesResourceBecameNonBlocking);
const lastTimeResourceWasBlocking=Math.max(
request.startTime,
firstRequestEndTime+earliestNonBlockingTime/1000);


prev.push({
tag,
transferSize:request.transferSize||0,
startTime:request.startTime,
endTime:Math.min(request.endTime,lastTimeResourceWasBlocking)});



requests[tag.url]=null;
}

return prev;
},[]);
});
}




beforePass(passContext){
return passContext.driver.evaluateScriptOnNewDocument(`(${installMediaListener.toString()})()`);
}






afterPass(passContext,loadData){
return TagsBlockingFirstPaint.findBlockingTags(passContext.driver,loadData.networkRecords);
}}


module.exports=TagsBlockingFirstPaint;

},{"../../driver.js":19,"../gatherer":21}],"../gather/gatherers/dobetterweb/websql":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');
const Driver=require('../../driver.js');

const MAX_WAIT_TIMEOUT=500;

class WebSQL extends Gatherer{




listenForDatabaseEvents(driver){

let timeout;

return new Promise((resolve,reject)=>{
driver.once('Database.addDatabase',db=>{
clearTimeout(timeout);
driver.sendCommand('Database.disable').then(_=>resolve(db),reject);
});

driver.sendCommand('Database.enable').catch(reject);




timeout=setTimeout(function(){
resolve(null);
},MAX_WAIT_TIMEOUT);
});
}






afterPass(passContext){
return this.listenForDatabaseEvents(passContext.driver).
then(result=>{
return result&&result.database;
});
}}


module.exports=WebSQL;

},{"../../driver.js":19,"../gatherer":21}],"../gather/gatherers/fonts":[function(require,module,exports){







'use strict';

const Gatherer=require('./gatherer');
const Sentry=require('../../lib/sentry');







const fontFaceDescriptors=[
'display',
'family',
'featureSettings',
'stretch',
'style',
'unicodeRange',
'variant',
'weight'];









function getAllLoadedFonts(descriptors){

const getFont=fontFace=>{

const fontRule={
src:[]};

descriptors.forEach(descriptor=>{
fontRule[descriptor]=fontFace[descriptor];
});

return fontRule;
};

return document.fonts.ready.then(()=>{
return Array.from(document.fonts).filter(fontFace=>fontFace.status==='loaded').
map(getFont);
});
}






function getFontFaceFromStylesheets(){





function getSheetsFontFaces(stylesheet){
const fontUrlRegex='url\\((?:")([^"]+)(?:"|\')\\)';
const fontFaceRules=[];

if(stylesheet.cssRules){
for(const rule of Array.from(stylesheet.cssRules)){
if(rule instanceof CSSFontFaceRule){
const fontsObject={


display:rule.style.fontDisplay||'auto',
family:rule.style.fontFamily?rule.style.fontFamily.replace(/"|'/g,''):'',
stretch:rule.style.fontStretch||'normal',
style:rule.style.fontStyle||'normal',
weight:rule.style.fontWeight||'normal',
variant:rule.style.fontVariant||'normal',

unicodeRange:rule.style.unicodeRange||'U+0-10FFFF',

featureSettings:rule.style.featureSettings||'normal',

src:[]};




const src=rule.style.src;
if(src){
const matches=src.match(new RegExp(fontUrlRegex,'g'));
if(matches){
matches.forEach(match=>{
const res=new RegExp(fontUrlRegex).exec(match);
if(res){
fontsObject.src.push(new URL(res[1],location.href).href);
}
});
}
}

fontFaceRules.push(fontsObject);
}
}
}

return fontFaceRules;
}







function loadStylesheetWithCORS(oldNode){
const newNode=oldNode.cloneNode(true);

return new Promise(resolve=>{
newNode.addEventListener('load',function onload(){
newNode.removeEventListener('load',onload);
try{
const stylesheet=Array.from(document.styleSheets).find(s=>s.ownerNode===newNode);
if(stylesheet){
const cssStylesheet=stylesheet;
resolve(getSheetsFontFaces(cssStylesheet));
}else{
resolve([{err:{message:'Could not load stylesheet with CORS'}}]);
}
}catch(err){
resolve([{err:{message:err.message,stack:err.stack}}]);
}
});
newNode.crossOrigin='anonymous';
oldNode.parentNode&&oldNode.parentNode.insertBefore(newNode,oldNode);
oldNode.remove();


setTimeout(()=>resolve([{err:{message:'Could not load stylesheet (timeout)'}}]),5000);
});
}


const data=[];

const corsDataPromises=[];

for(const stylesheet of Array.from(document.styleSheets)){
const cssStylesheet=stylesheet;

try{

if(!cssStylesheet.cssRules){
throw new Error('Failed to read cssRules');
}

data.push(...getSheetsFontFaces(cssStylesheet));
}catch(err){
const failedToReadRules=/Failed to read.*cssRules/.test(err.message);

const alreadyCORS=!cssStylesheet.ownerNode||!!cssStylesheet.ownerNode.crossOrigin;

if(failedToReadRules&&!alreadyCORS&&cssStylesheet.href){

const ownerLinkEl=cssStylesheet.ownerNode;
corsDataPromises.push(loadStylesheetWithCORS(ownerLinkEl));
}else{

data.push({err:{message:err.message,stack:err.stack}});
}
}
}

return Promise.all(corsDataPromises).then(corsFontFaces=>data.concat(...corsFontFaces));
}


class Fonts extends Gatherer{





_findSameFontFamily(fontFace,fontFacesList){
return fontFacesList.find(fontItem=>{
return!fontFaceDescriptors.find(descriptor=>{
return fontFace[descriptor]!==fontItem[descriptor];
});
});
}





afterPass(passContext){
const driver=passContext.driver;
const args=JSON.stringify(fontFaceDescriptors);

const fontData=Promise.all(
[
driver.evaluateAsync(`(${getAllLoadedFonts.toString()})(${args})`),
driver.evaluateAsync(`(${getFontFaceFromStylesheets.toString()})()`)]);


return fontData.then(([loadedFonts,fontsAndErrors])=>{

const fontFaces=fontsAndErrors.filter(
fontOrError=>!('err'in fontOrError));

const firstFontError=fontsAndErrors.find(fontOrError=>'err'in fontOrError);
if(firstFontError){

const dataError=firstFontError;
if(dataError.err){
const err=new Error(dataError.err.message);
err.stack=dataError.err.stack||err.stack;
Sentry.captureException(err,{tags:{gatherer:'Fonts'},level:'warning'});
}
}

return loadedFonts.map(loadedFont=>{
const fontFaceItem=this._findSameFontFamily(loadedFont,fontFaces);
loadedFont.src=fontFaceItem&&fontFaceItem.src||[];

return loadedFont;
});
});
}}


module.exports=Fonts;

},{"../../lib/sentry":90,"./gatherer":21}],"../gather/gatherers/html-without-javascript":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');









function getBodyText(){

const body=document.querySelector('body');
return Promise.resolve({
bodyText:body?body.innerText:'',
hasNoScript:!!document.querySelector('noscript')});

}

class HTMLWithoutJavaScript extends Gatherer{



beforePass(passContext){
passContext.disableJavaScript=true;
}





async afterPass(passContext){

passContext.disableJavaScript=false;

const expression=`(${getBodyText.toString()}())`;
const{bodyText,hasNoScript}=await passContext.driver.evaluateAsync(expression);
if(typeof bodyText!=='string'){
throw new Error('document body innerText returned by protocol was not a string');
}

return{
bodyText,
hasNoScript};

}}


module.exports=HTMLWithoutJavaScript;

},{"./gatherer":21}],"../gather/gatherers/http-redirect":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');






class HTTPRedirect extends Gatherer{
constructor(){
super();
this._preRedirectURL='';
}




beforePass(passContext){
this._preRedirectURL=passContext.url;
passContext.url=this._preRedirectURL.replace(/^https/,'http');
}





async afterPass(passContext){

passContext.url=this._preRedirectURL;

const expression=`new URL(window.location).protocol === 'https:'`;
const isHttps=await passContext.driver.evaluateAsync(expression,{useIsolation:true});
return{
value:isHttps};

}}


module.exports=HTTPRedirect;

},{"./gatherer":21}],"../gather/gatherers/image-usage":[function(require,module,exports){









'use strict';

const Gatherer=require('./gatherer');
const pageFunctions=require('../../lib/page-functions.js');
const Driver=require('../driver.js');





function collectImageElementInfo(){

function getClientRect(element){
const clientRect=element.getBoundingClientRect();
return{

top:clientRect.top,
bottom:clientRect.bottom,
left:clientRect.left,
right:clientRect.right};

}



const allElements=getElementsInDocument();
const allImageElements=allElements.filter(element=>{
return element.localName==='img';
});


const htmlImages=allImageElements.map(element=>{
const computedStyle=window.getComputedStyle(element);
return{


src:element.currentSrc,
width:element.width,
height:element.height,
clientWidth:element.clientWidth,
clientHeight:element.clientHeight,
clientRect:getClientRect(element),
naturalWidth:element.naturalWidth,
naturalHeight:element.naturalHeight,
isCss:false,
isPicture:!!element.parentElement&&element.parentElement.tagName==='PICTURE',
usesObjectFit:computedStyle.getPropertyValue('object-fit')==='cover'||
computedStyle.getPropertyValue('object-fit')==='contain'};

});



const CSS_URL_REGEX=/^url\("([^"]+)"\)$/;

const CSS_SIZE_REGEX=/(auto|contain|cover)/;

const cssImages=allElements.reduce((images,element)=>{
const style=window.getComputedStyle(element);
if(!style.backgroundImage||!CSS_URL_REGEX.test(style.backgroundImage)||
!style.backgroundSize||!CSS_SIZE_REGEX.test(style.backgroundSize)){
return images;
}

const imageMatch=style.backgroundImage.match(CSS_URL_REGEX);

const url=imageMatch[1];


const differentImages=images.filter(image=>image.src!==url);
if(images.length-differentImages.length>2){
return differentImages;
}

images.push({
src:url,
clientWidth:element.clientWidth,
clientHeight:element.clientHeight,
clientRect:getClientRect(element),

naturalWidth:Number.MAX_VALUE,
naturalHeight:Number.MAX_VALUE,
isCss:true,
isPicture:false,
usesObjectFit:false});


return images;
},[]);

return htmlImages.concat(cssImages);
}






function determineNaturalSize(url){
return new Promise((resolve,reject)=>{
const img=new Image();
img.addEventListener('error',_=>reject(new Error('determineNaturalSize failed img load')));
img.addEventListener('load',()=>{
resolve({
naturalWidth:img.naturalWidth,
naturalHeight:img.naturalHeight});

});

img.src=url;
});
}

class ImageUsage extends Gatherer{





async fetchElementWithSizeInformation(driver,element){
const url=JSON.stringify(element.src);
try{

const size=await driver.evaluateAsync(`(${determineNaturalSize.toString()})(${url})`);
return Object.assign(element,size);
}catch(_){

return Object.assign(element,{naturalWidth:0,naturalHeight:0});
}
}






async afterPass(passContext,loadData){
const driver=passContext.driver;
const indexedNetworkRecords=loadData.networkRecords.reduce((map,record)=>{
if(/^image/.test(record.mimeType)&&record.finished){
map[record.url]={
url:record.url,
resourceSize:Math.min(record.resourceSize||0,record.transferSize),
startTime:record.startTime,
endTime:record.endTime,
responseReceivedTime:record.responseReceivedTime,
mimeType:record.mimeType};

}

return map;
},{});

const expression=`(function() {
      ${pageFunctions.getElementsInDocumentString}; // define function on page
      return (${collectImageElementInfo.toString()})();
    })()`;


const elements=await driver.evaluateAsync(expression);

const imageUsage=[];
for(let element of elements){

element.networkRecord=indexedNetworkRecords[element.src];




if((element.isPicture||element.isCss)&&element.networkRecord){
element=await this.fetchElementWithSizeInformation(driver,element);
}

imageUsage.push(element);
}

return imageUsage;
}}


module.exports=ImageUsage;

},{"../../lib/page-functions.js":89,"../driver.js":19,"./gatherer":21}],"../gather/gatherers/js-usage":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');




class JsUsage extends Gatherer{



async beforePass(passContext){
await passContext.driver.sendCommand('Profiler.enable');
await passContext.driver.sendCommand('Profiler.startPreciseCoverage');
}





async afterPass(passContext){
const driver=passContext.driver;

const coverageResponse=await driver.sendCommand('Profiler.takePreciseCoverage');
await driver.sendCommand('Profiler.stopPreciseCoverage');
await driver.sendCommand('Profiler.disable');
return coverageResponse.result;
}}


module.exports=JsUsage;

},{"./gatherer":21}],"../gather/gatherers/manifest":[function(require,module,exports){
(function(Buffer){





'use strict';

const Gatherer=require('./gatherer');
const manifestParser=require('../../lib/manifest-parser');
const BOM_LENGTH=3;
const BOM_FIRSTCHAR=65279;







class Manifest extends Gatherer{







async afterPass(passContext){
const manifestPromise=passContext.driver.getAppManifest();

const timeoutPromise=new Promise(resolve=>setTimeout(resolve,3000));

const response=await Promise.race([manifestPromise,timeoutPromise]);
if(!response){
return null;
}

const isBomEncoded=response.data.charCodeAt(0)===BOM_FIRSTCHAR;
if(isBomEncoded){
response.data=Buffer.from(response.data).slice(BOM_LENGTH).toString();
}

return manifestParser(response.data,response.url,passContext.url);
}}


module.exports=Manifest;

}).call(this,require("buffer").Buffer);
},{"../../lib/manifest-parser":86,"./gatherer":21,"buffer":109}],"../gather/gatherers/mixed-content":[function(require,module,exports){
(function(Buffer){





'use strict';

const Gatherer=require('./gatherer');
const URL=require('../../lib/url-shim');

const Driver=require('../driver.js');













class MixedContent extends Gatherer{
constructor(){
super();
this.ids=new Set();
this.url=undefined;
this._onRequestIntercepted=undefined;
}





upgradeURL(url){
const parsedURL=new URL(url);
parsedURL.protocol='https:';
return parsedURL.href;
}





downgradeURL(url){
const parsedURL=new URL(url);
parsedURL.protocol='http:';
return parsedURL.href;
}





_getRequestInterceptor(pageUrl,driver){

const onRequestIntercepted=event=>{



if(new URL(event.request.url).protocol==='http:'&&
!URL.equalWithExcludedFragments(event.request.url,pageUrl)&&
!this.ids.has(event.interceptionId)){
this.ids.add(event.interceptionId);
event.request.url=this.upgradeURL(event.request.url);
driver.sendCommand('Network.continueInterceptedRequest',{
interceptionId:event.interceptionId,
rawResponse:Buffer.from(
`HTTP/1.1 302 Found\r\nLocation: ${event.request.url}\r\n\r\n`,
'utf8').toString('base64')});

}else{
driver.sendCommand('Network.continueInterceptedRequest',{
interceptionId:event.interceptionId});

}
};

return onRequestIntercepted;
}




async beforePass(passContext){
const driver=passContext.driver;





passContext.url=this.downgradeURL(passContext.url);
this.url=passContext.url;
this._onRequestIntercepted=this._getRequestInterceptor(this.url,driver);

await driver.sendCommand('Network.enable');
driver.on('Network.requestIntercepted',this._onRequestIntercepted);
await driver.sendCommand('Network.setCacheDisabled',{cacheDisabled:true});
await driver.sendCommand('Network.setRequestInterception',{patterns:[{urlPattern:'*'}]});
}





async afterPass(passContext){
const driver=passContext.driver;
await driver.sendCommand('Network.setRequestInterception',{patterns:[]});
if(this._onRequestIntercepted){
driver.off('Network.requestIntercepted',this._onRequestIntercepted);
}
await driver.sendCommand('Network.setCacheDisabled',{cacheDisabled:false});

return{url:passContext.url};
}}


module.exports=MixedContent;

}).call(this,require("buffer").Buffer);
},{"../../lib/url-shim":"url","../driver.js":19,"./gatherer":21,"buffer":109}],"../gather/gatherers/offline":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');
const URL=require('../../lib/url-shim');

class Offline extends Gatherer{



beforePass(passContext){
return passContext.driver.goOffline();
}






afterPass(passContext,loadData){
const navigationRecord=loadData.networkRecords.filter(record=>{
return URL.equalWithExcludedFragments(record.url,passContext.url)&&
record.fetchedViaServiceWorker;
}).pop();

return passContext.driver.goOnline(passContext).
then(_=>navigationRecord?navigationRecord.statusCode:-1);
}}


module.exports=Offline;

},{"../../lib/url-shim":"url","./gatherer":21}],"../gather/gatherers/runtime-exceptions":[function(require,module,exports){










'use strict';

const Gatherer=require('./gatherer');

class RuntimeExceptions extends Gatherer{
constructor(){
super();

this._exceptions=[];
this._onRuntimeExceptionThrown=this.onRuntimeExceptionThrown.bind(this);
}




onRuntimeExceptionThrown(entry){
this._exceptions.push(entry);
}




beforePass(passContext){
const driver=passContext.driver;
driver.on('Runtime.exceptionThrown',this._onRuntimeExceptionThrown);
}





async afterPass(passContext){
await passContext.driver.off('Runtime.exceptionThrown',this._onRuntimeExceptionThrown);
return this._exceptions;
}}


module.exports=RuntimeExceptions;

},{"./gatherer":21}],"../gather/gatherers/scripts":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');
const NetworkRequest=require('../../lib/network-request');




class Scripts extends Gatherer{





async afterPass(passContext,loadData){
const driver=passContext.driver;


const scriptContentMap={};
const scriptRecords=loadData.networkRecords.
filter(record=>record.resourceType===NetworkRequest.TYPES.Script);

for(const record of scriptRecords){
try{
const content=await driver.getRequestContent(record.requestId);
if(content){
scriptContentMap[record.requestId]=content;
}
}catch(e){}
}

return scriptContentMap;
}}


module.exports=Scripts;

},{"../../lib/network-request":88,"./gatherer":21}],"../gather/gatherers/seo/canonical":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');

class Canonical extends Gatherer{




afterPass(passContext){
const driver=passContext.driver;

return driver.querySelectorAll('head link[rel="canonical" i]').
then(nodes=>Promise.all(nodes.map(node=>node.getAttribute('href'))));
}}


module.exports=Canonical;


},{"../gatherer":21}],"../gather/gatherers/seo/crawlable-links":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');
const pageFunctions=require('../../../lib/page-functions.js');

class CrawlableLinks extends Gatherer{




afterPass(passContext){
const expression=`(function() {
      ${pageFunctions.getElementsInDocumentString}; // define function on page
      const selector = 'a[href]:not([rel~="nofollow"])';
      const elements = getElementsInDocument(selector);
      return elements
        .map(node => ({
          href: node.href,
          text: node.innerText
        }));
    })()`;

return passContext.driver.evaluateAsync(expression);
}}


module.exports=CrawlableLinks;


},{"../../../lib/page-functions.js":89,"../gatherer":21}],"../gather/gatherers/seo/embedded-content":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');
const pageFunctions=require('../../../lib/page-functions.js');

class EmbeddedContent extends Gatherer{




afterPass(passContext){
const expression=`(function() {
      ${pageFunctions.getElementsInDocumentString}; // define function on page
      const selector = 'object, embed, applet';
      const elements = getElementsInDocument(selector);
      return elements
        .map(node => ({
          tagName: node.tagName,
          type: node.getAttribute('type'),
          src: node.getAttribute('src'),
          data: node.getAttribute('data'),
          code: node.getAttribute('code'),
          params: Array.from(node.children)
            .filter(el => el.tagName === 'PARAM')
            .map(el => ({
              name: el.getAttribute('name') || '',
              value: el.getAttribute('value') || '',
            })),
        }));
    })()`;

return passContext.driver.evaluateAsync(expression);
}}


module.exports=EmbeddedContent;

},{"../../../lib/page-functions.js":89,"../gatherer":21}],"../gather/gatherers/seo/font-size":[function(require,module,exports){
(function(global){






'use strict';










const CSSMatchedStyles=require('../../../lib/web-inspector').CSSMatchedStyles;
const Gatherer=require('../gatherer');
const FONT_SIZE_PROPERTY_NAME='font-size';
const TEXT_NODE_BLOCK_LIST=new Set(['SCRIPT','STYLE','NOSCRIPT']);
const MINIMAL_LEGIBLE_FONT_SIZE_PX=12;

const MAX_NODES_VISITED=500;
const MAX_NODES_ANALYZED=50;

const Driver=require('../../driver.js');





function nodeInBody(node){
if(!node){
return false;
}
if(node.nodeName==='BODY'){
return true;
}
return nodeInBody(node.parentNode);
}







function getAllNodesFromBody(driver){
return driver.getNodesInDocument().
then(nodes=>{
const nodeMap=new Map();
nodes.forEach(node=>nodeMap.set(node.nodeId,node));
nodes.forEach(node=>node.parentNode=nodeMap.get(node.parentId));
return nodes.filter(nodeInBody);
});
}









function getEffectiveRule(property,node,{
inlineStyle,
attributesStyle,
matchedCSSRules,
inherited})
{
const cssModel={
styleSheetHeaderForId:id=>({id})};


const nodeType=node.nodeType;
node.nodeType=()=>nodeType;
const matchedStyles=new CSSMatchedStyles(
cssModel,
node,
inlineStyle,
attributesStyle,
matchedCSSRules,
null,
inherited,
null);


const nodeStyles=matchedStyles.nodeStyles();
const matchingRule=nodeStyles.
find(style=>

style.allProperties().some(item=>item.name===property&&
matchedStyles.propertyState(item)!==CSSMatchedStyles.PropertyState.Overloaded));


return matchingRule;
}





function getNodeTextLength(node){
return!node.nodeValue?0:node.nodeValue.trim().length;
}






function getFontSizeSourceRule(driver,node){
return driver.sendCommand('CSS.getMatchedStylesForNode',{nodeId:node.nodeId}).
then(matchedRules=>getEffectiveRule(FONT_SIZE_PROPERTY_NAME,node,matchedRules));
}






function getFontSizeInformation(driver,node){
return driver.sendCommand('CSS.getComputedStyleForNode',{nodeId:node.parentId}).
then(result=>{
const{computedStyle}=result;
const fontSizeProperty=computedStyle.find(({name})=>name===FONT_SIZE_PROPERTY_NAME);

return{
fontSize:parseInt(fontSizeProperty.value,10),
textLength:getNodeTextLength(node),
node:node.parentNode};

}).
catch(err=>{
require('../../../lib/sentry.js').captureException(err);
return null;
});
}





function isNonEmptyTextNode(node){
return node.nodeType===global.Node.TEXT_NODE&&
!TEXT_NODE_BLOCK_LIST.has(node.parentNode.nodeName)&&
getNodeTextLength(node)>0;
}

class FontSize extends Gatherer{




afterPass(passContext){

const stylesheets=new Map();

const onStylesheetAdd=sheet=>stylesheets.set(sheet.header.styleSheetId,sheet.header);
passContext.driver.on('CSS.styleSheetAdded',onStylesheetAdd);

const enableDOM=passContext.driver.sendCommand('DOM.enable');
const enableCSS=passContext.driver.sendCommand('CSS.enable');

let failingTextLength=0;
let visitedTextLength=0;
let totalTextLength=0;

return Promise.all([enableDOM,enableCSS]).
then(()=>getAllNodesFromBody(passContext.driver)).
then(nodes=>{
const textNodes=nodes.filter(isNonEmptyTextNode);
totalTextLength=textNodes.reduce((sum,node)=>sum+=getNodeTextLength(node),0);
const nodesToVisit=textNodes.
sort((a,b)=>getNodeTextLength(b)-getNodeTextLength(a)).
slice(0,MAX_NODES_VISITED);

return nodesToVisit;
}).
then(textNodes=>
Promise.all(textNodes.map(node=>getFontSizeInformation(passContext.driver,node)))).
then(fontSizeInfo=>{
const visitedNodes=fontSizeInfo.filter(Boolean);
visitedTextLength=visitedNodes.reduce((sum,{textLength})=>sum+=textLength,0);
const failingNodes=visitedNodes.
filter(({fontSize})=>fontSize<MINIMAL_LEGIBLE_FONT_SIZE_PX);
failingTextLength=failingNodes.reduce((sum,{textLength})=>sum+=textLength,0);

return Promise.all(failingNodes.
sort((a,b)=>b.textLength-a.textLength).
slice(0,MAX_NODES_ANALYZED).
map(info=>
getFontSizeSourceRule(passContext.driver,info.node).
then(sourceRule=>{
if(sourceRule){
info.cssRule={
type:sourceRule.type,
range:sourceRule.range,
styleSheetId:sourceRule.styleSheetId};


if(sourceRule.parentRule){
info.cssRule.parentRule={
origin:sourceRule.parentRule.origin,
selectors:sourceRule.parentRule.selectors};

}
}
return info;
})));


}).
then(analyzedFailingNodesData=>{
passContext.driver.off('CSS.styleSheetAdded',onStylesheetAdd);

const analyzedFailingTextLength=analyzedFailingNodesData.
reduce((sum,{textLength})=>sum+=textLength,0);

analyzedFailingNodesData.
filter(data=>data.cssRule&&data.cssRule.styleSheetId).
forEach(data=>data.cssRule.stylesheet=stylesheets.get(data.cssRule.styleSheetId));

return Promise.all([
passContext.driver.sendCommand('DOM.disable'),
passContext.driver.sendCommand('CSS.disable')]).
then(_=>({
analyzedFailingNodesData,
analyzedFailingTextLength,
failingTextLength,
visitedTextLength,
totalTextLength}));

});
}}


module.exports=FontSize;











}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"../../../lib/sentry.js":90,"../../../lib/web-inspector":96,"../../driver.js":19,"../gatherer":21}],"../gather/gatherers/seo/hreflang":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');

class Hreflang extends Gatherer{




afterPass(passContext){
const driver=passContext.driver;

return driver.querySelectorAll('head link[rel="alternate" i][hreflang]').
then(nodes=>Promise.all(nodes.map(node=>
Promise.all([node.getAttribute('href'),node.getAttribute('hreflang')])))).

then(attributeValues=>attributeValues&&
attributeValues.map(values=>{
const[href,hreflang]=values;
return{
href:href||'',
hreflang:hreflang||''};

}));

}}


module.exports=Hreflang;


},{"../gatherer":21}],"../gather/gatherers/seo/meta-description":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');

class MetaDescription extends Gatherer{




afterPass(passContext){
const driver=passContext.driver;

return driver.querySelector('head meta[name="description" i]').
then(node=>node&&node.getAttribute('content'));
}}


module.exports=MetaDescription;


},{"../gatherer":21}],"../gather/gatherers/seo/meta-robots":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');

class MetaRobots extends Gatherer{




afterPass(passContext){
const driver=passContext.driver;

return driver.querySelector('head meta[name="robots" i]').
then(node=>node&&node.getAttribute('content'));
}}


module.exports=MetaRobots;

},{"../gatherer":21}],"../gather/gatherers/seo/robots-txt":[function(require,module,exports){





'use strict';

const Gatherer=require('../gatherer');





async function getRobotsTxtContent(){
try{
const response=await fetch(new URL('/robots.txt',location.href).href);
if(!response.ok){
return{status:response.status,content:null};
}

const content=await response.text();
return{status:response.status,content};
}catch(_){
return{status:null,content:null};
}
}


class RobotsTxt extends Gatherer{




afterPass(passContext){
return passContext.driver.evaluateAsync(`(${getRobotsTxtContent.toString()}())`);
}}


module.exports=RobotsTxt;

},{"../gatherer":21}],"../gather/gatherers/service-worker":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');

class ServiceWorker extends Gatherer{




async beforePass(passContext){
const{versions}=await passContext.driver.getServiceWorkerVersions();
return{
versions};

}}


module.exports=ServiceWorker;

},{"./gatherer":21}],"../gather/gatherers/start-url":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');
const manifestParser=require('../../lib/manifest-parser');
const Driver=require('../driver.js');

class StartUrl extends Gatherer{





afterPass(passContext){
const driver=passContext.driver;
return driver.goOnline(passContext).
then(()=>driver.getAppManifest()).
then(response=>driver.goOffline().then(()=>response)).
then(response=>response&&manifestParser(response.data,response.url,passContext.url)).
then(manifest=>{
const startUrlInfo=this._readManifestStartUrl(manifest);
if(startUrlInfo.isReadFailure){
return{statusCode:-1,explanation:startUrlInfo.reason};
}

return this._attemptManifestFetch(passContext.driver,startUrlInfo.startUrl);
}).catch(()=>{
return{statusCode:-1,explanation:'Unable to fetch start URL via service worker'};
});
}






_readManifestStartUrl(manifest){
if(!manifest||!manifest.value){
const detailedMsg=manifest&&manifest.warning;

if(detailedMsg){
return{isReadFailure:true,reason:`Error fetching web app manifest: ${detailedMsg}`};
}else{
return{isReadFailure:true,reason:`No usable web app manifest found on page`};
}
}



if(manifest.value.start_url.warning){
return{isReadFailure:true,reason:manifest.value.start_url.warning};
}


return{isReadFailure:false,startUrl:manifest.value.start_url.value};
}








_attemptManifestFetch(driver,startUrl){

const timeoutPromise=new Promise(resolve=>
setTimeout(
()=>resolve({statusCode:-1,explanation:'Timed out waiting for fetched start_url'}),
3000));



const fetchPromise=new Promise(resolve=>{
driver.on('Network.responseReceived',onResponseReceived);


function onResponseReceived(responseEvent){
const{response}=responseEvent;

if(response.url!==startUrl)return;
driver.off('Network.responseReceived',onResponseReceived);

if(!response.fromServiceWorker){
return resolve({
statusCode:-1,
explanation:'Unable to fetch start URL via service worker'});

}

return resolve({statusCode:response.status});
}
});

return driver.
evaluateAsync(`window.location = '${startUrl}'`).
then(()=>Promise.race([fetchPromise,timeoutPromise]));
}}


module.exports=StartUrl;

},{"../../lib/manifest-parser":86,"../driver.js":19,"./gatherer":21}],"../gather/gatherers/theme-color":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');

class ThemeColor extends Gatherer{




async afterPass(passContext){
const driver=passContext.driver;

const metaEl=await driver.querySelector('head meta[name="theme-color" i]');
return metaEl&&metaEl.getAttribute('content');
}}


module.exports=ThemeColor;

},{"./gatherer":21}],"../gather/gatherers/viewport-dimensions":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');







function getViewportDimensions(){



return Promise.resolve({
innerWidth:window.innerWidth,
innerHeight:window.innerHeight,
outerWidth:window.outerWidth,
outerHeight:window.outerHeight,
devicePixelRatio:window.devicePixelRatio});

}

class ViewportDimensions extends Gatherer{




async afterPass(passContext){
const driver=passContext.driver;


const dimensions=await driver.evaluateAsync(`(${getViewportDimensions.toString()}())`,
{useIsolation:true});

const allNumeric=Object.values(dimensions).every(Number.isFinite);
if(!allNumeric){
const results=JSON.stringify(dimensions);
throw new Error(`ViewportDimensions results were not numeric: ${results}`);
}

return dimensions;
}}


module.exports=ViewportDimensions;

},{"./gatherer":21}],"../gather/gatherers/viewport":[function(require,module,exports){





'use strict';

const Gatherer=require('./gatherer');

class Viewport extends Gatherer{




async afterPass(passContext){
const driver=passContext.driver;

const metaEl=await driver.querySelector('head meta[name="viewport" i]');
return metaEl&&metaEl.getAttribute('content');
}}


module.exports=Viewport;

},{"./gatherer":21}],"./gather/computed/critical-request-chains":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const NetworkRequest=require('../../lib/network-request');
const assert=require('assert');

class CriticalRequestChains extends ComputedArtifact{
get name(){
return'CriticalRequestChains';
}









static isCritical(request,mainResource){
assert.ok(mainResource,'mainResource not provided');


if(request.isLinkPreload){
return false;
}


const isIframe=request.resourceType===NetworkRequest.TYPES.Document&&
request.frameId!==mainResource.frameId;




const nonCriticalResourceTypes=[
NetworkRequest.TYPES.Image,
NetworkRequest.TYPES.XHR,
NetworkRequest.TYPES.Fetch,
NetworkRequest.TYPES.EventSource];

if(nonCriticalResourceTypes.includes(request.resourceType||'Other')||
isIframe||
request.mimeType&&request.mimeType.startsWith('image/')){
return false;
}

return['VeryHigh','High','Medium'].includes(request.priority);
}






static extractChain(networkRecords,mainResource){
networkRecords=networkRecords.filter(req=>req.finished);



const requestIdToRequests=new Map();
for(const request of networkRecords){
requestIdToRequests.set(request.requestId,request);
}



const criticalRequests=networkRecords.filter(request=>
CriticalRequestChains.isCritical(request,mainResource));



const criticalRequestChains={};
for(const request of criticalRequests){




const ancestors=[];
let ancestorRequest=request.initiatorRequest;

let node=criticalRequestChains;
while(ancestorRequest){
const ancestorIsCritical=CriticalRequestChains.isCritical(ancestorRequest,mainResource);





if(!ancestorIsCritical||ancestors.includes(ancestorRequest.requestId)){


ancestors.length=0;
node=undefined;
break;
}
ancestors.push(ancestorRequest.requestId);
ancestorRequest=ancestorRequest.initiatorRequest;
}



let ancestor=ancestors.pop();
while(ancestor&&node){
const parentRequest=requestIdToRequests.get(ancestor);
if(!parentRequest){
throw new Error(`request with id ${ancestor} not found.`);
}

const parentRequestId=parentRequest.requestId;
if(!node[parentRequestId]){
node[parentRequestId]={
request:parentRequest,
children:{}};

}


ancestor=ancestors.pop();
node=node[parentRequestId].children;
}

if(!node){
continue;
}


if(node[request.requestId]){
continue;
}


node[request.requestId]={
request,
children:{}};

}

return criticalRequestChains;
}






async compute_(data,artifacts){
const[networkRecords,mainResource]=await Promise.all([
artifacts.requestNetworkRecords(data.devtoolsLog),
artifacts.requestMainResource(data)]);


return CriticalRequestChains.extractChain(networkRecords,mainResource);
}}


module.exports=CriticalRequestChains;

},{"../../lib/network-request":88,"./computed-artifact":11,"assert":102}],"./gather/computed/load-simulator":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const constants=require('../../config/constants');
const Simulator=require('../../lib/dependency-graph/simulator/simulator');

class LoadSimulatorArtifact extends ComputedArtifact{
get name(){
return'LoadSimulator';
}






async compute_(data,artifacts){
const{throttlingMethod,throttling}=data.settings;
const networkAnalysis=await artifacts.requestNetworkAnalysis(data.devtoolsLog);


const options={
additionalRttByOrigin:networkAnalysis.additionalRttByOrigin,
serverResponseTimeByOrigin:networkAnalysis.serverResponseTimeByOrigin};


switch(throttlingMethod){
case'provided':
options.rtt=networkAnalysis.rtt;
options.throughput=networkAnalysis.throughput;
options.cpuSlowdownMultiplier=1;
options.layoutTaskMultiplier=1;
break;
case'devtools':
if(throttling){
options.rtt=
throttling.requestLatencyMs/constants.throttling.DEVTOOLS_RTT_ADJUSTMENT_FACTOR;
options.throughput=
throttling.downloadThroughputKbps*1024/
constants.throttling.DEVTOOLS_THROUGHPUT_ADJUSTMENT_FACTOR;
}

options.cpuSlowdownMultiplier=1;
options.layoutTaskMultiplier=1;
break;
case'simulate':
if(throttling){
options.rtt=throttling.rttMs;
options.throughput=throttling.throughputKbps*1024;
options.cpuSlowdownMultiplier=throttling.cpuSlowdownMultiplier;
}
break;
default:

break;}


return new Simulator(options);
}}


module.exports=LoadSimulatorArtifact;

},{"../../config/constants":8,"../../lib/dependency-graph/simulator/simulator":31,"./computed-artifact":11}],"./gather/computed/main-resource":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const URL=require('../../lib/url-shim');





class MainResource extends ComputedArtifact{
get name(){
return'MainResource';
}






async compute_(data,artifacts){
const finalUrl=data.URL.finalUrl;
const requests=await artifacts.requestNetworkRecords(data.devtoolsLog);

const mainResource=requests.find(request=>finalUrl.startsWith(request.url)&&
URL.equalWithExcludedFragments(request.url,finalUrl));

if(!mainResource){
throw new Error('Unable to identify the main resource');
}

return mainResource;
}}


module.exports=MainResource;

},{"../../lib/url-shim":"url","./computed-artifact":11}],"./gather/computed/main-thread-tasks":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const{taskGroups,taskNameToGroup}=require('../../lib/task-groups');

































class MainThreadTasks extends ComputedArtifact{
get name(){
return'MainThreadTasks';
}






static _createNewTaskNode(event,parent){
const newTask={
event,
startTime:event.ts,
endTime:event.ph==='X'?event.ts+Number(event.dur||0):NaN,
parent:parent,
children:[],


attributableURLs:[],
group:taskGroups.other,
duration:NaN,
selfTime:NaN};


if(parent){
parent.children.push(newTask);
}

return newTask;
}





static _createTasksFromEvents(mainThreadEvents){

const tasks=[];

let currentTask;

for(const event of mainThreadEvents){

if(event.ph!=='X'&&event.ph!=='B'&&event.ph!=='E')continue;



while(
currentTask&&
Number.isFinite(currentTask.endTime)&&
currentTask.endTime<=event.ts)
{
currentTask=currentTask.parent;
}


if(!currentTask){

if(event.ph==='E'){
throw new Error('Fatal trace logic error');
}

currentTask=MainThreadTasks._createNewTaskNode(event);
tasks.push(currentTask);

continue;
}

if(event.ph==='X'||event.ph==='B'){

const newTask=MainThreadTasks._createNewTaskNode(event,currentTask);
tasks.push(newTask);
currentTask=newTask;
}else{
if(currentTask.event.ph!=='B'){
throw new Error('Fatal trace logic error');
}


currentTask.endTime=event.ts;
currentTask=currentTask.parent;
}
}

return tasks;
}





static _computeRecursiveSelfTime(task){
const childTime=task.children.
map(MainThreadTasks._computeRecursiveSelfTime).
reduce((sum,child)=>sum+child,0);
task.duration=task.endTime-task.startTime;
task.selfTime=task.duration-childTime;
return task.duration;
}





static _computeRecursiveAttributableURLs(task,parentURLs){
const argsData=task.event.args.data||{};
const stackFrameURLs=(argsData.stackTrace||[]).map(entry=>entry.url);

let taskURLs=[];
switch(task.event.name){





case'v8.compile':
case'EvaluateScript':
case'FunctionCall':
taskURLs=[argsData.url].concat(stackFrameURLs);
break;
case'v8.compileModule':
taskURLs=[task.event.args.fileName].concat(stackFrameURLs);
break;
default:
taskURLs=stackFrameURLs;
break;}



const attributableURLs=Array.from(parentURLs);
for(const url of taskURLs){

if(!url)continue;

if(attributableURLs[attributableURLs.length-1]===url)continue;
attributableURLs.push(url);
}

task.attributableURLs=attributableURLs;
task.children.forEach(child=>
MainThreadTasks._computeRecursiveAttributableURLs(child,attributableURLs));
}





static _computeRecursiveTaskGroup(task,parentGroup){
const group=taskNameToGroup[task.event.name];
task.group=group||parentGroup||taskGroups.other;
task.children.forEach(child=>MainThreadTasks._computeRecursiveTaskGroup(child,task.group));
}





static getMainThreadTasks(traceEvents){
const tasks=MainThreadTasks._createTasksFromEvents(traceEvents);


for(const task of tasks){
if(task.parent)continue;

MainThreadTasks._computeRecursiveSelfTime(task);
MainThreadTasks._computeRecursiveAttributableURLs(task,[]);
MainThreadTasks._computeRecursiveTaskGroup(task);
}


const firstTs=(tasks[0]||{startTime:0}).startTime;
for(const task of tasks){
task.startTime=(task.startTime-firstTs)/1000;
task.endTime=(task.endTime-firstTs)/1000;
task.duration/=1000;
task.selfTime/=1000;


if(!Number.isFinite(task.selfTime)){
throw new Error('Invalid task timing data');
}
}

return tasks;
}






async compute_(trace,artifacts){
const{mainThreadEvents}=await artifacts.requestTraceOfTab(trace);
return MainThreadTasks.getMainThreadTasks(mainThreadEvents);
}}


module.exports=MainThreadTasks;

},{"../../lib/task-groups":93,"./computed-artifact":11}],"./gather/computed/metrics/estimated-input-latency":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./metric');
const LHError=require('../../../lib/lh-error');
const TracingProcessor=require('../../../lib/traces/tracing-processor');

const ROLLING_WINDOW_SIZE=5000;






class EstimatedInputLatency extends MetricArtifact{
get name(){
return'EstimatedInputLatency';
}





static calculateRollingWindowEIL(events){
const candidateStartEvts=events.filter(evt=>evt.duration>=10);

let worst90thPercentileLatency=16;
for(const startEvt of candidateStartEvts){
const latencyPercentiles=TracingProcessor.getRiskToResponsiveness(
events,
startEvt.start,
startEvt.start+ROLLING_WINDOW_SIZE,
[0.9]);


worst90thPercentileLatency=Math.max(latencyPercentiles[0].time,worst90thPercentileLatency);
}

return worst90thPercentileLatency;
}





computeObservedMetric(data){
const{firstMeaningfulPaint}=data.traceOfTab.timings;
if(!firstMeaningfulPaint){
throw new LHError(LHError.errors.NO_FMP);
}

const events=TracingProcessor.getMainThreadTopLevelEvents(
data.traceOfTab,
firstMeaningfulPaint).
filter(evt=>evt.duration>=1);

return Promise.resolve({
timing:EstimatedInputLatency.calculateRollingWindowEIL(events)});

}}


module.exports=EstimatedInputLatency;

},{"../../../lib/lh-error":85,"../../../lib/traces/tracing-processor":95,"./metric":14}],"./gather/computed/metrics/first-contentful-paint":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./metric');

class FirstContentfulPaint extends MetricArtifact{
get name(){
return'FirstContentfulPaint';
}





async computeObservedMetric(data){
const{traceOfTab}=data;

return{
timing:traceOfTab.timings.firstContentfulPaint,
timestamp:traceOfTab.timestamps.firstContentfulPaint};

}}


module.exports=FirstContentfulPaint;

},{"./metric":14}],"./gather/computed/metrics/first-cpu-idle":[function(require,module,exports){





'use strict';
const MetricArtifact=require('./metric');
const TracingProcessor=require('../../../lib/traces/tracing-processor');
const LHError=require('../../../lib/lh-error');

const LONG_TASK_THRESHOLD=50;

const MAX_TASK_CLUSTER_DURATION=250;
const MIN_TASK_CLUSTER_PADDING=1000;
const MIN_TASK_CLUSTER_FMP_DISTANCE=5000;

const MAX_QUIET_WINDOW_SIZE=5000;


const EXPONENTIATION_COEFFICIENT=-Math.log(3-1)/15;





























class FirstCPUIdle extends MetricArtifact{
get name(){
return'FirstCPUIdle';
}





static getRequiredWindowSizeInMs(t){
const tInSeconds=t/1000;
const exponentiationComponent=Math.exp(EXPONENTIATION_COEFFICIENT*tInSeconds);
return(4*exponentiationComponent+1)*1000;
}










static getTaskClustersInWindow(tasks,startIndex,windowEnd){
const clusters=[];

let previousTaskEndTime=-Infinity;

let currentCluster=[];





const clusteringWindowEnd=windowEnd+MIN_TASK_CLUSTER_PADDING;

const isInClusteringWindow=task=>task.start<clusteringWindowEnd;
for(let i=startIndex;i<tasks.length;i++){
if(!isInClusteringWindow(tasks[i])){
break;
}

const task=tasks[i];


if(task.start-previousTaskEndTime>MIN_TASK_CLUSTER_PADDING){
currentCluster=[];
clusters.push(currentCluster);
}

currentCluster.push(task);
previousTaskEndTime=task.end;
}

return clusters.

map(tasks=>{
const start=tasks[0].start;
const end=tasks[tasks.length-1].end;
const duration=end-start;
return{start,end,duration};
}).

filter(cluster=>cluster.start<windowEnd);
}










static findQuietWindow(FMP,traceEnd,longTasks){

if(longTasks.length===0||
longTasks[0].start>FMP+FirstCPUIdle.getRequiredWindowSizeInMs(0)){
return FMP;
}


const isTooCloseToFMP=cluster=>cluster.start<FMP+MIN_TASK_CLUSTER_FMP_DISTANCE;

const isTooLong=cluster=>cluster.duration>MAX_TASK_CLUSTER_DURATION;

const isBadCluster=cluster=>isTooCloseToFMP(cluster)||isTooLong(cluster);



for(let i=0;i<longTasks.length;i++){
const windowStart=longTasks[i].end;
const windowSize=FirstCPUIdle.getRequiredWindowSizeInMs(windowStart-FMP);
const windowEnd=windowStart+windowSize;


if(windowEnd>traceEnd){
throw new LHError(LHError.errors.NO_FCPUI_IDLE_PERIOD);
}


if(i+1<longTasks.length&&
longTasks[i+1].start-windowStart<=MIN_TASK_CLUSTER_PADDING){
continue;
}

const taskClusters=FirstCPUIdle.getTaskClustersInWindow(longTasks,i+1,windowEnd);
const hasBadTaskClusters=taskClusters.some(isBadCluster);

if(!hasBadTaskClusters){
return windowStart;
}
}

throw new LHError(LHError.errors.NO_FCPUI_IDLE_PERIOD);
}





computeObservedMetric(data){
const{traceOfTab}=data;
const navStart=traceOfTab.timestamps.navigationStart;
const FMP=traceOfTab.timings.firstMeaningfulPaint;
const DCL=traceOfTab.timings.domContentLoaded;
const traceEnd=traceOfTab.timings.traceEnd;

if(!FMP||!DCL){
throw new LHError(FMP?LHError.errors.NO_DCL:LHError.errors.NO_FMP);
}

if(traceEnd-FMP<MAX_QUIET_WINDOW_SIZE){
throw new LHError(LHError.errors.FMP_TOO_LATE_FOR_FCPUI);
}

const longTasksAfterFMP=TracingProcessor.getMainThreadTopLevelEvents(traceOfTab,FMP).
filter(evt=>evt.duration>=LONG_TASK_THRESHOLD);
const firstInteractive=FirstCPUIdle.findQuietWindow(FMP,traceEnd,longTasksAfterFMP);

const valueInMs=Math.max(firstInteractive,DCL);

return Promise.resolve({
timing:valueInMs,
timestamp:valueInMs*1000+navStart});

}}







module.exports=FirstCPUIdle;

},{"../../../lib/lh-error":85,"../../../lib/traces/tracing-processor":95,"./metric":14}],"./gather/computed/metrics/first-meaningful-paint":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./metric');
const LHError=require('../../../lib/lh-error');

class FirstMeaningfulPaint extends MetricArtifact{
get name(){
return'FirstMeaningfulPaint';
}





async computeObservedMetric(data){
const{traceOfTab}=data;
if(!traceOfTab.timestamps.firstMeaningfulPaint){
throw new LHError(LHError.errors.NO_FMP);
}

return{

timing:traceOfTab.timings.firstMeaningfulPaint,
timestamp:traceOfTab.timestamps.firstMeaningfulPaint};

}}


module.exports=FirstMeaningfulPaint;

},{"../../../lib/lh-error":85,"./metric":14}],"./gather/computed/metrics/interactive":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./metric');

const NetworkRecorder=require('../../../lib/network-recorder');
const TracingProcessor=require('../../../lib/traces/tracing-processor');
const LHError=require('../../../lib/lh-error');

const REQUIRED_QUIET_WINDOW=5000;
const ALLOWED_CONCURRENT_REQUESTS=2;






class Interactive extends MetricArtifact{
get name(){
return'Interactive';
}








static _findNetworkQuietPeriods(networkRecords,traceOfTab){
const traceEndTsInMs=traceOfTab.timestamps.traceEnd/1000;

const filteredNetworkRecords=networkRecords.filter(record=>{
return record.finished&&record.requestMethod==='GET'&&!record.failed&&

record.statusCode<400;
});
return NetworkRecorder.findNetworkQuietPeriods(filteredNetworkRecords,
ALLOWED_CONCURRENT_REQUESTS,traceEndTsInMs);
}







static _findCPUQuietPeriods(longTasks,traceOfTab){
const navStartTsInMs=traceOfTab.timestamps.navigationStart/1000;
const traceEndTsInMs=traceOfTab.timestamps.traceEnd/1000;
if(longTasks.length===0){
return[{start:0,end:traceEndTsInMs}];
}


const quietPeriods=[];
longTasks.forEach((task,index)=>{
if(index===0){
quietPeriods.push({
start:0,
end:task.start+navStartTsInMs});

}

if(index===longTasks.length-1){
quietPeriods.push({
start:task.end+navStartTsInMs,
end:traceEndTsInMs});

}else{
quietPeriods.push({
start:task.end+navStartTsInMs,
end:longTasks[index+1].start+navStartTsInMs});

}
});

return quietPeriods;
}








static findOverlappingQuietPeriods(longTasks,networkRecords,traceOfTab){
const FcpTsInMs=traceOfTab.timestamps.firstContentfulPaint/1000;


const isLongEnoughQuietPeriod=period=>
period.end>FcpTsInMs+REQUIRED_QUIET_WINDOW&&
period.end-period.start>=REQUIRED_QUIET_WINDOW;
const networkQuietPeriods=this._findNetworkQuietPeriods(networkRecords,traceOfTab).
filter(isLongEnoughQuietPeriod);
const cpuQuietPeriods=this._findCPUQuietPeriods(longTasks,traceOfTab).
filter(isLongEnoughQuietPeriod);

const cpuQueue=cpuQuietPeriods.slice();
const networkQueue=networkQuietPeriods.slice();


let cpuCandidate=cpuQueue.shift();
let networkCandidate=networkQueue.shift();
while(cpuCandidate&&networkCandidate){
if(cpuCandidate.start>=networkCandidate.start){

if(networkCandidate.end>=cpuCandidate.start+REQUIRED_QUIET_WINDOW){
return{
cpuQuietPeriod:cpuCandidate,
networkQuietPeriod:networkCandidate,
cpuQuietPeriods,
networkQuietPeriods};

}else{
networkCandidate=networkQueue.shift();
}
}else{

if(cpuCandidate.end>=networkCandidate.start+REQUIRED_QUIET_WINDOW){
return{
cpuQuietPeriod:cpuCandidate,
networkQuietPeriod:networkCandidate,
cpuQuietPeriods,
networkQuietPeriods};

}else{
cpuCandidate=cpuQueue.shift();
}
}
}

throw new LHError(
cpuCandidate?
LHError.errors.NO_TTI_NETWORK_IDLE_PERIOD:
LHError.errors.NO_TTI_CPU_IDLE_PERIOD);

}





computeObservedMetric(data){
const{traceOfTab,networkRecords}=data;

if(!traceOfTab.timestamps.domContentLoaded){
throw new LHError(LHError.errors.NO_DCL);
}

const longTasks=TracingProcessor.getMainThreadTopLevelEvents(traceOfTab).
filter(event=>event.duration>=50);
const quietPeriodInfo=Interactive.findOverlappingQuietPeriods(
longTasks,
networkRecords,
traceOfTab);


const cpuQuietPeriod=quietPeriodInfo.cpuQuietPeriod;

const timestamp=Math.max(
cpuQuietPeriod.start,
traceOfTab.timestamps.firstContentfulPaint/1000,
traceOfTab.timestamps.domContentLoaded/1000)*
1000;
const timing=(timestamp-traceOfTab.timestamps.navigationStart)/1000;
return Promise.resolve({timing,timestamp});
}}


module.exports=Interactive;







},{"../../../lib/lh-error":85,"../../../lib/network-recorder":87,"../../../lib/traces/tracing-processor":95,"./metric":14}],"./gather/computed/metrics/lantern-estimated-input-latency":[function(require,module,exports){





'use strict';

const LanternMetricArtifact=require('./lantern-metric');
const BaseNode=require('../../../lib/dependency-graph/base-node');
const EstimatedInputLatency=require('./estimated-input-latency');



class LanternEstimatedInputLatency extends LanternMetricArtifact{
get name(){
return'LanternEstimatedInputLatency';
}




get COEFFICIENTS(){
return{
intercept:0,
optimistic:0.4,
pessimistic:0.4};

}





getOptimisticGraph(dependencyGraph){
return dependencyGraph;
}





getPessimisticGraph(dependencyGraph){
return dependencyGraph;
}






getEstimateFromSimulation(simulation,extras){


const fmpTimeInMs=extras.optimistic?
extras.fmpResult.pessimisticEstimate.timeInMs:
extras.fmpResult.optimisticEstimate.timeInMs;

const events=LanternEstimatedInputLatency.getEventsAfterFMP(
simulation.nodeTimings,
fmpTimeInMs);


return{
timeInMs:EstimatedInputLatency.calculateRollingWindowEIL(events),
nodeTimings:simulation.nodeTimings};

}






async compute_(data,artifacts){
const fmpResult=await artifacts.requestLanternFirstMeaningfulPaint(data);
return this.computeMetricWithGraphs(data,artifacts,{fmpResult});
}





static getEventsAfterFMP(nodeTimings,fmpTimeInMs){

const events=[];
for(const[node,timing]of nodeTimings.entries()){
if(node.type!==BaseNode.TYPES.CPU)continue;
if(timing.endTime<fmpTimeInMs)continue;

events.push({
start:timing.startTime,
end:timing.endTime,
duration:timing.duration});

}

return events;
}}


module.exports=LanternEstimatedInputLatency;

},{"../../../lib/dependency-graph/base-node":25,"./estimated-input-latency":"./gather/computed/metrics/estimated-input-latency","./lantern-metric":13}],"./gather/computed/metrics/lantern-first-contentful-paint":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./lantern-metric');
const BaseNode=require('../../../lib/dependency-graph/base-node');



class FirstContentfulPaint extends MetricArtifact{
get name(){
return'LanternFirstContentfulPaint';
}




get COEFFICIENTS(){
return{
intercept:0,
optimistic:0.5,
pessimistic:0.5};

}






getOptimisticGraph(dependencyGraph,traceOfTab){
const fcp=traceOfTab.timestamps.firstContentfulPaint;
const blockingScriptUrls=MetricArtifact.getScriptUrls(dependencyGraph,node=>{
return(
node.endTime<=fcp&&node.hasRenderBlockingPriority()&&node.initiatorType!=='script');

});

return dependencyGraph.cloneWithRelationships(node=>{
if(node.endTime>fcp&&!node.isMainDocument())return false;

if(node.type===BaseNode.TYPES.CPU){
return node.isEvaluateScriptFor(blockingScriptUrls);
}


return node.hasRenderBlockingPriority()&&node.initiatorType!=='script';
});
}






getPessimisticGraph(dependencyGraph,traceOfTab){
const fcp=traceOfTab.timestamps.firstContentfulPaint;
const blockingScriptUrls=MetricArtifact.getScriptUrls(dependencyGraph,node=>{
return node.endTime<=fcp&&node.hasRenderBlockingPriority();
});

return dependencyGraph.cloneWithRelationships(node=>{
if(node.endTime>fcp&&!node.isMainDocument())return false;

if(node.type===BaseNode.TYPES.CPU){
return node.isEvaluateScriptFor(blockingScriptUrls);
}


return node.hasRenderBlockingPriority();
});
}}


module.exports=FirstContentfulPaint;

},{"../../../lib/dependency-graph/base-node":25,"./lantern-metric":13}],"./gather/computed/metrics/lantern-first-cpu-idle":[function(require,module,exports){





'use strict';

const BaseNode=require('../../../lib/dependency-graph/base-node');
const FirstCPUIdle=require('./first-cpu-idle');
const LanternInteractive=require('./lantern-interactive');

class LanternFirstCPUIdle extends LanternInteractive{
get name(){
return'LanternFirstCPUIdle';
}




get COEFFICIENTS(){
return{
intercept:0,
optimistic:1,
pessimistic:0};

}







getEstimateFromSimulation(simulation,extras){
const fmpTimeInMs=extras.optimistic?
extras.fmpResult.optimisticEstimate.timeInMs:
extras.fmpResult.pessimisticEstimate.timeInMs;

return{
timeInMs:LanternFirstCPUIdle.getFirstCPUIdleWindowStart(simulation.nodeTimings,fmpTimeInMs),
nodeTimings:simulation.nodeTimings};

}






static getFirstCPUIdleWindowStart(nodeTimings,fmpTimeInMs,longTaskLength=50){

const longTasks=[];
for(const[node,timing]of nodeTimings.entries()){
if(node.type!==BaseNode.TYPES.CPU)continue;
if(timing.duration<longTaskLength)continue;
longTasks.push({start:timing.startTime,end:timing.endTime});
}

return FirstCPUIdle.findQuietWindow(fmpTimeInMs,Infinity,longTasks);
}}


module.exports=LanternFirstCPUIdle;

},{"../../../lib/dependency-graph/base-node":25,"./first-cpu-idle":"./gather/computed/metrics/first-cpu-idle","./lantern-interactive":"./gather/computed/metrics/lantern-interactive"}],"./gather/computed/metrics/lantern-first-meaningful-paint":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./lantern-metric');
const BaseNode=require('../../../lib/dependency-graph/base-node');
const LHError=require('../../../lib/lh-error');



class FirstMeaningfulPaint extends MetricArtifact{
get name(){
return'LanternFirstMeaningfulPaint';
}




get COEFFICIENTS(){
return{
intercept:0,
optimistic:0.5,
pessimistic:0.5};

}






getOptimisticGraph(dependencyGraph,traceOfTab){
const fmp=traceOfTab.timestamps.firstMeaningfulPaint;
if(!fmp){
throw new LHError(LHError.errors.NO_FMP);
}

const blockingScriptUrls=MetricArtifact.getScriptUrls(dependencyGraph,node=>{
return(
node.endTime<=fmp&&node.hasRenderBlockingPriority()&&node.initiatorType!=='script');

});

return dependencyGraph.cloneWithRelationships(node=>{
if(node.endTime>fmp&&!node.isMainDocument())return false;

if(node.type===BaseNode.TYPES.CPU){
return node.isEvaluateScriptFor(blockingScriptUrls);
}


return node.hasRenderBlockingPriority()&&node.initiatorType!=='script';
});
}






getPessimisticGraph(dependencyGraph,traceOfTab){
const fmp=traceOfTab.timestamps.firstMeaningfulPaint;
if(!fmp){
throw new LHError(LHError.errors.NO_FMP);
}

const requiredScriptUrls=MetricArtifact.getScriptUrls(dependencyGraph,node=>{
return node.endTime<=fmp&&node.hasRenderBlockingPriority();
});

return dependencyGraph.cloneWithRelationships(node=>{
if(node.endTime>fmp&&!node.isMainDocument())return false;


if(node.type===BaseNode.TYPES.CPU){
return node.didPerformLayout()||node.isEvaluateScriptFor(requiredScriptUrls);
}


return node.hasRenderBlockingPriority();
});
}






async compute_(data,artifacts){
const fcpResult=await artifacts.requestLanternFirstContentfulPaint(data);
const metricResult=await this.computeMetricWithGraphs(data,artifacts);
metricResult.timing=Math.max(metricResult.timing,fcpResult.timing);
return metricResult;
}}


module.exports=FirstMeaningfulPaint;

},{"../../../lib/dependency-graph/base-node":25,"../../../lib/lh-error":85,"./lantern-metric":13}],"./gather/computed/metrics/lantern-interactive":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./lantern-metric');
const BaseNode=require('../../../lib/dependency-graph/base-node');
const NetworkRequest=require('../../../lib/network-request');




const CRITICAL_LONG_TASK_THRESHOLD=20;

class Interactive extends MetricArtifact{
get name(){
return'LanternInteractive';
}




get COEFFICIENTS(){
return{
intercept:0,
optimistic:0.5,
pessimistic:0.5};

}





getOptimisticGraph(dependencyGraph){

const minimumCpuTaskDuration=CRITICAL_LONG_TASK_THRESHOLD*1000;

return dependencyGraph.cloneWithRelationships(node=>{

if(node.type===BaseNode.TYPES.CPU){
return node.event.dur>minimumCpuTaskDuration;
}


const isImage=node.record.resourceType===NetworkRequest.TYPES.Image;
const isScript=node.record.resourceType===NetworkRequest.TYPES.Script;
return(
!isImage&&(
isScript||
node.record.priority==='High'||
node.record.priority==='VeryHigh'));

});
}





getPessimisticGraph(dependencyGraph){
return dependencyGraph;
}






getEstimateFromSimulation(simulationResult,extras){
const lastTaskAt=Interactive.getLastLongTaskEndTime(simulationResult.nodeTimings);
const minimumTime=extras.optimistic?
extras.fmpResult.optimisticEstimate.timeInMs:
extras.fmpResult.pessimisticEstimate.timeInMs;
return{
timeInMs:Math.max(minimumTime,lastTaskAt),
nodeTimings:simulationResult.nodeTimings};

}






async compute_(data,artifacts){
const fmpResult=await artifacts.requestLanternFirstMeaningfulPaint(data);
const metricResult=await this.computeMetricWithGraphs(data,artifacts,{fmpResult});
metricResult.timing=Math.max(metricResult.timing,fmpResult.timing);
return metricResult;
}





static getLastLongTaskEndTime(nodeTimings,duration=50){

return Array.from(nodeTimings.entries()).
filter(([node,timing])=>{
if(node.type!==BaseNode.TYPES.CPU)return false;
return timing.duration>duration;
}).
map(([_,timing])=>timing.endTime).
reduce((max,x)=>Math.max(max||0,x||0),0);
}}


module.exports=Interactive;

},{"../../../lib/dependency-graph/base-node":25,"../../../lib/network-request":88,"./lantern-metric":13}],"./gather/computed/metrics/lantern-speed-index":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./lantern-metric');
const BaseNode=require('../../../lib/dependency-graph/base-node');



class SpeedIndex extends MetricArtifact{
get name(){
return'LanternSpeedIndex';
}




get COEFFICIENTS(){
return{



intercept:-250,
optimistic:1.4,
pessimistic:0.65};

}





getOptimisticGraph(dependencyGraph){
return dependencyGraph;
}





getPessimisticGraph(dependencyGraph){
return dependencyGraph;
}






getEstimateFromSimulation(simulationResult,extras){
const fcpTimeInMs=extras.fcpResult.pessimisticEstimate.timeInMs;
const estimate=extras.optimistic?
extras.speedline.speedIndex:
SpeedIndex.computeLayoutBasedSpeedIndex(simulationResult.nodeTimings,fcpTimeInMs);
return{
timeInMs:estimate,
nodeTimings:simulationResult.nodeTimings};

}






async compute_(data,artifacts){
const speedline=await artifacts.requestSpeedline(data.trace);
const fcpResult=await artifacts.requestLanternFirstContentfulPaint(data);
const metricResult=await this.computeMetricWithGraphs(data,artifacts,{
speedline,
fcpResult});

metricResult.timing=Math.max(metricResult.timing,fcpResult.timing);
return metricResult;
}
















static computeLayoutBasedSpeedIndex(nodeTimings,fcpTimeInMs){

const layoutWeights=[];
for(const[node,timing]of nodeTimings.entries()){
if(node.type!==BaseNode.TYPES.CPU)continue;

if(node.childEvents.some(x=>x.name==='Layout')){
const timingWeight=Math.max(Math.log2(timing.endTime-timing.startTime),0);
layoutWeights.push({time:timing.endTime,weight:timingWeight});
}
}

if(!layoutWeights.length){
return fcpTimeInMs;
}

const totalWeightedTime=layoutWeights.
map(evt=>evt.weight*Math.max(evt.time,fcpTimeInMs)).
reduce((a,b)=>a+b,0);
const totalWeight=layoutWeights.map(evt=>evt.weight).reduce((a,b)=>a+b,0);
return totalWeightedTime/totalWeight;
}}


module.exports=SpeedIndex;

},{"../../../lib/dependency-graph/base-node":25,"./lantern-metric":13}],"./gather/computed/metrics/speed-index":[function(require,module,exports){





'use strict';

const MetricArtifact=require('./metric');

class SpeedIndex extends MetricArtifact{
get name(){
return'SpeedIndex';
}






async computeObservedMetric(data,artifacts){
const speedline=await artifacts.requestSpeedline(data.trace);
const timing=Math.round(speedline.speedIndex);
const timestamp=(timing+speedline.beginning)*1000;
return Promise.resolve({timing,timestamp});
}}


module.exports=SpeedIndex;

},{"./metric":14}],"./gather/computed/network-analysis":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const NetworkAnalyzer=require('../../lib/dependency-graph/simulator/network-analyzer');

class NetworkAnalysis extends ComputedArtifact{
get name(){
return'NetworkAnalysis';
}





static computeRTTAndServerResponseTime(records){


const rttByOrigin=new Map();
for(const[origin,summary]of NetworkAnalyzer.estimateRTTByOrigin(records).entries()){
rttByOrigin.set(origin,summary.min);
}



const minimumRtt=Math.min(...Array.from(rttByOrigin.values()));

const responseTimeSummaries=NetworkAnalyzer.estimateServerResponseTimeByOrigin(records,{
rttByOrigin});



const additionalRttByOrigin=new Map();

const serverResponseTimeByOrigin=new Map();
for(const[origin,summary]of responseTimeSummaries.entries()){


const rttForOrigin=rttByOrigin.get(origin);
additionalRttByOrigin.set(origin,rttForOrigin-minimumRtt);
serverResponseTimeByOrigin.set(origin,summary.median);
}

return{rtt:minimumRtt,additionalRttByOrigin,serverResponseTimeByOrigin,throughput:0};
}






async compute_(devtoolsLog,computedArtifacts){
const records=await computedArtifacts.requestNetworkRecords(devtoolsLog);
const throughput=await computedArtifacts.requestNetworkThroughput(devtoolsLog);
const rttAndServerResponseTime=NetworkAnalysis.computeRTTAndServerResponseTime(records);
rttAndServerResponseTime.throughput=throughput*8;
return rttAndServerResponseTime;
}}


module.exports=NetworkAnalysis;

},{"../../lib/dependency-graph/simulator/network-analyzer":30,"./computed-artifact":11}],"./gather/computed/network-records":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const NetworkRecorder=require('../../lib/network-recorder');

class NetworkRecords extends ComputedArtifact{
get name(){
return'NetworkRecords';
}





async compute_(devtoolsLog){
return NetworkRecorder.recordsFromLogs(devtoolsLog);
}}


module.exports=NetworkRecords;

},{"../../lib/network-recorder":87,"./computed-artifact":11}],"./gather/computed/network-throughput":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');

class NetworkThroughput extends ComputedArtifact{
get name(){
return'NetworkThroughput';
}









static getThroughput(networkRecords){
let totalBytes=0;
const timeBoundaries=networkRecords.reduce((boundaries,record)=>{
const scheme=record.parsedURL&&record.parsedURL.scheme;
if(scheme==='data'||record.failed||!record.finished||
record.statusCode>300||!record.transferSize){
return boundaries;
}

totalBytes+=record.transferSize;
boundaries.push({time:record.responseReceivedTime,isStart:true});
boundaries.push({time:record.endTime,isStart:false});
return boundaries;
},[]).sort((a,b)=>a.time-b.time);

if(!timeBoundaries.length){
return Infinity;
}

let inflight=0;
let currentStart=0;
let totalDuration=0;
timeBoundaries.forEach(boundary=>{
if(boundary.isStart){
if(inflight===0){
currentStart=boundary.time;
}
inflight++;
}else{
inflight--;
if(inflight===0){
totalDuration+=boundary.time-currentStart;
}
}
});

return totalBytes/totalDuration;
}






compute_(devtoolsLog,computedArtifacts){

return computedArtifacts.requestNetworkRecords(devtoolsLog).
then(NetworkThroughput.getThroughput);
}}


module.exports=NetworkThroughput;

},{"./computed-artifact":11}],"./gather/computed/page-dependency-graph":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const NetworkNode=require('../../lib/dependency-graph/network-node');
const CPUNode=require('../../lib/dependency-graph/cpu-node');
const NetworkAnalyzer=require('../../lib/dependency-graph/simulator/network-analyzer');
const TracingProcessor=require('../../lib/traces/tracing-processor');
const NetworkRequest=require('../../lib/network-request');




const MINIMUM_TASK_DURATION_OF_INTEREST=10;


const IGNORED_MIME_TYPES_REGEX=/^video/;

class PageDependencyGraphArtifact extends ComputedArtifact{
get name(){
return'PageDependencyGraph';
}





static getNetworkInitiators(record){
if(!record.initiator)return[];
if(record.initiator.url)return[record.initiator.url];
if(record.initiator.type==='script'&&record.initiator.stack){
const frames=record.initiator.stack.callFrames;
return Array.from(new Set(frames.map(frame=>frame.url))).filter(Boolean);
}

return[];
}





static getNetworkNodeOutput(networkRecords){

const nodes=[];
const idToNodeMap=new Map();
const urlToNodeMap=new Map();

networkRecords.forEach(record=>{
if(IGNORED_MIME_TYPES_REGEX.test(record.mimeType))return;





while(idToNodeMap.has(record.requestId)){
record.requestId+=':duplicate';
}

const node=new NetworkNode(record);
nodes.push(node);

const list=urlToNodeMap.get(record.url)||[];
list.push(node);

idToNodeMap.set(record.requestId,node);
urlToNodeMap.set(record.url,list);
});

return{nodes,idToNodeMap,urlToNodeMap};
}





static getCPUNodes(traceOfTab){

const nodes=[];
let i=0;

TracingProcessor.assertHasToplevelEvents(traceOfTab.mainThreadEvents);

const minimumEvtDur=MINIMUM_TASK_DURATION_OF_INTEREST*1000;
while(i<traceOfTab.mainThreadEvents.length){
const evt=traceOfTab.mainThreadEvents[i];


if(
!TracingProcessor.isScheduleableTask(evt)||
!evt.dur||
evt.dur<minimumEvtDur)
{
i++;
continue;
}



const children=[];
i++;
for(
const endTime=evt.ts+evt.dur;
i<traceOfTab.mainThreadEvents.length&&traceOfTab.mainThreadEvents[i].ts<endTime;
i++)
{
children.push(traceOfTab.mainThreadEvents[i]);
}

nodes.push(new CPUNode(evt,children));
}

return nodes;
}





static linkNetworkNodes(rootNode,networkNodeOutput){
networkNodeOutput.nodes.forEach(node=>{
const initiators=PageDependencyGraphArtifact.getNetworkInitiators(node.record);
if(initiators.length){
initiators.forEach(initiator=>{
const parentCandidates=networkNodeOutput.urlToNodeMap.get(initiator)||[rootNode];

const parent=parentCandidates.length===1?parentCandidates[0]:rootNode;
node.addDependency(parent);
});
}else if(node!==rootNode){
rootNode.addDependent(node);
}

const redirects=Array.from(node.record.redirects||[]);
redirects.push(node.record);

for(let i=1;i<redirects.length;i++){
const redirectNode=networkNodeOutput.idToNodeMap.get(redirects[i-1].requestId);
const actualNode=networkNodeOutput.idToNodeMap.get(redirects[i].requestId);
if(actualNode&&redirectNode){
actualNode.addDependency(redirectNode);
}
}
});
}






static linkCPUNodes(rootNode,networkNodeOutput,cpuNodes){

function addDependentNetworkRequest(cpuNode,reqId){
const networkNode=networkNodeOutput.idToNodeMap.get(reqId);
if(!networkNode||

networkNode.record.resourceType!==NetworkRequest.TYPES.XHR||


networkNode.startTime<=cpuNode.startTime)return;
cpuNode.addDependent(networkNode);
}


function addDependencyOnUrl(cpuNode,url){
if(!url)return;


const minimumAllowableTimeSinceNetworkNodeEnd=-100*1000;
const candidates=networkNodeOutput.urlToNodeMap.get(url)||[];

let minCandidate=null;
let minDistance=Infinity;

for(const candidate of candidates){


if(cpuNode.startTime<=candidate.startTime)return;

const distance=cpuNode.startTime-candidate.endTime;
if(distance>=minimumAllowableTimeSinceNetworkNodeEnd&&distance<minDistance){
minCandidate=candidate;
minDistance=distance;
}
}

if(!minCandidate)return;
cpuNode.addDependency(minCandidate);
}


const timers=new Map();
for(const node of cpuNodes){
for(const evt of node.childEvents){
if(!evt.args.data)continue;

const argsUrl=evt.args.data.url;
const stackTraceUrls=(evt.args.data.stackTrace||[]).map(l=>l.url).filter(Boolean);

switch(evt.name){
case'TimerInstall':

timers.set(evt.args.data.timerId,node);
stackTraceUrls.forEach(url=>addDependencyOnUrl(node,url));
break;
case'TimerFire':{

const installer=timers.get(evt.args.data.timerId);
if(!installer)break;
installer.addDependent(node);
break;
}

case'InvalidateLayout':
case'ScheduleStyleRecalculation':
stackTraceUrls.forEach(url=>addDependencyOnUrl(node,url));
break;

case'EvaluateScript':

addDependencyOnUrl(node,argsUrl);
stackTraceUrls.forEach(url=>addDependencyOnUrl(node,url));
break;

case'XHRReadyStateChange':


if(evt.args.data.readyState!==4)break;


addDependencyOnUrl(node,argsUrl);
stackTraceUrls.forEach(url=>addDependencyOnUrl(node,url));
break;

case'FunctionCall':
case'v8.compile':

addDependencyOnUrl(node,argsUrl);
break;

case'ParseAuthorStyleSheet':

addDependencyOnUrl(node,evt.args.data.styleSheetUrl);
break;

case'ResourceSendRequest':

addDependentNetworkRequest(node,evt.args.data.requestId);
stackTraceUrls.forEach(url=>addDependencyOnUrl(node,url));
break;}

}

if(node.getNumberOfDependencies()===0){
node.addDependency(rootNode);
}
}
}






static createGraph(traceOfTab,networkRecords){
const networkNodeOutput=PageDependencyGraphArtifact.getNetworkNodeOutput(networkRecords);
const cpuNodes=PageDependencyGraphArtifact.getCPUNodes(traceOfTab);

const rootRequest=networkRecords.reduce((min,r)=>min.startTime<r.startTime?min:r);
const rootNode=networkNodeOutput.idToNodeMap.get(rootRequest.requestId);
const mainDocumentRequest=NetworkAnalyzer.findMainDocument(networkRecords);
const mainDocumentNode=networkNodeOutput.idToNodeMap.get(mainDocumentRequest.requestId);

if(!rootNode||!mainDocumentNode){

throw new Error(`${rootNode?'mainDocument':'root'}Node not found.`);
}

PageDependencyGraphArtifact.linkNetworkNodes(rootNode,networkNodeOutput);
PageDependencyGraphArtifact.linkCPUNodes(rootNode,networkNodeOutput,cpuNodes);
mainDocumentNode.setIsMainDocument(true);

if(NetworkNode.hasCycle(rootNode)){
throw new Error('Invalid dependency graph created, cycle detected');
}

return rootNode;
}





static printGraph(rootNode,widthInCharacters=100){

function padRight(str,target,padChar=' '){
return str+padChar.repeat(Math.max(target-str.length,0));
}


const nodes=[];
rootNode.traverse(node=>nodes.push(node));
nodes.sort((a,b)=>a.startTime-b.startTime);

const min=nodes[0].startTime;
const max=nodes.reduce((max,node)=>Math.max(max,node.endTime),0);

const totalTime=max-min;
const timePerCharacter=totalTime/widthInCharacters;
nodes.forEach(node=>{
const offset=Math.round((node.startTime-min)/timePerCharacter);
const length=Math.ceil((node.endTime-node.startTime)/timePerCharacter);
const bar=padRight('',offset)+padRight('',length,'=');


const displayName=node.record?node.record.url:node.type;

console.log(padRight(bar,widthInCharacters),`| ${displayName.slice(0,30)}`);
});
}






async compute_(data,artifacts){
const trace=data.trace;
const devtoolsLog=data.devtoolsLog;
const[traceOfTab,networkRecords]=await Promise.all([
artifacts.requestTraceOfTab(trace),
artifacts.requestNetworkRecords(devtoolsLog)]);


return PageDependencyGraphArtifact.createGraph(traceOfTab,networkRecords);
}}


module.exports=PageDependencyGraphArtifact;








},{"../../lib/dependency-graph/cpu-node":26,"../../lib/dependency-graph/network-node":27,"../../lib/dependency-graph/simulator/network-analyzer":30,"../../lib/network-request":88,"../../lib/traces/tracing-processor":95,"./computed-artifact":11}],"./gather/computed/pushed-requests":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');

class PushedRequests extends ComputedArtifact{
get name(){
return'PushedRequests';
}







compute_(devtoolsLog,artifacts){
return artifacts.requestNetworkRecords(devtoolsLog).then(records=>{
const pushedRecords=records.filter(r=>r.timing&&!!r.timing.pushStart);
return pushedRecords;
});
}}


module.exports=PushedRequests;

},{"./computed-artifact":11}],"./gather/computed/screenshots":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');

const SCREENSHOT_TRACE_NAME='Screenshot';

class ScreenshotFilmstrip extends ComputedArtifact{
get name(){
return'Screenshots';
}





async compute_(trace){
return trace.traceEvents.
filter(evt=>evt.name===SCREENSHOT_TRACE_NAME).
map(evt=>{
return{
timestamp:evt.ts/1000,
datauri:`data:image/jpeg;base64,${evt.args.snapshot}`};

});
}}


module.exports=ScreenshotFilmstrip;

},{"./computed-artifact":11}],"./gather/computed/speedline":[function(require,module,exports){





'use strict';

const ComputedArtifact=require('./computed-artifact');
const speedline=require('speedline-core');
const LHError=require('../../lib/lh-error');

class Speedline extends ComputedArtifact{
get name(){
return'Speedline';
}






compute_(trace,computedArtifacts){


return computedArtifacts.requestTraceOfTab(trace).then(traceOfTab=>{


const traceEvents=trace.traceEvents.slice();


const navStart=traceOfTab.timestamps.navigationStart;
return speedline(traceEvents,{
timeOrigin:navStart,
fastMode:true,
include:'speedIndex'});

}).catch(err=>{
if(/No screenshots found in trace/.test(err.message)){
throw new LHError(LHError.errors.NO_SCREENSHOTS);
}

throw err;
}).then(speedline=>{
if(speedline.frames.length===0){
throw new LHError(LHError.errors.NO_SPEEDLINE_FRAMES);
}

if(speedline.speedIndex===0){
throw new LHError(LHError.errors.SPEEDINDEX_OF_ZERO);
}

return speedline;
});
}}


module.exports=Speedline;

},{"../../lib/lh-error":85,"./computed-artifact":11,"speedline-core":186}],"./gather/computed/trace-of-tab":[function(require,module,exports){





'use strict';












const ComputedArtifact=require('./computed-artifact');
const log=require('lighthouse-logger');
const TracingProcessor=require('../../lib/traces/tracing-processor');
const LHError=require('../../lib/lh-error');
const Sentry=require('../../lib/sentry');

const ACCEPTABLE_NAVIGATION_URL_REGEX=/^(chrome|https?):/;

class TraceOfTab extends ComputedArtifact{
get name(){
return'TraceOfTab';
}






static isNavigationStartOfInterest(event){
return event.name==='navigationStart'&&(
!event.args.data||!event.args.data.documentLoaderURL||
ACCEPTABLE_NAVIGATION_URL_REGEX.test(event.args.data.documentLoaderURL));
}





static filteredStableSort(traceEvents,filter){

const indices=[];
for(let srcIndex=0;srcIndex<traceEvents.length;srcIndex++){
if(filter(traceEvents[srcIndex])){
indices.push(srcIndex);
}
}


indices.sort((indexA,indexB)=>{
const result=traceEvents[indexA].ts-traceEvents[indexB].ts;
return result?result:indexA-indexB;
});


const sorted=[];
for(let i=0;i<indices.length;i++){
sorted.push(traceEvents[indices[i]]);
}

return sorted;
}








async compute_(trace){


const keyEvents=TraceOfTab.filteredStableSort(trace.traceEvents,e=>{
return e.cat.includes('blink.user_timing')||
e.cat.includes('loading')||
e.cat.includes('devtools.timeline')||
e.cat==='__metadata';
});


const{startedInPageEvt,frameId}=TracingProcessor.findTracingStartedEvt(keyEvents);


const frameEvents=keyEvents.filter(e=>e.args.frame===frameId);


const navigationStart=frameEvents.filter(TraceOfTab.isNavigationStartOfInterest).pop();
if(!navigationStart)throw new LHError(LHError.errors.NO_NAVSTART);


const firstPaint=frameEvents.find(e=>e.name==='firstPaint'&&e.ts>navigationStart.ts);


const firstContentfulPaint=frameEvents.find(
e=>e.name==='firstContentfulPaint'&&e.ts>navigationStart.ts);

if(!firstContentfulPaint)throw new LHError(LHError.errors.NO_FCP);


let firstMeaningfulPaint=frameEvents.find(
e=>e.name==='firstMeaningfulPaint'&&e.ts>navigationStart.ts);

let fmpFellBack=false;





if(!firstMeaningfulPaint){

Sentry.captureMessage('No firstMeaningfulPaint found, using fallback',{level:'warning'});

const fmpCand='firstMeaningfulPaintCandidate';
fmpFellBack=true;
log.verbose('trace-of-tab',`No firstMeaningfulPaint found, falling back to last ${fmpCand}`);
const lastCandidate=frameEvents.filter(e=>e.name===fmpCand).pop();
if(!lastCandidate){
log.verbose('trace-of-tab','No `firstMeaningfulPaintCandidate` events found in trace');
}
firstMeaningfulPaint=lastCandidate;
}

const load=frameEvents.find(e=>e.name==='loadEventEnd'&&e.ts>navigationStart.ts);
const domContentLoaded=frameEvents.find(
e=>e.name==='domContentLoadedEventEnd'&&e.ts>navigationStart.ts);




const processEvents=TraceOfTab.
filteredStableSort(trace.traceEvents,e=>e.pid===startedInPageEvt.pid);

const mainThreadEvents=processEvents.
filter(e=>e.tid===startedInPageEvt.tid);


const traceEnd=trace.traceEvents.reduce((max,evt)=>{
return max.ts>evt.ts?max:evt;
});
const fakeEndOfTraceEvt={ts:traceEnd.ts+(traceEnd.dur||0)};


const getTimestamp=event=>event&&event.ts;

const timestamps={
navigationStart:navigationStart.ts,
firstPaint:getTimestamp(firstPaint),
firstContentfulPaint:firstContentfulPaint.ts,
firstMeaningfulPaint:getTimestamp(firstMeaningfulPaint),
traceEnd:fakeEndOfTraceEvt.ts,
load:getTimestamp(load),
domContentLoaded:getTimestamp(domContentLoaded)};




const getTiming=ts=>(ts-navigationStart.ts)/1000;

const maybeGetTiming=ts=>ts===undefined?undefined:getTiming(ts);

const timings={
navigationStart:0,
firstPaint:maybeGetTiming(timestamps.firstPaint),
firstContentfulPaint:getTiming(timestamps.firstContentfulPaint),
firstMeaningfulPaint:maybeGetTiming(timestamps.firstMeaningfulPaint),
traceEnd:getTiming(timestamps.traceEnd),
load:maybeGetTiming(timestamps.load),
domContentLoaded:maybeGetTiming(timestamps.domContentLoaded)};


return{
timings,
timestamps,
processEvents,
mainThreadEvents,
startedInPageEvt,
navigationStartEvt:navigationStart,
firstPaintEvt:firstPaint,
firstContentfulPaintEvt:firstContentfulPaint,
firstMeaningfulPaintEvt:firstMeaningfulPaint,
loadEvt:load,
domContentLoadedEvt:domContentLoaded,
fmpFellBack};

}}


module.exports=TraceOfTab;

},{"../../lib/lh-error":85,"../../lib/sentry":90,"../../lib/traces/tracing-processor":95,"./computed-artifact":11,"lighthouse-logger":147}],1:[function(require,module,exports){





'use strict';






const Audit=require('../audit');

class AxeAudit extends Audit{





static audit(artifacts){



const notApplicables=artifacts.Accessibility.notApplicable||[];
const isNotApplicable=notApplicables.find(result=>result.id===this.meta.id);
if(isNotApplicable){
return{
rawValue:true,
notApplicable:true};

}

const violations=artifacts.Accessibility.violations||[];
const rule=violations.find(result=>result.id===this.meta.id);
const impact=rule&&rule.impact;
const tags=rule&&rule.tags;


let items=[];
if(rule&&rule.nodes){
items=rule.nodes.map(node=>({
node:{
type:'node',
selector:Array.isArray(node.target)?node.target.join(' '):'',
path:node.path,
snippet:node.html||node.snippet,
explanation:node.failureSummary}}));


}

const headings=[
{key:'node',itemType:'node',text:'Failing Elements'}];


return{
rawValue:typeof rule==='undefined',
extendedInfo:{
value:rule},

details:{...Audit.makeTableDetails(headings,items),impact,tags}};

}}


module.exports=AxeAudit;

},{"../audit":2}],2:[function(require,module,exports){





'use strict';

const statistics=require('../lib/statistics');
const Util=require('../report/html/renderer/util');

const DEFAULT_PASS='defaultPass';






const clampTo2Decimals=val=>Math.round(val*100)/100;

class Audit{



static get DEFAULT_PASS(){
return DEFAULT_PASS;
}




static get SCORING_MODES(){
return{
NUMERIC:'numeric',
BINARY:'binary',
MANUAL:'manual',
INFORMATIVE:'informative',
NOT_APPLICABLE:'not-applicable',
ERROR:'error'};

}




static get meta(){
throw new Error('Audit meta information must be overridden.');
}




static get defaultOptions(){
return{};
}









static audit(artifacts,context){
throw new Error('audit() method must be overriden');
}













static computeLogNormalScore(measuredValue,diminishingReturnsValue,medianValue){
const distribution=statistics.getLogNormalDistribution(
medianValue,
diminishingReturnsValue);


let score=distribution.computeComplementaryPercentile(measuredValue);
score=Math.min(1,score);
score=Math.max(0,score);
return clampTo2Decimals(score);
}






static generateErrorAuditResult(audit,errorMessage){
return Audit.generateAuditResult(audit,{
rawValue:null,
errorMessage});

}







static makeTableDetails(headings,results,summary){
if(results.length===0){
return{
type:'table',
headings:[],
items:[],
summary};

}

return{
type:'table',
headings:headings,
items:results,
summary};

}








static makeOpportunityDetails(headings,items,overallSavingsMs,overallSavingsBytes){
return{
type:'opportunity',
headings:items.length===0?[]:headings,
items,
overallSavingsMs,
overallSavingsBytes};

}






static _normalizeAuditScore(audit,result){

let score=result.score===undefined?Number(result.rawValue):result.score;

if(!Number.isFinite(score))throw new Error(`Invalid score: ${score}`);
if(score>1)throw new Error(`Audit score for ${audit.meta.id} is > 1`);
if(score<0)throw new Error(`Audit score for ${audit.meta.id} is < 0`);

score=clampTo2Decimals(score);

const scoreDisplayMode=audit.meta.scoreDisplayMode||Audit.SCORING_MODES.BINARY;

return{
score,
scoreDisplayMode};

}






static generateAuditResult(audit,result){
if(typeof result.rawValue==='undefined'){
throw new Error('generateAuditResult requires a rawValue');
}


let{score,scoreDisplayMode}=Audit._normalizeAuditScore(audit,result);


if(result.notApplicable){
scoreDisplayMode=Audit.SCORING_MODES.NOT_APPLICABLE;
result.rawValue=true;
}

if(result.errorMessage){
scoreDisplayMode=Audit.SCORING_MODES.ERROR;
}

let auditTitle=audit.meta.title;
if(audit.meta.failureTitle){
if(Number(score)<Util.PASS_THRESHOLD){
auditTitle=audit.meta.failureTitle;
}
}

if(scoreDisplayMode!==Audit.SCORING_MODES.BINARY&&
scoreDisplayMode!==Audit.SCORING_MODES.NUMERIC){
score=null;
}

return{
id:audit.meta.id,
title:auditTitle,
description:audit.meta.description,

score,
scoreDisplayMode,
rawValue:result.rawValue,

displayValue:result.displayValue,
explanation:result.explanation,
errorMessage:result.errorMessage,
warnings:result.warnings,

details:result.details};

}}


module.exports=Audit;

},{"../lib/statistics":91,"../report/html/renderer/util":97}],3:[function(require,module,exports){
(function(__filename){





'use strict';

const Audit=require('../audit');
const linearInterpolation=require('../../lib/statistics').linearInterpolation;
const Interactive=require('../../gather/computed/metrics/lantern-interactive');
const i18n=require('../../lib/i18n/i18n.js');

const str_=i18n.createMessageInstanceIdFn(__filename,{});




const KB_IN_BYTES=1024;

const WASTED_MS_FOR_AVERAGE=300;
const WASTED_MS_FOR_POOR=750;
const WASTED_MS_FOR_SCORE_OF_ZERO=5000;














class UnusedBytes extends Audit{






static scoreForWastedMs(wastedMs){
if(wastedMs===0){
return 1;
}else if(wastedMs<WASTED_MS_FOR_AVERAGE){
return linearInterpolation(0,1,WASTED_MS_FOR_AVERAGE,0.75,wastedMs);
}else if(wastedMs<WASTED_MS_FOR_POOR){
return linearInterpolation(WASTED_MS_FOR_AVERAGE,0.75,WASTED_MS_FOR_POOR,0.5,wastedMs);
}else{
return Math.max(
0,
linearInterpolation(WASTED_MS_FOR_POOR,0.5,WASTED_MS_FOR_SCORE_OF_ZERO,0,wastedMs));

}
}






static bytesToMs(bytes,networkThroughput){
const milliseconds=bytes/networkThroughput*1000;
return milliseconds;
}











static estimateTransferSize(networkRecord,totalBytes,resourceType,compressionRatio=0.5){
if(!networkRecord){



return Math.round(totalBytes*compressionRatio);
}else if(networkRecord.resourceType===resourceType){

return networkRecord.transferSize||0;
}else{


const transferSize=networkRecord.transferSize||0;
const resourceSize=networkRecord.resourceSize;
const compressionRatio=resourceSize!==undefined?transferSize/resourceSize:1;
return Math.round(totalBytes*compressionRatio);
}
}






static audit(artifacts,context){
const trace=artifacts.traces[Audit.DEFAULT_PASS];
const devtoolsLog=artifacts.devtoolsLogs[Audit.DEFAULT_PASS];
const settings=context&&context.settings||{};
const simulatorOptions={
devtoolsLog,
settings};


return artifacts.
requestNetworkRecords(devtoolsLog).
then(networkRecords=>
Promise.all([
this.audit_(artifacts,networkRecords,context),
artifacts.requestPageDependencyGraph({trace,devtoolsLog}),
artifacts.requestLoadSimulator(simulatorOptions)])).


then(([result,graph,simulator])=>this.createAuditProduct(result,graph,simulator));
}













static computeWasteWithTTIGraph(results,graph,simulator,options){
options=Object.assign({includeLoad:true,label:this.meta.id},options);
const beforeLabel=`${options.label}-before`;
const afterLabel=`${options.label}-after`;

const simulationBeforeChanges=simulator.simulate(graph,{label:beforeLabel});

const resultsByUrl=new Map();
for(const result of results){
resultsByUrl.set(result.url,result);
}



const originalTransferSizes=new Map();
graph.traverse(node=>{
if(node.type!=='network')return;
const result=resultsByUrl.get(node.record.url);
if(!result)return;

const original=node.record.transferSize;
originalTransferSizes.set(node.record.requestId,original);

const wastedBytes=result.wastedBytes;
node.record.transferSize=Math.max(original-wastedBytes,0);
});

const simulationAfterChanges=simulator.simulate(graph,{label:afterLabel});


graph.traverse(node=>{
if(node.type!=='network')return;
const originalTransferSize=originalTransferSizes.get(node.record.requestId);
if(originalTransferSize===undefined)return;
node.record.transferSize=originalTransferSize;
});

const savingsOnOverallLoad=simulationBeforeChanges.timeInMs-simulationAfterChanges.timeInMs;
const savingsOnTTI=Interactive.getLastLongTaskEndTime(simulationBeforeChanges.nodeTimings)-
Interactive.getLastLongTaskEndTime(simulationAfterChanges.nodeTimings);

let savings=savingsOnTTI;
if(options.includeLoad)savings=Math.max(savings,savingsOnOverallLoad);


return Math.round(Math.max(savings,0)/10)*10;
}







static createAuditProduct(result,graph,simulator){
const results=result.items.sort((itemA,itemB)=>itemB.wastedBytes-itemA.wastedBytes);

const wastedBytes=results.reduce((sum,item)=>sum+item.wastedBytes,0);
const wastedKb=Math.round(wastedBytes/KB_IN_BYTES);
const wastedMs=this.computeWasteWithTTIGraph(results,graph,simulator);


let displayValue=result.displayValue||'';
if(typeof result.displayValue==='undefined'&&wastedBytes){
displayValue=str_(i18n.UIStrings.displayValueByteSavings,{wastedBytes});
}

const details=Audit.makeOpportunityDetails(result.headings,results,wastedMs,wastedBytes);

return{
explanation:result.explanation,
warnings:result.warnings,
displayValue,
rawValue:wastedMs,
score:UnusedBytes.scoreForWastedMs(wastedMs),
extendedInfo:{
value:{
wastedMs,
wastedKb,
results}},


details};

}









static audit_(artifacts,networkRecords,context){
throw new Error('audit_ unimplemented');
}}




module.exports=UnusedBytes;

}).call(this,"/../lighthouse-core/audits/byte-efficiency/byte-efficiency-audit.js");
},{"../../gather/computed/metrics/lantern-interactive":"./gather/computed/metrics/lantern-interactive","../../lib/i18n/i18n.js":36,"../../lib/statistics":91,"../audit":2}],4:[function(require,module,exports){





'use strict';






const Audit=require('../audit');

class ManualAudit extends Audit{



static get partialMeta(){
return{
scoreDisplayMode:Audit.SCORING_MODES.MANUAL,
requiredArtifacts:[]};

}




static audit(){
return{
rawValue:false};


}}


module.exports=ManualAudit;

},{"../audit":2}],5:[function(require,module,exports){





'use strict';





const Audit=require('./audit');

class MultiCheckAudit extends Audit{





static async audit(artifacts,context){
const multiProduct=await this.audit_(artifacts,context);
return this.createAuditProduct(multiProduct);
}





static createAuditProduct(result){

const detailsItem={
...result,
...result.manifestValues,
manifestValues:undefined,
warnings:undefined,
allChecks:undefined};


if(result.manifestValues&&result.manifestValues.allChecks){
result.manifestValues.allChecks.forEach(check=>{
detailsItem[check.id]=check.passing;
});
}

const details={items:[detailsItem]};


if(result.failures.length>0){
return{
rawValue:false,
explanation:`Failures: ${result.failures.join(',\n')}.`,
details};

}


return{
rawValue:true,
details,
warnings:result.warnings};

}








static audit_(artifacts,context){
throw new Error('audit_ unimplemented');
}}




module.exports=MultiCheckAudit;

},{"./audit":2}],6:[function(require,module,exports){





'use strict';

const Audit=require('./audit');

class ViolationAudit extends Audit{





static getViolationResults(artifacts,pattern){
const seen=new Set();
return artifacts.ChromeConsoleMessages.
map(message=>message.entry).
filter(entry=>entry.url&&entry.source==='violation'&&pattern.test(entry.text)).
map(entry=>({label:`line: ${entry.lineNumber}`,url:entry.url})).
filter(entry=>{


const key=`${entry.url}!${entry.label}`;
if(seen.has(key))return false;
seen.add(key);
return true;
});
}}


module.exports=ViolationAudit;

},{"./audit":2}],7:[function(require,module,exports){
(function(__dirname){





'use strict';

const defaultConfigPath='./default-config.js';
const defaultConfig=require('./default-config.js');
const fullConfig=require('./full-config.js');
const constants=require('./constants.js');
const i18n=require('./../lib/i18n/i18n.js');

const isDeepEqual=require('lodash.isequal');
const log=require('lighthouse-logger');
const path=require('path');
const Audit=require('../audits/audit.js');
const Runner=require('../runner.js');








function validatePasses(passes,audits){
if(!Array.isArray(passes)){
return;
}

const requiredGatherers=Config.getGatherersNeededByAudits(audits);


passes.forEach(pass=>{
pass.gatherers.forEach(gathererDefn=>{
const gatherer=gathererDefn.instance;
const isGatherRequiredByAudits=requiredGatherers.has(gatherer.name);
if(!isGatherRequiredByAudits){
const msg=`${gatherer.name} gatherer requested, however no audit requires it.`;
log.warn('config',msg);
}
});
});


const usedNames=new Set();
passes.forEach(pass=>{
const passName=pass.passName;
if(usedNames.has(passName)){
throw new Error(`Passes must have unique names (repeated passName: ${passName}.`);
}
usedNames.add(passName);
});
}






function validateCategories(categories,audits,groups){
if(!categories){
return;
}

Object.keys(categories).forEach(categoryId=>{
categories[categoryId].auditRefs.forEach((auditRef,index)=>{
if(!auditRef.id){
throw new Error(`missing an audit id at ${categoryId}[${index}]`);
}

const audit=audits&&audits.find(a=>a.implementation.meta.id===auditRef.id);
if(!audit){
throw new Error(`could not find ${auditRef.id} audit for category ${categoryId}`);
}

const auditImpl=audit.implementation;
const isManual=auditImpl.meta.scoreDisplayMode==='manual';
if(categoryId==='accessibility'&&!auditRef.group&&!isManual){
throw new Error(`${auditRef.id} accessibility audit does not have a group`);
}

if(auditRef.weight>0&&isManual){
throw new Error(`${auditRef.id} is manual but has a positive weight`);
}

if(auditRef.group&&(!groups||!groups[auditRef.group])){
throw new Error(`${auditRef.id} references unknown group ${auditRef.group}`);
}
});
});
}





function assertValidAudit(auditDefinition,auditPath){
const auditName=auditPath||
auditDefinition&&auditDefinition.meta&&auditDefinition.meta.id;

if(typeof auditDefinition.audit!=='function'||auditDefinition.audit===Audit.audit){
throw new Error(`${auditName} has no audit() method.`);
}

if(typeof auditDefinition.meta.id!=='string'){
throw new Error(`${auditName} has no meta.id property, or the property is not a string.`);
}

if(typeof auditDefinition.meta.title!=='string'){
throw new Error(
`${auditName} has no meta.title property, or the property is not a string.`);

}


if(typeof auditDefinition.meta.failureTitle!=='string'&&
auditDefinition.meta.scoreDisplayMode===Audit.SCORING_MODES.BINARY){
throw new Error(`${auditName} has no failureTitle and should.`);
}

if(typeof auditDefinition.meta.description!=='string'){
throw new Error(
`${auditName} has no meta.description property, or the property is not a string.`);

}else if(auditDefinition.meta.description===''){
throw new Error(
`${auditName} has an empty meta.description string. Please add a description for the UI.`);

}

if(!Array.isArray(auditDefinition.meta.requiredArtifacts)){
throw new Error(
`${auditName} has no meta.requiredArtifacts property, or the property is not an array.`);

}
}





function assertValidGatherer(gathererInstance,gathererName){
gathererName=gathererName||gathererInstance.name||'gatherer';

if(typeof gathererInstance.beforePass!=='function'){
throw new Error(`${gathererName} has no beforePass() method.`);
}

if(typeof gathererInstance.pass!=='function'){
throw new Error(`${gathererName} has no pass() method.`);
}

if(typeof gathererInstance.afterPass!=='function'){
throw new Error(`${gathererName} has no afterPass() method.`);
}
}







function cleanFlagsForSettings(flags={}){

const settings={};

for(const key of Object.keys(flags)){

if(typeof constants.defaultSettings[key]!=='undefined'){

const safekey=key;
settings[safekey]=flags[safekey];
}
}

return settings;
}








function _merge(base,extension,overwriteArrays=false){

if(typeof base==='undefined'||base===null){
return extension;
}else if(typeof extension==='undefined'){
return base;
}else if(Array.isArray(extension)){
if(overwriteArrays)return extension;
if(!Array.isArray(base))throw new TypeError(`Expected array but got ${typeof base}`);
const merged=base.slice();
extension.forEach(item=>{
if(!merged.some(candidate=>isDeepEqual(candidate,item)))merged.push(item);
});

return merged;
}else if(typeof extension==='object'){
if(typeof base!=='object')throw new TypeError(`Expected object but got ${typeof base}`);
if(Array.isArray(base))throw new TypeError('Expected object but got Array');
Object.keys(extension).forEach(key=>{
const localOverwriteArrays=overwriteArrays||
key==='settings'&&typeof base[key]==='object';
base[key]=_merge(base[key],extension[key],localOverwriteArrays);
});
return base;
}

return extension;
}






const merge=_merge;






function cloneArrayWithPluginSafety(array){
return array.map(item=>{
if(typeof item==='object'){

return Object.assign(
Object.create(
Object.getPrototypeOf(item)),

item);

}

return item;
});
}








function deepClone(json){
return JSON.parse(JSON.stringify(json));
}







function deepCloneConfigJson(json){
const cloned=deepClone(json);



if(Array.isArray(cloned.passes)&&Array.isArray(json.passes)){
for(let i=0;i<cloned.passes.length;i++){
const pass=cloned.passes[i];
pass.gatherers=cloneArrayWithPluginSafety(json.passes[i].gatherers||[]);
}
}

if(Array.isArray(json.audits)){
cloned.audits=cloneArrayWithPluginSafety(json.audits);
}

return cloned;
}









const mergeOptionsOfItems=function(items){

const mergedItems=[];

for(const item of items){
const existingItem=item.path&&mergedItems.find(candidate=>candidate.path===item.path);
if(!existingItem){
mergedItems.push(item);
continue;
}

existingItem.options=Object.assign({},existingItem.options,item.options);
}

return mergedItems;
};

class Config{






constructor(configJSON,flags){
let configPath=flags&&flags.configPath;

if(!configJSON){
configJSON=defaultConfig;
configPath=path.resolve(__dirname,defaultConfigPath);
}

if(configPath&&!path.isAbsolute(configPath)){
throw new Error('configPath must be an absolute path.');
}


configJSON=deepCloneConfigJson(configJSON);


if(configJSON.extends==='lighthouse:full'){
const explodedFullConfig=Config.extendConfigJSON(deepCloneConfigJson(defaultConfig),
deepCloneConfigJson(fullConfig));
configJSON=Config.extendConfigJSON(explodedFullConfig,configJSON);
}else if(configJSON.extends){
configJSON=Config.extendConfigJSON(deepCloneConfigJson(defaultConfig),configJSON);
}


const configDir=configPath?path.dirname(configPath):undefined;

const settings=Config.initSettings(configJSON.settings,flags);


const passesWithDefaults=Config.augmentPassesWithDefaults(configJSON.passes);
Config.adjustDefaultPassForThrottling(settings,passesWithDefaults);
const passes=Config.requireGatherers(passesWithDefaults,configDir);


this.settings=settings;

this.passes=passes;

this.audits=Config.requireAudits(configJSON.audits,configDir);

this.categories=configJSON.categories||null;

this.groups=configJSON.groups||null;

Config.filterConfigIfNeeded(this);

validatePasses(this.passes,this.audits);
validateCategories(this.categories,this.audits,this.groups);



const configJson=this;
}






getPrintString(){
const jsonConfig=deepClone(this);

if(jsonConfig.passes){
for(const pass of jsonConfig.passes){
for(const gathererDefn of pass.gatherers){
gathererDefn.implementation=undefined;

gathererDefn.instance=undefined;
if(Object.keys(gathererDefn.options).length===0){

gathererDefn.options=undefined;
}
}
}
}

if(jsonConfig.audits){
for(const auditDefn of jsonConfig.audits){

auditDefn.implementation=undefined;
if(Object.keys(auditDefn.options).length===0){

auditDefn.options=undefined;
}
}
}


i18n.replaceIcuMessageInstanceIds(jsonConfig,jsonConfig.settings.locale);

return JSON.stringify(jsonConfig,null,2);
}






static extendConfigJSON(baseJSON,extendJSON){
if(extendJSON.passes&&baseJSON.passes){
for(const pass of extendJSON.passes){

const passName=pass.passName||constants.defaultPassConfig.passName;
const basePass=baseJSON.passes.find(candidate=>candidate.passName===passName);

if(!basePass){
baseJSON.passes.push(pass);
}else{
merge(basePass,pass);
}
}

delete extendJSON.passes;
}

return merge(baseJSON,extendJSON);
}





static augmentPassesWithDefaults(passes){
if(!passes){
return null;
}

const{defaultPassConfig}=constants;
return passes.map(pass=>merge(deepClone(defaultPassConfig),pass));
}






static initSettings(settingsJson={},flags){



const locale=i18n.lookupLocale(flags&&flags.locale||settingsJson.locale);


const{defaultSettings}=constants;
const settingWithDefaults=merge(deepClone(defaultSettings),settingsJson,true);


const settingsWithFlags=merge(settingWithDefaults||{},cleanFlagsForSettings(flags),true);


settingsWithFlags.locale=locale;

return settingsWithFlags;
}






static expandAuditShorthand(audits){
if(!audits){
return null;
}

const newAudits=audits.map(audit=>{
if(typeof audit==='string'){

return{path:audit,options:{}};
}else if('implementation'in audit&&typeof audit.implementation.audit==='function'){

return audit;
}else if('path'in audit&&typeof audit.path==='string'){

return audit;
}else if('audit'in audit&&typeof audit.audit==='function'){

return{implementation:audit,options:{}};
}else{
throw new Error('Invalid Audit type '+JSON.stringify(audit));
}
});

return newAudits;
}












static expandGathererShorthand(gatherers){
const expanded=gatherers.map(gatherer=>{
if(typeof gatherer==='string'){

return{path:gatherer,options:{}};
}else if('implementation'in gatherer||'instance'in gatherer){

return gatherer;
}else if('path'in gatherer){

if(typeof gatherer.path!=='string'){
throw new Error('Invalid Gatherer type '+JSON.stringify(gatherer));
}
return gatherer;
}else if(typeof gatherer==='function'){

return{implementation:gatherer,options:{}};
}else if(gatherer&&typeof gatherer.beforePass==='function'){

return{instance:gatherer,options:{}};
}else{
throw new Error('Invalid Gatherer type '+JSON.stringify(gatherer));
}
});

return expanded;
}







static adjustDefaultPassForThrottling(settings,passes){
if(!passes||
settings.throttlingMethod!=='devtools'&&settings.throttlingMethod!=='provided'){
return;
}

const defaultPass=passes.find(pass=>pass.passName==='defaultPass');
if(!defaultPass)return;
const overrides=constants.nonSimulatedPassConfigOverrides;
defaultPass.pauseAfterLoadMs=
Math.max(overrides.pauseAfterLoadMs,defaultPass.pauseAfterLoadMs);
defaultPass.cpuQuietThresholdMs=
Math.max(overrides.cpuQuietThresholdMs,defaultPass.cpuQuietThresholdMs);
defaultPass.networkQuietThresholdMs=
Math.max(overrides.networkQuietThresholdMs,defaultPass.networkQuietThresholdMs);
}





static filterConfigIfNeeded(config){
const settings=config.settings;
if(!settings.onlyCategories&&!settings.onlyAudits&&!settings.skipAudits){
return;
}


const{categories,requestedAuditNames}=Config.filterCategoriesAndAudits(config.categories,
settings);


const audits=config.audits&&config.audits.filter(auditDefn=>
requestedAuditNames.has(auditDefn.implementation.meta.id));


const requiredGathererIds=Config.getGatherersNeededByAudits(audits);


const passes=Config.generatePassesNeededByGatherers(config.passes,requiredGathererIds);

config.categories=categories;
config.audits=audits;
config.passes=passes;
}







static filterCategoriesAndAudits(oldCategories,settings){
if(!oldCategories){
return{categories:null,requestedAuditNames:new Set()};
}

if(settings.onlyAudits&&settings.skipAudits){
throw new Error('Cannot set both skipAudits and onlyAudits');
}


const categories={};
const filterByIncludedCategory=!!settings.onlyCategories;
const filterByIncludedAudit=!!settings.onlyAudits;
const categoryIds=settings.onlyCategories||[];
const auditIds=settings.onlyAudits||[];
const skipAuditIds=settings.skipAudits||[];


categoryIds.forEach(categoryId=>{
if(!oldCategories[categoryId]){
log.warn('config',`unrecognized category in 'onlyCategories': ${categoryId}`);
}
});


const auditsToValidate=new Set(auditIds.concat(skipAuditIds));
for(const auditId of auditsToValidate){
const foundCategory=Object.keys(oldCategories).find(categoryId=>{
const auditRefs=oldCategories[categoryId].auditRefs;
return!!auditRefs.find(candidate=>candidate.id===auditId);
});

if(!foundCategory){
const parentKeyName=skipAuditIds.includes(auditId)?'skipAudits':'onlyAudits';
log.warn('config',`unrecognized audit in '${parentKeyName}': ${auditId}`);
}else if(auditIds.includes(auditId)&&categoryIds.includes(foundCategory)){
log.warn('config',`${auditId} in 'onlyAudits' is already included by `+
`${foundCategory} in 'onlyCategories'`);
}
}

const includedAudits=new Set(auditIds);
skipAuditIds.forEach(id=>includedAudits.delete(id));

Object.keys(oldCategories).forEach(categoryId=>{
const category=deepClone(oldCategories[categoryId]);

if(filterByIncludedCategory&&filterByIncludedAudit){

if(!categoryIds.includes(categoryId)){
category.auditRefs=category.auditRefs.filter(audit=>auditIds.includes(audit.id));
}
}else if(filterByIncludedCategory){

if(!categoryIds.includes(categoryId)){
return;
}
}else if(filterByIncludedAudit){
category.auditRefs=category.auditRefs.filter(audit=>auditIds.includes(audit.id));
}


category.auditRefs=category.auditRefs.filter(audit=>!skipAuditIds.includes(audit.id));

if(category.auditRefs.length){
categories[categoryId]=category;
category.auditRefs.forEach(audit=>includedAudits.add(audit.id));
}
});

return{categories,requestedAuditNames:includedAudits};
}





static getCategories(config){
const categories=config.categories;
if(!categories){
return[];
}

return Object.keys(categories).map(id=>{
const title=categories[id].title;
return{id,title};
});
}






static getGatherersNeededByAudits(audits){


if(!audits){
return new Set();
}

return audits.reduce((list,auditDefn)=>{
auditDefn.implementation.meta.requiredArtifacts.forEach(artifact=>list.add(artifact));
return list;
},new Set());
}







static generatePassesNeededByGatherers(passes,requiredGatherers){
if(!passes){
return null;
}

const auditsNeedTrace=requiredGatherers.has('traces');
const filteredPasses=passes.map(pass=>{

pass.gatherers=pass.gatherers.filter(gathererDefn=>{
const gatherer=gathererDefn.instance;
return requiredGatherers.has(gatherer.name);
});


if(pass.recordTrace&&!auditsNeedTrace){
const passName=pass.passName||'unknown pass';
log.warn('config',`Trace not requested by an audit, dropping trace in ${passName}`);
pass.recordTrace=false;
}

return pass;
}).filter(pass=>{

if(pass.recordTrace)return true;

if(pass.passName==='defaultPass')return true;
return pass.gatherers.length>0;
});
return filteredPasses;
}









static requireAudits(audits,configPath){
const expandedAudits=Config.expandAuditShorthand(audits);
if(!expandedAudits){
return null;
}

const coreList=Runner.getAuditList();
const auditDefns=expandedAudits.map(audit=>{
let implementation;
if('implementation'in audit){
implementation=audit.implementation;
}else{

const auditPathJs=`${audit.path}.js`;
const coreAudit=coreList.find(a=>a===auditPathJs);
let requirePath=`../audits/${audit.path}`;
if(!coreAudit){

requirePath=Runner.resolvePlugin(audit.path,configPath,'audit');
}
implementation=require(requirePath);
}

return{
implementation,
path:audit.path,
options:audit.options||{}};

});

const mergedAuditDefns=mergeOptionsOfItems(auditDefns);
mergedAuditDefns.forEach(audit=>assertValidAudit(audit.implementation,audit.path));
return mergedAuditDefns;
}








static requireGathererFromPath(path,options,coreAuditList,configPath){
const coreGatherer=coreAuditList.find(a=>a===`${path}.js`);

let requirePath=`../gather/gatherers/${path}`;
if(!coreGatherer){

requirePath=Runner.resolvePlugin(path,configPath,'gatherer');
}

const GathererClass=require(requirePath);

return{
instance:new GathererClass(),
implementation:GathererClass,
path,
options:options||{}};

}









static requireGatherers(passes,configPath){
if(!passes){
return null;
}

const coreList=Runner.getGathererList();
const fullPasses=passes.map(pass=>{
const gathererDefns=Config.expandGathererShorthand(pass.gatherers).map(gathererDefn=>{
if(gathererDefn.instance){
return{
instance:gathererDefn.instance,
implementation:gathererDefn.implementation,
path:gathererDefn.path,
options:gathererDefn.options||{}};

}else if(gathererDefn.implementation){
const GathererClass=gathererDefn.implementation;
return{
instance:new GathererClass(),
implementation:gathererDefn.implementation,
path:gathererDefn.path,
options:gathererDefn.options||{}};

}else if(gathererDefn.path){
const path=gathererDefn.path;
const options=gathererDefn.options;
return Config.requireGathererFromPath(path,options,coreList,configPath);
}else{
throw new Error('Invalid expanded Gatherer: '+JSON.stringify(gathererDefn));
}
});

const mergedDefns=mergeOptionsOfItems(gathererDefns);
mergedDefns.forEach(gatherer=>assertValidGatherer(gatherer.instance,gatherer.path));

return Object.assign(pass,{gatherers:mergedDefns});
});

return fullPasses;
}}


module.exports=Config;

}).call(this,"/../lighthouse-core/config");
},{"../audits/audit.js":2,"../runner.js":99,"./../lib/i18n/i18n.js":36,"./constants.js":8,"./default-config.js":9,"./full-config.js":10,"lighthouse-logger":147,"lodash.isequal":178,"path":124}],8:[function(require,module,exports){





'use strict';






const DEVTOOLS_RTT_ADJUSTMENT_FACTOR=3.75;
const DEVTOOLS_THROUGHPUT_ADJUSTMENT_FACTOR=0.9;

const throttling={
DEVTOOLS_RTT_ADJUSTMENT_FACTOR,
DEVTOOLS_THROUGHPUT_ADJUSTMENT_FACTOR,
mobile3G:{
rttMs:150,
throughputKbps:1.6*1024,
requestLatencyMs:150*DEVTOOLS_RTT_ADJUSTMENT_FACTOR,
downloadThroughputKbps:1.6*1024*DEVTOOLS_THROUGHPUT_ADJUSTMENT_FACTOR,
uploadThroughputKbps:750*DEVTOOLS_THROUGHPUT_ADJUSTMENT_FACTOR,
cpuSlowdownMultiplier:4}};




const defaultSettings={
output:'json',
maxWaitForLoad:45*1000,
throttlingMethod:'simulate',
throttling:throttling.mobile3G,
auditMode:false,
gatherMode:false,
disableStorageReset:false,
disableDeviceEmulation:false,
emulatedFormFactor:'mobile',



locale:'en-US',
blockedUrlPatterns:null,
additionalTraceCategories:null,
extraHeaders:null,
onlyAudits:null,
onlyCategories:null,
skipAudits:null};



const defaultPassConfig={
passName:'defaultPass',
recordTrace:false,
useThrottling:false,
pauseAfterLoadMs:0,
networkQuietThresholdMs:0,
cpuQuietThresholdMs:0,
blockedUrlPatterns:[],
blankPage:'about:blank',
blankDuration:300,
gatherers:[]};


const nonSimulatedPassConfigOverrides={
pauseAfterLoadMs:5250,
networkQuietThresholdMs:5250,
cpuQuietThresholdMs:5250};


module.exports={
throttling,
defaultSettings,
defaultPassConfig,
nonSimulatedPassConfigOverrides};


},{}],9:[function(require,module,exports){
(function(__filename){





'use strict';



const constants=require('./constants');
const i18n=require('../lib/i18n/i18n.js');

const UIStrings={

performanceCategoryTitle:'Performance',

metricGroupTitle:'Metrics',

loadOpportunitiesGroupTitle:'Opportunities',

loadOpportunitiesGroupDescription:'These optimizations can speed up your page load.',

firstPaintImprovementsGroupTitle:'First Paint Improvements',

firstPaintImprovementsGroupDescription:'The most critical aspect of performance is how quickly pixels are rendered onscreen. Key metrics: First Contentful Paint, First Meaningful Paint',

overallImprovementsGroupTitle:'Overall Improvements',

overallImprovementsGroupDescription:'Enhance the overall loading experience, so the page is responsive and ready to use as soon as possible. Key metrics: Time to Interactive, Speed Index',

diagnosticsGroupTitle:'Diagnostics',

diagnosticsGroupDescription:'More information about the performance of your application.'};


const str_=i18n.createMessageInstanceIdFn(__filename,UIStrings);


const defaultConfig={
settings:constants.defaultSettings,
passes:[{
passName:'defaultPass',
recordTrace:true,
useThrottling:true,
pauseAfterLoadMs:1000,
networkQuietThresholdMs:1000,
cpuQuietThresholdMs:1000,
gatherers:[
'scripts',
'css-usage',
'viewport',
'viewport-dimensions',
'theme-color',
'manifest',
'runtime-exceptions',
'chrome-console-messages',
'image-usage',
'accessibility',
'dobetterweb/anchors-with-no-rel-noopener',
'dobetterweb/appcache',
'dobetterweb/doctype',
'dobetterweb/domstats',
'dobetterweb/js-libraries',
'dobetterweb/optimized-images',
'dobetterweb/password-inputs-with-prevented-paste',
'dobetterweb/response-compression',
'dobetterweb/tags-blocking-first-paint',
'dobetterweb/websql',
'seo/meta-description',
'seo/font-size',
'seo/crawlable-links',
'seo/meta-robots',
'seo/hreflang',
'seo/embedded-content',
'seo/canonical',
'seo/robots-txt',
'fonts']},


{
passName:'offlinePass',
gatherers:[
'service-worker',
'offline',
'start-url']},


{
passName:'redirectPass',

blockedUrlPatterns:['*.css','*.jpg','*.jpeg','*.png','*.gif','*.svg','*.ttf','*.woff','*.woff2'],
gatherers:[
'http-redirect',
'html-without-javascript']}],


audits:[
'is-on-https',
'redirects-http',
'service-worker',
'works-offline',
'viewport',
'without-javascript',
'metrics/first-contentful-paint',
'metrics/first-meaningful-paint',
'load-fast-enough-for-pwa',
'metrics/speed-index',
'screenshot-thumbnails',
'final-screenshot',
'metrics/estimated-input-latency',
'errors-in-console',
'time-to-first-byte',
'metrics/first-cpu-idle',
'metrics/interactive',
'user-timings',
'critical-request-chains',
'redirects',
'webapp-install-banner',
'splash-screen',
'themed-omnibox',
'manifest-short-name-length',
'content-width',
'image-aspect-ratio',
'deprecations',
'mainthread-work-breakdown',
'bootup-time',
'uses-rel-preload',
'uses-rel-preconnect',
'font-display',
'network-requests',
'metrics',
'manual/pwa-cross-browser',
'manual/pwa-page-transitions',
'manual/pwa-each-page-has-url',
'accessibility/accesskeys',
'accessibility/aria-allowed-attr',
'accessibility/aria-required-attr',
'accessibility/aria-required-children',
'accessibility/aria-required-parent',
'accessibility/aria-roles',
'accessibility/aria-valid-attr-value',
'accessibility/aria-valid-attr',
'accessibility/audio-caption',
'accessibility/button-name',
'accessibility/bypass',
'accessibility/color-contrast',
'accessibility/definition-list',
'accessibility/dlitem',
'accessibility/document-title',
'accessibility/duplicate-id',
'accessibility/frame-title',
'accessibility/html-has-lang',
'accessibility/html-lang-valid',
'accessibility/image-alt',
'accessibility/input-image-alt',
'accessibility/label',
'accessibility/layout-table',
'accessibility/link-name',
'accessibility/list',
'accessibility/listitem',
'accessibility/meta-refresh',
'accessibility/meta-viewport',
'accessibility/object-alt',
'accessibility/tabindex',
'accessibility/td-headers-attr',
'accessibility/th-has-data-cells',
'accessibility/valid-lang',
'accessibility/video-caption',
'accessibility/video-description',
'accessibility/manual/custom-controls-labels',
'accessibility/manual/custom-controls-roles',
'accessibility/manual/focus-traps',
'accessibility/manual/focusable-controls',
'accessibility/manual/heading-levels',
'accessibility/manual/interactive-element-affordance',
'accessibility/manual/logical-tab-order',
'accessibility/manual/managed-focus',
'accessibility/manual/offscreen-content-hidden',
'accessibility/manual/use-landmarks',
'accessibility/manual/visual-order-follows-dom',
'byte-efficiency/uses-long-cache-ttl',
'byte-efficiency/total-byte-weight',
'byte-efficiency/offscreen-images',
'byte-efficiency/render-blocking-resources',
'byte-efficiency/unminified-css',
'byte-efficiency/unminified-javascript',
'byte-efficiency/unused-css-rules',
'byte-efficiency/uses-webp-images',
'byte-efficiency/uses-optimized-images',
'byte-efficiency/uses-text-compression',
'byte-efficiency/uses-responsive-images',
'byte-efficiency/efficient-animated-content',
'dobetterweb/appcache-manifest',
'dobetterweb/doctype',
'dobetterweb/dom-size',
'dobetterweb/external-anchors-use-rel-noopener',
'dobetterweb/geolocation-on-start',
'dobetterweb/no-document-write',
'dobetterweb/no-vulnerable-libraries',
'dobetterweb/js-libraries',
'dobetterweb/no-websql',
'dobetterweb/notification-on-start',
'dobetterweb/password-inputs-can-be-pasted-into',
'dobetterweb/uses-http2',
'dobetterweb/uses-passive-event-listeners',
'seo/meta-description',
'seo/http-status-code',
'seo/font-size',
'seo/link-text',
'seo/is-crawlable',
'seo/robots-txt',
'seo/hreflang',
'seo/plugins',
'seo/canonical',
'seo/manual/mobile-friendly',
'seo/manual/structured-data'],


groups:{
'metrics':{
title:str_(UIStrings.metricGroupTitle)},

'load-opportunities':{
title:str_(UIStrings.loadOpportunitiesGroupTitle),
description:str_(UIStrings.loadOpportunitiesGroupDescription)},

'diagnostics':{
title:str_(UIStrings.diagnosticsGroupTitle),
description:str_(UIStrings.diagnosticsGroupDescription)},

'a11y-color-contrast':{
title:'Color Contrast Is Satisfactory',
description:'These are opportunities to improve the legibility of your content.'},

'a11y-describe-contents':{
title:'Elements Describe Contents Well',
description:'These are opportunities to make your content easier to understand for a user of assistive technology, like a screen reader.'},

'a11y-well-structured':{
title:'Elements Are Well Structured',
description:'These are opportunities to make sure your HTML is appropriately structured.'},

'a11y-aria':{
title:'ARIA Attributes Follow Best Practices',
description:'These are opportunities to improve the usage of ARIA in your application which may enhance the experience for users of assistive technology, like a screen reader.'},

'a11y-correct-attributes':{
title:'Elements Use Attributes Correctly',
description:'These are opportunities to improve the configuration of your HTML elements.'},

'a11y-element-names':{
title:'Elements Have Discernible Names',
description:'These are opportunities to improve the semantics of the controls in your application. This may enhance the experience for users of assistive technology, like a screen reader.'},

'a11y-language':{
title:'Page Specifies Valid Language',
description:'These are opportunities to improve the interpretation of your content by users in different locales.'},

'a11y-meta':{
title:'Meta Tags Used Properly',
description:'These are opportunities to improve the user experience of your site.'},

'seo-mobile':{
title:'Mobile Friendly',
description:'Make sure your pages are mobile friendly so users don’t have to pinch or zoom '+
'in order to read the content pages. [Learn more](https://developers.google.com/search/mobile-sites/).'},

'seo-content':{
title:'Content Best Practices',
description:'Format your HTML in a way that enables crawlers to better understand your app’s content.'},

'seo-crawl':{
title:'Crawling and Indexing',
description:'To appear in search results, crawlers need access to your app.'}},


categories:{
'performance':{
title:str_(UIStrings.performanceCategoryTitle),
auditRefs:[
{id:'first-contentful-paint',weight:3,group:'metrics'},
{id:'first-meaningful-paint',weight:1,group:'metrics'},
{id:'speed-index',weight:4,group:'metrics'},
{id:'interactive',weight:5,group:'metrics'},
{id:'first-cpu-idle',weight:2,group:'metrics'},
{id:'estimated-input-latency',weight:0,group:'metrics'},

{id:'render-blocking-resources',weight:0,group:'load-opportunities'},
{id:'uses-responsive-images',weight:0,group:'load-opportunities'},
{id:'offscreen-images',weight:0,group:'load-opportunities'},
{id:'unminified-css',weight:0,group:'load-opportunities'},
{id:'unminified-javascript',weight:0,group:'load-opportunities'},
{id:'unused-css-rules',weight:0,group:'load-opportunities'},
{id:'uses-optimized-images',weight:0,group:'load-opportunities'},
{id:'uses-webp-images',weight:0,group:'load-opportunities'},
{id:'uses-text-compression',weight:0,group:'load-opportunities'},
{id:'uses-rel-preconnect',weight:0,group:'load-opportunities'},
{id:'time-to-first-byte',weight:0,group:'load-opportunities'},
{id:'redirects',weight:0,group:'load-opportunities'},
{id:'uses-rel-preload',weight:0,group:'load-opportunities'},
{id:'efficient-animated-content',weight:0,group:'load-opportunities'},
{id:'total-byte-weight',weight:0,group:'diagnostics'},
{id:'uses-long-cache-ttl',weight:0,group:'diagnostics'},
{id:'dom-size',weight:0,group:'diagnostics'},
{id:'critical-request-chains',weight:0,group:'diagnostics'},
{id:'network-requests',weight:0},
{id:'metrics',weight:0},
{id:'user-timings',weight:0,group:'diagnostics'},
{id:'bootup-time',weight:0,group:'diagnostics'},
{id:'screenshot-thumbnails',weight:0},
{id:'final-screenshot',weight:0},
{id:'mainthread-work-breakdown',weight:0,group:'diagnostics'},
{id:'font-display',weight:0,group:'diagnostics'}]},


'pwa':{
title:'Progressive Web App',
description:'These checks validate the aspects of a Progressive Web App, as specified by the baseline [PWA Checklist](https://developers.google.com/web/progressive-web-apps/checklist).',
manualDescription:'These checks are required by the baseline '+
'[PWA Checklist](https://developers.google.com/web/progressive-web-apps/checklist) but are '+
'not automatically checked by Lighthouse. They do not affect your score but it\'s important that you verify them manually.',
auditRefs:[

{id:'load-fast-enough-for-pwa',weight:7},
{id:'works-offline',weight:5},

{id:'webapp-install-banner',weight:3},

{id:'is-on-https',weight:2},
{id:'redirects-http',weight:2},
{id:'viewport',weight:2},

{id:'service-worker',weight:1},
{id:'without-javascript',weight:1},
{id:'splash-screen',weight:1},
{id:'themed-omnibox',weight:1},
{id:'content-width',weight:1},
{id:'manifest-short-name-length',weight:0},

{id:'pwa-cross-browser',weight:0},
{id:'pwa-page-transitions',weight:0},
{id:'pwa-each-page-has-url',weight:0}]},


'accessibility':{
title:'Accessibility',
description:'These checks highlight opportunities to [improve the accessibility of your web app](https://developers.google.com/web/fundamentals/accessibility). Only a subset of accessibility issues can be automatically detected so manual testing is also encouraged.',
manualDescription:'These items address areas which an automated testing tool cannot cover. Learn more in our guide on [conducting an accessibility review](https://developers.google.com/web/fundamentals/accessibility/how-to-review).',
auditRefs:[
{id:'accesskeys',weight:1,group:'a11y-correct-attributes'},
{id:'aria-allowed-attr',weight:3,group:'a11y-aria'},
{id:'aria-required-attr',weight:2,group:'a11y-aria'},
{id:'aria-required-children',weight:5,group:'a11y-aria'},
{id:'aria-required-parent',weight:2,group:'a11y-aria'},
{id:'aria-roles',weight:3,group:'a11y-aria'},
{id:'aria-valid-attr-value',weight:2,group:'a11y-aria'},
{id:'aria-valid-attr',weight:5,group:'a11y-aria'},
{id:'audio-caption',weight:4,group:'a11y-correct-attributes'},
{id:'button-name',weight:10,group:'a11y-element-names'},
{id:'bypass',weight:10,group:'a11y-describe-contents'},
{id:'color-contrast',weight:6,group:'a11y-color-contrast'},
{id:'definition-list',weight:1,group:'a11y-well-structured'},
{id:'dlitem',weight:1,group:'a11y-well-structured'},
{id:'document-title',weight:2,group:'a11y-describe-contents'},
{id:'duplicate-id',weight:5,group:'a11y-well-structured'},
{id:'frame-title',weight:5,group:'a11y-describe-contents'},
{id:'html-has-lang',weight:4,group:'a11y-language'},
{id:'html-lang-valid',weight:1,group:'a11y-language'},
{id:'image-alt',weight:8,group:'a11y-correct-attributes'},
{id:'input-image-alt',weight:1,group:'a11y-correct-attributes'},
{id:'label',weight:10,group:'a11y-describe-contents'},
{id:'layout-table',weight:1,group:'a11y-describe-contents'},
{id:'link-name',weight:9,group:'a11y-element-names'},
{id:'list',weight:5,group:'a11y-well-structured'},
{id:'listitem',weight:4,group:'a11y-well-structured'},
{id:'meta-refresh',weight:1,group:'a11y-meta'},
{id:'meta-viewport',weight:3,group:'a11y-meta'},
{id:'object-alt',weight:4,group:'a11y-describe-contents'},
{id:'tabindex',weight:4,group:'a11y-correct-attributes'},
{id:'td-headers-attr',weight:1,group:'a11y-correct-attributes'},
{id:'th-has-data-cells',weight:1,group:'a11y-correct-attributes'},
{id:'valid-lang',weight:1,group:'a11y-language'},
{id:'video-caption',weight:4,group:'a11y-describe-contents'},
{id:'video-description',weight:3,group:'a11y-describe-contents'},

{id:'logical-tab-order',weight:0},
{id:'focusable-controls',weight:0},
{id:'interactive-element-affordance',weight:0},
{id:'managed-focus',weight:0},
{id:'focus-traps',weight:0},
{id:'custom-controls-labels',weight:0},
{id:'custom-controls-roles',weight:0},
{id:'visual-order-follows-dom',weight:0},
{id:'offscreen-content-hidden',weight:0},
{id:'heading-levels',weight:0},
{id:'use-landmarks',weight:0}]},


'best-practices':{
title:'Best Practices',
auditRefs:[
{id:'appcache-manifest',weight:1},
{id:'no-websql',weight:1},
{id:'is-on-https',weight:1},
{id:'uses-http2',weight:1},
{id:'uses-passive-event-listeners',weight:1},
{id:'no-document-write',weight:1},
{id:'external-anchors-use-rel-noopener',weight:1},
{id:'geolocation-on-start',weight:1},
{id:'doctype',weight:1},
{id:'no-vulnerable-libraries',weight:1},
{id:'js-libraries',weight:0},
{id:'notification-on-start',weight:1},
{id:'deprecations',weight:1},
{id:'password-inputs-can-be-pasted-into',weight:1},
{id:'errors-in-console',weight:1},
{id:'image-aspect-ratio',weight:1}]},


'seo':{
title:'SEO',
description:'These checks ensure that your page is optimized for search engine results ranking. '+
'There are additional factors Lighthouse does not check that may affect your search ranking. '+
'[Learn more](https://support.google.com/webmasters/answer/35769).',
manualDescription:'Run these additional validators on your site to check additional SEO best practices.',
auditRefs:[
{id:'viewport',weight:1,group:'seo-mobile'},
{id:'document-title',weight:1,group:'seo-content'},
{id:'meta-description',weight:1,group:'seo-content'},
{id:'http-status-code',weight:1,group:'seo-crawl'},
{id:'link-text',weight:1,group:'seo-content'},
{id:'is-crawlable',weight:1,group:'seo-crawl'},
{id:'robots-txt',weight:1,group:'seo-crawl'},
{id:'hreflang',weight:1,group:'seo-content'},
{id:'canonical',weight:1,group:'seo-content'},
{id:'font-size',weight:1,group:'seo-mobile'},
{id:'plugins',weight:1,group:'seo-content'},

{id:'mobile-friendly',weight:0},
{id:'structured-data',weight:0}]}}};





module.exports=defaultConfig;


Object.defineProperty(module.exports,'UIStrings',{
enumerable:false,
get:()=>UIStrings});


}).call(this,"/../lighthouse-core/config/default-config.js");
},{"../lib/i18n/i18n.js":36,"./constants":8}],10:[function(require,module,exports){





'use strict';


const fullConfig={
extends:'lighthouse:default',
settings:{},
passes:[
{
passName:'extraPass',
gatherers:[
'js-usage']}],



audits:[
'byte-efficiency/unused-javascript'],


categories:{
'performance':{
auditRefs:[
{id:'unused-javascript',weight:0,group:'load-opportunities'}]}}};





module.exports=fullConfig;

},{}],11:[function(require,module,exports){





'use strict';

const ArbitraryEqualityMap=require('../../lib/arbitrary-equality-map');

class ComputedArtifact{



constructor(allComputedArtifacts){
const cache=new ArbitraryEqualityMap();
cache.setEqualityFn(ArbitraryEqualityMap.deepEquals);



this._cache=cache;


this._allComputedArtifacts=allComputedArtifacts;
}




get name(){
throw new Error('name getter not implemented for computed artifact '+this.constructor.name);
}











async compute_(artifact,allComputedArtifacts){
throw new Error('compute_() not implemented for computed artifact '+this.name);
}










async request(requiredArtifacts){
const computed=this._cache.get(requiredArtifacts);
if(computed){
return computed;
}



const artifactPromise=
this.compute_(requiredArtifacts,this._allComputedArtifacts);
this._cache.set(requiredArtifacts,artifactPromise);

return artifactPromise;
}}


module.exports=ComputedArtifact;

},{"../../lib/arbitrary-equality-map":23}],12:[function(require,module,exports){





'use strict';

const makeComputedArtifact=require('./new-computed-artifact');
const icons=require('../../lib/icons');

const PWA_DISPLAY_VALUES=['minimal-ui','fullscreen','standalone'];



const SUGGESTED_SHORTNAME_LENGTH=12;

class ManifestValues{
static get validityIds(){
return['hasManifest','hasParseableManifest'];
}






static get manifestChecks(){
return[
{
id:'hasStartUrl',
failureText:'Manifest does not contain a `start_url`',
validate:manifestValue=>!!manifestValue.start_url.value},

{
id:'hasIconsAtLeast192px',
failureText:'Manifest does not have a PNG icon of at least 192px',
validate:manifestValue=>icons.doExist(manifestValue)&&
icons.pngSizedAtLeast(192,manifestValue).length>0},

{
id:'hasIconsAtLeast512px',
failureText:'Manifest does not have a PNG icon of at least 512px',
validate:manifestValue=>icons.doExist(manifestValue)&&
icons.pngSizedAtLeast(512,manifestValue).length>0},

{
id:'hasPWADisplayValue',
failureText:'Manifest\'s `display` value is not one of: '+PWA_DISPLAY_VALUES.join(' | '),
validate:manifestValue=>PWA_DISPLAY_VALUES.includes(manifestValue.display.value)},

{
id:'hasBackgroundColor',
failureText:'Manifest does not have `background_color`',
validate:manifestValue=>!!manifestValue.background_color.value},

{
id:'hasThemeColor',
failureText:'Manifest does not have `theme_color`',
validate:manifestValue=>!!manifestValue.theme_color.value},

{
id:'hasShortName',
failureText:'Manifest does not have `short_name`',
validate:manifestValue=>!!manifestValue.short_name.value},

{
id:'shortNameLength',
failureText:`Manifest's \`short_name\` is too long (>${SUGGESTED_SHORTNAME_LENGTH} `+
`characters) to be displayed on a homescreen without truncation`,

validate:manifestValue=>!!manifestValue.short_name.value&&
manifestValue.short_name.value.length<=SUGGESTED_SHORTNAME_LENGTH},

{
id:'hasName',
failureText:'Manifest does not have `name`',
validate:manifestValue=>!!manifestValue.name.value}];


}






static async compute_(manifest){

let parseFailureReason;

if(manifest===null){
return{
isParseFailure:true,
parseFailureReason:'No manifest was fetched',
allChecks:[]};

}
const manifestValue=manifest.value;
if(manifestValue===undefined){
return{
isParseFailure:true,
parseFailureReason:'Manifest failed to parse as valid JSON',
allChecks:[]};

}


const remainingChecks=ManifestValues.manifestChecks.map(item=>{
return{
id:item.id,
failureText:item.failureText,
passing:item.validate(manifestValue)};

});

return{
isParseFailure:false,
parseFailureReason,
allChecks:remainingChecks};

}}


module.exports=makeComputedArtifact(ManifestValues);

},{"../../lib/icons":83,"./new-computed-artifact":15}],13:[function(require,module,exports){





'use strict';

const ComputedArtifact=require('../computed-artifact');
const BaseNode=require('../../../lib/dependency-graph/base-node');
const NetworkRequest=require('../../../lib/network-request');





class LanternMetricArtifact extends ComputedArtifact{





static getScriptUrls(dependencyGraph,condition){

const scriptUrls=new Set();

dependencyGraph.traverse(node=>{
if(node.type===BaseNode.TYPES.CPU)return;
if(node.record.resourceType!==NetworkRequest.TYPES.Script)return;
if(condition&&!condition(node))return;
scriptUrls.add(node.record.url);
});

return scriptUrls;
}




get COEFFICIENTS(){
throw new Error('COEFFICIENTS unimplemented!');
}






getOptimisticGraph(dependencyGraph,traceOfTab){
throw new Error('Optimistic graph unimplemented!');
}






getPessimisticGraph(dependencyGraph,traceOfTab){
throw new Error('Pessmistic graph unimplemented!');
}






getEstimateFromSimulation(simulationResult,extras){
return simulationResult;
}







async computeMetricWithGraphs(data,artifacts,extras){
const{trace,devtoolsLog,settings}=data;
const metricName=this.name.replace('Lantern','');
const graph=await artifacts.requestPageDependencyGraph({trace,devtoolsLog});
const traceOfTab=await artifacts.requestTraceOfTab(trace);

const simulator=data.simulator||(
await artifacts.requestLoadSimulator({devtoolsLog,settings}));

const optimisticGraph=this.getOptimisticGraph(graph,traceOfTab);
const pessimisticGraph=this.getPessimisticGraph(graph,traceOfTab);


let simulateOptions={label:`optimistic${metricName}`};
const optimisticSimulation=simulator.simulate(optimisticGraph,simulateOptions);

simulateOptions={label:`optimisticFlex${metricName}`,flexibleOrdering:true};
const optimisticFlexSimulation=simulator.simulate(optimisticGraph,simulateOptions);

simulateOptions={label:`pessimistic${metricName}`};
const pessimisticSimulation=simulator.simulate(pessimisticGraph,simulateOptions);

const optimisticEstimate=this.getEstimateFromSimulation(
optimisticSimulation.timeInMs<optimisticFlexSimulation.timeInMs?
optimisticSimulation:optimisticFlexSimulation,
Object.assign({},extras,{optimistic:true}));


const pessimisticEstimate=this.getEstimateFromSimulation(
pessimisticSimulation,
Object.assign({},extras,{optimistic:false}));



const interceptMultiplier=this.COEFFICIENTS.intercept>0?
Math.min(1,optimisticEstimate.timeInMs/1000):1;
const timing=
this.COEFFICIENTS.intercept*interceptMultiplier+
this.COEFFICIENTS.optimistic*optimisticEstimate.timeInMs+
this.COEFFICIENTS.pessimistic*pessimisticEstimate.timeInMs;

return{
timing,
optimisticEstimate,
pessimisticEstimate,
optimisticGraph,
pessimisticGraph};

}






compute_(data,computedArtifacts){
return this.computeMetricWithGraphs(data,computedArtifacts);
}}


module.exports=LanternMetricArtifact;

},{"../../../lib/dependency-graph/base-node":25,"../../../lib/network-request":88,"../computed-artifact":11}],14:[function(require,module,exports){





'use strict';

const ComputedArtifact=require('../computed-artifact');
const TracingProcessor=require('../../../lib/traces/tracing-processor');











class ComputedMetric extends ComputedArtifact{

get name(){
throw new Error('Unimplemented');
}






computeSimulatedMetric(data,artifacts){

return artifacts[`requestLantern${this.name}`](data);
}






computeObservedMetric(data,artifacts){
throw new Error('Unimplemented');
}






async compute_(data,computedArtifacts){
const{trace,devtoolsLog,settings}=data;
if(!trace||!devtoolsLog||!settings){
throw new Error('Did not provide necessary metric computation data');
}

const augmentedData=Object.assign({
networkRecords:await computedArtifacts.requestNetworkRecords(devtoolsLog),
traceOfTab:await computedArtifacts.requestTraceOfTab(trace)},
data);

TracingProcessor.assertHasToplevelEvents(augmentedData.traceOfTab.mainThreadEvents);

switch(settings.throttlingMethod){
case'simulate':
return this.computeSimulatedMetric(augmentedData,computedArtifacts);
case'provided':
case'devtools':
return this.computeObservedMetric(augmentedData,computedArtifacts);
default:
throw new TypeError(`Unrecognized throttling method: ${settings.throttlingMethod}`);}

}}


module.exports=ComputedMetric;

},{"../../../lib/traces/tracing-processor":95,"../computed-artifact":11}],15:[function(require,module,exports){





'use strict';

const ArbitraryEqualityMap=require('../../lib/arbitrary-equality-map.js');








function makeComputedArtifact(computableArtifact){




const request=({computedCache},artifact)=>{
const cache=computedCache.get(computableArtifact.name)||new ArbitraryEqualityMap();
computedCache.set(computableArtifact.name,cache);

const computed=cache.get(artifact);
if(computed){
return computed;
}

const artifactPromise=computableArtifact.compute_(artifact);
cache.set(artifact,artifactPromise);

return artifactPromise;
};

return Object.assign(computableArtifact,{request});
}

module.exports=makeComputedArtifact;

},{"../../lib/arbitrary-equality-map.js":23}],16:[function(require,module,exports){





'use strict';

const EventEmitter=require('events').EventEmitter;
const log=require('lighthouse-logger');
const LHError=require('../../lib/lh-error');










class Connection{
constructor(){
this._lastCommandId=0;

this._callbacks=new Map();

this._eventEmitter=new EventEmitter();
}




connect(){
return Promise.reject(new Error('Not implemented'));
}




disconnect(){
return Promise.reject(new Error('Not implemented'));
}




wsEndpoint(){
return Promise.reject(new Error('Not implemented'));
}








sendCommand(method,...paramArgs){

const params=paramArgs.length?paramArgs[0]:undefined;

log.formatProtocol('method => browser',{method,params},'verbose');
const id=++this._lastCommandId;
const message=JSON.stringify({id,method,params});
this.sendRawMessage(message);

return new Promise(resolve=>{
this._callbacks.set(id,{method,resolve});
});
}






on(eventName,cb){
if(eventName!=='protocolevent'){
throw new Error('Only supports "protocolevent" events');
}

if(!this._eventEmitter){
throw new Error('Attempted to add event listener after connection disposed.');
}
this._eventEmitter.on(eventName,cb);
}







sendRawMessage(message){
throw new Error('Not implemented');
}








handleRawMessage(message){
const object=JSON.parse(message);


if(!('id'in object)){
log.formatProtocol('<= event',
{method:object.method,params:object.params},'verbose');
this.emitProtocolEvent(object);
return;
}

const callback=this._callbacks.get(object.id);
if(callback){
this._callbacks.delete(object.id);

return callback.resolve(Promise.resolve().then(_=>{
if(object.error){
log.formatProtocol('method <= browser ERR',{method:callback.method},'error');
throw LHError.fromProtocolMessage(callback.method,object.error);
}

log.formatProtocol('method <= browser OK',
{method:callback.method,params:object.result},'verbose');
return object.result;
}));
}else{


const error=object.error&&object.error.message;
log.formatProtocol(`disowned method <= browser ${error?'ERR':'OK'}`,
{method:'UNKNOWN',params:error||object.result},'verbose');
}
}




emitProtocolEvent(eventMessage){
if(!this._eventEmitter){
throw new Error('Attempted to emit event after connection disposed.');
}

this._eventEmitter.emit('protocolevent',eventMessage);
}




dispose(){
if(this._eventEmitter){
this._eventEmitter.removeAllListeners();
this._eventEmitter=null;
}
}}


module.exports=Connection;

},{"../../lib/lh-error":85,"events":111,"lighthouse-logger":147}],17:[function(require,module,exports){





'use strict';

const Connection=require('./connection.js');












class RawConnection extends Connection{



constructor(port){
super();
this._port=port;
this._port.on('message',this.handleRawMessage.bind(this));
this._port.on('close',this.dispose.bind(this));
}





connect(){
return Promise.resolve();
}




disconnect(){
this._port.close();
return Promise.resolve();
}






sendRawMessage(message){
this._port.send(message);
}}


module.exports=RawConnection;

},{"./connection.js":16}],18:[function(require,module,exports){





'use strict';






class DevtoolsLog{



constructor(regexFilter){
this._filter=regexFilter;


this._messages=[];
this._isRecording=false;
}




get messages(){
return this._messages;
}

reset(){
this._messages=[];
}

beginRecording(){
this._isRecording=true;
}

endRecording(){
this._isRecording=false;
}





record(message){
if(this._isRecording&&(!this._filter||this._filter.test(message.method))){
this._messages.push(message);
}
}}


module.exports=DevtoolsLog;

},{}],19:[function(require,module,exports){





'use strict';

const NetworkRecorder=require('../lib/network-recorder');
const emulation=require('../lib/emulation');
const Element=require('../lib/element');
const LHError=require('../lib/lh-error');
const NetworkRequest=require('../lib/network-request');
const EventEmitter=require('events').EventEmitter;
const URL=require('../lib/url-shim');
const constants=require('../config/constants');

const log=require('lighthouse-logger');
const DevtoolsLog=require('./devtools-log');

const pageFunctions=require('../lib/page-functions.js');



const Connection=require('./connections/connection.js');


const DEFAULT_PAUSE_AFTER_LOAD=0;

const DEFAULT_NETWORK_QUIET_THRESHOLD=5000;

const DEFAULT_CPU_QUIET_THRESHOLD=0;





class Driver{



constructor(connection){
this._traceCategories=Driver.traceCategories;



this._eventEmitter=new EventEmitter();
this._connection=connection;

this._devtoolsLog=new DevtoolsLog(/^(Page|Network)\./);
this.online=true;

this._domainEnabledCounts=new Map();

this._isolatedExecutionContextId=undefined;






this._networkStatusMonitor=null;






this._monitoredUrl=null;

connection.on('protocolevent',event=>{
this._devtoolsLog.record(event);
if(this._networkStatusMonitor){
this._networkStatusMonitor.dispatch(event);
}




this._eventEmitter.emit(event.method,event.params);
});
}

static get traceCategories(){
return[
'-*',
'toplevel',
'v8.execute',
'blink.console',
'blink.user_timing',
'benchmark',
'loading',
'latencyInfo',
'devtools.timeline',
'disabled-by-default-devtools.timeline',
'disabled-by-default-devtools.timeline.frame',
'disabled-by-default-devtools.timeline.stack',



'disabled-by-default-devtools.screenshot'];

}




getUserAgent(){

return this.evaluateAsync('navigator.userAgent');
}





getBenchmarkIndex(){
return this.evaluateAsync(`(${pageFunctions.ultradumbBenchmarkString})()`);
}




connect(){
return this._connection.connect();
}




disconnect(){
return this._connection.disconnect();
}






wsEndpoint(){
return this._connection.wsEndpoint();
}







on(eventName,cb){
if(this._eventEmitter===null){
throw new Error('connect() must be called before attempting to listen to events.');
}


log.formatProtocol('listen for event =>',{method:eventName},'verbose');
this._eventEmitter.on(eventName,cb);
}








once(eventName,cb){
if(this._eventEmitter===null){
throw new Error('connect() must be called before attempting to listen to events.');
}

log.formatProtocol('listen once for event =>',{method:eventName},'verbose');
this._eventEmitter.once(eventName,cb);
}







off(eventName,cb){
if(this._eventEmitter===null){
throw new Error('connect() must be called before attempting to remove an event listener.');
}

this._eventEmitter.removeListener(eventName,cb);
}













_shouldToggleDomain(domain,enable){
const enabledCount=this._domainEnabledCounts.get(domain)||0;
const newCount=enabledCount+(enable?1:-1);
this._domainEnabledCounts.set(domain,Math.max(0,newCount));


if(enable&&newCount===1||!enable&&newCount===0){
log.verbose('Driver',`${domain}.${enable?'enable':'disable'}`);
return true;
}else{
if(newCount<0){
log.error('Driver',`Attempted to disable domain '${domain}' when already disabled.`);
}
return false;
}
}








sendCommand(method,...params){
const domainCommand=/^(\w+)\.(enable|disable)$/.exec(method);
if(domainCommand){
const enable=domainCommand[2]==='enable';
if(!this._shouldToggleDomain(domainCommand[1],enable)){
return Promise.resolve();
}
}

return this._connection.sendCommand(method,...params);
}






isDomainEnabled(domain){

return!!this._domainEnabledCounts.get(domain);
}






evaluateScriptOnNewDocument(scriptSource){
return this.sendCommand('Page.addScriptToEvaluateOnLoad',{
scriptSource});

}










evaluateAsync(expression,options={}){



const contextIdPromise=options.useIsolation?
this._getOrCreateIsolatedContextId():
Promise.resolve(undefined);
return contextIdPromise.then(contextId=>this._evaluateInContext(expression,contextId));
}








_evaluateInContext(expression,contextId){
return new Promise((resolve,reject)=>{

const asyncTimeout=setTimeout(
_=>reject(new Error('The asynchronous expression exceeded the allotted time of 60s')),
60000);


const evaluationParams={





expression:`(function wrapInNativePromise() {
          const __nativePromise = window.__nativePromise || Promise;
          const URL = window.__nativeURL || window.URL;
          return new __nativePromise(function (resolve) {
            return __nativePromise.resolve()
              .then(_ => ${expression})
              .catch(${pageFunctions.wrapRuntimeEvalErrorInBrowserString})
              .then(resolve);
          });
        }())`,
includeCommandLineAPI:true,
awaitPromise:true,
returnByValue:true,
contextId};


this.sendCommand('Runtime.evaluate',evaluationParams).then(response=>{
clearTimeout(asyncTimeout);

if(response.exceptionDetails){

return reject(new Error(`Evaluation exception: ${response.exceptionDetails.text}`));
}


if(response.result===undefined){
return reject(new Error('Runtime.evaluate response did not contain a "result" object'));
}

const value=response.result.value;

if(value&&value.__failedInBrowser){
return reject(Object.assign(new Error(),value));
}else{
resolve(value);
}
}).catch(err=>{
clearTimeout(asyncTimeout);
reject(err);
});
});
}




getAppManifest(){
return this.sendCommand('Page.getAppManifest').
then(response=>{



if(!response.data){

return null;
}

return response;
});
}




getServiceWorkerVersions(){
return new Promise((resolve,reject)=>{



const versionUpdatedListener=data=>{


const activateCandidates=data.versions.filter(sw=>{
return sw.status!=='redundant';
});
const hasActiveServiceWorker=activateCandidates.find(sw=>{
return sw.status==='activated';
});

if(!activateCandidates.length||hasActiveServiceWorker){
this.off('ServiceWorker.workerVersionUpdated',versionUpdatedListener);
this.sendCommand('ServiceWorker.disable').
then(_=>resolve(data),reject);
}
};

this.on('ServiceWorker.workerVersionUpdated',versionUpdatedListener);

this.sendCommand('ServiceWorker.enable').catch(reject);
});
}




getServiceWorkerRegistrations(){
return new Promise((resolve,reject)=>{
this.once('ServiceWorker.workerRegistrationUpdated',data=>{
this.sendCommand('ServiceWorker.disable').
then(_=>resolve(data),reject);
});

this.sendCommand('ServiceWorker.enable').catch(reject);
});
}








assertNoSameOriginServiceWorkerClients(pageUrl){

let registrations;

let versions;

return this.getServiceWorkerRegistrations().then(data=>{
registrations=data.registrations;
}).then(_=>this.getServiceWorkerVersions()).then(data=>{
versions=data.versions;
}).then(_=>{
const origin=new URL(pageUrl).origin;

registrations.
filter(reg=>{
const swOrigin=new URL(reg.scopeURL).origin;

return origin===swOrigin;
}).
forEach(reg=>{
versions.forEach(ver=>{

if(ver.registrationId!==reg.registrationId){
return;
}


if(ver.controlledClients&&ver.controlledClients.length>0){
throw new Error('You probably have multiple tabs open to the same origin.');
}
});
});
});
}








_waitForNetworkIdle(networkQuietThresholdMs){

let idleTimeout;

let cancel=()=>{
throw new Error('_waitForNetworkIdle.cancel() called before it was defined');
};



if(!this._networkStatusMonitor){
throw new Error('Driver._waitForNetworkIdle called with no networkStatusMonitor');
}
const networkStatusMonitor=this._networkStatusMonitor;

const promise=new Promise((resolve,reject)=>{
const onIdle=()=>{

networkStatusMonitor.once('network-2-busy',onBusy);
idleTimeout=setTimeout(_=>{
cancel();
resolve();
},networkQuietThresholdMs);
};

const onBusy=()=>{
networkStatusMonitor.once('network-2-idle',onIdle);
idleTimeout&&clearTimeout(idleTimeout);
};

const domContentLoadedListener=()=>{
if(networkStatusMonitor.is2Idle()){
onIdle();
}else{
onBusy();
}
};

this.once('Page.domContentEventFired',domContentLoadedListener);
cancel=()=>{
idleTimeout&&clearTimeout(idleTimeout);
this.off('Page.domContentEventFired',domContentLoadedListener);
networkStatusMonitor.removeListener('network-2-busy',onBusy);
networkStatusMonitor.removeListener('network-2-idle',onIdle);
};
});

return{
promise,
cancel};

}






_waitForCPUIdle(waitForCPUQuiet){
if(!waitForCPUQuiet){
return{
promise:Promise.resolve(),
cancel:()=>undefined};

}


let lastTimeout;
let cancelled=false;

const checkForQuietExpression=`(${pageFunctions.checkTimeSinceLastLongTaskString})()`;




function checkForQuiet(driver,resolve){
if(cancelled)return;

return driver.evaluateAsync(checkForQuietExpression).
then(timeSinceLongTask=>{
if(cancelled)return;

if(typeof timeSinceLongTask==='number'){
if(timeSinceLongTask>=waitForCPUQuiet){
log.verbose('Driver',`CPU has been idle for ${timeSinceLongTask} ms`);
resolve();
}else{
log.verbose('Driver',`CPU has been idle for ${timeSinceLongTask} ms`);
const timeToWait=waitForCPUQuiet-timeSinceLongTask;
lastTimeout=setTimeout(()=>checkForQuiet(driver,resolve),timeToWait);
}
}
});
}


let cancel=()=>{
throw new Error('_waitForCPUIdle.cancel() called before it was defined');
};
const promise=new Promise((resolve,reject)=>{
checkForQuiet(this,resolve);
cancel=()=>{
cancelled=true;
if(lastTimeout)clearTimeout(lastTimeout);
reject(new Error('Wait for CPU idle cancelled'));
};
});

return{
promise,
cancel};

}








_waitForLoadEvent(pauseAfterLoadMs){

let cancel=()=>{
throw new Error('_waitForLoadEvent.cancel() called before it was defined');
};

const promise=new Promise((resolve,reject)=>{

let loadTimeout;
const loadListener=function(){
loadTimeout=setTimeout(resolve,pauseAfterLoadMs);
};
this.once('Page.loadEventFired',loadListener);

cancel=()=>{
this.off('Page.loadEventFired',loadListener);
loadTimeout&&clearTimeout(loadTimeout);
};
});

return{
promise,
cancel};

}

















async _waitForFullyLoaded(pauseAfterLoadMs,networkQuietThresholdMs,cpuQuietThresholdMs,
maxWaitForLoadedMs){

let maxTimeoutHandle;


const waitForLoadEvent=this._waitForLoadEvent(pauseAfterLoadMs);

const waitForNetworkIdle=this._waitForNetworkIdle(networkQuietThresholdMs);


let waitForCPUIdle=null;



const loadPromise=Promise.all([
waitForLoadEvent.promise,
waitForNetworkIdle.promise]).
then(()=>{
waitForCPUIdle=this._waitForCPUIdle(cpuQuietThresholdMs);
return waitForCPUIdle.promise;
}).then(()=>{
return function(){
log.verbose('Driver','loadEventFired and network considered idle');
maxTimeoutHandle&&clearTimeout(maxTimeoutHandle);
};
});



const maxTimeoutPromise=new Promise((resolve,reject)=>{
maxTimeoutHandle=setTimeout(resolve,maxWaitForLoadedMs);
}).then(_=>{
return function(){
log.warn('Driver','Timed out waiting for page load. Moving on...');
waitForLoadEvent.cancel();
waitForNetworkIdle.cancel();
waitForCPUIdle&&waitForCPUIdle.cancel();
};
});


const cleanupFn=await Promise.race([
loadPromise,
maxTimeoutPromise]);

cleanupFn();
}









_beginNetworkStatusMonitoring(startingUrl){
this._networkStatusMonitor=new NetworkRecorder();


this._monitoredUrl=startingUrl;

const requestLoadedListener=redirectRequest=>{

if(!redirectRequest.redirectSource){
return;
}
const earlierRequest=redirectRequest.redirectSource;
if(earlierRequest.url===this._monitoredUrl){
this._monitoredUrl=redirectRequest.url;
}
};
this._networkStatusMonitor.on('requestloaded',requestLoadedListener);

return this.sendCommand('Network.enable');
}







_endNetworkStatusMonitoring(){
this._networkStatusMonitor=null;
const finalUrl=this._monitoredUrl;
this._monitoredUrl=null;

if(!finalUrl){
throw new Error('Network Status Monitoring ended with an undefined finalUrl');
}

return finalUrl;
}







async _getOrCreateIsolatedContextId(){
if(typeof this._isolatedExecutionContextId==='number'){
return this._isolatedExecutionContextId;
}

const resourceTreeResponse=await this.sendCommand('Page.getResourceTree');
const mainFrameId=resourceTreeResponse.frameTree.frame.id;

const isolatedWorldResponse=await this.sendCommand('Page.createIsolatedWorld',{
frameId:mainFrameId,
worldName:'lighthouse_isolated_context'});


this._isolatedExecutionContextId=isolatedWorldResponse.executionContextId;
return isolatedWorldResponse.executionContextId;
}

_clearIsolatedContextId(){
this._isolatedExecutionContextId=undefined;
}












async gotoURL(url,options={}){
const waitForLoad=options.waitForLoad||false;
const passContext=options.passContext||{};
const disableJS=passContext.disableJavaScript||false;

await this._beginNetworkStatusMonitoring(url);
await this._clearIsolatedContextId();




this.sendCommand('Page.enable');
this.sendCommand('Emulation.setScriptExecutionDisabled',{value:disableJS});
this.sendCommand('Page.navigate',{url});

if(waitForLoad){
const passConfig=passContext.passConfig||{};
let{pauseAfterLoadMs,networkQuietThresholdMs,cpuQuietThresholdMs}=passConfig;
let maxWaitMs=passContext.settings&&passContext.settings.maxWaitForLoad;


if(typeof pauseAfterLoadMs!=='number')pauseAfterLoadMs=DEFAULT_PAUSE_AFTER_LOAD;
if(typeof networkQuietThresholdMs!=='number')networkQuietThresholdMs=DEFAULT_NETWORK_QUIET_THRESHOLD;
if(typeof cpuQuietThresholdMs!=='number')cpuQuietThresholdMs=DEFAULT_CPU_QUIET_THRESHOLD;
if(typeof maxWaitMs!=='number')maxWaitMs=constants.defaultSettings.maxWaitForLoad;


await this._waitForFullyLoaded(pauseAfterLoadMs,networkQuietThresholdMs,cpuQuietThresholdMs,
maxWaitMs);
}

return this._endNetworkStatusMonitoring();
}






async getObjectProperty(objectId,propName){
const propertiesResponse=await this.sendCommand('Runtime.getProperties',{
objectId,
accessorPropertiesOnly:true,
generatePreview:false,
ownProperties:false});


const propertyForName=propertiesResponse.result.
find(property=>property.name===propName);

if(propertyForName&&propertyForName.value){
return propertyForName.value.value;
}else{
return null;
}
}








getRequestContent(requestId,timeout=1000){
requestId=NetworkRequest.getRequestIdForBackend(requestId);

return new Promise((resolve,reject)=>{


const err=new LHError(LHError.errors.REQUEST_CONTENT_TIMEOUT);
const asyncTimeout=setTimeout(_=>reject(err),timeout);

this.sendCommand('Network.getResponseBody',{requestId}).then(result=>{
clearTimeout(asyncTimeout);

resolve(result.body);
}).catch(e=>{
clearTimeout(asyncTimeout);
reject(e);
});
});
}






queryPermissionState(name){
const expressionToEval=`
      navigator.permissions.query({name: '${name}'}).then(result => {
        return result.state;
      })
    `;

return this.evaluateAsync(expressionToEval);
}





async querySelector(selector){
const documentResponse=await this.sendCommand('DOM.getDocument');
const rootNodeId=documentResponse.root.nodeId;

const targetNode=await this.sendCommand('DOM.querySelector',{
nodeId:rootNodeId,
selector});


if(targetNode.nodeId===0){
return null;
}
return new Element(targetNode,this);
}





async querySelectorAll(selector){
const documentResponse=await this.sendCommand('DOM.getDocument');
const rootNodeId=documentResponse.root.nodeId;

const targetNodeList=await this.sendCommand('DOM.querySelectorAll',{
nodeId:rootNodeId,
selector});



const elementList=[];
targetNodeList.nodeIds.forEach(nodeId=>{
if(nodeId!==0){
elementList.push(new Element({nodeId},this));
}
});
return elementList;
}







getElementsInDocument(pierce=true){
return this.getNodesInDocument(pierce).
then(nodes=>nodes.
filter(node=>node.nodeType===1).
map(node=>new Element({nodeId:node.nodeId},this)));

}







async getNodesInDocument(pierce=true){
const flattenedDocument=await this.sendCommand('DOM.getFlattenedDocument',
{depth:-1,pierce});

return flattenedDocument.nodes?flattenedDocument.nodes:[];
}





beginTrace(settings){
const additionalCategories=settings&&settings.additionalTraceCategories&&
settings.additionalTraceCategories.split(',')||[];
const traceCategories=this._traceCategories.concat(additionalCategories);
const uniqueCategories=Array.from(new Set(traceCategories));


if(this.isDomainEnabled('Debugger')){
throw new Error('Debugger domain enabled when starting trace');
}
if(this.isDomainEnabled('CSS')){
throw new Error('CSS domain enabled when starting trace');
}
if(this.isDomainEnabled('DOM')){
throw new Error('DOM domain enabled when starting trace');
}


return this.sendCommand('Page.enable').
then(_=>this.sendCommand('Tracing.start',{
categories:uniqueCategories.join(','),
options:'sampling-frequency=10000'}));

}




endTrace(){

const traceEvents=[];





const dataListener=function(data){
traceEvents.push(...data.value);
};
this.on('Tracing.dataCollected',dataListener);

return new Promise((resolve,reject)=>{
this.once('Tracing.tracingComplete',_=>{
this.off('Tracing.dataCollected',dataListener);
resolve({traceEvents});
});

return this.sendCommand('Tracing.end').catch(reject);
});
}




beginDevtoolsLog(){
this._devtoolsLog.reset();
this._devtoolsLog.beginRecording();
}





endDevtoolsLog(){
this._devtoolsLog.endRecording();
return this._devtoolsLog.messages;
}




enableRuntimeEvents(){
return this.sendCommand('Runtime.enable');
}





async beginEmulation(settings){

if(!settings.disableDeviceEmulation){
if(settings.emulatedFormFactor==='mobile'){
await emulation.enableNexus5X(this);
}else if(settings.emulatedFormFactor==='desktop'){
await emulation.enableDesktop(this);
}
}

await this.setThrottling(settings,{useThrottling:true});
}






async setThrottling(settings,passConfig){
if(settings.throttlingMethod!=='devtools'){
return emulation.clearAllNetworkEmulation(this);
}

const cpuPromise=passConfig.useThrottling?
emulation.enableCPUThrottling(this,settings.throttling):
emulation.disableCPUThrottling(this);
const networkPromise=passConfig.useThrottling?
emulation.enableNetworkThrottling(this,settings.throttling):
emulation.clearAllNetworkEmulation(this);

await Promise.all([cpuPromise,networkPromise]);
}





async goOffline(){
await this.sendCommand('Network.enable');
await emulation.goOffline(this);
this.online=false;
}






async goOnline(options){
await this.setThrottling(options.settings,options.passConfig);
this.online=true;
}





cleanBrowserCaches(){

return this.sendCommand('Network.clearBrowserCache').

then(_=>this.sendCommand('Network.setCacheDisabled',{cacheDisabled:true})).
then(_=>this.sendCommand('Network.setCacheDisabled',{cacheDisabled:false}));
}





async setExtraHTTPHeaders(headers){
if(!headers){
return;
}

return this.sendCommand('Network.setExtraHTTPHeaders',{headers});
}





clearDataForOrigin(url){
const origin=new URL(url).origin;



const typesToClear=[
'appcache',

'file_systems',
'indexeddb',
'local_storage',
'shader_cache',
'websql',
'service_workers',
'cache_storage'].
join(',');

return this.sendCommand('Storage.clearDataForOrigin',{
origin:origin,
storageTypes:typesToClear});

}






async cacheNatives(){
await this.evaluateScriptOnNewDocument(`window.__nativePromise = Promise;
        window.__nativeError = Error;
        window.__nativeURL = URL;`);
}





async registerPerformanceObserver(){
const scriptStr=`(${pageFunctions.registerPerformanceObserverInPageString})()`;
await this.evaluateScriptOnNewDocument(scriptStr);
}





blockUrlPatterns(urls){
return this.sendCommand('Network.setBlockedURLs',{urls}).
catch(err=>{

if(!/wasn't found/.test(err.message)){
throw err;
}
});
}






async dismissJavaScriptDialogs(){
await this.sendCommand('Page.enable');

this.on('Page.javascriptDialogOpening',data=>{
log.warn('Driver',`${data.type} dialog opened by the page automatically suppressed.`);


this.sendCommand('Page.handleJavaScriptDialog',{
accept:true,
promptText:'Lighthouse prompt response'});

});
}}


module.exports=Driver;

},{"../config/constants":8,"../lib/element":33,"../lib/emulation":34,"../lib/lh-error":85,"../lib/network-recorder":87,"../lib/network-request":88,"../lib/page-functions.js":89,"../lib/url-shim":"url","./connections/connection.js":16,"./devtools-log":18,"events":111,"lighthouse-logger":147}],20:[function(require,module,exports){





'use strict';

const log=require('lighthouse-logger');
const LHError=require('../lib/lh-error');
const URL=require('../lib/url-shim');
const NetworkRecorder=require('../lib/network-recorder.js');
const constants=require('../config/constants');

const Driver=require('../gather/driver.js');
















































class GatherRunner{










static async loadBlank(
driver,
url=constants.defaultPassConfig.blankPage,
duration=constants.defaultPassConfig.blankDuration)
{
await driver.gotoURL(url);
await new Promise(resolve=>setTimeout(resolve,duration));
}










static async loadPage(driver,passContext){
const finalUrl=await driver.gotoURL(passContext.url,{
waitForLoad:true,
passContext});

passContext.url=finalUrl;
}






static async setupDriver(driver,options){
log.log('status','Initializing…');
const resetStorage=!options.settings.disableStorageReset;

await driver.assertNoSameOriginServiceWorkerClients(options.requestedUrl);
await driver.beginEmulation(options.settings);
await driver.enableRuntimeEvents();
await driver.cacheNatives();
await driver.registerPerformanceObserver();
await driver.dismissJavaScriptDialogs();
if(resetStorage)await driver.clearDataForOrigin(options.requestedUrl);
}





static disposeDriver(driver){
log.log('status','Disconnecting from browser...');
return driver.disconnect().catch(err=>{


if(!/close\/.*status: 500$/.test(err.message)){
log.error('GatherRunner disconnect',err.message);
}
});
}







static recoverOrThrow(promise){
return promise.catch(err=>{
if(err.fatal){
throw err;
}
});
}







static getPageLoadError(url,networkRecords){
const mainRecord=networkRecords.find(record=>{

return URL.equalWithExcludedFragments(record.url,url);
});

let errorDef;
if(!mainRecord){
errorDef=LHError.errors.NO_DOCUMENT_REQUEST;
}else if(mainRecord.failed){
errorDef={...LHError.errors.FAILED_DOCUMENT_REQUEST};
errorDef.message+=` ${mainRecord.localizedFailDescription}.`;
}else if(mainRecord.hasErrorStatusCode()){
errorDef={...LHError.errors.ERRORED_DOCUMENT_REQUEST};
errorDef.message+=` Status code: ${mainRecord.statusCode}.`;
}

if(errorDef){
return new LHError(errorDef);
}
}








static async beforePass(passContext,gathererResults){
const blockedUrls=(passContext.passConfig.blockedUrlPatterns||[]).
concat(passContext.settings.blockedUrlPatterns||[]);
const blankPage=passContext.passConfig.blankPage;
const blankDuration=passContext.passConfig.blankDuration;
await GatherRunner.loadBlank(passContext.driver,blankPage,blankDuration);



await passContext.driver.blockUrlPatterns(blockedUrls);
await passContext.driver.setExtraHTTPHeaders(passContext.settings.extraHeaders);

for(const gathererDefn of passContext.passConfig.gatherers){
const gatherer=gathererDefn.instance;

passContext.options=gathererDefn.options||{};
const artifactPromise=Promise.resolve().then(_=>gatherer.beforePass(passContext));
gathererResults[gatherer.name]=[artifactPromise];
await GatherRunner.recoverOrThrow(artifactPromise);
}
}








static async pass(passContext,gathererResults){
const driver=passContext.driver;
const config=passContext.passConfig;
const settings=passContext.settings;
const gatherers=config.gatherers;

const recordTrace=config.recordTrace;
const isPerfRun=!settings.disableStorageReset&&recordTrace&&config.useThrottling;

const gatherernames=gatherers.map(g=>g.instance.name).join(', ');
const status='Loading page & waiting for onload';
log.log('status',status,gatherernames);


if(isPerfRun)await driver.cleanBrowserCaches();

await driver.beginDevtoolsLog();

if(recordTrace)await driver.beginTrace(settings);


await GatherRunner.loadPage(driver,passContext);
log.log('statusEnd',status);

for(const gathererDefn of gatherers){
const gatherer=gathererDefn.instance;

passContext.options=gathererDefn.options||{};
const artifactPromise=Promise.resolve().then(_=>gatherer.pass(passContext));

const gathererResult=gathererResults[gatherer.name]||[];
gathererResult.push(artifactPromise);
gathererResults[gatherer.name]=gathererResult;
await GatherRunner.recoverOrThrow(artifactPromise);
}
}









static async afterPass(passContext,gathererResults){
const driver=passContext.driver;
const config=passContext.passConfig;
const gatherers=config.gatherers;

let trace;
if(config.recordTrace){
log.log('status','Retrieving trace');
trace=await driver.endTrace();
log.verbose('statusEnd','Retrieving trace');
}

const status='Retrieving devtoolsLog and network records';
log.log('status',status);
const devtoolsLog=driver.endDevtoolsLog();
const networkRecords=NetworkRecorder.recordsFromLogs(devtoolsLog);
log.verbose('statusEnd',status);

let pageLoadError=GatherRunner.getPageLoadError(passContext.url,networkRecords);

if(!driver.online)pageLoadError=undefined;

if(pageLoadError){
log.error('GatherRunner',pageLoadError.message,passContext.url);
passContext.LighthouseRunWarnings.push(pageLoadError.friendlyMessage);
}



const passData={
networkRecords,
devtoolsLog,
trace};



await driver.setThrottling(passContext.settings,{useThrottling:false});

for(const gathererDefn of gatherers){
const gatherer=gathererDefn.instance;
const status=`Retrieving: ${gatherer.name}`;
log.log('status',status);


passContext.options=gathererDefn.options||{};


const artifactPromise=pageLoadError?
Promise.reject(pageLoadError):

Promise.resolve().then(_=>gatherer.afterPass(passContext,passData));

const gathererResult=gathererResults[gatherer.name]||[];
gathererResult.push(artifactPromise);
gathererResults[gatherer.name]=gathererResult;
await GatherRunner.recoverOrThrow(artifactPromise);
log.verbose('statusEnd',status);
}


return passData;
}










static async collectArtifacts(gathererResults,baseArtifacts){

const gathererArtifacts={};

const resultsEntries=Object.entries(gathererResults);
for(const[gathererName,phaseResultsPromises]of resultsEntries){
if(gathererArtifacts[gathererName]!==undefined)continue;

try{
const phaseResults=await Promise.all(phaseResultsPromises);

const definedResults=phaseResults.filter(element=>element!==undefined);
const artifact=definedResults[definedResults.length-1];

gathererArtifacts[gathererName]=artifact;
}catch(err){


gathererArtifacts[gathererName]=err;
}

if(gathererArtifacts[gathererName]===undefined){
throw new Error(`${gathererName} failed to provide an artifact.`);
}
}


baseArtifacts.LighthouseRunWarnings=Array.from(new Set(baseArtifacts.LighthouseRunWarnings));


return{...baseArtifacts,...gathererArtifacts};
}





static async getBaseArtifacts(options){
return{
fetchTime:new Date().toJSON(),
LighthouseRunWarnings:[],
HostUserAgent:await options.driver.getUserAgent(),
NetworkUserAgent:'',
BenchmarkIndex:0,
traces:{},
devtoolsLogs:{},
settings:options.settings,
URL:{requestedUrl:options.requestedUrl,finalUrl:''}};

}






static async run(passes,options){
const driver=options.driver;


const gathererResults={};

try{
await driver.connect();
const baseArtifacts=await GatherRunner.getBaseArtifacts(options);
await GatherRunner.loadBlank(driver);
baseArtifacts.BenchmarkIndex=await options.driver.getBenchmarkIndex();
await GatherRunner.setupDriver(driver,options);


let firstPass=true;
for(const passConfig of passes){
const passContext={
driver:options.driver,

url:options.requestedUrl,
settings:options.settings,
passConfig,

LighthouseRunWarnings:baseArtifacts.LighthouseRunWarnings};


await driver.setThrottling(options.settings,passConfig);
await GatherRunner.beforePass(passContext,gathererResults);
await GatherRunner.pass(passContext,gathererResults);
const passData=await GatherRunner.afterPass(passContext,gathererResults);


baseArtifacts.devtoolsLogs[passConfig.passName]=passData.devtoolsLog;

const userAgentEntry=passData.devtoolsLog.find(entry=>
entry.method==='Network.requestWillBeSent'&&
!!entry.params.request.headers['User-Agent']);


if(userAgentEntry&&!baseArtifacts.NetworkUserAgent){

baseArtifacts.NetworkUserAgent=userAgentEntry.params.request.headers['User-Agent'];
}


if(passData.trace){
baseArtifacts.traces[passConfig.passName]=passData.trace;
}

if(firstPass){

baseArtifacts.URL.finalUrl=passContext.url;
firstPass=false;
}
}
const resetStorage=!options.settings.disableStorageReset;
if(resetStorage)await driver.clearDataForOrigin(options.requestedUrl);
await GatherRunner.disposeDriver(driver);
return GatherRunner.collectArtifacts(gathererResults,baseArtifacts);
}catch(err){

GatherRunner.disposeDriver(driver);
throw err;
}
}}


module.exports=GatherRunner;

},{"../config/constants":8,"../gather/driver.js":19,"../lib/lh-error":85,"../lib/network-recorder.js":87,"../lib/url-shim":"url","lighthouse-logger":147}],21:[function(require,module,exports){





'use strict';














class Gatherer{



get name(){

return this.constructor.name;
}








beforePass(passContext){}







pass(passContext){}









afterPass(passContext,loadData){}}




module.exports=Gatherer;

},{}],22:[function(require,module,exports){





'use strict';

const Runner=require('./runner');
const log=require('lighthouse-logger');
const ChromeProtocol=require('./gather/connections/cri.js');
const Config=require('./config/config');

const URL=require('./lib/url-shim.js');
const LHError=require('./lib/lh-error.js');


























async function lighthouse(url,flags={},configJSON,connection){

if(url&&(!URL.isValid(url)||!URL.isProtocolAllowed(url))){
throw new LHError(LHError.errors.INVALID_URL);
}


flags.logLevel=flags.logLevel||'error';
log.setLevel(flags.logLevel);

const config=generateConfig(configJSON,flags);

connection=connection||new ChromeProtocol(flags.port,flags.hostname);


return Runner.run(connection,{url,config});
}









function generateConfig(configJson,flags){
return new Config(configJson,flags);
}

lighthouse.generateConfig=generateConfig;
lighthouse.getAuditList=Runner.getAuditList;
lighthouse.traceCategories=require('./gather/driver').traceCategories;
lighthouse.Audit=require('./audits/audit');
lighthouse.Gatherer=require('./gather/gatherers/gatherer');

module.exports=lighthouse;

},{"./audits/audit":2,"./config/config":7,"./gather/connections/cri.js":107,"./gather/driver":19,"./gather/gatherers/gatherer":21,"./lib/lh-error.js":85,"./lib/url-shim.js":"url","./runner":99,"lighthouse-logger":147}],23:[function(require,module,exports){





'use strict';

const isEqual=require('lodash.isequal');






class ArbitraryEqualityMap{
constructor(){
this._equalsFn=(a,b)=>a===b;

this._entries=[];
}




setEqualityFn(equalsFn){
this._equalsFn=equalsFn;
}





has(key){
return this._findIndexOf(key)!==-1;
}





get(key){
const entry=this._entries[this._findIndexOf(key)];
return entry&&entry.value;
}





set(key,value){
let index=this._findIndexOf(key);
if(index===-1)index=this._entries.length;
this._entries[index]={key,value};
}





_findIndexOf(key){
for(let i=0;i<this._entries.length;i++){
if(this._equalsFn(key,this._entries[i].key))return i;
}

return-1;
}









static deepEquals(objA,objB){
return isEqual(objA,objB);
}}


module.exports=ArbitraryEqualityMap;

},{"lodash.isequal":178}],24:[function(require,module,exports){
(function(process){





'use strict';


const path=require('path');
const log=require('lighthouse-logger');
const stream=require('stream');
const Simulator=require('./dependency-graph/simulator/simulator');
const lanternTraceSaver=require('./lantern-trace-saver');
const Metrics=require('./traces/pwmetrics-events');
const rimraf=require('rimraf');
const mkdirp=require('mkdirp');

const artifactsFilename='artifacts.json';
const traceSuffix='.trace.json';
const devtoolsLogSuffix='.devtoolslog.json';















async function loadArtifacts(basePath){
log.log('Reading artifacts from disk:',basePath);

if(!fs.existsSync(basePath)){
throw new Error('No saved artifacts found at '+basePath);
}



const artifacts=JSON.parse(fs.readFileSync(path.join(basePath,artifactsFilename),'utf8'));

const filenames=fs.readdirSync(basePath);


artifacts.devtoolsLogs={};
filenames.filter(f=>f.endsWith(devtoolsLogSuffix)).forEach(filename=>{
const passName=filename.replace(devtoolsLogSuffix,'');
const devtoolsLog=JSON.parse(fs.readFileSync(path.join(basePath,filename),'utf8'));
artifacts.devtoolsLogs[passName]=devtoolsLog;
});


artifacts.traces={};
filenames.filter(f=>f.endsWith(traceSuffix)).forEach(filename=>{
const file=fs.readFileSync(path.join(basePath,filename),{encoding:'utf-8'});
const trace=JSON.parse(file);
const passName=filename.replace(traceSuffix,'');
artifacts.traces[passName]=Array.isArray(trace)?{traceEvents:trace}:trace;
});

return artifacts;
}








async function saveArtifacts(artifacts,basePath){
mkdirp.sync(basePath);
rimraf.sync(`${basePath}/*${traceSuffix}`);
rimraf.sync(`${basePath}/${artifactsFilename}`);

const{traces,devtoolsLogs,...restArtifacts}=artifacts;


for(const[passName,trace]of Object.entries(traces)){
await saveTrace(trace,`${basePath}/${passName}${traceSuffix}`);
}


for(const[passName,devtoolsLog]of Object.entries(devtoolsLogs)){
const log=JSON.stringify(devtoolsLog);
fs.writeFileSync(`${basePath}/${passName}${devtoolsLogSuffix}`,log,'utf8');
}


const restArtifactsString=JSON.stringify(restArtifacts,null,2);
fs.writeFileSync(`${basePath}/${artifactsFilename}`,restArtifactsString,'utf8');
log.log('Artifacts saved to disk in folder:',basePath);
}







async function prepareAssets(artifacts,audits){
const passNames=Object.keys(artifacts.traces);

const assets=[];

for(const passName of passNames){
const trace=artifacts.traces[passName];
const devtoolsLog=artifacts.devtoolsLogs[passName];

const traceData=Object.assign({},trace);
if(audits){
const evts=new Metrics(traceData.traceEvents,audits).generateFakeEvents();
traceData.traceEvents=traceData.traceEvents.concat(evts);
}

assets.push({
passName,
traceData,
devtoolsLog});

}

return assets;
}








function*traceJsonGenerator(traceData){
const EVENTS_PER_ITERATION=500;
const keys=Object.keys(traceData);

yield'{\n';


yield'"traceEvents": [\n';
if(traceData.traceEvents.length>0){
const eventsIterator=traceData.traceEvents[Symbol.iterator]();

const firstEvent=eventsIterator.next().value;
yield`  ${JSON.stringify(firstEvent)}`;

let eventsRemaining=EVENTS_PER_ITERATION;
let eventsJSON='';
for(const event of eventsIterator){
eventsJSON+=`,\n  ${JSON.stringify(event)}`;
eventsRemaining--;
if(eventsRemaining===0){
yield eventsJSON;
eventsRemaining=EVENTS_PER_ITERATION;
eventsJSON='';
}
}
yield eventsJSON;
}
yield'\n]';


if(keys.length>1){
for(const key of keys){
if(key==='traceEvents')continue;

yield`,\n"${key}": ${JSON.stringify(traceData[key],null,2)}`;
}
}

yield'}\n';
}







function saveTrace(traceData,traceFilename){
return new Promise((resolve,reject)=>{
const traceIter=traceJsonGenerator(traceData);


const traceStream=new stream.Readable({
read(){
const next=traceIter.next();
this.push(next.done?null:next.value);
}});


const writeStream=fs.createWriteStream(traceFilename);
writeStream.on('finish',resolve);
writeStream.on('error',reject);

traceStream.pipe(writeStream);
});
}





async function saveLanternDebugTraces(pathWithBasename){
if(!process.env.LANTERN_DEBUG)return;

for(const[label,nodeTimings]of Simulator.ALL_NODE_TIMINGS){
if(lanternTraceSaver.simulationNamesToIgnore.includes(label))continue;

const traceFilename=`${pathWithBasename}-${label}${traceSuffix}`;
await saveTrace(lanternTraceSaver.convertNodeTimingsToTrace(nodeTimings),traceFilename);
log.log('saveAssets',`${label} lantern trace file streamed to disk: ${traceFilename}`);
}
}








async function saveAssets(artifacts,audits,pathWithBasename){
const allAssets=await prepareAssets(artifacts,audits);
const saveAll=allAssets.map(async(passAssets,index)=>{
const devtoolsLogFilename=`${pathWithBasename}-${index}${devtoolsLogSuffix}`;
fs.writeFileSync(devtoolsLogFilename,JSON.stringify(passAssets.devtoolsLog,null,2));
log.log('saveAssets','devtools log saved to disk: '+devtoolsLogFilename);

const streamTraceFilename=`${pathWithBasename}-${index}${traceSuffix}`;
log.log('saveAssets','streaming trace file to disk: '+streamTraceFilename);
await saveTrace(passAssets.traceData,streamTraceFilename);
log.log('saveAssets','trace file streamed to disk: '+streamTraceFilename);
});

await Promise.all(saveAll);
await saveLanternDebugTraces(pathWithBasename);
}







async function logAssets(artifacts,audits){
const allAssets=await prepareAssets(artifacts,audits);
allAssets.map(passAssets=>{
const dtlogdata=JSON.stringify(passAssets.devtoolsLog);

console.log(`loggedAsset %%% devtoolslog-${passAssets.passName}.json %%% ${dtlogdata}`);
const traceIter=traceJsonGenerator(passAssets.traceData);
let traceJson='';
for(const trace of traceIter){
traceJson+=trace;
}

console.log(`loggedAsset %%% trace-${passAssets.passName}.json %%% ${traceJson}`);
});
}

module.exports={
saveArtifacts,
loadArtifacts,
saveAssets,
prepareAssets,
saveTrace,
logAssets};


}).call(this,require('_process'));
},{"./dependency-graph/simulator/simulator":31,"./lantern-trace-saver":84,"./traces/pwmetrics-events":94,"_process":126,"lighthouse-logger":147,"mkdirp":107,"path":124,"rimraf":107,"stream":141}],25:[function(require,module,exports){





'use strict';



















class BaseNode{



constructor(id){
this._id=id;
this._isMainDocument=false;

this._dependents=[];

this._dependencies=[];
}




get id(){
return this._id;
}




get type(){
throw new Error('Unimplemented');
}




get startTime(){
throw new Error('Unimplemented');
}




get endTime(){
throw new Error('Unimplemented');
}




setIsMainDocument(value){
this._isMainDocument=value;
}




isMainDocument(){
return this._isMainDocument;
}




getDependents(){
return this._dependents.slice();
}




getDependencies(){
return this._dependencies.slice();
}




getNumberOfDependencies(){
return this._dependencies.length;
}




getRootNode(){
let rootNode=this;
while(rootNode._dependencies.length){
rootNode=rootNode._dependencies[0];
}

return rootNode;
}




addDependent(node){
node.addDependency(this);
}




addDependency(node){
if(this._dependencies.includes(node)){
return;
}

node._dependents.push(this);
this._dependencies.push(node);
}




removeDependent(node){
node.removeDependency(this);
}




removeDependency(node){
if(!this._dependencies.includes(node)){
return;
}

const thisIndex=node._dependents.indexOf(this);
node._dependents.splice(thisIndex,1);
this._dependencies.splice(this._dependencies.indexOf(node),1);
}

removeAllDependencies(){
for(const node of this._dependencies.slice()){
this.removeDependency(node);
}
}





cloneWithoutRelationships(){
const node=new BaseNode(this.id);
node.setIsMainDocument(this._isMainDocument);
return node;
}








cloneWithRelationships(predicate){
const rootNode=this.getRootNode();


let shouldIncludeNode=()=>true;
if(predicate){
const idsToInclude=new Set();
rootNode.traverse(node=>{
if(predicate(node)){
node.traverse(
node=>idsToInclude.add(node.id),
node=>node._dependencies.filter(parent=>!idsToInclude.has(parent)));

}
});

shouldIncludeNode=node=>idsToInclude.has(node.id);
}

const idToNodeMap=new Map();
rootNode.traverse(originalNode=>{
if(!shouldIncludeNode(originalNode))return;
const clonedNode=originalNode.cloneWithoutRelationships();
idToNodeMap.set(clonedNode.id,clonedNode);
});

rootNode.traverse(originalNode=>{
if(!shouldIncludeNode(originalNode))return;
const clonedNode=idToNodeMap.get(originalNode.id);

for(const dependency of originalNode._dependencies){
const clonedDependency=idToNodeMap.get(dependency.id);
clonedNode.addDependency(clonedDependency);
}
});

if(!idToNodeMap.has(this.id))throw new Error(`Cloned graph missing node ${this.id}`);
return idToNodeMap.get(this.id);
}







_traversePaths(iterator,getNext){
const stack=[[this]];
while(stack.length){


const path=stack.shift();
const node=path[0];
iterator(node,path);

const nodesToAdd=getNext(node);
for(const nextNode of nodesToAdd){
stack.push([nextNode].concat(path));
}
}
}







traverse(iterator,getNext){
if(!getNext){
getNext=node=>node.getDependents();
}

const visited=new Set();
const originalGetNext=getNext;

getNext=node=>{
visited.add(node.id);
const allNodesToVisit=originalGetNext(node);
const nodesToVisit=allNodesToVisit.filter(nextNode=>!visited.has(nextNode.id));
nodesToVisit.forEach(nextNode=>visited.add(nextNode.id));
return nodesToVisit;
};

this._traversePaths(iterator,getNext);
}







static hasCycle(node,direction='both'){

if(direction==='both'){
return BaseNode.hasCycle(node,'dependents')||BaseNode.hasCycle(node,'dependencies');
}

const visited=new Set();

const currentPath=[];
const toVisit=[node];
const depthAdded=new Map([[node,0]]);


while(toVisit.length){



const currentNode=toVisit.pop();


if(currentPath.includes(currentNode))return true;

if(visited.has(currentNode))continue;



while(currentPath.length>depthAdded.get(currentNode))currentPath.pop();


visited.add(currentNode);
currentPath.push(currentNode);


const nodesToExplore=direction==='dependents'?
currentNode._dependents:
currentNode._dependencies;
for(const nextNode of nodesToExplore){
if(toVisit.includes(nextNode))continue;
toVisit.push(nextNode);
depthAdded.set(nextNode,currentPath.length);
}
}

return false;
}}


BaseNode.TYPES={
NETWORK:'network',
CPU:'cpu'};


module.exports=BaseNode;

},{}],26:[function(require,module,exports){





'use strict';

const BaseNode=require('./base-node');

class CPUNode extends BaseNode{




constructor(parentEvent,childEvents=[]){
const nodeId=`${parentEvent.tid}.${parentEvent.ts}`;
super(nodeId);

this._event=parentEvent;
this._childEvents=childEvents;
}

get type(){
return BaseNode.TYPES.CPU;
}




get startTime(){
return this._event.ts;
}




get endTime(){
return this._event.ts+this._event.dur;
}




get event(){
return this._event;
}




get childEvents(){
return this._childEvents;
}





didPerformLayout(){
return this._childEvents.some(evt=>evt.name==='Layout');
}






isEvaluateScriptFor(urls){
return this._childEvents.some(evt=>{
return evt.name==='EvaluateScript'&&
!!evt.args.data&&!!evt.args.data.url&&
urls.has(evt.args.data.url);
});
}




cloneWithoutRelationships(){
return new CPUNode(this._event,this._childEvents);
}}


module.exports=CPUNode;

},{"./base-node":25}],27:[function(require,module,exports){





'use strict';

const BaseNode=require('./base-node');
const NetworkRequest=require('../network-request');

class NetworkNode extends BaseNode{



constructor(networkRecord){
super(networkRecord.requestId);

this._record=networkRecord;
}

get type(){
return BaseNode.TYPES.NETWORK;
}




get startTime(){
return this._record.startTime*1000*1000;
}




get endTime(){
return this._record.endTime*1000*1000;
}




get record(){
return this._record;
}




get initiatorType(){
return this._record.initiator&&this._record.initiator.type;
}




get fromDiskCache(){
return!!this._record.fromDiskCache;
}




hasRenderBlockingPriority(){
const priority=this._record.priority;
const isScript=this._record.resourceType===NetworkRequest.TYPES.Script;
const isDocument=this._record.resourceType===NetworkRequest.TYPES.Document;
const isBlockingScript=priority==='High'&&isScript;
const isBlockingHtmlImport=priority==='High'&&isDocument;
return priority==='VeryHigh'||isBlockingScript||isBlockingHtmlImport;
}




cloneWithoutRelationships(){
const node=new NetworkNode(this._record);
node.setIsMainDocument(this._isMainDocument);
return node;
}}


module.exports=NetworkNode;

},{"../network-request":88,"./base-node":25}],28:[function(require,module,exports){





'use strict';

const NetworkAnalyzer=require('./network-analyzer');
const TcpConnection=require('./tcp-connection');

const DEFAULT_SERVER_RESPONSE_TIME=30;
const TLS_SCHEMES=['https','wss'];



const CONNECTIONS_PER_ORIGIN=6;

module.exports=class ConnectionPool{




constructor(records,options){
this._options=Object.assign(
{
rtt:undefined,
throughput:undefined,
additionalRttByOrigin:new Map(),
serverResponseTimeByOrigin:new Map()},

options);


if(!this._options.rtt||!this._options.throughput){
throw new Error('Cannot create pool with no rtt or throughput');
}

this._records=records;

this._connectionsByOrigin=new Map();

this._connectionsByRecord=new Map();
this._connectionsInUse=new Set();
this._connectionReusedByRequestId=NetworkAnalyzer.estimateIfConnectionWasReused(records,{
forceCoarseEstimates:true});


this._initializeConnections();
}




connectionsInUse(){
return Array.from(this._connectionsInUse);
}

_initializeConnections(){
const connectionReused=this._connectionReusedByRequestId;
const additionalRttByOrigin=this._options.additionalRttByOrigin;
const serverResponseTimeByOrigin=this._options.serverResponseTimeByOrigin;

const recordsByOrigin=NetworkAnalyzer.groupByOrigin(this._records);
for(const[origin,records]of recordsByOrigin.entries()){
const connections=[];
const additionalRtt=additionalRttByOrigin.get(origin)||0;
const responseTime=serverResponseTimeByOrigin.get(origin)||DEFAULT_SERVER_RESPONSE_TIME;

for(const record of records){
if(connectionReused.get(record.requestId))continue;

const isTLS=TLS_SCHEMES.includes(record.parsedURL.scheme);
const isH2=record.protocol==='h2';
const connection=new TcpConnection(
this._options.rtt+additionalRtt,
this._options.throughput,
responseTime,
isTLS,
isH2);


connections.push(connection);
}

if(!connections.length){
throw new Error(`Could not find a connection for origin: ${origin}`);
}


while(connections.length<CONNECTIONS_PER_ORIGIN)connections.push(connections[0].clone());

this._connectionsByOrigin.set(origin,connections);
}
}













acquire(record,options={}){
if(this._connectionsByRecord.has(record)){

return this._connectionsByRecord.get(record);
}

const origin=String(record.parsedURL.securityOrigin);

const connections=this._connectionsByOrigin.get(origin)||[];

const availableConnections=connections.
filter(connection=>!this._connectionsInUse.has(connection)).
sort((a,b)=>b.congestionWindow-a.congestionWindow);

const observedConnectionWasReused=!!this._connectionReusedByRequestId.get(record.requestId);


let connectionToUse=availableConnections[0];
if(!options.ignoreConnectionReused){
connectionToUse=availableConnections.find(
connection=>connection.isWarm()===observedConnectionWasReused);

}

if(!connectionToUse)return null;

this._connectionsInUse.add(connectionToUse);
this._connectionsByRecord.set(record,connectionToUse);
return connectionToUse;
}




release(record){
const connection=this._connectionsByRecord.get(record);
this._connectionsByRecord.delete(record);
this._connectionsInUse.delete(connection);
}};


},{"./network-analyzer":30,"./tcp-connection":32}],29:[function(require,module,exports){





'use strict';






const DNS_RESOLUTION_RTT_MULTIPLIER=2;

class DNSCache{



constructor(options){
this._options=Object.assign(
{
rtt:undefined},

options);


if(!this._options.rtt){
throw new Error('Cannot create DNS cache with no rtt');
}

this._rtt=this._options.rtt;

this._resolvedDomainNames=new Map();
}






getTimeUntilResolution(request,options){
const{requestedAt=0,shouldUpdateCache=false}=options||{};

const domain=request.parsedURL.host;
const cacheEntry=this._resolvedDomainNames.get(domain);
let timeUntilResolved=this._rtt*DNSCache.RTT_MULTIPLIER;
if(cacheEntry){
const timeUntilCachedIsResolved=Math.max(cacheEntry.resolvedAt-requestedAt,0);
timeUntilResolved=Math.min(timeUntilCachedIsResolved,timeUntilResolved);
}

const resolvedAt=requestedAt+timeUntilResolved;
if(shouldUpdateCache)this._updateCacheResolvedAtIfNeeded(request,resolvedAt);

return timeUntilResolved;
}





_updateCacheResolvedAtIfNeeded(request,resolvedAt){
const domain=request.parsedURL.host;
const cacheEntry=this._resolvedDomainNames.get(domain)||{resolvedAt};
cacheEntry.resolvedAt=Math.min(cacheEntry.resolvedAt,resolvedAt);
this._resolvedDomainNames.set(domain,cacheEntry);
}








setResolvedAt(domain,resolvedAt){
this._resolvedDomainNames.set(domain,{resolvedAt});
}}


DNSCache.RTT_MULTIPLIER=DNS_RESOLUTION_RTT_MULTIPLIER;

module.exports=DNSCache;

},{}],30:[function(require,module,exports){





'use strict';

const INITIAL_CWD=14*1024;
const NetworkRequest=require('../../network-request');


const DEFAULT_SERVER_RESPONSE_PERCENTAGE=0.4;






const SERVER_RESPONSE_PERCENTAGE_OF_TTFB={
Document:0.9,
XHR:0.9,
Fetch:0.9};


class NetworkAnalyzer{



static get SUMMARY(){
return'__SUMMARY__';
}





static groupByOrigin(records){
const grouped=new Map();
records.forEach(item=>{
const key=item.parsedURL.securityOrigin;
const group=grouped.get(key)||[];
group.push(item);
grouped.set(key,group);
});
return grouped;
}





static getSummary(values){
values.sort((a,b)=>a-b);

return{
min:values[0],
max:values[values.length-1],
avg:values.reduce((a,b)=>a+b,0)/values.length,
median:values[Math.floor((values.length-1)/2)]};

}





static summarize(values){
const summaryByKey=new Map();
const allEstimates=[];
for(const[key,estimates]of values){
summaryByKey.set(key,NetworkAnalyzer.getSummary(estimates));
allEstimates.push(...estimates);
}

summaryByKey.set(NetworkAnalyzer.SUMMARY,NetworkAnalyzer.getSummary(allEstimates));
return summaryByKey;
}








static _estimateValueByOrigin(records,iteratee){
const connectionWasReused=NetworkAnalyzer.estimateIfConnectionWasReused(records);
const groupedByOrigin=NetworkAnalyzer.groupByOrigin(records);

const estimates=new Map();
for(const[origin,originRecords]of groupedByOrigin.entries()){

let originEstimates=[];

for(const record of originRecords){
const timing=record.timing;
if(!timing)continue;

const value=iteratee({
record,
timing,
connectionReused:connectionWasReused.get(record.requestId)});

if(typeof value!=='undefined'){
originEstimates=originEstimates.concat(value);
}
}

if(!originEstimates.length)continue;
estimates.set(origin,originEstimates);
}

return estimates;
}








static _estimateRTTByOriginViaTCPTiming(records){
return NetworkAnalyzer._estimateValueByOrigin(records,({timing,connectionReused})=>{
if(connectionReused)return;



if(timing.sslStart>0&&timing.sslEnd>0){
return[timing.connectEnd-timing.sslStart,timing.sslStart-timing.connectStart];
}else if(timing.connectStart>0&&timing.connectEnd>0){
return timing.connectEnd-timing.connectStart;
}
});
}









static _estimateRTTByOriginViaDownloadTiming(records){
return NetworkAnalyzer._estimateValueByOrigin(records,({record,timing,connectionReused})=>{
if(connectionReused)return;

if(record.transferSize<=INITIAL_CWD)return;
if(!Number.isFinite(timing.receiveHeadersEnd)||timing.receiveHeadersEnd<0)return;


const totalTime=(record.endTime-record.startTime)*1000;
const downloadTimeAfterFirstByte=totalTime-timing.receiveHeadersEnd;
const numberOfRoundTrips=Math.log2(record.transferSize/INITIAL_CWD);



if(numberOfRoundTrips>5)return;
return downloadTimeAfterFirstByte/numberOfRoundTrips;
});
}










static _estimateRTTByOriginViaSendStartTiming(records){
return NetworkAnalyzer._estimateValueByOrigin(records,({record,timing,connectionReused})=>{
if(connectionReused)return;
if(!Number.isFinite(timing.sendStart)||timing.sendStart<0)return;



let roundTrips=2;
if(record.parsedURL.scheme==='https')roundTrips+=1;
return timing.sendStart/roundTrips;
});
}










static _estimateRTTByOriginViaHeadersEndTiming(records){
return NetworkAnalyzer._estimateValueByOrigin(records,({record,timing,connectionReused})=>{
if(!Number.isFinite(timing.receiveHeadersEnd)||timing.receiveHeadersEnd<0)return;
if(!record.resourceType)return;

const serverResponseTimePercentage=SERVER_RESPONSE_PERCENTAGE_OF_TTFB[record.resourceType]||
DEFAULT_SERVER_RESPONSE_PERCENTAGE;
const estimatedServerResponseTime=timing.receiveHeadersEnd*serverResponseTimePercentage;



let roundTrips=1;



if(!connectionReused){
roundTrips+=1;
if(record.parsedURL.scheme==='https')roundTrips+=1;
roundTrips+=1;
}


return Math.max((timing.receiveHeadersEnd-estimatedServerResponseTime)/roundTrips,3);
});
}








static _estimateResponseTimeByOrigin(records,rttByOrigin){
return NetworkAnalyzer._estimateValueByOrigin(records,({record,timing})=>{
if(!Number.isFinite(timing.receiveHeadersEnd)||timing.receiveHeadersEnd<0)return;
if(!Number.isFinite(timing.sendEnd)||timing.sendEnd<0)return;

const ttfb=timing.receiveHeadersEnd-timing.sendEnd;
const origin=record.parsedURL.securityOrigin;
const rtt=rttByOrigin.get(origin)||rttByOrigin.get(NetworkAnalyzer.SUMMARY)||0;
return Math.max(ttfb-rtt,0);
});
}





static canTrustConnectionInformation(records){
const connectionIdWasStarted=new Map();
for(const record of records){
const started=connectionIdWasStarted.get(record.connectionId)||!record.connectionReused;
connectionIdWasStarted.set(record.connectionId,started);
}


if(connectionIdWasStarted.size<=1)return false;

return Array.from(connectionIdWasStarted.values()).every(started=>started);
}









static estimateIfConnectionWasReused(records,options){
options=Object.assign({forceCoarseEstimates:false},options);


if(!options.forceCoarseEstimates&&NetworkAnalyzer.canTrustConnectionInformation(records)){

return new Map(records.map(record=>[record.requestId,!!record.connectionReused]));
}





const connectionWasReused=new Map();
const groupedByOrigin=NetworkAnalyzer.groupByOrigin(records);
for(const[_,originRecords]of groupedByOrigin.entries()){
const earliestReusePossible=originRecords.
map(record=>record.endTime).
reduce((a,b)=>Math.min(a,b),Infinity);

for(const record of originRecords){
connectionWasReused.set(
record.requestId,
record.startTime>=earliestReusePossible||record.protocol==='h2');

}



const firstRecord=originRecords.reduce((a,b)=>a.startTime>b.startTime?b:a);
connectionWasReused.set(firstRecord.requestId,false);
}

return connectionWasReused;
}










static estimateRTTByOrigin(records,options){
options=Object.assign(
{


forceCoarseEstimates:false,


coarseEstimateMultiplier:0.3,

useDownloadEstimates:true,
useSendStartEstimates:true,
useHeadersEndEstimates:true},

options);


let estimatesByOrigin=NetworkAnalyzer._estimateRTTByOriginViaTCPTiming(records);
if(!estimatesByOrigin.size||options.forceCoarseEstimates){
estimatesByOrigin=new Map();
const estimatesViaDownload=NetworkAnalyzer._estimateRTTByOriginViaDownloadTiming(records);
const estimatesViaSendStart=NetworkAnalyzer._estimateRTTByOriginViaSendStartTiming(records);
const estimatesViaTTFB=NetworkAnalyzer._estimateRTTByOriginViaHeadersEndTiming(records);

for(const[origin,estimates]of estimatesViaDownload.entries()){
if(!options.useDownloadEstimates)continue;
estimatesByOrigin.set(origin,estimates);
}

for(const[origin,estimates]of estimatesViaSendStart.entries()){
if(!options.useSendStartEstimates)continue;
const existing=estimatesByOrigin.get(origin)||[];
estimatesByOrigin.set(origin,existing.concat(estimates));
}

for(const[origin,estimates]of estimatesViaTTFB.entries()){
if(!options.useHeadersEndEstimates)continue;
const existing=estimatesByOrigin.get(origin)||[];
estimatesByOrigin.set(origin,existing.concat(estimates));
}

for(const estimates of estimatesByOrigin.values()){
estimates.forEach((x,i)=>estimates[i]=x*options.coarseEstimateMultiplier);
}
}

if(!estimatesByOrigin.size)throw new Error('No timing information available');
return NetworkAnalyzer.summarize(estimatesByOrigin);
}









static estimateServerResponseTimeByOrigin(records,options){
options=Object.assign(
{
rttByOrigin:null},

options);


let rttByOrigin=options.rttByOrigin;
if(!rttByOrigin){
rttByOrigin=NetworkAnalyzer.estimateRTTByOrigin(records,options);
for(const[origin,summary]of rttByOrigin.entries()){
rttByOrigin.set(origin,summary.min);
}
}

const estimatesByOrigin=NetworkAnalyzer._estimateResponseTimeByOrigin(records,rttByOrigin);
return NetworkAnalyzer.summarize(estimatesByOrigin);
}





static findMainDocument(records){

const documentRequests=records.filter(record=>record.resourceType===
NetworkRequest.TYPES.Document);
return documentRequests.sort((a,b)=>a.startTime-b.startTime)[0];
}}


module.exports=NetworkAnalyzer;









},{"../../network-request":88}],31:[function(require,module,exports){





'use strict';

const BaseNode=require('../base-node');
const TcpConnection=require('./tcp-connection');
const ConnectionPool=require('./connection-pool');
const DNSCache=require('./dns-cache');
const mobile3G=require('../../../config/constants').throttling.mobile3G;






const DEFAULT_MAXIMUM_CONCURRENT_REQUESTS=10;

const DEFAULT_LAYOUT_TASK_MULTIPLIER=0.5;

const DEFAULT_MAXIMUM_CPU_TASK_DURATION=10000;

const NodeState={
NotReadyToStart:0,
ReadyToStart:1,
InProgress:2,
Complete:3};



const ALL_SIMULATION_NODE_TIMINGS=new Map();

class Simulator{



constructor(options){

this._options=Object.assign(
{
rtt:mobile3G.rttMs,
throughput:mobile3G.throughputKbps*1024,
maximumConcurrentRequests:DEFAULT_MAXIMUM_CONCURRENT_REQUESTS,
cpuSlowdownMultiplier:mobile3G.cpuSlowdownMultiplier,
layoutTaskMultiplier:DEFAULT_LAYOUT_TASK_MULTIPLIER,
additionalRttByOrigin:new Map(),
serverResponseTimeByOrigin:new Map()},

options);


this._rtt=this._options.rtt;
this._throughput=this._options.throughput;
this._maximumConcurrentRequests=Math.max(Math.min(
TcpConnection.maximumSaturatedConnections(this._rtt,this._throughput),
this._options.maximumConcurrentRequests),
1);
this._cpuSlowdownMultiplier=this._options.cpuSlowdownMultiplier;
this._layoutTaskMultiplier=this._cpuSlowdownMultiplier*this._options.layoutTaskMultiplier;


this._flexibleOrdering=false;

this._nodeTimings=new Map();

this._numberInProgressByType=new Map();

this._nodes={};
this._dns=new DNSCache({rtt:this._rtt});

this._connectionPool=null;
}




_initializeConnectionPool(graph){

const records=[];
graph.getRootNode().traverse(node=>{
if(node.type===BaseNode.TYPES.NETWORK){
records.push(node.record);
}
});

this._connectionPool=new ConnectionPool(records,this._options);
}




_initializeAuxiliaryData(){
this._nodeTimings=new Map();
this._numberInProgressByType=new Map();

this._nodes={};
for(const state of Object.values(NodeState)){
this._nodes[state]=new Set();
}
}





_numberInProgress(type){
return this._numberInProgressByType.get(type)||0;
}





_setTimingData(node,values){
const timingData=this._nodeTimings.get(node)||{};
Object.assign(timingData,values);
this._nodeTimings.set(node,timingData);
}





_getTimingData(node){
const timingData=this._nodeTimings.get(node);
if(!timingData)throw new Error(`Unable to get timing data for node ${node.id}`);
return timingData;
}





_markNodeAsReadyToStart(node,queuedTime){
this._nodes[NodeState.ReadyToStart].add(node);
this._nodes[NodeState.NotReadyToStart].delete(node);
this._setTimingData(node,{queuedTime});
}





_markNodeAsInProgress(node,startTime){
this._nodes[NodeState.InProgress].add(node);
this._nodes[NodeState.ReadyToStart].delete(node);
this._numberInProgressByType.set(node.type,this._numberInProgress(node.type)+1);
this._setTimingData(node,{startTime});
}





_markNodeAsComplete(node,endTime){
this._nodes[NodeState.Complete].add(node);
this._nodes[NodeState.InProgress].delete(node);
this._numberInProgressByType.set(node.type,this._numberInProgress(node.type)-1);
this._setTimingData(node,{endTime});


for(const dependent of node.getDependents()){

const dependencies=dependent.getDependencies();
if(dependencies.some(dep=>!this._nodes[NodeState.Complete].has(dep)))continue;


this._markNodeAsReadyToStart(dependent,endTime);
}
}





_acquireConnection(record){
return this._connectionPool.acquire(record,{
ignoreConnectionReused:this._flexibleOrdering});

}





_startNodeIfPossible(node,totalElapsedTime){
if(node.type===BaseNode.TYPES.CPU){

if(this._numberInProgress(node.type)===0){
this._markNodeAsInProgress(node,totalElapsedTime);
this._setTimingData(node,{timeElapsed:0});
}

return;
}

if(node.type!==BaseNode.TYPES.NETWORK)throw new Error('Unsupported');


if(!node.fromDiskCache){

const numberOfActiveRequests=this._numberInProgress(node.type);
if(numberOfActiveRequests>=this._maximumConcurrentRequests)return;
const connection=this._acquireConnection(node.record);
if(!connection)return;
}

this._markNodeAsInProgress(node,totalElapsedTime);
this._setTimingData(node,{
timeElapsed:0,
timeElapsedOvershoot:0,
bytesDownloaded:0});

}





_updateNetworkCapacity(){
for(const connection of this._connectionPool.connectionsInUse()){
connection.setThroughput(this._throughput/this._nodes[NodeState.InProgress].size);
}
}






_estimateTimeRemaining(node){
if(node.type===BaseNode.TYPES.CPU){
return this._estimateCPUTimeRemaining(node);
}else if(node.type===BaseNode.TYPES.NETWORK){
return this._estimateNetworkTimeRemaining(node);
}else{
throw new Error('Unsupported');
}
}





_estimateCPUTimeRemaining(cpuNode){
const timingData=this._getTimingData(cpuNode);
const multiplier=cpuNode.didPerformLayout()?
this._layoutTaskMultiplier:
this._cpuSlowdownMultiplier;
const totalDuration=Math.min(
Math.round(cpuNode.event.dur/1000*multiplier),
DEFAULT_MAXIMUM_CPU_TASK_DURATION);

const estimatedTimeElapsed=totalDuration-timingData.timeElapsed;
this._setTimingData(cpuNode,{estimatedTimeElapsed});
return estimatedTimeElapsed;
}





_estimateNetworkTimeRemaining(networkNode){
const record=networkNode.record;
const timingData=this._getTimingData(networkNode);

let timeElapsed=0;
if(networkNode.fromDiskCache){


const sizeInMb=(record.resourceSize||0)/1024/1024;
timeElapsed=8+20*sizeInMb-timingData.timeElapsed;
}else{

const connection=this._acquireConnection(record);
const dnsResolutionTime=this._dns.getTimeUntilResolution(record,{
requestedAt:timingData.startTime,
shouldUpdateCache:true});

const timeAlreadyElapsed=timingData.timeElapsed;
const calculation=connection.simulateDownloadUntil(
record.transferSize-timingData.bytesDownloaded,
{timeAlreadyElapsed,dnsResolutionTime,maximumTimeToElapse:Infinity});


timeElapsed=calculation.timeElapsed;
}

const estimatedTimeElapsed=timeElapsed+timingData.timeElapsedOvershoot;
this._setTimingData(networkNode,{estimatedTimeElapsed});
return estimatedTimeElapsed;
}





_findNextNodeCompletionTime(){
let minimumTime=Infinity;
for(const node of this._nodes[NodeState.InProgress]){
minimumTime=Math.min(minimumTime,this._estimateTimeRemaining(node));
}

return minimumTime;
}







_updateProgressMadeInTimePeriod(node,timePeriodLength,totalElapsedTime){
const timingData=this._getTimingData(node);
const isFinished=timingData.estimatedTimeElapsed===timePeriodLength;

if(node.type===BaseNode.TYPES.CPU||node.fromDiskCache){
return isFinished?
this._markNodeAsComplete(node,totalElapsedTime):
timingData.timeElapsed+=timePeriodLength;
}

if(node.type!==BaseNode.TYPES.NETWORK)throw new Error('Unsupported');

const record=node.record;

const connection=this._acquireConnection(record);
const dnsResolutionTime=this._dns.getTimeUntilResolution(record,{
requestedAt:timingData.startTime,
shouldUpdateCache:true});

const calculation=connection.simulateDownloadUntil(
record.transferSize-timingData.bytesDownloaded,
{
dnsResolutionTime,
timeAlreadyElapsed:timingData.timeElapsed,
maximumTimeToElapse:timePeriodLength-timingData.timeElapsedOvershoot});



connection.setCongestionWindow(calculation.congestionWindow);
connection.setH2OverflowBytesDownloaded(calculation.extraBytesDownloaded);

if(isFinished){
connection.setWarmed(true);
this._connectionPool.release(record);
this._markNodeAsComplete(node,totalElapsedTime);
}else{
timingData.timeElapsed+=calculation.timeElapsed;
timingData.timeElapsedOvershoot+=calculation.timeElapsed-timePeriodLength;
timingData.bytesDownloaded+=calculation.bytesDownloaded;
}
}

_computeFinalNodeTimings(){

const nodeTimings=new Map();
for(const[node,timing]of this._nodeTimings){
nodeTimings.set(node,{
startTime:timing.startTime,
endTime:timing.endTime,
duration:timing.endTime-timing.startTime});

}

return nodeTimings;
}




getOptions(){
return this._options;
}














simulate(graph,options){
if(BaseNode.hasCycle(graph)){
throw new Error('Cannot simulate graph with cycle');
}

options=Object.assign({
label:undefined,
flexibleOrdering:false},
options);


this._flexibleOrdering=!!options.flexibleOrdering;
this._dns=new DNSCache({rtt:this._rtt});
this._initializeConnectionPool(graph);
this._initializeAuxiliaryData();

const nodesNotReadyToStart=this._nodes[NodeState.NotReadyToStart];
const nodesReadyToStart=this._nodes[NodeState.ReadyToStart];
const nodesInProgress=this._nodes[NodeState.InProgress];

const rootNode=graph.getRootNode();
rootNode.traverse(node=>nodesNotReadyToStart.add(node));
let totalElapsedTime=0;
let iteration=0;


this._markNodeAsReadyToStart(rootNode,totalElapsedTime);


while(nodesReadyToStart.size||nodesInProgress.size){

for(const node of nodesReadyToStart){
this._startNodeIfPossible(node,totalElapsedTime);
}

if(!nodesInProgress.size){


if(this._flexibleOrdering)throw new Error('Failed to start a node');
this._flexibleOrdering=true;
continue;
}


this._updateNetworkCapacity();


const minimumTime=this._findNextNodeCompletionTime();
totalElapsedTime+=minimumTime;


if(!Number.isFinite(minimumTime)||iteration>100000){
throw new Error('Graph creation failed, depth exceeded');
}

iteration++;

for(const node of nodesInProgress){
this._updateProgressMadeInTimePeriod(node,minimumTime,totalElapsedTime);
}
}

const nodeTimings=this._computeFinalNodeTimings();
ALL_SIMULATION_NODE_TIMINGS.set(options.label||'unlabeled',nodeTimings);

return{
timeInMs:totalElapsedTime,
nodeTimings};

}


static get ALL_NODE_TIMINGS(){
return ALL_SIMULATION_NODE_TIMINGS;
}}


module.exports=Simulator;












},{"../../../config/constants":8,"../base-node":25,"./connection-pool":28,"./dns-cache":29,"./tcp-connection":32}],32:[function(require,module,exports){





'use strict';

const INITIAL_CONGESTION_WINDOW=10;
const TCP_SEGMENT_SIZE=1460;

class TcpConnection{







constructor(rtt,throughput,serverLatency=0,ssl=true,h2=false){
this._warmed=false;
this._ssl=ssl;
this._h2=h2;
this._rtt=rtt;
this._throughput=throughput;
this._serverLatency=serverLatency;
this._congestionWindow=INITIAL_CONGESTION_WINDOW;
this._h2OverflowBytesDownloaded=0;
}






static maximumSaturatedConnections(rtt,availableThroughput){
const roundTripsPerSecond=1000/rtt;
const bytesPerRoundTrip=TCP_SEGMENT_SIZE;
const bytesPerSecond=roundTripsPerSecond*bytesPerRoundTrip;
const minimumThroughputRequiredPerRequest=bytesPerSecond*8;
return Math.floor(availableThroughput/minimumThroughputRequiredPerRequest);
}




_computeMaximumCongestionWindowInSegments(){
const bytesPerSecond=this._throughput/8;
const secondsPerRoundTrip=this._rtt/1000;
const bytesPerRoundTrip=bytesPerSecond*secondsPerRoundTrip;
return Math.floor(bytesPerRoundTrip/TCP_SEGMENT_SIZE);
}




setThroughput(throughput){
this._throughput=throughput;
}




setCongestionWindow(congestion){
this._congestionWindow=congestion;
}




setWarmed(warmed){
this._warmed=warmed;
}




isWarm(){
return this._warmed;
}




isH2(){
return this._h2;
}




get congestionWindow(){
return this._congestionWindow;
}






setH2OverflowBytesDownloaded(bytes){
if(!this._h2)return;
this._h2OverflowBytesDownloaded=bytes;
}




clone(){
return Object.assign(new TcpConnection(this._rtt,this._throughput),this);
}












simulateDownloadUntil(bytesToDownload,options){
const{timeAlreadyElapsed=0,maximumTimeToElapse=Infinity,dnsResolutionTime=0}=
options||{};

if(this._warmed&&this._h2){
bytesToDownload-=this._h2OverflowBytesDownloaded;
}
const twoWayLatency=this._rtt;
const oneWayLatency=twoWayLatency/2;
const maximumCongestionWindow=this._computeMaximumCongestionWindowInSegments();

let handshakeAndRequest=oneWayLatency;
if(!this._warmed){
handshakeAndRequest=

dnsResolutionTime+

oneWayLatency+

oneWayLatency+

oneWayLatency+(

this._ssl?twoWayLatency:0);
}

let roundTrips=Math.ceil(handshakeAndRequest/twoWayLatency);
let timeToFirstByte=handshakeAndRequest+this._serverLatency+oneWayLatency;
if(this._warmed&&this._h2)timeToFirstByte=0;

const timeElapsedForTTFB=Math.max(timeToFirstByte-timeAlreadyElapsed,0);
const maximumDownloadTimeToElapse=maximumTimeToElapse-timeElapsedForTTFB;

let congestionWindow=Math.min(this._congestionWindow,maximumCongestionWindow);
let totalBytesDownloaded=0;
if(timeElapsedForTTFB>0){
totalBytesDownloaded=congestionWindow*TCP_SEGMENT_SIZE;
}else{
roundTrips=0;
}

let downloadTimeElapsed=0;
let bytesRemaining=bytesToDownload-totalBytesDownloaded;
while(bytesRemaining>0&&downloadTimeElapsed<=maximumDownloadTimeToElapse){
roundTrips++;
downloadTimeElapsed+=twoWayLatency;
congestionWindow=Math.max(Math.min(maximumCongestionWindow,congestionWindow*2),1);

const bytesDownloadedInWindow=congestionWindow*TCP_SEGMENT_SIZE;
totalBytesDownloaded+=bytesDownloadedInWindow;
bytesRemaining-=bytesDownloadedInWindow;
}

const timeElapsed=timeElapsedForTTFB+downloadTimeElapsed;
const extraBytesDownloaded=this._h2?Math.max(totalBytesDownloaded-bytesToDownload,0):0;
const bytesDownloaded=Math.max(Math.min(totalBytesDownloaded,bytesToDownload),0);

return{
roundTrips,
timeElapsed,
bytesDownloaded,
extraBytesDownloaded,
congestionWindow};

}}


module.exports=TcpConnection;

















},{}],33:[function(require,module,exports){





'use strict';

const Driver=require('../gather/driver.js');

class Element{




constructor(element,driver){
if(!element||!driver){
throw Error('Driver and element required to create Element');
}
this.driver=driver;
this.element=element;
}





getAttribute(name){
return this.driver.
sendCommand('DOM.getAttributes',{
nodeId:this.element.nodeId}).




then(resp=>{
const attrIndex=resp.attributes.indexOf(name);
if(attrIndex===-1){
return null;
}

return resp.attributes[attrIndex+1];
});
}




getNodeId(){
return this.element.nodeId;
}





getProperty(propName){
return this.driver.
sendCommand('DOM.resolveNode',{
nodeId:this.element.nodeId}).

then(resp=>{
if(!resp.object.objectId){
return null;
}
return this.driver.getObjectProperty(resp.object.objectId,propName);
}).
catch(()=>null);
}}


module.exports=Element;

},{"../gather/driver.js":19}],34:[function(require,module,exports){





'use strict';







const NEXUS5X_EMULATION_METRICS={
mobile:true,
screenWidth:412,
screenHeight:732,
width:412,
height:732,
positionX:0,
positionY:0,
scale:1,
deviceScaleFactor:2.625,
screenOrientation:{
angle:0,
type:'portraitPrimary'}};







const DESKTOP_EMULATION_METRICS={
mobile:false,
width:1366,
height:768,
deviceScaleFactor:1};


const NEXUS5X_USERAGENT={
userAgent:'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5 Build/MRA58N) AppleWebKit/537.36'+
'(KHTML, like Gecko) Chrome/71.0.3559.0 Mobile Safari/537.36'};


const DESKTOP_USERAGENT={
userAgent:'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 '+
'(KHTML, like Gecko) Chrome/71.0.3559.0 Safari/537.36'};


const OFFLINE_METRICS={
offline:true,

latency:0,
downloadThroughput:0,
uploadThroughput:0};


const NO_THROTTLING_METRICS={
latency:0,
downloadThroughput:0,
uploadThroughput:0,
offline:false};


const NO_CPU_THROTTLE_METRICS={
rate:1};






async function enableNexus5X(driver){
await Promise.all([
driver.sendCommand('Emulation.setDeviceMetricsOverride',NEXUS5X_EMULATION_METRICS),

driver.sendCommand('Network.enable'),
driver.sendCommand('Network.setUserAgentOverride',NEXUS5X_USERAGENT),
driver.sendCommand('Emulation.setTouchEmulationEnabled',{enabled:true})]);

}





async function enableDesktop(driver){
await Promise.all([
driver.sendCommand('Emulation.setDeviceMetricsOverride',DESKTOP_EMULATION_METRICS),

driver.sendCommand('Network.enable'),
driver.sendCommand('Network.setUserAgentOverride',DESKTOP_USERAGENT),
driver.sendCommand('Emulation.setTouchEmulationEnabled',{enabled:false})]);

}






function enableNetworkThrottling(driver,throttlingSettings){

const conditions={
offline:false,
latency:throttlingSettings.requestLatencyMs||0,
downloadThroughput:throttlingSettings.downloadThroughputKbps||0,
uploadThroughput:throttlingSettings.uploadThroughputKbps||0};



conditions.downloadThroughput=Math.floor(conditions.downloadThroughput*1024/8);
conditions.uploadThroughput=Math.floor(conditions.uploadThroughput*1024/8);
return driver.sendCommand('Network.emulateNetworkConditions',conditions);
}





function clearAllNetworkEmulation(driver){
return driver.sendCommand('Network.emulateNetworkConditions',NO_THROTTLING_METRICS);
}





function goOffline(driver){
return driver.sendCommand('Network.emulateNetworkConditions',OFFLINE_METRICS);
}






function enableCPUThrottling(driver,throttlingSettings){
const rate=throttlingSettings.cpuSlowdownMultiplier;
return driver.sendCommand('Emulation.setCPUThrottlingRate',{rate});
}





function disableCPUThrottling(driver){
return driver.sendCommand('Emulation.setCPUThrottlingRate',NO_CPU_THROTTLE_METRICS);
}

module.exports={
enableNexus5X,
enableDesktop,
enableNetworkThrottling,
clearAllNetworkEmulation,
enableCPUThrottling,
disableCPUThrottling,
goOffline};


},{}],35:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome extensions negatively affected this page's load performance. Try auditing the page in incognito mode or from a Chrome profile without extensions.",
"description":"A message displayed in a Lighthouse audit result warning that Chrome extensions on the user's system substantially affected Lighthouse's measurements and instructs the user on how to run again without those extensions."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Script Evaluation",
"description":"Label for a time column in a data table; entries will be the number of milliseconds spent evaluating script for every script loaded by the page."},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Script Parse",
"description":"Label for a time column in a data table; entries will be the number of milliseconds spent parsing script files for every script loaded by the page."},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total",
"description":"Label for the total time column in a data table; entries will be the number of milliseconds spent executing per resource loaded by the page."},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Consider reducing the time spent parsing, compiling, and executing JS. You may find delivering smaller JS payloads helps with this. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/bootup).",
"description":"Description of a Lighthouse audit that tells the user that they should reduce the amount of time spent executing javascript and one method of doing so. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reduce JavaScript execution time",
"description":"Title of a diagnostic audit that provides detail on the time spent executing javascript files during the load. This imperative title is shown to users when there is a significant amount of execution time that could be reduced."},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript execution time",
"description":"Title of a diagnostic audit that provides detail on the time spent executing javascript files during the load. This descriptive title is shown to users when the amount is acceptable and no user action is required."},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Large GIFs are inefficient for delivering animated content. Consider using MPEG4/WebM videos for animations and PNG/WebP for static images instead of GIF to save network bytes. [Learn more](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)",
"description":"Description of a Lighthouse audit that tells the user *why* they should use video instead of GIF format for delivering animated content. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Use video formats for animated content",
"description":"Imperative title of a Lighthouse audit that tells the user to use video formats rather than animated GIFs, which are wasteful. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Consider lazy-loading offscreen and hidden images after all critical resources have finished loading to lower time to interactive. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images).",
"description":"Description of a Lighthouse audit that tells the user *why* they should defer loading offscreen images. Offscreen images are images located outside of the visible browser viewport. As they are unseen by the user and slow down page load, they should be loaded later, closer to when the user is going to see them. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Defer offscreen images",
"description":"Imperative title of a Lighthouse audit that tells the user to defer loading offscreen images. Offscreen images are images located outside of the visible browser viewport. As they are unseen by the user and slow down page load, they should be loaded later, closer to when the user is going to see them. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources).",
"description":"Description of a Lighthouse audit that tells the user *why* they should reduce or remove network resources that block the initial render of the page. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Eliminate render-blocking resources",
"description":"Imperative title of a Lighthouse audit that tells the user to reduce or remove network resources that block the initial render of the page. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Large network payloads cost users real money and are highly correlated with long load times. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/network-payloads).",
"description":"Description of a Lighthouse audit that tells the user *why* they should reduce the size of the network resources required by the page. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Total size was {totalBytes, number, bytes} KB",
"description":"Used to summarize the total byte size of the page and all its network requests. The `{totalBytes}` placeholder will be replaced with the total byte sizes, shown in kilobytes (e.g. 142 KB)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Avoid enormous network payloads",
"description":"Title of a diagnostic audit that provides detail on large network resources required during page load. 'Payloads' is roughly equivalent to 'resources'. This imperative title is shown to users when there is a significant amount of execution time that could be reduced."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Avoids enormous network payloads",
"description":"Title of a diagnostic audit that provides detail on large network resources required during page load. 'Payloads' is roughly equivalent to 'resources'. This descriptive title is shown to users when the amount is acceptable and no user action is required."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Minifying CSS files can reduce network payload sizes. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/minify-css).",
"description":"Description of a Lighthouse audit that tells the user *why* they should minify (remove whitespace) the page's CSS code. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minify CSS",
"description":"Imperative title of a Lighthouse audit that tells the user to minify (remove whitespace) the page's CSS code. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Minifying JavaScript files can reduce payload sizes and script parse time. [Learn more](https://developers.google.com/speed/docs/insights/MinifyResources).",
"description":"Description of a Lighthouse audit that tells the user *why* they should minify the page’s JS code to reduce file size. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minify JavaScript",
"description":"Imperative title of a Lighthouse audit that tells the user to minify the page’s JS code to reduce file size. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Remove unused rules from stylesheets to reduce unnecessary bytes consumed by network activity. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/unused-css).",
"description":"Description of a Lighthouse audit that tells the user *why* they should defer loading any content in CSS that isn’t needed at page load. This is displayed after a user expands the section to see more. No word length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Defer unused CSS",
"description":"Imperative title of a Lighthouse audit that tells the user to remove content from their CSS that isn’t needed immediately and instead load that content at a later time. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Remove unused JavaScript to reduce bytes consumed by network activity.",
"description":"Description of a Lighthouse audit that tells the user *why* they should remove JavaScript that is never needed/evaluated by the browser. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Remove unused JavaScript",
"description":"Imperative title of a Lighthouse audit that tells the user to remove JavaScript that is never evaluated during page load. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"A long cache lifetime can speed up repeat visits to your page. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/cache-policy).",
"description":"Description of a Lighthouse audit that tells the user *why* they need to adopt a long cache lifetime policy. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount, plural,\n    =1 {1 resource found}\n    other {# resources found}\n    }",
"description":"[ICU Syntax] Label for the audit identifying network resources with inefficient cache values. Clicking this will expand the audit to show the resources."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Serve static assets with an efficient cache policy",
"description":"Title of a diagnostic audit that provides details on the any page resources that could have been served with more efficient cache policies. Cache refers to browser disk cache, which keeps old versions of network resources around for future use. This imperative title is shown to users when there is a significant amount of assets served with poor cache policies."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Uses efficient cache policy on static assets",
"description":"Title of a diagnostic audit that provides detail on the cache policy applies to the page's static assets. Cache refers to browser disk cache, which keeps old versions of network resources around for future use. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimized images load faster and consume less cellular data. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/optimize-images).",
"description":"Description of a Lighthouse audit that tells the user *why* they need to efficiently encode images. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Efficiently encode images",
"description":"Imperative title of a Lighthouse audit that tells the user to encode images with optimization (better compression). This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Serve images that are appropriately-sized to save cellular data and improve load time. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/oversized-images).",
"description":"Description of a Lighthouse audit that tells the user *why* they need to serve appropriately sized images. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Properly size images",
"description":"Imperative title of a Lighthouse audit that tells the user to resize images to match the display dimensions. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Text-based resources should be served with compression (gzip, deflate or brotli) to minimize total network bytes. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/text-compression).",
"description":"Description of a Lighthouse audit that tells the user *why* their text-based resources should be served with compression (like gzip). This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Enable text compression",
"description":"Imperative title of a Lighthouse audit that tells the user to enable text compression (like gzip) in order to enhance the performance of a page. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Image formats like JPEG 2000, JPEG XR, and WebP often provide better compression than PNG or JPEG, which means faster downloads and less data consumption. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/webp).",
"description":"Description of a Lighthouse audit that tells the user *why* they should use newer and more efficient image formats. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Serve images in next-gen formats",
"description":"Imperative title of a Lighthouse audit that tells the user to serve images in newer and more efficient image formats in order to enhance the performance of a page. A non-modern image format was designed 20+ years ago. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"The Critical Request Chains below show you what resources are loaded with a high priority. Consider reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains).",
"description":"Description of a Lighthouse audit that tells the user *why* they should reduce the depth of critical network requests to enhance initial load of a page . This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount, plural,\n    =1 {1 chain found}\n    other {# chains found}\n    }",
"description":"[ICU Syntax] Label for an audit identifying the number of sequences of dependent network requests used to load the page."},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimize Critical Requests Depth",
"description":"Imperative title of a Lighthouse audit that tells the user to reduce the depth of critical network requests to enhance initial load of a page. Critical request chains are series of dependent network requests that are important for page rendering. For example, here's a 4-request-deep chain: The biglogo.jpg image is required, but is requested via the styles.css style code, which is requested by the initialize.js javascript, which is requested by the page's HTML. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element",
"description":"Table column header for the DOM element. Each DOM element is described with its HTML representation."},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic",
"description":"Table column header for the type of statistic. These statistics describe how big the DOM is (count of DOM nodes, children, depth)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value",
"description":"Table column header for the observed value of the DOM statistic."},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Browser engineers recommend pages contain fewer than ~1,500 DOM nodes. The sweet spot is a tree depth < 32 elements and fewer than 60 children/parent element. A large DOM can increase memory usage, cause longer [style calculations](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), and produce costly [layout reflows](https://developers.google.com/speed/articles/reflow). [Learn more](https://developers.google.com/web/tools/lighthouse/audits/dom-size).",
"description":"Description of a Lighthouse audit that tells the user *why* they should reduce the size of the web page's DOM. The size of a DOM is characterized by the total number of DOM nodes and greatest DOM depth. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount, plural,\n    =1 {1 node}\n    other {# nodes}\n    }",
"description":"[ICU Syntax] Label for an audit identifying the number of DOM nodes found in the page."},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Avoid an excessive DOM size",
"description":"Title of a diagnostic audit that provides detail on the size of the web page's DOM. The size of a DOM is characterized by the total number of DOM nodes and greatest DOM depth. This imperative title is shown to users when there is a significant amount of execution time that could be reduced."},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximum DOM Depth",
"description":"Label for the numeric value of the maximum depth in the page's DOM tree."},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total DOM Nodes",
"description":"Label for the total number of DOM nodes found in the page."},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements",
"description":"Label for the numeric value of the maximum number of children any DOM element in the page has. The element described will have the most children in the page."},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Avoids an excessive DOM size",
"description":"Title of a diagnostic audit that provides detail on the size of the web page's DOM. The size of a DOM is characterized by the total number of DOM nodes and greatest DOM depth. This descriptive title is shown to users when the amount is acceptable and no user action is required."},

"lighthouse-core/audits/font-display.js | description":{
"message":"Leverage the font-display CSS feature to ensure text is user-visible while webfonts are loading. [Learn more](https://developers.google.com/web/updates/2016/02/font-display).",
"description":"Description of a Lighthouse audit that tells the user *why* they should use the font-display CSS feature. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Ensure text remains visible during webfont load",
"description":"Title of a diagnostic audit that provides detail on the load of the page's webfonts. Often the text is invisible for seconds before the webfont resource is loaded. This imperative title is shown to users when there is a significant amount of execution time that could be reduced."},

"lighthouse-core/audits/font-display.js | title":{
"message":"All text remains visible during webfont loads",
"description":"Title of a diagnostic audit that provides detail on if all the text on a webpage was visible while the page was loading its webfonts. This descriptive title is shown to users when the amount is acceptable and no user action is required."},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Category",
"description":"Label for the Main Thread Category column in data tables, rows will have a main thread Category and main thread Task Name."},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this.",
"description":"Description of a Lighthouse audit that tells the user *why* they should reduce JS execution times. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimize main-thread work",
"description":"Title of a diagnostic audit that provides detail on the main thread work the browser did to load the page. This imperative title is shown to users when there is a significant amount of execution time that could be reduced."},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimizes main-thread work",
"description":"Title of a diagnostic audit that provides detail on the main thread work the browser did to load the page. This descriptive title is shown to users when the amount is acceptable and no user action is required."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"The score above is an estimate of how long your app takes to respond to user input, in milliseconds, during the busiest 5s window of page load. If your latency is higher than 50 ms, users may perceive your app as laggy. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency).",
"description":"Description of the Estimated Input Latency metric that estimates the amount of time, in milliseconds, that the app takes to respond to user input. This description is displayed within a tooltip when the user hovers on the metric name to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Estimated Input Latency",
"description":"The name of the metric that marks the estimated time between the page receiving input (a user clicking, tapping, or typing) and the page responding. Shown to users as the label for the numeric metric value. Ideally fits within a ~40 character limit."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"First Contentful Paint marks the time at which the first text or image is painted. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint).",
"description":"Description of the First Contentful Paint (FCP) metric, which marks the time at which the first text or image is painted by the browser. This is displayed within a tooltip when the user hovers on the metric name to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"First Contentful Paint",
"description":"The name of the metric that marks the time at which the first text or image is painted by the browser. Shown to users as the label for the numeric metric value. Ideally fits within a ~40 character limit."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"First CPU Idle marks the first time at which the page's main thread is quiet enough to handle input. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-interactive).",
"description":"Description of the First CPU Idle metric, which marks the time at which the page has displayed content and the CPU is not busy executing the page's scripts. This is displayed within a tooltip when the user hovers on the metric name to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"First CPU Idle",
"description":"The name of the metric that marks when the page has displayed content and the CPU is not busy executing the page's scripts. Shown to users as the label for the numeric metric value. Ideally fits within a ~40 character limit."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"First Meaningful Paint measures when the primary content of a page is visible. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint).",
"description":"Description of the First Meaningful Paint (FMP) metric, which marks the time at which a majority of the content has been painted by the browser. This is displayed within a tooltip when the user hovers on the metric name to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"First Meaningful Paint",
"description":"The name of the metric that marks the time at which a majority of the content has been painted by the browser. Shown to users as the label for the numeric metric value. Ideally fits within a ~40 character limit."},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interactive marks the time at which the page is fully interactive. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive).",
"description":"Description of the Time to Interactive (TTI) metric, which evaluates when a page has completed its primary network activity and main thread work. This is displayed within a tooltip when the user hovers on the metric name to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Time to Interactive",
"description":"The name of the metric that marks the time at which the page is fully loaded and is able to quickly respond to user input (clicks, taps, and keypresses feel responsive). Shown to users as the label for the numeric metric value. Ideally fits within a ~40 character limit."},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Speed Index shows how quickly the contents of a page are visibly populated. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/speed-index).",
"description":"Description of the Speed Index metric, which summarizes how quickly the page looked visually complete. This is displayed within a tooltip when the user hovers on the metric name to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Speed Index",
"description":"The name of the metric that summarizes how quickly the page looked visually complete. The name of this metric is largely abstract and can be loosely translated. Shown to users as the label for the numeric metric value. Ideally fits within a ~40 character limit."},

"lighthouse-core/audits/redirects.js | description":{
"message":"Redirects introduce additional delays before the page can be loaded. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/redirects).",
"description":"Description of a Lighthouse audit that tells users why they should reduce the number of server-side redirects on their page. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Avoid multiple page redirects",
"description":"Imperative title of a Lighthouse audit that tells the user to eliminate the redirects taken through multiple URLs to load the page. This is shown in a list of audits that Lighthouse generates."},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Time To First Byte identifies the time at which your server sends a response. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/ttfb).",
"description":"Description of a Lighthouse audit that tells the user *why* they should reduce the amount of time it takes their server to start responding to requests. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Root document took {timeInMs, number, milliseconds} ms",
"description":"Used to summarize the total Time to First Byte duration for the primary HTML response. The `{timeInMs}` placeholder will be replaced with the time duration, shown in milliseconds (e.g. 210 ms)"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reduce server response times (TTFB)",
"description":"Title of a diagnostic audit that provides detail on how long it took from starting a request to when the server started responding. This imperative title is shown to users when there is a significant amount of execution time that could be reduced."},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Server response times are low (TTFB)",
"description":"Title of a diagnostic audit that provides detail on how long it took from starting a request to when the server started responding. This descriptive title is shown to users when the amount is acceptable and no user action is required."},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Duration",
"description":"Label for the Duration column in the User Timing event data table. User Timing API entries are added by the developer of the web page. Durations are only provided for 'Measure' entries. Durations are the number of total number milliseconds from Start Time to their ending point. e.g. '2,020.64 ms'"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Name",
"description":"Label for the Name column in the User Timing event data table. User Timing API entries are added by the developer of the web page. An example user timing event name: 'pageload_logoimage_done'"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Start Time",
"description":"Label for the Start Time column in the User Timing event data table. User Timing API entries are added by the developer of the web page. Start Times are the number of milliseconds since the page started loading, e.g. '380.26 ms'"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Type",
"description":"Label for the Type column in the User Timing event data table. User Timing API entries are added by the developer of the web page. The only possible types are 'Mark' and Measure'."},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Consider instrumenting your app with the User Timing API to measure your app's real-world performance during key user experiences. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/user-timing).",
"description":"Description of a Lighthouse audit that tells the user they may want to use the User Timing API to help measure the performance of aspects of their page load and interaction. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount, plural,\n    =1 {1 user timing}\n    other {# user timings}\n    }",
"description":"[ICU Syntax] Label for an audit identifying the number of User Timing timestamps present in the page."},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing marks and measures",
"description":"Descriptive title of a diagnostic audit that provides details on any timestamps generated by the page. User Timing refers to the 'User Timing API', which enables a website to record specific times as 'marks', or spans of time as 'measures'."},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Consider adding preconnect or dns-prefetch resource hints to establish early connections to important third-party origins. [Learn more](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect).",
"description":"Description of a Lighthouse audit that tells the user how to connect early to third-party domains that will be used to load page resources. This is displayed after a user expands the section to see more. No character length limits. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Preconnect to required origins",
"description":"Imperative title of a Lighthouse audit that tells the user to connect early to internet domains that will be used to load page resources. Origin is the correct term, however 'domain name' could be used if neccsesary. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Consider using <link rel=preload> to prioritize fetching resources that are currently requested later in page load. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/preload).",
"description":"Description of a Lighthouse audit that tells the user *why* they should preload important network requests. The associated network requests are started halfway through pageload (or later) but should be started at the beginning. This is displayed after a user expands the section to see more. No character length limits. '<link rel=preload>' is the html code the user would include in their page and shouldn't be translated. 'Learn More' becomes link text to additional documentation."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Preload key requests",
"description":"Imperative title of a Lighthouse audit that tells the user to use <link rel=preload> to initiate important network requests earlier during page load. This is displayed in a list of audit titles that Lighthouse generates."},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"More information about the performance of your application.",
"description":"Description of the diagnostics section of the Performance category. Within this section are audits with non-imperative titles that provide more detail on the page's page load performance characteristics. Whereas the 'Opportunities' suggest an action along with expected time savings, diagnostics do not. Within this section, the user may read the details and deduce additional actions they could take."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostics",
"description":"Title of the diagnostics section of the Performance category. Within this section are audits with non-imperative titles that provide more detail on the page's page load performance characteristics. Whereas the 'Opportunities' suggest an action along with expected time savings, diagnostics do not. Within this section, the user may read the details and deduce additional actions they could take."},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"The most critical aspect of performance is how quickly pixels are rendered onscreen. Key metrics: First Contentful Paint, First Meaningful Paint",
"description":"Description of an opportunity sub-section of the Performance category. Within this section are audits with imperative titles that suggest actions the user can take to improve the time of the first initial render of the webpage."},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"First Paint Improvements",
"description":"Title of an opportunity sub-section of the Performance category. Within this section are audits with imperative titles that suggest actions the user can take to improve the time of the first initial render of the webpage."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"These optimizations can speed up your page load.",
"description":"Description of the opportunity section of the Performance category. 'Optimizations' could also be 'recommendations' or 'suggestions'. Within this section are audits with imperative titles that suggest actions the user can take to improve the loading performance of their web page."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Opportunities",
"description":"Title of the opportunity section of the Performance category. Within this section are audits with imperative titles that suggest actions the user can take to improve the loading performance of their web page. 'Suggestion'/'Optimization'/'Recommendation' are reasonable synonyms for 'opportunity' in this case."},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrics",
"description":"Title of the speed metrics section of the Performance category. Within this section are various speed metrics which quantify the pageload performance into values presented in seconds and milliseconds."},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Enhance the overall loading experience, so the page is responsive and ready to use as soon as possible. Key metrics: Time to Interactive, Speed Index",
"description":"Description of an opportunity sub-section of the Performance category. Within this section are audits with imperative titles that suggest actions the user can take to improve the overall loading performance of their web page."},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Overall Improvements",
"description":"Title of an opportunity sub-section of the Performance category. Within this section are audits with imperative titles that suggest actions the user can take to improve the overall loading performance of their web page."},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performance",
"description":"Title of the Performance category of audits. Equivalent to 'Web performance', this term is inclusive of all web page speed and loading optimization topics. Also used as a label of a score gauge; try to limit to 20 characters."},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache TTL",
"description":"Label for the TTL column in data tables, entries will be the time to live value of the cache header on a web resource"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Size (KB)",
"description":"Label for the size column in data tables, entries will be the size of a web resource in kilobytes"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Time Spent",
"description":"Label for the time spent column in data tables, entries will be the number of milliseconds spent during a particular activity"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL",
"description":"Label for the URL column in data tables, entries will be the URL of a web resource"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potential Savings (KB)",
"description":"Label for the wasted bytes column in data tables, entries will be the number of kilobytes the user could reduce their page by if they implemented the suggestions"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potential Savings (ms)",
"description":"Label for the wasted bytes column in data tables, entries will be the number of milliseconds the user could reduce page load by if they implemented the suggestions"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potential savings of {wastedBytes, number, bytes} KB",
"description":"Label shown per-audit to show how many bytes smaller the page could be if the user implemented the suggestions. The `{wastedBytes}` placeholder will be replaced with the number of bytes, shown in kilobytes (e.g. 148 KB)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potential savings of {wastedMs, number, milliseconds} ms",
"description":"Label shown per-audit to show how many milliseconds faster the page load could be if the user implemented the suggestions. The `{wastedMs}` placeholder will be replaced with the time duration, shown in milliseconds (e.g. 140 ms)"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms",
"description":"Used to show the duration in milliseconds that something lasted. The `{timeInMs}` placeholder will be replaced with the time duration, shown in milliseconds (e.g. 63 ms)"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s",
"description":"Used to show the duration in seconds that something lasted. The {timeInMs} placeholder will be replaced with the time duration, shown in seconds (e.g. 5.2 s)"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Show audits",
"description":"The tooltip text on an expandable chevron icon. Clicking the icon expands a section to reveal a list of audit results that was hidden by default."},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Initial Navigation",
"description":"String of text shown in a graphical representation of the flow of network requests for the web page. This label represents the initial network request that fetches an HTML page. This navigation may be redirected (eg. Initial navigation to http://example.com redirects to https://www.example.com)."},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximum critical path latency:",
"description":"Label of value shown in the summary of critical request chains. Refers to the total amount of time (milliseconds) of the longest critical path chain/sequence of network requests. Example value: 2310 ms"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Error!",
"description":"A label, shown next to an audit title or metric title, indicating that there was an error computing it. The user can hover on the label to reveal a tooltip with the extended error message. Translation should be short (< 20 characters)."},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Report error: no audit information",
"description":"An error string displayed next to a particular audit when it has errored, but not provided any specific error message."},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Lab Data",
"description":"Title of the lab data section of the Performance category. Within this section are various speed metrics which quantify the pageload performance into values presented in seconds and milliseconds. \"Lab\" is an abbreviated form of \"laboratory\", and refers to the fact that the data is from a controlled test of a website, not measurements from real users visiting that site."},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analysis of the current page on emulated 3G. Values are estimated and may vary.",
"description":"Explanation shown to users below performance results to inform them that the test was done with a 3G network connection and to warn them that the numbers they see will likely change slightly the next time they run Lighthouse. 'Lighthouse' becomes link text to additional documentation."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Additional items to manually check",
"description":"Section heading shown above a list of audits that were not computed by Lighthouse. They serve as a list of suggestions for the user to go and manually check. For example, Lighthouse can't automate testing cross-browser compatibility, so that is listed within this section, so the user is reminded to test it themselves. This section is collapsed by default, as the user should be focusing on the failed audits instead. Users can click this heading to reveal the list."},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Not applicable",
"description":"Section heading shown above a list of audits that do not apply to the page. For example, if an audit is 'Are images optimized?', but the page has no images on it, the audit will be marked as not applicable. This is neither passing or failing. This section is collapsed by default, as the user should be focusing on the failed audits instead. Users can click this heading to reveal the list."},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Opportunity",
"description":"Column heading label for the listing of opportunity audits. Each audit title represents an opportunity. There are only 2 columns, so no strict character limit."},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Estimated Savings",
"description":"Column heading label for the estimated page load savings of opportunity audits. Estimated Savings is the total amount of time (in seconds) that Lighthouse computed could be reduced from the total page load time, if the suggested action is taken. There are only 2 columns, so no strict character limit."},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Passed audits",
"description":"Section heading shown above a list of audits that are passing. 'Passed' here refers to a passing grade. This section is collapsed by default, as the user should be focusing on the failed audits instead. Users can click this heading to reveal the list."},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Score scale:",
"description":"Label preceding a pictorial explanation of the scoring scale: 0-50 is red (bad), 50-90 is orange (ok), 90-100 is green (good). These colors are used throughout the report to provide context for how good/bad a particular result is."},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"There were issues affecting this run of Lighthouse:",
"description":"Label shown preceding any important warnings that may have invalidated the entire report. For example, if the user has Chrome extensions installed, they may add enough performance overhead that Lighthouse's performance metrics are unreliable. If shown, this will be displayed at the top of the report UI."},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Values are estimated and may vary.",
"description":"Disclaimer shown to users below the metric values (First Contentful Paint, Time to Interactive, etc) to warn them that the numbers they see will likely change slightly the next time they run Lighthouse."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Warnings: ",
"description":"This label is shown above a bulleted list of warnings. It is shown directly below an audit that produced warnings. Warnings describe situations the user should be aware of, as Lighthouse was unable to complete all the work required on this audit. For example, The 'Unable to decode image (biglogo.jpg)' warning may show up below an image encoding audit."}};



},{}],36:[function(require,module,exports){
(function(__filename,__dirname){





'use strict';

const path=require('path');
const isDeepEqual=require('lodash.isequal');
const log=require('lighthouse-logger');
const MessageFormat=require('intl-messageformat').default;
const MessageParser=require('intl-messageformat-parser');
const lookupClosestLocale=require('lookup-closest-locale');
const LOCALES=require('./locales.js');

const LH_ROOT=path.join(__dirname,'../../../');
const MESSAGE_INSTANCE_ID_REGEX=/(.* \| .*) # (\d+)$/;

const MESSAGE_INSTANCE_ID_QUICK_REGEX=/ # \d+$/;

(()=>{


try{

const IntlPolyfill=require('intl');

if(!IntlPolyfill.NumberFormat)return;

Intl.NumberFormat=IntlPolyfill.NumberFormat;
Intl.DateTimeFormat=IntlPolyfill.DateTimeFormat;
}catch(_){
log.warn('i18n','Failed to install `intl` polyfill');
}
})();


const UIStrings={

ms:'{timeInMs, number, milliseconds}\xa0ms',

seconds:'{timeInMs, number, seconds}\xa0s',

displayValueByteSavings:'Potential savings of {wastedBytes, number, bytes}\xa0KB',

displayValueMsSavings:'Potential savings of {wastedMs, number, milliseconds}\xa0ms',

columnURL:'URL',

columnSize:'Size (KB)',

columnCacheTTL:'Cache TTL',

columnWastedBytes:'Potential Savings (KB)',

columnWastedMs:'Potential Savings (ms)',

columnTimeSpent:'Time Spent'};


const formats={
number:{
bytes:{
maximumFractionDigits:0},

milliseconds:{
maximumFractionDigits:0},

seconds:{

minimumFractionDigits:1,
maximumFractionDigits:1}}};














function lookupLocale(locale){

const canonicalLocale=Intl.getCanonicalLocales(locale)[0];

const closestLocale=lookupClosestLocale(canonicalLocale,LOCALES);
return closestLocale||'en';
}





function _preprocessMessageValues(icuMessage,values){
if(!values)return;

const clonedValues=JSON.parse(JSON.stringify(values));
const parsed=MessageParser.parse(icuMessage);

parsed.elements.
filter(el=>el.type==='argumentElement').
forEach(el=>{
if(el.id&&el.id in values===false){
throw new Error('ICU Message contains a value reference that wasn\'t provided');
}
});


parsed.elements.
filter(el=>el.format&&el.format.style==='milliseconds').

forEach(el=>clonedValues[el.id]=Math.round(clonedValues[el.id]/10)*10);


parsed.elements.
filter(el=>el.format&&el.format.style==='seconds'&&el.id==='timeInMs').

forEach(el=>clonedValues[el.id]=Math.round(clonedValues[el.id]/100)/10);


parsed.elements.
filter(el=>el.format&&el.format.style==='bytes').

forEach(el=>clonedValues[el.id]=clonedValues[el.id]/1024);

return clonedValues;
}









const _icuMessageInstanceMap=new Map();









function _formatIcuMessage(locale,icuMessageId,icuMessage,values){
const localeMessages=LOCALES[locale];
const localeMessage=localeMessages[icuMessageId]&&localeMessages[icuMessageId].message;


const messageForMessageFormat=localeMessage||icuMessage;

const localeForMessageFormat=locale==='en-XA'?'de-DE':locale;

const valuesForMessageFormat=_preprocessMessageValues(icuMessage,values);

const formatter=new MessageFormat(messageForMessageFormat,localeForMessageFormat,formats);
const formattedString=formatter.format(valuesForMessageFormat);

return{formattedString,icuMessage:messageForMessageFormat};
}


function _formatPathAsString(pathInLHR){
let pathAsString='';
for(const property of pathInLHR){
if(/^[a-z]+$/i.test(property)){
if(pathAsString.length)pathAsString+='.';
pathAsString+=property;
}else{
if(/]|"|'|\s/.test(property))throw new Error(`Cannot handle "${property}" in i18n`);
pathAsString+=`[${property}]`;
}
}

return pathAsString;
}





function getRendererFormattedStrings(locale){
const icuMessageIds=Object.keys(LOCALES[locale]).filter(f=>f.includes('core/report/html/'));

const strings={};
for(const icuMessageId of icuMessageIds){
const[filename,varName]=icuMessageId.split(' | ');
if(!filename.endsWith('util.js'))throw new Error(`Unexpected message: ${icuMessageId}`);
strings[varName]=LOCALES[locale][icuMessageId].message;
}

return strings;
}





function createMessageInstanceIdFn(filename,fileStrings){

const mergedStrings={...UIStrings,...fileStrings};


const getMessageInstanceIdFn=(icuMessage,values)=>{
const keyname=Object.keys(mergedStrings).find(key=>mergedStrings[key]===icuMessage);
if(!keyname)throw new Error(`Could not locate: ${icuMessage}`);

const filenameToLookup=keyname in fileStrings?filename:__filename;
const unixStyleFilename=path.relative(LH_ROOT,filenameToLookup).replace(/\\/g,'/');
const icuMessageId=`${unixStyleFilename} | ${keyname}`;
const icuMessageInstances=_icuMessageInstanceMap.get(icuMessageId)||[];

let indexOfInstance=icuMessageInstances.findIndex(inst=>isDeepEqual(inst.values,values));
if(indexOfInstance===-1){
icuMessageInstances.push({icuMessageId,icuMessage,values});
indexOfInstance=icuMessageInstances.length-1;
}

_icuMessageInstanceMap.set(icuMessageId,icuMessageInstances);

return`${icuMessageId} # ${indexOfInstance}`;
};

return getMessageInstanceIdFn;
}






function isIcuMessage(icuMessageIdOrRawString){
return MESSAGE_INSTANCE_ID_QUICK_REGEX.test(icuMessageIdOrRawString)&&
MESSAGE_INSTANCE_ID_REGEX.test(icuMessageIdOrRawString);
}






function getFormatted(icuMessageIdOrRawString,locale){
if(isIcuMessage(icuMessageIdOrRawString)){
return _resolveIcuMessageInstanceId(icuMessageIdOrRawString,locale).formattedString;
}

return icuMessageIdOrRawString;
}






function _resolveIcuMessageInstanceId(icuMessageInstanceId,locale){
const matches=icuMessageInstanceId.match(MESSAGE_INSTANCE_ID_REGEX);
if(!matches)throw new Error(`${icuMessageInstanceId} is not a valid message instance ID`);

const[_,icuMessageId,icuMessageInstanceIndex]=matches;
const icuMessageInstances=_icuMessageInstanceMap.get(icuMessageId)||[];
const icuMessageInstance=icuMessageInstances[Number(icuMessageInstanceIndex)];

const{formattedString}=_formatIcuMessage(locale,icuMessageId,
icuMessageInstance.icuMessage,icuMessageInstance.values);

return{icuMessageInstance,formattedString};
}









function replaceIcuMessageInstanceIds(inputObject,locale){





function replaceInObject(subObject,icuMessagePaths,pathInLHR=[]){
if(typeof subObject!=='object'||!subObject)return;

for(const[property,value]of Object.entries(subObject)){
const currentPathInLHR=pathInLHR.concat([property]);


if(typeof value==='string'&&isIcuMessage(value)){
const{icuMessageInstance,formattedString}=_resolveIcuMessageInstanceId(value,locale);
const messageInstancesInLHR=icuMessagePaths[icuMessageInstance.icuMessageId]||[];
const currentPathAsString=_formatPathAsString(currentPathInLHR);

messageInstancesInLHR.push(
icuMessageInstance.values?
{values:icuMessageInstance.values,path:currentPathAsString}:
currentPathAsString);


subObject[property]=formattedString;
icuMessagePaths[icuMessageInstance.icuMessageId]=messageInstancesInLHR;
}else{
replaceInObject(value,icuMessagePaths,currentPathInLHR);
}
}
}


const icuMessagePaths={};
replaceInObject(inputObject,icuMessagePaths);
return icuMessagePaths;
}

module.exports={
_formatPathAsString,
UIStrings,
lookupLocale,
getRendererFormattedStrings,
createMessageInstanceIdFn,
getFormatted,
replaceIcuMessageInstanceIds,
isIcuMessage};


}).call(this,"/../lighthouse-core/lib/i18n/i18n.js","/../lighthouse-core/lib/i18n");
},{"./locales.js":37,"intl":107,"intl-messageformat":168,"intl-messageformat-parser":166,"lighthouse-logger":147,"lodash.isequal":178,"lookup-closest-locale":179,"path":124}],37:[function(require,module,exports){





'use strict';












const locales={
'en-US':require('./en-US.json'),

'en':require('./en-US.json'),


'en-AU':require('./locales/en-GB.json'),
'en-GB':require('./locales/en-GB.json'),
'en-IE':require('./locales/en-GB.json'),
'en-SG':require('./locales/en-GB.json'),
'en-ZA':require('./locales/en-GB.json'),
'en-IN':require('./locales/en-GB.json'),


'ar-XB':require('./locales/ar-XB.json'),
'ar':require('./locales/ar.json'),
'bg':require('./locales/bg.json'),
'bs':require('./locales/hr.json'),
'ca':require('./locales/ca.json'),
'cs':require('./locales/cs.json'),
'da':require('./locales/da.json'),
'de':require('./locales/de.json'),
'el':require('./locales/el.json'),
'en-XA':require('./locales/en-XA.json'),
'es':require('./locales/es.json'),
'fi':require('./locales/fi.json'),
'fil':require('./locales/fil.json'),
'fr':require('./locales/fr.json'),
'he':require('./locales/he.json'),
'hi':require('./locales/hi.json'),
'hr':require('./locales/hr.json'),
'hu':require('./locales/hu.json'),
'gsw':require('./locales/de.json'),
'id':require('./locales/id.json'),
'in':require('./locales/id.json'),
'it':require('./locales/it.json'),
'iw':require('./locales/he.json'),
'ja':require('./locales/ja.json'),
'ko':require('./locales/ko.json'),
'ln':require('./locales/fr.json'),
'lt':require('./locales/lt.json'),
'lv':require('./locales/lv.json'),
'mo':require('./locales/ro.json'),
'nl':require('./locales/nl.json'),
'nb':require('./locales/no.json'),
'no':require('./locales/no.json'),
'pl':require('./locales/pl.json'),
'pt':require('./locales/pt.json'),
'pt-PT':require('./locales/pt-PT.json'),
'ro':require('./locales/ro.json'),
'ru':require('./locales/ru.json'),
'sk':require('./locales/sk.json'),
'sl':require('./locales/sl.json'),
'sr':require('./locales/sr.json'),
'sr-Latn':require('./locales/sr-Latn.json'),
'sv':require('./locales/sv.json'),
'ta':require('./locales/ta.json'),
'te':require('./locales/te.json'),
'th':require('./locales/th.json'),
'tl':require('./locales/fil.json'),
'tr':require('./locales/tr.json'),
'uk':require('./locales/uk.json'),
'vi':require('./locales/vi.json'),
'zh':require('./locales/zh.json'),
'zh-HK':require('./locales/zh-HK.json'),
'zh-TW':require('./locales/zh-TW.json')};


module.exports=locales;

},{"./en-US.json":35,"./locales/ar-XB.json":38,"./locales/ar.json":39,"./locales/bg.json":40,"./locales/ca.json":41,"./locales/cs.json":42,"./locales/da.json":43,"./locales/de.json":44,"./locales/el.json":45,"./locales/en-GB.json":46,"./locales/en-XA.json":47,"./locales/es.json":48,"./locales/fi.json":49,"./locales/fil.json":50,"./locales/fr.json":51,"./locales/he.json":52,"./locales/hi.json":53,"./locales/hr.json":54,"./locales/hu.json":55,"./locales/id.json":56,"./locales/it.json":57,"./locales/ja.json":58,"./locales/ko.json":59,"./locales/lt.json":60,"./locales/lv.json":61,"./locales/nl.json":62,"./locales/no.json":63,"./locales/pl.json":64,"./locales/pt-PT.json":65,"./locales/pt.json":66,"./locales/ro.json":67,"./locales/ru.json":68,"./locales/sk.json":69,"./locales/sl.json":70,"./locales/sr-Latn.json":71,"./locales/sr.json":72,"./locales/sv.json":73,"./locales/ta.json":74,"./locales/te.json":75,"./locales/th.json":76,"./locales/tr.json":77,"./locales/uk.json":78,"./locales/vi.json":79,"./locales/zh-HK.json":80,"./locales/zh-TW.json":81,"./locales/zh.json":82}],38:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"‏‮Chrome‬‏ ‏‮extensions‬‏ ‏‮negatively‬‏ ‏‮affected‬‏ ‏‮this‬‏ ‏‮page‬‏'‏‮s‬‏ ‏‮load‬‏ ‏‮performance‬‏. ‏‮Try‬‏ ‏‮auditing‬‏ ‏‮the‬‏ ‏‮page‬‏ ‏‮in‬‏ ‏‮incognito‬‏ ‏‮mode‬‏ ‏‮or‬‏ ‏‮from‬‏ ‏‮a‬‏ ‏‮Chrome‬‏ ‏‮profile‬‏ ‏‮without‬‏ ‏‮extensions‬‏."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"‏‮Script‬‏ ‏‮Evaluation‬‏"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"‏‮Script‬‏ ‏‮Parse‬‏"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"‏‮Total‬‏"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"‏‮Consider‬‏ ‏‮reducing‬‏ ‏‮the‬‏ ‏‮time‬‏ ‏‮spent‬‏ ‏‮parsing‬‏, ‏‮compiling‬‏, ‏‮and‬‏ ‏‮executing‬‏ ‏‮JS‬‏. ‏‮You‬‏ ‏‮may‬‏ ‏‮find‬‏ ‏‮delivering‬‏ ‏‮smaller‬‏ ‏‮JS‬‏ ‏‮payloads‬‏ ‏‮helps‬‏ ‏‮with‬‏ ‏‮this‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮bootup‬‏)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"‏‮Reduce‬‏ ‏‮JavaScript‬‏ ‏‮execution‬‏ ‏‮time‬‏"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"‏‮JavaScript‬‏ ‏‮execution‬‏ ‏‮time‬‏"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"‏‮Large‬‏ ‏‮GIFs‬‏ ‏‮are‬‏ ‏‮inefficient‬‏ ‏‮for‬‏ ‏‮delivering‬‏ ‏‮animated‬‏ ‏‮content‬‏. ‏‮Consider‬‏ ‏‮using‬‏ ‏‮MPEG‬‏4/‏‮WebM‬‏ ‏‮videos‬‏ ‏‮for‬‏ ‏‮animations‬‏ ‏‮and‬‏ ‏‮PNG‬‏/‏‮WebP‬‏ ‏‮for‬‏ ‏‮static‬‏ ‏‮images‬‏ ‏‮instead‬‏ ‏‮of‬‏ ‏‮GIF‬‏ ‏‮to‬‏ ‏‮save‬‏ ‏‮network‬‏ ‏‮bytes‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮fundamentals‬‏/‏‮performance‬‏/‏‮optimizing‬‏-‏‮content‬‏-‏‮efficiency‬‏/‏‮replace‬‏-‏‮animated‬‏-‏‮gifs‬‏-‏‮with‬‏-‏‮video‬‏/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"‏‮Use‬‏ ‏‮video‬‏ ‏‮formats‬‏ ‏‮for‬‏ ‏‮animated‬‏ ‏‮content‬‏"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"‏‮Consider‬‏ ‏‮lazy‬‏-‏‮loading‬‏ ‏‮offscreen‬‏ ‏‮and‬‏ ‏‮hidden‬‏ ‏‮images‬‏ ‏‮after‬‏ ‏‮all‬‏ ‏‮critical‬‏ ‏‮resources‬‏ ‏‮have‬‏ ‏‮finished‬‏ ‏‮loading‬‏ ‏‮to‬‏ ‏‮lower‬‏ ‏‮time‬‏ ‏‮to‬‏ ‏‮interactive‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮offscreen‬‏-‏‮images‬‏)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"‏‮Defer‬‏ ‏‮offscreen‬‏ ‏‮images‬‏"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"‏‮Resources‬‏ ‏‮are‬‏ ‏‮blocking‬‏ ‏‮the‬‏ ‏‮first‬‏ ‏‮paint‬‏ ‏‮of‬‏ ‏‮your‬‏ ‏‮page‬‏. ‏‮Consider‬‏ ‏‮delivering‬‏ ‏‮critical‬‏ ‏‮JS‬‏/‏‮CSS‬‏ ‏‮inline‬‏ ‏‮and‬‏ ‏‮deferring‬‏ ‏‮all‬‏ ‏‮non‬‏-‏‮critical‬‏ ‏‮JS‬‏/‏‮styles‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮blocking‬‏-‏‮resources‬‏)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"‏‮Eliminate‬‏ ‏‮render‬‏-‏‮blocking‬‏ ‏‮resources‬‏"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"‏‮Large‬‏ ‏‮network‬‏ ‏‮payloads‬‏ ‏‮cost‬‏ ‏‮users‬‏ ‏‮real‬‏ ‏‮money‬‏ ‏‮and‬‏ ‏‮are‬‏ ‏‮highly‬‏ ‏‮correlated‬‏ ‏‮with‬‏ ‏‮long‬‏ ‏‮load‬‏ ‏‮times‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮network‬‏-‏‮payloads‬‏)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"‏‮Total‬‏ ‏‮size‬‏ ‏‮was‬‏ {‏‮totalBytes‬‏} ‏‮KB‬‏"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"‏‮Avoid‬‏ ‏‮enormous‬‏ ‏‮network‬‏ ‏‮payloads‬‏"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"‏‮Avoids‬‏ ‏‮enormous‬‏ ‏‮network‬‏ ‏‮payloads‬‏"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"‏‮Minifying‬‏ ‏‮CSS‬‏ ‏‮files‬‏ ‏‮can‬‏ ‏‮reduce‬‏ ‏‮network‬‏ ‏‮payload‬‏ ‏‮sizes‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮minify‬‏-‏‮css‬‏)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"‏‮Minify‬‏ ‏‮CSS‬‏"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"‏‮Minifying‬‏ ‏‮JavaScript‬‏ ‏‮files‬‏ ‏‮can‬‏ ‏‮reduce‬‏ ‏‮payload‬‏ ‏‮sizes‬‏ ‏‮and‬‏ ‏‮script‬‏ ‏‮parse‬‏ ‏‮time‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮speed‬‏/‏‮docs‬‏/‏‮insights‬‏/‏‮MinifyResources‬‏)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"‏‮Minify‬‏ ‏‮JavaScript‬‏"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"‏‮Remove‬‏ ‏‮unused‬‏ ‏‮rules‬‏ ‏‮from‬‏ ‏‮stylesheets‬‏ ‏‮to‬‏ ‏‮reduce‬‏ ‏‮unnecessary‬‏ ‏‮bytes‬‏ ‏‮consumed‬‏ ‏‮by‬‏ ‏‮network‬‏ ‏‮activity‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮unused‬‏-‏‮css‬‏)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"‏‮Defer‬‏ ‏‮unused‬‏ ‏‮CSS‬‏"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"‏‮Remove‬‏ ‏‮unused‬‏ ‏‮JavaScript‬‏ ‏‮to‬‏ ‏‮reduce‬‏ ‏‮bytes‬‏ ‏‮consumed‬‏ ‏‮by‬‏ ‏‮network‬‏ ‏‮activity‬‏."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"‏‮Remove‬‏ ‏‮unused‬‏ ‏‮JavaScript‬‏"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"‏‮A‬‏ ‏‮long‬‏ ‏‮cache‬‏ ‏‮lifetime‬‏ ‏‮can‬‏ ‏‮speed‬‏ ‏‮up‬‏ ‏‮repeat‬‏ ‏‮visits‬‏ ‏‮to‬‏ ‏‮your‬‏ ‏‮page‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮cache‬‏-‏‮policy‬‏)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 ‏‮resource‬‏ ‏‮found‬‏}zero{# ‏‮resources‬‏ ‏‮found‬‏}two{# ‏‮resources‬‏ ‏‮found‬‏}few{# ‏‮resources‬‏ ‏‮found‬‏}many{# ‏‮resources‬‏ ‏‮found‬‏}other{# ‏‮resources‬‏ ‏‮found‬‏}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"‏‮Serve‬‏ ‏‮static‬‏ ‏‮assets‬‏ ‏‮with‬‏ ‏‮an‬‏ ‏‮efficient‬‏ ‏‮cache‬‏ ‏‮policy‬‏"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"‏‮Uses‬‏ ‏‮efficient‬‏ ‏‮cache‬‏ ‏‮policy‬‏ ‏‮on‬‏ ‏‮static‬‏ ‏‮assets‬‏"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"‏‮Optimized‬‏ ‏‮images‬‏ ‏‮load‬‏ ‏‮faster‬‏ ‏‮and‬‏ ‏‮consume‬‏ ‏‮less‬‏ ‏‮cellular‬‏ ‏‮data‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮optimize‬‏-‏‮images‬‏)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"‏‮Efficiently‬‏ ‏‮encode‬‏ ‏‮images‬‏"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"‏‮Serve‬‏ ‏‮images‬‏ ‏‮that‬‏ ‏‮are‬‏ ‏‮appropriately‬‏-‏‮sized‬‏ ‏‮to‬‏ ‏‮save‬‏ ‏‮cellular‬‏ ‏‮data‬‏ ‏‮and‬‏ ‏‮improve‬‏ ‏‮load‬‏ ‏‮time‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮oversized‬‏-‏‮images‬‏)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"‏‮Properly‬‏ ‏‮size‬‏ ‏‮images‬‏"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"‏‮Text‬‏-‏‮based‬‏ ‏‮resources‬‏ ‏‮should‬‏ ‏‮be‬‏ ‏‮served‬‏ ‏‮with‬‏ ‏‮compression‬‏ (‏‮gzip‬‏, ‏‮deflate‬‏ ‏‮or‬‏ ‏‮brotli‬‏) ‏‮to‬‏ ‏‮minimize‬‏ ‏‮total‬‏ ‏‮network‬‏ ‏‮bytes‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮text‬‏-‏‮compression‬‏)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"‏‮Enable‬‏ ‏‮text‬‏ ‏‮compression‬‏"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"‏‮Image‬‏ ‏‮formats‬‏ ‏‮like‬‏ ‏‮JPEG‬‏ 2000, ‏‮JPEG‬‏ ‏‮XR‬‏, ‏‮and‬‏ ‏‮WebP‬‏ ‏‮often‬‏ ‏‮provide‬‏ ‏‮better‬‏ ‏‮compression‬‏ ‏‮than‬‏ ‏‮PNG‬‏ ‏‮or‬‏ ‏‮JPEG‬‏, ‏‮which‬‏ ‏‮means‬‏ ‏‮faster‬‏ ‏‮downloads‬‏ ‏‮and‬‏ ‏‮less‬‏ ‏‮data‬‏ ‏‮consumption‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮webp‬‏)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"‏‮Serve‬‏ ‏‮images‬‏ ‏‮in‬‏ ‏‮next‬‏-‏‮gen‬‏ ‏‮formats‬‏"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"‏‮The‬‏ ‏‮Critical‬‏ ‏‮Request‬‏ ‏‮Chains‬‏ ‏‮below‬‏ ‏‮show‬‏ ‏‮you‬‏ ‏‮what‬‏ ‏‮resources‬‏ ‏‮are‬‏ ‏‮loaded‬‏ ‏‮with‬‏ ‏‮a‬‏ ‏‮high‬‏ ‏‮priority‬‏. ‏‮Consider‬‏ ‏‮reducing‬‏ ‏‮the‬‏ ‏‮length‬‏ ‏‮of‬‏ ‏‮chains‬‏, ‏‮reducing‬‏ ‏‮the‬‏ ‏‮download‬‏ ‏‮size‬‏ ‏‮of‬‏ ‏‮resources‬‏, ‏‮or‬‏ ‏‮deferring‬‏ ‏‮the‬‏ ‏‮download‬‏ ‏‮of‬‏ ‏‮unnecessary‬‏ ‏‮resources‬‏ ‏‮to‬‏ ‏‮improve‬‏ ‏‮page‬‏ ‏‮load‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮critical‬‏-‏‮request‬‏-‏‮chains‬‏)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 ‏‮chain‬‏ ‏‮found‬‏}zero{# ‏‮chains‬‏ ‏‮found‬‏}two{# ‏‮chains‬‏ ‏‮found‬‏}few{# ‏‮chains‬‏ ‏‮found‬‏}many{# ‏‮chains‬‏ ‏‮found‬‏}other{# ‏‮chains‬‏ ‏‮found‬‏}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"‏‮Minimize‬‏ ‏‮Critical‬‏ ‏‮Requests‬‏ ‏‮Depth‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"‏‮Element‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"‏‮Statistic‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"‏‮Value‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"‏‮Browser‬‏ ‏‮engineers‬‏ ‏‮recommend‬‏ ‏‮pages‬‏ ‏‮contain‬‏ ‏‮fewer‬‏ ‏‮than‬‏ ~1,500 ‏‮DOM‬‏ ‏‮nodes‬‏. ‏‮The‬‏ ‏‮sweet‬‏ ‏‮spot‬‏ ‏‮is‬‏ ‏‮a‬‏ ‏‮tree‬‏ ‏‮depth‬‏ < 32 ‏‮elements‬‏ ‏‮and‬‏ ‏‮fewer‬‏ ‏‮than‬‏ 60 ‏‮children‬‏/‏‮parent‬‏ ‏‮element‬‏. ‏‮A‬‏ ‏‮large‬‏ ‏‮DOM‬‏ ‏‮can‬‏ ‏‮increase‬‏ ‏‮memory‬‏ ‏‮usage‬‏, ‏‮cause‬‏ ‏‮longer‬‏ [‏‮style‬‏ ‏‮calculations‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮fundamentals‬‏/‏‮performance‬‏/‏‮rendering‬‏/‏‮reduce‬‏-‏‮the‬‏-‏‮scope‬‏-‏‮and‬‏-‏‮complexity‬‏-‏‮of‬‏-‏‮style‬‏-‏‮calculations‬‏), ‏‮and‬‏ ‏‮produce‬‏ ‏‮costly‬‏ [‏‮layout‬‏ ‏‮reflows‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮speed‬‏/‏‮articles‬‏/‏‮reflow‬‏). [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮dom‬‏-‏‮size‬‏)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 ‏‮node‬‏}zero{# ‏‮nodes‬‏}two{# ‏‮nodes‬‏}few{# ‏‮nodes‬‏}many{# ‏‮nodes‬‏}other{# ‏‮nodes‬‏}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"‏‮Avoid‬‏ ‏‮an‬‏ ‏‮excessive‬‏ ‏‮DOM‬‏ ‏‮size‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"‏‮Maximum‬‏ ‏‮DOM‬‏ ‏‮Depth‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"‏‮Total‬‏ ‏‮DOM‬‏ ‏‮Nodes‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"‏‮Maximum‬‏ ‏‮Child‬‏ ‏‮Elements‬‏"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"‏‮Avoids‬‏ ‏‮an‬‏ ‏‮excessive‬‏ ‏‮DOM‬‏ ‏‮size‬‏"},

"lighthouse-core/audits/font-display.js | description":{
"message":"‏‮Leverage‬‏ ‏‮the‬‏ ‏‮font‬‏-‏‮display‬‏ ‏‮CSS‬‏ ‏‮feature‬‏ ‏‮to‬‏ ‏‮ensure‬‏ ‏‮text‬‏ ‏‮is‬‏ ‏‮user‬‏-‏‮visible‬‏ ‏‮while‬‏ ‏‮webfonts‬‏ ‏‮are‬‏ ‏‮loading‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮updates‬‏/2016/02/‏‮font‬‏-‏‮display‬‏)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"‏‮Ensure‬‏ ‏‮text‬‏ ‏‮remains‬‏ ‏‮visible‬‏ ‏‮during‬‏ ‏‮webfont‬‏ ‏‮load‬‏"},

"lighthouse-core/audits/font-display.js | title":{
"message":"‏‮All‬‏ ‏‮text‬‏ ‏‮remains‬‏ ‏‮visible‬‏ ‏‮during‬‏ ‏‮webfont‬‏ ‏‮loads‬‏"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"‏‮Category‬‏"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"‏‮Consider‬‏ ‏‮reducing‬‏ ‏‮the‬‏ ‏‮time‬‏ ‏‮spent‬‏ ‏‮parsing‬‏, ‏‮compiling‬‏ ‏‮and‬‏ ‏‮executing‬‏ ‏‮JS‬‏. ‏‮You‬‏ ‏‮may‬‏ ‏‮find‬‏ ‏‮delivering‬‏ ‏‮smaller‬‏ ‏‮JS‬‏ ‏‮payloads‬‏ ‏‮helps‬‏ ‏‮with‬‏ ‏‮this‬‏."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"‏‮Minimize‬‏ ‏‮main‬‏-‏‮thread‬‏ ‏‮work‬‏"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"‏‮Minimizes‬‏ ‏‮main‬‏-‏‮thread‬‏ ‏‮work‬‏"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"‏‮The‬‏ ‏‮score‬‏ ‏‮above‬‏ ‏‮is‬‏ ‏‮an‬‏ ‏‮estimate‬‏ ‏‮of‬‏ ‏‮how‬‏ ‏‮long‬‏ ‏‮your‬‏ ‏‮app‬‏ ‏‮takes‬‏ ‏‮to‬‏ ‏‮respond‬‏ ‏‮to‬‏ ‏‮user‬‏ ‏‮input‬‏, ‏‮in‬‏ ‏‮milliseconds‬‏, ‏‮during‬‏ ‏‮the‬‏ ‏‮busiest‬‏ 5‏‮s‬‏ ‏‮window‬‏ ‏‮of‬‏ ‏‮page‬‏ ‏‮load‬‏. ‏‮If‬‏ ‏‮your‬‏ ‏‮latency‬‏ ‏‮is‬‏ ‏‮higher‬‏ ‏‮than‬‏ 50 ‏‮ms‬‏, ‏‮users‬‏ ‏‮may‬‏ ‏‮perceive‬‏ ‏‮your‬‏ ‏‮app‬‏ ‏‮as‬‏ ‏‮laggy‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮estimated‬‏-‏‮input‬‏-‏‮latency‬‏)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"‏‮Estimated‬‏ ‏‮Input‬‏ ‏‮Latency‬‏"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"‏‮First‬‏ ‏‮Contentful‬‏ ‏‮Paint‬‏ ‏‮marks‬‏ ‏‮the‬‏ ‏‮time‬‏ ‏‮at‬‏ ‏‮which‬‏ ‏‮the‬‏ ‏‮first‬‏ ‏‮text‬‏ ‏‮or‬‏ ‏‮image‬‏ ‏‮is‬‏ ‏‮painted‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮first‬‏-‏‮contentful‬‏-‏‮paint‬‏)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"‏‮First‬‏ ‏‮Contentful‬‏ ‏‮Paint‬‏"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"‏‮First‬‏ ‏‮CPU‬‏ ‏‮Idle‬‏ ‏‮marks‬‏ ‏‮the‬‏ ‏‮first‬‏ ‏‮time‬‏ ‏‮at‬‏ ‏‮which‬‏ ‏‮the‬‏ ‏‮page‬‏'‏‮s‬‏ ‏‮main‬‏ ‏‮thread‬‏ ‏‮is‬‏ ‏‮quiet‬‏ ‏‮enough‬‏ ‏‮to‬‏ ‏‮handle‬‏ ‏‮input‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮first‬‏-‏‮interactive‬‏)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"‏‮First‬‏ ‏‮CPU‬‏ ‏‮Idle‬‏"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"‏‮First‬‏ ‏‮Meaningful‬‏ ‏‮Paint‬‏ ‏‮measures‬‏ ‏‮when‬‏ ‏‮the‬‏ ‏‮primary‬‏ ‏‮content‬‏ ‏‮of‬‏ ‏‮a‬‏ ‏‮page‬‏ ‏‮is‬‏ ‏‮visible‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮first‬‏-‏‮meaningful‬‏-‏‮paint‬‏)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"‏‮First‬‏ ‏‮Meaningful‬‏ ‏‮Paint‬‏"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"‏‮Interactive‬‏ ‏‮marks‬‏ ‏‮the‬‏ ‏‮time‬‏ ‏‮at‬‏ ‏‮which‬‏ ‏‮the‬‏ ‏‮page‬‏ ‏‮is‬‏ ‏‮fully‬‏ ‏‮interactive‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮consistently‬‏-‏‮interactive‬‏)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"‏‮Time‬‏ ‏‮to‬‏ ‏‮Interactive‬‏"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"‏‮Speed‬‏ ‏‮Index‬‏ ‏‮shows‬‏ ‏‮how‬‏ ‏‮quickly‬‏ ‏‮the‬‏ ‏‮contents‬‏ ‏‮of‬‏ ‏‮a‬‏ ‏‮page‬‏ ‏‮are‬‏ ‏‮visibly‬‏ ‏‮populated‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮speed‬‏-‏‮index‬‏)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"‏‮Speed‬‏ ‏‮Index‬‏"},

"lighthouse-core/audits/redirects.js | description":{
"message":"‏‮Redirects‬‏ ‏‮introduce‬‏ ‏‮additional‬‏ ‏‮delays‬‏ ‏‮before‬‏ ‏‮the‬‏ ‏‮page‬‏ ‏‮can‬‏ ‏‮be‬‏ ‏‮loaded‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮redirects‬‏)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"‏‮Avoid‬‏ ‏‮multiple‬‏ ‏‮page‬‏ ‏‮redirects‬‏"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"‏‮Time‬‏ ‏‮To‬‏ ‏‮First‬‏ ‏‮Byte‬‏ ‏‮identifies‬‏ ‏‮the‬‏ ‏‮time‬‏ ‏‮at‬‏ ‏‮which‬‏ ‏‮your‬‏ ‏‮server‬‏ ‏‮sends‬‏ ‏‮a‬‏ ‏‮response‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮ttfb‬‏)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"‏‮Root‬‏ ‏‮document‬‏ ‏‮took‬‏ {‏‮timeInMs‬‏} ‏‮ms‬‏"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"‏‮Reduce‬‏ ‏‮server‬‏ ‏‮response‬‏ ‏‮times‬‏ (‏‮TTFB‬‏)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"‏‮Server‬‏ ‏‮response‬‏ ‏‮times‬‏ ‏‮are‬‏ ‏‮low‬‏ (‏‮TTFB‬‏)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"‏‮Duration‬‏"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"‏‮Name‬‏"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"‏‮Start‬‏ ‏‮Time‬‏"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"‏‮Type‬‏"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"‏‮Consider‬‏ ‏‮instrumenting‬‏ ‏‮your‬‏ ‏‮app‬‏ ‏‮with‬‏ ‏‮the‬‏ ‏‮User‬‏ ‏‮Timing‬‏ ‏‮API‬‏ ‏‮to‬‏ ‏‮measure‬‏ ‏‮your‬‏ ‏‮app‬‏'‏‮s‬‏ ‏‮real‬‏-‏‮world‬‏ ‏‮performance‬‏ ‏‮during‬‏ ‏‮key‬‏ ‏‮user‬‏ ‏‮experiences‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮user‬‏-‏‮timing‬‏)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 ‏‮user‬‏ ‏‮timing‬‏}zero{# ‏‮user‬‏ ‏‮timings‬‏}two{# ‏‮user‬‏ ‏‮timings‬‏}few{# ‏‮user‬‏ ‏‮timings‬‏}many{# ‏‮user‬‏ ‏‮timings‬‏}other{# ‏‮user‬‏ ‏‮timings‬‏}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"‏‮User‬‏ ‏‮Timing‬‏ ‏‮marks‬‏ ‏‮and‬‏ ‏‮measures‬‏"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"‏‮Consider‬‏ ‏‮adding‬‏ ‏‮preconnect‬‏ ‏‮or‬‏ ‏‮dns‬‏-‏‮prefetch‬‏ ‏‮resource‬‏ ‏‮hints‬‏ ‏‮to‬‏ ‏‮establish‬‏ ‏‮early‬‏ ‏‮connections‬‏ ‏‮to‬‏ ‏‮important‬‏ ‏‮third‬‏-‏‮party‬‏ ‏‮origins‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮fundamentals‬‏/‏‮performance‬‏/‏‮resource‬‏-‏‮prioritization‬‏#‏‮preconnect‬‏)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"‏‮Preconnect‬‏ ‏‮to‬‏ ‏‮required‬‏ ‏‮origins‬‏"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"‏‮Consider‬‏ ‏‮using‬‏ <link rel=preload> ‏‮to‬‏ ‏‮prioritize‬‏ ‏‮fetching‬‏ ‏‮resources‬‏ ‏‮that‬‏ ‏‮are‬‏ ‏‮currently‬‏ ‏‮requested‬‏ ‏‮later‬‏ ‏‮in‬‏ ‏‮page‬‏ ‏‮load‬‏. [‏‮Learn‬‏ ‏‮more‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/‏‮audits‬‏/‏‮preload‬‏)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"‏‮Preload‬‏ ‏‮key‬‏ ‏‮requests‬‏"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"‏‮More‬‏ ‏‮information‬‏ ‏‮about‬‏ ‏‮the‬‏ ‏‮performance‬‏ ‏‮of‬‏ ‏‮your‬‏ ‏‮application‬‏."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"‏‮Diagnostics‬‏"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"‏‮The‬‏ ‏‮most‬‏ ‏‮critical‬‏ ‏‮aspect‬‏ ‏‮of‬‏ ‏‮performance‬‏ ‏‮is‬‏ ‏‮how‬‏ ‏‮quickly‬‏ ‏‮pixels‬‏ ‏‮are‬‏ ‏‮rendered‬‏ ‏‮onscreen‬‏. ‏‮Key‬‏ ‏‮metrics‬‏: ‏‮First‬‏ ‏‮Contentful‬‏ ‏‮Paint‬‏, ‏‮First‬‏ ‏‮Meaningful‬‏ ‏‮Paint‬‏"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"‏‮First‬‏ ‏‮Paint‬‏ ‏‮Improvements‬‏"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"‏‮These‬‏ ‏‮optimizations‬‏ ‏‮can‬‏ ‏‮speed‬‏ ‏‮up‬‏ ‏‮your‬‏ ‏‮page‬‏ ‏‮load‬‏."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"‏‮Opportunities‬‏"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"‏‮Metrics‬‏"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"‏‮Enhance‬‏ ‏‮the‬‏ ‏‮overall‬‏ ‏‮loading‬‏ ‏‮experience‬‏, ‏‮so‬‏ ‏‮the‬‏ ‏‮page‬‏ ‏‮is‬‏ ‏‮responsive‬‏ ‏‮and‬‏ ‏‮ready‬‏ ‏‮to‬‏ ‏‮use‬‏ ‏‮as‬‏ ‏‮soon‬‏ ‏‮as‬‏ ‏‮possible‬‏. ‏‮Key‬‏ ‏‮metrics‬‏: ‏‮Time‬‏ ‏‮to‬‏ ‏‮Interactive‬‏, ‏‮Speed‬‏ ‏‮Index‬‏"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"‏‮Overall‬‏ ‏‮Improvements‬‏"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"‏‮Performance‬‏"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"‏‮Cache‬‏ ‏‮TTL‬‏"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"‏‮Size‬‏ (‏‮KB‬‏)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"‏‮Time‬‏ ‏‮Spent‬‏"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"‏‮URL‬‏"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"‏‮Potential‬‏ ‏‮Savings‬‏ (‏‮KB‬‏)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"‏‮Potential‬‏ ‏‮Savings‬‏ (‏‮ms‬‏)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"‏‮Potential‬‏ ‏‮savings‬‏ ‏‮of‬‏ {‏‮wastedBytes‬‏} ‏‮KB‬‏"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"‏‮Potential‬‏ ‏‮savings‬‏ ‏‮of‬‏ {‏‮wastedMs‬‏} ‏‮ms‬‏"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{‏‮timeInMs‬‏} ‏‮ms‬‏"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{‏‮timeInMsSec‬‏} ‏‮s‬‏"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"‏‮Show‬‏ ‏‮audits‬‏"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"‏‮Initial‬‏ ‏‮Navigation‬‏"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"‏‮Maximum‬‏ ‏‮critical‬‏ ‏‮path‬‏ ‏‮latency‬‏:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"‏‮Error‬‏!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"‏‮Report‬‏ ‏‮error‬‏: ‏‮no‬‏ ‏‮audit‬‏ ‏‮information‬‏"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"‏‮Lab‬‏ ‏‮Data‬‏"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[‏‮Lighthouse‬‏](‏‮https‬‏://‏‮developers‬‏.‏‮google‬‏.‏‮com‬‏/‏‮web‬‏/‏‮tools‬‏/‏‮lighthouse‬‏/) ‏‮analysis‬‏ ‏‮of‬‏ ‏‮the‬‏ ‏‮current‬‏ ‏‮page‬‏ ‏‮on‬‏ ‏‮emulated‬‏ 3‏‮G‬‏. ‏‮Values‬‏ ‏‮are‬‏ ‏‮estimated‬‏ ‏‮and‬‏ ‏‮may‬‏ ‏‮vary‬‏."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"‏‮Additional‬‏ ‏‮items‬‏ ‏‮to‬‏ ‏‮manually‬‏ ‏‮check‬‏"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"‏‮Not‬‏ ‏‮applicable‬‏"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"‏‮Opportunity‬‏"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"‏‮Estimated‬‏ ‏‮Savings‬‏"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"‏‮Passed‬‏ ‏‮audits‬‏"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"‏‮Score‬‏ ‏‮scale‬‏:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"‏‮There‬‏ ‏‮were‬‏ ‏‮issues‬‏ ‏‮affecting‬‏ ‏‮this‬‏ ‏‮run‬‏ ‏‮of‬‏ ‏‮Lighthouse‬‏:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"‏‮Values‬‏ ‏‮are‬‏ ‏‮estimated‬‏ ‏‮and‬‏ ‏‮may‬‏ ‏‮vary‬‏."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"‏‮Warnings‬‏: "}};


},{}],39:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"أثّرت \"إضافات Chrome\" بشكلٍ سلبي في أداء التحميل لهذه الصفحة. ويمكنك تجربة تدقيق الصفحة في وضع التصفُّح المُتخفّي أو من ملف شخصي على Chrome بدون الإضافات."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"تقييم النص البرمجي"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"تحليل النص البرمجي"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"الإجمالي"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"يمكنك تقليل الوقت المستغرق في تحليل جافا سكريبت وإنشائه وتنفيذه. قد يتبين لك أن تسليم أحمال جافا سكريبت بحجم أصغر يساعد في ذلك. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"تقليل وقت تنفيذ جافا سكريبت"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"وقت تنفيذ جافا سكريبت"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"لا تكفي ملفات GIF الكبيرة لتسليم محتوى صور متحركة. لذا يمكنك استخدام فيديوهات MPEG4 / WebM للصور المتحركة وملفات PNG / WebP للصور الثابتة بدلاً من ملفات GIF لحفظ وحدات البايت للشبكة. [مزيد من المعلومات](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"استخدام تنسيقات الفيديو لمحتوى الصور المتحركة"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"خُذ بعين الاعتبار التحميل البطئ خارج الشاشة والصور المخفية بعد الانتهاء من تحميل جميع الموارد المهمة في وقت أقل تفاعلية. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"تأجيل الصور خارج الشاشة"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"تحظر الموارد العرض الأول لصفحتك. ويمكنك تسليم تضمين JS / CSS المهم وتأجيل كل الأنماط/جافا سكريبت غير المهمة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"استبعاد موارد حظر العرض"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"تُكلِّف أحمال الشبكة الكبيرة المستخدمين الكثير من الأموال وترتبط مباشرةً بأوقات التحميل الطويلة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"كان إجمالي الحجم {totalBytes, number, bytes} كيلوبايت"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"تجنُّب الأحمال الضخمة للشبكة"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"تجنُّب الأحمال الضخمة للشبكة"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"يمكن أن يؤدي تصغير ملفات CSS إلى تقليل أحجام حمولة الشبكة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"تصغير CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"يمكن أن يؤدي تصغير ملفات جافا سكريبت إلى تقليل أحجام الأحمال ووقت تحليل النص البرمجي. [مزيد من المعلومات](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"تصغير جافا سكريبت"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"يمكنك إزالة القواعد غير المُستخدَمة من ورق الأنماط لتقليل وحدات البايت غير الضرورية التي يستهلكها نشاط الشبكة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"تأجيل CSS غير المُستخدَم"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"يمكنك إزالة جافا سكريبت غير المُستخدَم لتقليل وحدات البايت التي يستهلكها نشاط الشبكة."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"إزالة جافا سكريبت غير المستخدم"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"يمكن لفترة التخزين المؤقت الطويلة تسريع عملية تكرار الزيارات إلى صفحتك. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{تم العثور على مورد واحد}zero{تم العثور على # مورد}two{تم العثور على مورديْنِ (#)}few{تم العثور على # موارد}many{تم العثور على # موردًا}other{تم العثور على # مورد}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"عرض الأصول الثابتة من خلال سياسة ذاكرة التخزين المؤقت الفعالة"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"استخدام سياسة ذاكرة التخزين المؤقت الفعالة على الأصول الثابتة"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"يتم تحميل الصور المحسَّنة بشكلٍ أسرع وتستهلك بيانات أقل لشبكة الجوّال. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"تشفير الصور بكفاءة"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"يمكنك عرض صور بحجم مناسب لحفظ بيانات شبكة الجوّال وتحسين وقت التحميل. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"الصور ذات الحجم المناسب"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"يجب عرض الموارد المستندة إلى النص باستخدام الضغط (gzip أو الانكماش أو brotli) لتقليل إجمالي وحدات البايت للشبكة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"تفعيل ضغط النص"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"غالبًا ما توفِّر تنسيقات الصور، مثل JPEG 2000 وJPEG XR وWebP، ضغطًا أفضل من تنسيق PNG أو JPEG، وهذا بدوره يعني تنزيلاً أسرع واستهلاكًا أقل للبيانات. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"عرض الصور بتنسيقات الجيل القادم"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"توضح لك \"سلاسل الطلبات المهمة\" أدناه الموارد التي تم تحميلها بأولوية عالية. ويمكنك تقليل طول السلاسل أو تقليل حجم تنزيل الموارد أو تأجيل تنزيل الموارد غير الضرورية لتحسين تحميل الصفحة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{تم العثور على سلسلة واحدة}zero{تم العثور على # سلسلة}two{تم العثور على سلسلتيْنِ (#)}few{تم العثور على # سلاسل}many{تم العثور على # سلسلةً}other{تم العثور على # سلسلة}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"تقليل عمق الطلبات المهمة"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"يوصي مهندسو المتصفّح بالصفحات التي تحتوي على أقل من ~1500 عُقدة DOM. وتمثل sweet spot شبكة عمقها < 32 عنصرًا ولا تزيد عن 60 عنصرًا فرعيًا/رئيسيًا. ويمكن أن تزيد عُقدة DOM الكبيرة من استخدام الذاكرة، وتسبب [عمليات حسابية نمطية] أطول (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)، وتنتج [عمليات إعادة عرض للتنسيق] مُكلفة (https://developers.google.com/speed/articles/reflow). [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{عقدة واحدة}zero{# عقدة}two{عقدتان (#)}few{# عُقَد}many{# عقدةً}other{# عقدة}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"تجنُب حجم DOM الزائد"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"الحد الأقصى لعمق DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"إجمالى عُقَدْ DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"تجنُب حجم DOM الزائد"},

"lighthouse-core/audits/font-display.js | description":{
"message":"يمكنك الاستفادة من ميزة CSS لعرض الخطوط لضمان أن يكون النص مرئيًا للمستخدم أثناء تحميل خطوط موقع ويب. [مزيد من المعلومات](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"التأكد من بقاء النص مرئيًا أثناء تحميل خط موقع ويب"},

"lighthouse-core/audits/font-display.js | title":{
"message":"تظل جميع النصوص مرئية أثناء تحميل خط موقع ويب"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"الفئة"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"يمكنك تقليل الوقت المستغرق في تحليل جافا سكريبت وإنشائه وتنفيذه. قد يتبين لك أن تسليم أحمال جافا سكريبت بحجم أصغر يساعد في ذلك."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"تقليل سلسلة العمل الرئيسية"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"تقليل سلسلة العمل الرئيسية"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"إن النتيجة الواردة أعلاه تمثل تقديرًا لطول المدة التي يستغرقها تطبيقك في الاستجابة لإدخال المستخدم، بالمللي ثانية، أثناء فترة تحميل الصفحة الأكثر انشغالاً خلال 5 ثوانٍ. إذا كان وقت الاستجابة أكثر من 50 مللي ثانية، يمكن للمستخدمين اعتبار تطبيقك بأنه \"بطيء في التفاعل\". [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"وقت الاستجابة المُقدّر للإدخال"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"تحدد \"سرعة عرض المحتوى على الصفحة\" الوقت الذي يُعرَض فيه أول صورة أو نص. [مزيد من المعلومات](https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics#first_paint_and_first_contentful_paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"First Contentful Paint"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"تشير \"وحدة المعالجة المركزية الأولى الخاملة\" إلى المرة الأولى التي تكون فيها السلسلة الرئيسية للصفحة كافية للتعامل مع الإدخال. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"وحدة المعالجة المركزية الأولى الخاملة"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"يقيس First Meaningful Paint الوقت الذي يكون فيه المحتوى الأساسي لصفحة مرئيًا. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"First Meaningful Paint"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"يميّز \"الوضع التفاعلي\" الوقت الذي تكون فيه الصفحة تفاعلية بالكامل. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"وقت التفاعل"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"يوضح مؤشر السرعة مدى سرعة تعبئة محتوى الصفحة بشكلٍ واضح. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"مؤشر السرعة"},

"lighthouse-core/audits/redirects.js | description":{
"message":"تؤدي عمليات إعادة التوجيه إلى حدوث تأخيرات إضافية قبل أن يتم تحميل الصفحة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"تجنُب عمليات إعادة توجيه الصفحات المتعددة"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"يحدد \"وقت وصول أول بايت\" الوقت الذي يُرسل فيه الخادم استجابة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"استغرق مستند الجذر {timeInMs, number, milliseconds} مللي ثانية."},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"تقليل أوقات استجابة الخادم (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"أوقات استجابة الخادم منخفضة (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"المدة"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"الاسم"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"وقت البدء"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"النوع"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"يمكنك توجيه تطبيقك باستخدام \"واجهة برمجة التطبيقات لأوقات المستخدم\" لقياس الأداء الفعلي لتطبيقك أثناء التجارب الأساسية للمستخدمين. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{وقت واحد للمستخدم}zero{# وقت للمستخدم}two{وقتا (#) المستخدم}few{# أوقات للمستخدم}many{# وقتًا للمستخدم}other{# وقت للمستخدم}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"علامات أوقات المستخدم وقياساتها"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"يمكنك إضافة الاتصال المسبق أو تعديلات موارد الجلب المسبق لنظام أسماء النطاقات لإنشاء اتصالات مبكرة بأصول مهمة تابعة لجهة خارجية. [مزيد من المعلومات](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"الاتصال المسبق للأصول المطلوبة"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"يمكنك استخدام <link rel = preload> لتحديد أولويات جلب الموارد المطلوبة حاليًا في وقتٍ لاحق في تحميل الصفحة. [مزيد من المعلومات](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"التحميل المسبق للطلبات الأساسية"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"مزيد من المعلومات حول أداء تطبيقك."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"بيانات التشخيص"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"يمثل الجانب الأكثر أهمية للأداء مدى السرعة التي يتم بها عرض وحدات البكسل على الشاشة. المقاييس الرئيسية: First Contentful Paint وFirst Meaningful Paint"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"تحسينات العرض الأول"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"يمكن لهذه التحسينات تسريع عملية تحميل الصفحة."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"فرص تحسين الأداء"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"المقاييس"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"يمكنك تحسين تجربة التحميل العامة لتصبح هذه الصفحة سريعة الاستجابة وجاهزة للاستخدام في أقرب وقت ممكن. المقاييس الأساسية: وقت التفاعل ومؤشر السرعة."},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"التحسينات العامة"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"الأداء"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"ذاكرة التخزين المؤقت TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"الحجم (كيلوبايت)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"الوقت المستغرَق"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"عنوان URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"التوفيرات المحتملة (كيلوبايت)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"التوفيرات المحتملة (مللي ثانية)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"التوفيرات المحتملة من {wastedBytes, number, bytes} كيلوبايت"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"التوفيرات المحتملة لـ {wastedMs, number, milliseconds} مللي ثانية"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} مللي ثانية"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} ثانية"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"عرض عمليات التدقيق"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"التنقل الأوّلي"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"الحد الأقصى لوقت استجابة المسار المهم:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"خطأ!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"الإبلاغ عن خطأ: لا تتوفَّر معلومات تدقيق"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"بيانات المختبَر"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) تحليل الصفحة الحالية على شبكة الجيل الثالث في وضع المحاكاة. القيم تقديرية وقابلة للتغيير."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"عناصر إضافية للتحقُّق يدويًا"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"غير سارٍ"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"فرصة تحسين الأداء"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"التوفيرات المُقدرة"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"اجتياز عمليات التدقيق بنجاح"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"مقياس النتيجة:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"حدثت مشاكل تؤثر في تشغيل Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"القيم تقديرية وقابلة للتغير"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"التحذيرات: "}};


},{}],40:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Зареждането на тази страница се забавя от разширения за Chrome. Опитайте да я проверите в режим „инкогнито“ или от потребителски профил в Chrome без инсталирани разширения."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Проверка на скрипта"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Синтактичен анализ на скрипта"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Общо"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Препоръчваме да намалите времето, прекарвано в синтактичен анализ, компилиране и изпълнение на JS. Използването на JS ресурси с по-малък размер може да помогне за това. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Намалете времето за изпълнение на JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Време за изпълнение на JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Големите GIF файлове не са ефективни за показване на анимирано съдържание. Вместо това препоръчваме да използвате видеоклипове във формат MPEG4/WebM за анимации и PNG/WebP за статични изображения, за да намалите преноса на данни. [Научете повече](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Използвайте видеоформати за анимираното съдържание"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"За да намалите времето до интерактивност, препоръчваме скритите изображения и тези извън видимата част на екрана да се зареждат след всички критични ресурси. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Отложете зареждането на изображенията извън видимата част на екрана"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ресурси блокират първото изобразяване на страницата ви. Препоръчваме да вградите критичните JS/CSS елементи и да отложите зареждането на всички некритични JS/стилове. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Елиминирайте ресурсите, които блокират изобразяването"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Мрежовите ресурси с голям размер струват пари на потребителите и са тясно свързани с бавното зареждане. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Общият размер бе {totalBytes, number, bytes} КБ"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Не използвайте мрежови ресурси с голям размер"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Не се използват мрежови ресурси с голям размер"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Минимизирането на файловете със CSS може да намали размера на мрежовите ресурси. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Минимизирайте CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Минимизирането на файловете с JavaScript може да намали размера на ресурсите и времето за синтактичен анализ на скрипта. [Научете повече](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Минимизирайте JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Премахнете неизползваните правила от стиловите листове, за да намалите ненужния пренос на данни при мрежовата активност. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Отложете зареждането на неизползваните CSS стилове"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Премахнете неизползвания JavaScript, за да намалите преноса на данни при мрежовата активност."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Премахнете неизползвания JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Продължителното съхраняване на кеша може да ускори повторните посещения на страницата ви. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Намерен е 1 ресурс}other{Намерени са # ресурса}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Използвайте ефективни правила за кеша, за да улесните показването на статичните активи"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Използват се ефективни правила за кеширане на статичните активи"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Оптимизираните изображения се зареждат по-бързо и използват по-малко мобилни данни. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Кодирайте изображенията ефективно"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Показвайте правилно оразмерени изображения, за да пестите мобилни данни и да ускорите зареждането. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Оразмерете изображенията правилно"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"При показването на текстови ресурси трябва да се използва компресиране (gzip, deflate или brotli), за да се намали общият пренос на данни. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Активирайте компресирането на текста"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Графичните формати, като JPEG 2000, JPEG XR и WebP, често осигуряват по-ефективно компресиране от PNG или JPEG. Това означава по-бързо изтегляне и използване на по-малко данни. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Използвайте съвременни формати за показване на изображения"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Веригите от критични заявки по-долу ви показват кои ресурси се зареждат с висок приоритет. За да ускорите зареждането на страницата, препоръчваме да скъсите веригите, да намалите размера за изтегляне на ресурсите или да отложите изтеглянето на ненужните от тях. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Намерена е 1 верига}other{Намерени са # вериги}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Намалете дълбочината на критичните заявки"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Браузърните инженери препоръчват страниците да съдържат под ~ 1500 възела на DOM. Най-добре е йерархичната структура да е с дълбочина под 32 елемента и всеки родителски елемент да има по-малко от 60 дъщерни. Големият размер на DOM може да доведе до използване на повече памет, удължаване на [стиловите изчисления](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) и забавяне поради [преоформяне](https://developers.google.com/speed/articles/reflow). [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 възел}other{# възела}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Не използвайте DOM с твърде голям размер"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Максимална дълбочина на DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Общ брой възли на DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Не се използва DOM с твърде голям размер"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Използвайте функцията font-display на CSS, така че текстът да е видим за потребителите при зареждането на уеб шрифтовете. [Научете повече](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Уверете се, че текстът остава видим при зареждането на уеб шрифтовете"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Целият текст остава видим при зареждането на уеб шрифтовете"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Категория"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Препоръчваме да намалите времето, прекарвано в синтактичен анализ, компилиране и изпълнение на JS. Използването на JS ресурси с по-малък размер може да помогне за това."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Сведете до минимум работата по основната нишка"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Работата по основната нишка е сведена до минимум"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Резултатът по-горе показва приблизително колко време (в милисекунди) е необходимо на приложението ви, за да реагира на входящо потребителско действие по време на най-натоварения 5-секунден период от зареждането на страницата. Ако забавянето е над 50 мсек, приложението ви може да се стори бавно на потребителите. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Прогнозно забавяне при входящо действие"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Показателят „Първо изобразяване на съдържание (FCP)“ указва след колко време се изобразява първият текстов или графичен елемент. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Първо изобразяване на съдържание"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Показателят „Първи момент на неактивност на процесора“ указва първия момент, в който основната нишка на страницата е достатъчно свободна, за да обработва входящи действия. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Първи момент на неактивност на процесора"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Показателят „Първо значимо изобразяване“ измерва времето, за което основното съдържание на страницата става видимо. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Първо значимо изобразяване"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Показателят „Време до интерактивност“ указва колко време отнема постигането на пълна интерактивност за страницата. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Време до интерактивност"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Индексът на скоростта показва колко бързо се постига визуална завършеност на страницата. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Индекс на скоростта"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Пренасочванията водят до допълнително забавяне на зареждането на страницата. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Не използвайте пренасочвания през няколко страници"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Показателят „Време до първия байт“ указва след колко време сървърът изпраща отговор. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Основният документ отне {timeInMs, number, milliseconds} мсек"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Намалете времето за отговор от сървъра (време до първия байт)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Сървърът отговаря бързо (време до първия байт)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Продължителност"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Име"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Начален час"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Тип"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Препоръчваме да използвате API за разбивка на потребителските времена за приложението си, за да измервате действителната му ефективност по време на ключови аспекти от практическата работа на потребителите. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 потребителско време}other{# потребителски времена}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Точки и измервания в разбивката на потребителските времена"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Препоръчваме да добавите подсказки за предварително свързване или предварително извличане на DNS за ресурсите с цел ранно установяване на връзка с важни източници на трети страни. [Научете повече](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Осигурете предварително свързване с необходимите източници"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Препоръчваме да използвате <link rel=preload>, за да укажете най-напред да се извличат ресурсите, които понастоящем се заявяват на по-късен етап от зареждането на страницата. [Научете повече](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Задайте ключовите заявки да се зареждат предварително"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Повече информация за ефективността на приложението ви."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Диагностика"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Най-критичният аспект на ефективността е времето, за което пикселите се изобразяват на екрана. Ключови показатели: първо изобразяване на съдържание, първо значимо изобразяване"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Подобрения, свързани с първото изобразяване"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Тези оптимизации могат да ускорят зареждането на страницата."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Възможности"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Показатели"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Подобрете зареждането като цяло, така че страницата да реагира бързо и да е готова за използване възможно най-скоро. Ключови показатели: време до интерактивност, индекс на скоростта"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Цялостни подобрения"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Ефективност"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Време на валидност на кеша"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Размер (КБ)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Прекарано време"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL адрес"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Потенциална икономия (КБ)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Потенциална икономия (мсек)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Потенциално спестяване на {wastedBytes, number, bytes} КБ"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Потенциално спестяване на {wastedMs, number, milliseconds} мсек"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} мсек"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} сек"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Показване на проверките"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Първоначална навигация"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Максимално забавяне в критичния път:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Грешка!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Грешка в отчета: няма информация за проверката"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Данни от контролиран тест"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Анализът с [Lighthouse](https://developers.google.com/web/tools/lighthouse/) на текущата страница бе извършен през емулирана 3G връзка. Стойностите са прогнозни и може да варират."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Допълнителни елементи, които да проверите ръчно"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Не е приложимо"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Възможност"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Прогнозна икономия"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Успешно преминати проверки"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Скала на резултата:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Възникнаха проблеми при изготвянето на този отчет от Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Стойностите са прогнозни и може да варират."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Предупреждения: "}};


},{}],41:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Les extensions de Chrome han afectat negativament el rendiment de càrrega de la pàgina. Audita la pàgina en mode d'incògnit o des d'un perfil de Chrome sense extensions."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Avaluació de scripts"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Anàlisi de scripts"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Et recomanem que redueixis el temps dedicat a analitzar, compilar i executar JavaScript. Et pot ajudar utilitzar càrregues útils de JavaScript més petites. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Redueix el temps d'execució de JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Temps d'execució de JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Els GIF grans no són eficients a l'hora de publicar contingut animat. Per estalviar bytes de la xarxa, pots substituir-los per vídeos MPEG4/WebM en el cas d'animacions i per PNG/WebP en el cas d'imatges estàtiques. [Més informació] (https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Utilitza formats de vídeo per al contingut animat"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Et recomanem que utilitzis la càrrega diferida de les imatges ocultes i que no es mostren a la pantalla un cop s'acabin de carregar tots els recursos crítics a fi de reduir el temps necessari perquè la pàgina sigui interactiva. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Ajorna les imatges fora de pantalla"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Els recursos estan bloquejant la primera renderització de la pàgina. Et recomanem que publiquis els fitxers JavaScript o CSS inserits i ajornis tots els estils i els fitxers JavaScript que no siguin crítics. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Elimina els recursos que bloquegen la renderització"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Si la càrrega útil de la xarxa és molt gran, els usuaris consumeixen més dades mòbils i els temps de càrrega són més llargs. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Mida total: {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Evita càrregues útils de xarxa enormes"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Evita càrregues útils de xarxa enormes"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Reduir els fitxers CSS pot disminuir les mides de càrrega útil a la xarxa. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Redueix els CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Reduir els fitxers JavaScript pot disminuir les mides de càrrega i els temps d'anàlisi de scripts. [Més informació] (https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Redueix els fitxers JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Suprimeix dels fulls d'estil les regles que no s'utilitzen per reduir els bytes que es consumeixen de manera innecessària durant l'activitat de la xarxa. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Ajorna els CSS no utilitzats"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Suprimeix els fitxers JavaScript que no s'utilitzen per reduir els bytes que es consumeixen durant l'activitat de la xarxa."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Suprimeix els fitxers JavaScript no utilitzats"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Si la memòria cau té una vida llarga, es poden accelerar les visites repetides a la teva pàgina. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{S'ha trobat 1 recurs}other{S'han trobat # recursos}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Publica recursos estàtics amb una política de memòria cau eficient"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Utilitza una política de memòria cau eficient per als recursos estàtics"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Les imatges optimitzades es carreguen més ràpidament i utilitzen menys dades mòbils. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codifica les imatges amb eficiència"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Publica imatges amb la mida correcta per estalviar dades mòbils i millorar el temps de càrrega. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Adapta la mida de les imatges"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Els recursos basats en text s'han de publicar comprimits (gzip, deflate o brotli) per minimitzar el total de bytes a la xarxa. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Activa la compressió de text"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Els formats d'imatge com JPEG 2000, JPEG XR i WebP solen oferir millors resultats de compressió que PNG o JPEG. Això implica baixades més ràpides i menys consum de dades. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Publica imatges en format d'última generació"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Les cadenes de sol·licituds crítiques de sota et mostren quins recursos es carreguen amb prioritat alta. Et recomanem que escurcis les cadenes, redueixis la mida de baixada dels recursos o ajornis la baixada de recursos innecessaris per millorar la càrrega de pàgines. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{S'ha trobat 1 cadena}other{S'han trobat # cadenes}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimitza la profunditat de les sol·licituds crítiques"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Els enginyers de navegadors recomanen que les pàgines continguin menys d'uns 1.500 nodes de DOM. La situació ideal és una profunditat d'arbre inferior a 32 elements i menys de 60 elements superiors o secundaris. Un DOM gran pot augmentar l'ús de la memòria, provocar [càlculs d'estil] més llargs (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) i produir costosos [reinicis de reflux del disseny] (https://developers.google.com/speed/articles/reflow). [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 node}other{# nodes}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Evita una mida de DOM excessiva"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Profunditat màxima de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total de nodes de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Evita una mida excessiva de DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Aprofita la funció CSS que permet mostrar els tipus de lletra per assegurar-te que els usuaris puguin veure el text mentre es carreguen els tipus de lletra per a llocs web. [Més informació] (https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Assegura't que el text continuï visible durant la càrrega dels tipus de lletra per a llocs web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Tot el text continua visible durant les càrregues dels tipus de lletra per a llocs web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categoria"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Et recomanem que redueixis el temps dedicat a analitzar, compilar i executar JavaScript. Et pot ajudar utilitzar càrregues útils de JavaScript més petites."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimitza el treball al fil principal"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimitza el treball al fil principal"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"La puntuació de més amunt és una estimació de quant tarda en mil·lisegons la teva aplicació a respondre a una acció de l'usuari durant el període de 5 segons amb més càrregues de pàgines. Si la latència és superior a 50 ms, és possible que els usuaris considerin que l'aplicació és lenta. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Latència estimada de les accions"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"La primera renderització de contingut marca el moment en què es renderitza el primer text o la primera imatge. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Primera renderització de contingut"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"La mètrica Primera inactivitat de la CPU marca el primer moment en què el fil principal de la pàgina està suficientment inactiu per gestionar accions. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Primera inactivitat de la CPU"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"La mètrica Primera renderització significativa mesura el moment en què el contingut principal d'una pàgina està visible. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Primera renderització significativa"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"La mètrica Temps fins que és interactiva marca el moment en què la pàgina és completament interactiva. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Temps fins que és interactiva"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"L'índex de velocitat mostra la rapidesa amb què s'emplena el contingut d'una pàgina. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Índex de velocitat"},

"lighthouse-core/audits/redirects.js | description":{
"message":"La mètrica Redireccions introdueix retards addicionals abans de poder carregar la pàgina. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Evita les redireccions múltiples a pàgines"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"La mètrica Temps fins al primer byte identifica el moment en què el teu servidor envia una resposta. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"El document arrel ha tardat {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Redueix els temps de resposta del servidor (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Els temps de resposta del servidor són baixos (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Durada"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nom"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Hora d'inici"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tipus"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Et recomanem que utilitzis l'API Temps d'usuari amb la teva aplicació per mesurar-ne el rendiment al món real durant experiències clau dels usuaris. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 temps d'usuari}other{# temps d'usuari}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Marques i mesures de Temps d'usuari"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Et recomanem que afegeixis suggeriments de recursos per connectar-se prèviament o per obtenir el DNS prèviament a fi d'establir connexions anticipades a orígens importants de tercers. [Més informació] (https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Connecta't prèviament als orígens necessaris"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Et recomanem que utilitzis <link rel=preload> per prioritzar l'obtenció de recursos que en aquests moments se sol·liciten en un moment posterior de la càrrega de pàgines. [Més informació] (https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Carrega prèviament les sol·licituds de clau"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Més informació sobre el rendiment de la teva aplicació."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnòstic"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"L'aspecte més crític del rendiment és la velocitat amb què es renderitzen els píxels en pantalla. Mètriques clau: Primera renderització de contigut, Primera renderització significativa"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Millores de la primera renderització"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Aquestes optimitzacions poden accelerar la càrrega de la pàgina."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Oportunitats"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Mètriques"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Millora l'experiència general de càrrega, de manera que la pàgina respongui i estigui preparada per utilitzar-se al més aviat possible. Mètriques clau: Temps fins que és interactiva, Índex de velocitat"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Millores generals"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Rendiment"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL de la memòria cau"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Mida (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Temps invertit"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Possible estalvi (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Possible estalvi (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Possible estalvi de {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Possible estalvi de {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Mostra les auditories"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navegació inicial"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latència de camí crítica màxima:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Error"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Error de l'informe: no hi ha informació d'auditoria"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Dades de laboratori"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Anàlisi amb [Lighthouse] (https://developers.google.com/web/tools/lighthouse/) de la pàgina actual mitjançant una connexió 3G emulada. Els valors són estimacions i poden variar."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Elements addicionals per comprovar manualment"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"No aplicable"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Oportunitat"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Estalvi estimat"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Auditories aprovades"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Escala de puntuació:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Hi ha hagut problemes que afecten aquesta execució de Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Els valors són estimacions i poden variar."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Advertiments: "}};


},{}],42:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Rychlost načítání této stránky byla negativně ovlivněna rozšířeními pro Chrome. Zkuste stránku zkontrolovat v anonymním režimu nebo profilu Chromu bez rozšíření."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Vyhodnocování skriptů"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Analýza skriptů"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Celkem"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Pokuste se zkrátit dobu analyzování, kompilování a spouštění JavaScriptu. Mohlo by pomoci odesílat menší soubory JavaScript. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Zkraťte dobu provádění JavaScriptu"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Doba provádění JavaScriptu"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Velké soubory GIF nejsou efektivní k zobrazování animovaného obsahu. Zvažte, zda byste namísto souborů GIF nemohli pro animace použít videa MPEG4/WebM a pro statické obrázky soubory PNG/WebP. Snížíte tak množství přenášených dat. [Další informace](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Pro animovaný obsah používejte formáty videa"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Zvažte možnost načítat obrázky mimo obrazovku a skryté obrázky „líně“ až po načtení všech kritických zdrojů, abyste zkrátili dobu k dosažení interaktivnosti. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Odložte načítání obrázků mimo obrazovku"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"První vykreslení stránky blokují zdroje. Zvažte, zda byste kriticky důležité zdroje JavaScript a CSS nemohli poskytovat přímo v kódu a stahování veškerého nekritického JavaScriptu a stylů odložit. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Eliminujte zdroje, které blokují vykreslení"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Přenášení velkého množství dat po síti je pro uživatele finančně nákladné a obvykle vede k pomalému načítání. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Celková velikost byla {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Předejděte přenášení enormního množství dat"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Nepřenáší enormní množství dat"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Minifikací souborů CSS lze snížit množství přenášených dat. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minifikujte kód CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Minifikací souborů JavaScript lze snížit množství přenášených dat a zrychlit analýzu skriptů. [Další informace](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minifikujte JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Odstraňte z tabulek stylů nepoužívaná pravidla, abyste snížili množství přenášených nepotřebných dat. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Odložte načítání nevyužitých stylů CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Odstraněním nepoužívaného JavaScriptu zmenšíte množství přenášených dat."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Odstraňte nepoužívaný JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Dlouhá platnost mezipaměti může zrychlit opakované návštěvy stránky. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Byl nalezen 1 zdroj}few{Byly nalezeny # zdroje}many{Bylo nalezeno # zdroje}other{Bylo nalezeno # zdrojů}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Statické podklady zobrazujte s efektivními zásadami pro mezipaměť"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Používá u statických podkladů efektivní zásady pro mezipaměť"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimalizované obrázky se načítají rychle a spotřebovávají méně mobilních dat. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Používejte efektivní kódování obrázků"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Zobrazujte obrázky s vhodnou velikostí, abyste ušetřili mobilní data a zrychlili načítání. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Používejte správnou velikost obrázků"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Textové zdroje by se měly odesílat komprimované (gzip, deflate nebo brotli), aby se minimalizovalo množství přenášených dat. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Zapněte kompresi textu"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formáty obrázků JPEG 2000, JPEG XR a WebP často poskytují lepší kompresi než formáty PNG a JPEG, což znamená rychlejší stahování a menší spotřebu dat. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Zobrazujte obrázky ve formátech nové generace"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Řetězce kritických požadavků níže ukazují, které zdroje se načítají s vysokou prioritou. Zvažte, zda byste načítání stránky nemohli vylepšit tím, že řetězce zkrátíte, zmenšíte zdroje nebo odložíte stahování zdrojů, které nejsou nezbytné. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Byl nalezen 1 řetězec}few{Byly nalezeny # řetězce}many{Bylo nalezeno # řetězce}other{Bylo nalezeno # řetězců}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimalizujte hloubku kritických požadavků"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Vývojáři prohlížečů doporučují, aby stránky obsahovaly méně než cca. 1 500 uzlů modelu DOM. Ideálně by hloubka stromu měla být menší než 32 prvků a každý nadřazený prvek by měl mít méně než 60 podřízených prvků. Velký model DOM může vést k většímu využití paměti, delším [výpočtům stylů](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) a náročným [přeformátováváním rozvržení](https://developers.google.com/speed/articles/reflow). [Další informace](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 uzel}few{# uzly}many{# uzlu}other{# uzlů}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Nepoužívejte příliš velký model DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximální hloubka modelu DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Celkový počet uzlů v modelu DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Nepoužívá příliš velký model DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Pomocí funkce font-display stylů CSS zajistěte, aby byl text při načítání webfontů viditelný uživatelům. [Další informace](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Zajistěte, aby text při načítání webfontů zůstal viditelný"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Při načítání webfontů zůstává veškerý text viditelný"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorie"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Pokuste se zkrátit dobu analyzování, kompilování a spouštění JavaScriptu. Mohlo by pomoci odesílat menší soubory JavaScript."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimalizujte práci v hlavním podprocesu"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimalizuje práci v hlavním podprocesu"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Výše uvedené skóre je odhad (v milisekundách), jak rychle bude aplikace během nejvytíženějších pěti sekund načítání stránky reagovat na vstup uživatele. Pokud je latence větší než 50 ms, mohou uživatelé chování aplikace vnímat jako přerušované. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Odhadovaná latence vstupu"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"První vykreslení obsahu je okamžik vykreslení prvního textu nebo obrázku. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"První vykreslení obsahu"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"První nečinnost procesoru udává čas, kdy je hlavní podproces stránky dostatečně nečinný na to, aby bylo možné zpracovat vstup. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"První nečinnost procesoru"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"První smysluplné vykreslení udává, kdy začne být viditelný primární obsah stránky. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"První smysluplné vykreslení"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktivitou se označuje čas, kdy je stránka plně interaktivní. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Doba do interaktivity"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Index rychlosti ukazuje, jak rychle se viditelně vyplní obsah stránky. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Index rychlosti"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Přesměrování způsobují další prodlevy před načtením stránky. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Nepoužívejte několik přesměrování stránky"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Doba do načtení prvního bajtu udává, jak dlouho vašemu serveru trvá, než odešle odpověď. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Hlavní dokument trval {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Zkraťte doby odezvy serverů (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Doby odezvy serveru jsou krátké (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Trvání"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Název"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Čas zahájení"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Typ"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Zkuste v aplikaci pomocí rozhraní User Timing API implementovat měření reálného výkonu při událostech zásadních pro uživatelský dojem. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 časování uživatelů}few{# časování uživatelů}many{# časování uživatelů}other{# časování uživatelů}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Hodnoty časování uživatelů"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Zvažte přidání signálů pro předběžné připojení nebo načtení, aby bylo možné včas se připojit k důležitým zdrojům třetích stran. [Další informace](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"K potřebným zdrojům se připojujte předem"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Zvažte použití značky <link rel=preload> k prioritnímu načtení zdrojů, o které se nyní žádá později během načítání stránky. [Další informace](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Klíčové požadavky načítejte předběžně"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Další informace o výkonu vaší aplikace."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Nejkritičtějším aspektem výkonu je rychlost vykreslení pixelů na obrazovce. Klíčové metriky: První vykreslení obsahu, První smysluplné vykreslení"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Vylepšení prvního vykreslení"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Tyto optimalizace mohou zrychlit načítání vaší stránky."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Příležitosti"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metriky"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Vylepšete celkové chování při načítání, aby byla stránka co nejdříve responzivní a připravena k používání. Klíčové metriky: Doba dosažení interaktivity, Index rychlosti"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Celková vylepšení"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Výkon"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Hodnota TTL (Time to Live) mezipaměti"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Velikost (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Strávený čas"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Možná úspora (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Možná úspora (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Lze uspořit {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Lze uspořit {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Zobrazit audity"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Počáteční navigace"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximální latence kritické trasy:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Chyba!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Chyba přehledu: žádné informace o auditu"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratorní data"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analýza aktuální stránky nástrojem [Lighthouse](https://developers.google.com/web/tools/lighthouse/) při emulovaném připojení 3G. Hodnoty jsou odhady a mohou být proměnlivé."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Další položky k ruční kontrole"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Není relevantní"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Příležitost"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Odhadovaná úspora"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Úspěšné audity"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Škála skóre:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Při tomto spuštění nástroje Lighthouse se vyskytly problémy:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Hodnoty jsou odhady a mohou se lišit."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Upozornění: "}};


},{}],43:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome-udvidelser påvirkede denne sides indlæsning negativt. Prøv at revidere siden i inkognitotilstand eller fra en Chrome-profil uden udvidelser."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Scriptevaluering"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Scriptparsing"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"I alt"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Overvej at reducere den tid, der bruges på at parse, kompilere og udføre JavaScript. Levering af mindre JavaScript-datapakker kan hjælpe med dette. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reducer udførelsestiden for JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Udførelsestid for JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Store giffer er ikke tilstrækkelige til at levere animeret indhold. Overvej at bruge MPEG4-/WebM-videoer til animationer og PNG/WebP til statiske billeder i stedet for giffer for at spare netværksbytes. [Få flere oplysninger](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Brug videoformater til animeret indhold"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Overvej at udskyde indlæsningen af skjulte billeder og billeder, der ikke er på skærmen, til efter alle kritiske ressourcer er blevet indlæst for at reducere den tid, der går, inden siden er interaktiv. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Udskyd billeder, der ikke er på skærmen"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ressourcer blokerer første udfyldning af din side. Overvej at levere kritisk JavaScript/CSS indlejret og udskyde alle ikke-kritiske JavaScript-elementer/typografier. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Fjern ressourcer til blokering af gengivelse"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Store datapakker på netværk koster brugerne mange penge og er forbundet med lang indlæsningstid. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Den samlede størrelse var {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Undgå kæmpe datapakker på netværk"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Undgår kæmpe datapakker på netværk"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Formindskelse af CSS-filer kan reducere størrelsen på datapakker på netværk. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Formindsk CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Formindskelse af JavaScript-filer kan reducere størrelsen på datapakker og varigheden af scriptparsing. [Få flere oplysninger](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Formindsk JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Fjern regler, som ikke bruges, fra typografiark for at skære ned på antallet af unødvendige bytes, der anvendes ved netværksaktivitet. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Udskyd CSS, som ikke bruges"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Fjern JavaScript, der ikke bruges, for at skære ned på antallet af bytes, der anvendes ved netværksaktivitet."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Fjern JavaScript, som ikke bruges"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"En lang cachelevetid kan gøre indlæsningen hurtigere for tilbagevendende besøgende på din side. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Der blev fundet 1 ressource}one{Der blev fundet # ressource}other{Der blev fundet # ressourcer}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Vis statiske aktiver med en effektiv cachepolitik"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Anvender effektiv cachepolitik på statiske aktiver"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimerede billeder indlæses hurtigere og bruger mindre mobildata. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Kryptér billeder effektivt"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Vis billeder i korrekte størrelser for at spare mobildata og forbedre indlæsningstiden. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Brug korrekte billedstørrelser"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Tekstbaserede ressourcer bør vises i komprimeret format (gzip, Deflate eller Brotli), så netværkets samlede antal bytes formindskes. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Aktivér tekstkomprimering"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Billedformater såsom JPEG 2000, JPEG XR og WebP giver ofte en bedre komprimering end PNG og JPEG, hvilket betyder hurtigere downloads og mindre dataforbrug. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Vis billeder i formater af næste generation"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Kæderne med kritiske anmodninger nedenfor viser dig, hvilke ressourcer der indlæses med høj prioritet. Du kan også vælge at reducere kædernes længde, så ressourcernes downloadstørrelse bliver mindre, eller at udskyde download af unødvendige ressourcer, så sideindlæsningen forbedres. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Der blev fundet 1 kæde}one{Der blev fundet # kæde}other{Der blev fundet # kæder}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimer dybden for kritiske anmodninger"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Browserudviklere anbefaler, at sider højst indeholder 1.500 DOM-noder. Det bedste er en træstrukturdybde med under 32 elementer og mindre end 60 underordnede/overordnede elementer. En stor DOM kan øge hukommelsesforbruget, medføre længere [beregninger af typografi](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) og producere dyre [omformateringer af layout](https://developers.google.com/speed/articles/reflow). [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 node}one{# node}other{# noder}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Undgå en overdreven DOM-størrelse"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimal DOM-dybde"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Samlet antal DOM-noder"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Undgår en overdreven DOM-størrelse"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Udnyt CSS-funktionen til skrifttypevisning for at sikre dig, at teksten kan ses af brugerne, mens webfonts indlæses. [Få flere oplysninger](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Sørg for, at tekst forbliver synlig under indlæsning af webfont"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Al tekst forbliver synlig under indlæsning af webfont"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategori"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Overvej at reducere den tid, der bruges på at parse, kompilere og udføre JavaScript. Levering af mindre JavaScript-datapakker kan hjælpe med dette."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Formindsk primært trådarbejde"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Formindsker primært trådarbejde"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Resultatet ovenfor er et estimat af, hvor længe din app er om at svare på brugerinput (i millisekunder) i de første 5 travleste sekunder med vindue under en sideindlæsning. Hvis din forsinkelse er større end 50 ms, kan brugerne opfatte din app som langsom. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Estimeret inputforsinkelse"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Første udfyldning af indhold markerer tidspunktet, hvor den første tekst eller det første billede udfyldes. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Første udfyldning af indhold"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Første stillestående CPU markerer det tidspunkt, hvor sidens primære tråd er stabil nok til at behandle input. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Første stillestående CPU"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Første betydningsfulde udfyldning måler, hvornår det primære indhold på en side kan ses. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Første betydningsfulde udfyldning"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktiv tilstand markerer det tidspunkt, hvor siden er helt interaktiv. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tid inden interaktiv tilstand"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Hastighedsindekset viser, hvor hurtigt indholdet på en side udfyldes, så det kan ses. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Hastighedsindeks"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Omdirigeringer medfører yderligere forsinkelser, inden siden kan indlæses. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Undgå mange sideomdirigeringer"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"TTFB (Time To First Byte) identificerer tidspunktet for, hvornår din server sender et svar. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Roddokumentet tog {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reducer serversvartider (TTFB, Time To First Byte)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Serversvartiderne er korte (TTFB, Time To First Byte)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Varighed"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Navn"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Starttidspunkt"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Type"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Du kan også vælge at bruge User Timing API som værktøj til din app for at måle appens effektivitet i den virkelige verden i forbindelse med vigtige brugeroplevelser. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 brugstid}one{# brugstid}other{# brugstider}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Brugstider markerer og måler"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Overvej at tilføje ressourcehints til forbindelse på forhånd eller DNS-forudhentning for at oprette tidlige forbindelser til vigtige tredjepartswebsites. [Få flere oplysninger](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Opret forbindelse på forhånd til påkrævede websites"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Overvej at bruge <link rel=preload> til at prioritere hentning af ressourcer, som der i øjeblikket anmodes om senere i sideindlæsningen. [Få flere oplysninger](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Forudindlæs vigtige anmodninger"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Få flere oplysninger om din apps effektivitet."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostik"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Det vigtigste aspekt af effektivitet er, hvor hurtigt pixels gengives på skærmen. Vigtige metrics: Første udfyldning af indhold, Første betydningsfulde udfyldning"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Forbedringer af første udfyldning"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Disse optimeringer kan gøre din sideindlæsning hurtigere."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Muligheder"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrics"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Gør den overordnede indlæsning bedre, så siden hurtigst muligt bliver responsiv og klar til brug. Vigtige metrics: Tid inden interaktiv tilstand, Hastighedsindeks"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Overordnede forbedringer"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Effektivitet"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache-TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Størrelse (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Tidsforbrug"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"Webadresse"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potentiel databesparelse (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potentiel tidsbesparelse (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potentiel databesparelse på {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potentiel tidsbesparelse på {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} sek."},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Se revisioner"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Indledende navigation"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksimal forsinkelse for kritisk sti:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Der opstod en fejl"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Rapportfejl: Der er ingen revisionsoplysninger"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratoriedata"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/)-analyse af den aktuelle side på et emuleret 3G-netværk. Værdierne er estimerede og kan variere."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Yderligere elementer, der skal tjekkes manuelt"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Ikke relevant"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Mulighed"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Estimeret tidsbesparelse"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Beståede revisioner"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Resultatskala:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Der blev registreret problemer, som påvirkede denne kørsel af Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Værdierne er estimater og kan variere."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Advarsler! "}};


},{}],44:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome-Erweiterungen haben die Ladegeschwindigkeit dieser Seite beeinträchtigt. Versuchen Sie, die Seite im Inkognito-Modus oder mit einem Chrome-Profil ohne Erweiterungen zu überprüfen."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Skriptauswertung"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Parsen von Skripten"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Gesamt"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Versuchen Sie, die Zeit für das Parsen, Kompilieren und Ausführen von JS zu reduzieren. Die Bereitstellung kleinerer JS-Nutzlasten kann dabei helfen. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Ausführungszeit von JavaScript reduzieren"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript-Ausführungszeit"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Große GIF-Dateien sind nur bedingt für die Bereitstellung animierter Inhalte geeignet. Sie können statt GIF MPEG4- oder WebM-Videos für Animationen und PNG oder WebP für statische Bilder verwenden und so die Netzwerk-Datenmenge reduzieren. [Weitere Informationen](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Videoformate für animierte Inhalte verwenden"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Versuchen Sie, nicht sichtbare und versteckte Bilder erst laden zu lassen, nachdem wichtige Ressourcen geladen wurden, um die Zeit bis zur Interaktivität zu reduzieren. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Nicht sichtbare Bilder aufschieben"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ressourcen blockieren das erste Zeichnen Ihrer Seite. Versuchen Sie, wichtiges JS und wichtige CSS inline bereitzustellen und alle nicht kritischen JS und Stile aufzuschieben. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Ressourcen beseitigen, die das Rendering blockieren"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Große Netzwerknutzlasten kosten Nutzer bares Geld und hängen eng mit langen Ladezeiten zusammen. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Die Gesamtgröße war {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Sehr große Netzwerknutzlasten vermeiden"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Vermeidet sehr große Netzwerknutzlasten"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Durch die Komprimierung von CSS-Dateien kann die Größe von Netzwerknutzlasten reduziert werden. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSS komprimieren"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Durch die Komprimierung von JavaScript-Dateien können Nutzlastgrößen und die Zeit zum Parsen von Skripts reduziert werden. [Weitere Informationen](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScript komprimieren"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Entfernen Sie nicht verwendete Regeln aus Stylesheets, um unnötige Daten bei Netzwerkaktivitäten zu reduzieren. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Nicht verwendete CSS aufschieben"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Entfernen Sie nicht verwendetes JavaScript, um die Datenmenge bei Netzwerkaktivitäten zu reduzieren."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Nicht genutztes JavaScript entfernen"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Eine lange Lebensdauer des Cache kann wiederholte Besuche Ihrer Seite beschleunigen. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 Ressource gefunden}other{# Ressourcen gefunden}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Statische Inhalte mit einer effizienten Cache-Richtlinie bereitstellen"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Verwendet eine effiziente Cache-Richtlinie für statische Inhalte"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimierte Bilder werden schneller geladen und verbrauchen weniger mobile Daten. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Bilder effizient codieren"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Stellen Sie Bilder bereit, die eine angemessene Größe haben, um mobile Daten zu sparen und die Ladezeit zu verbessern. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Bilder richtig dimensionieren"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Textbasierte Ressourcen sollten mit Komprimierung (gzip, Deflate oder Brotli) bereitgestellt werden, um die Datenmenge im Netzwerk insgesamt zu minimieren. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Textkomprimierung aktivieren"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Bildformate wie JPEG 2000, JPEG XR und WebP bieten oft eine bessere Komprimierung als PNG oder JPEG, was schnellere Downloads und einen geringeren Datenverbrauch ermöglicht. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Bilder in modernen Formaten bereitstellen"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"In den unten aufgeführten Ketten kritischer Anfragen können Sie sehen, welche Ressourcen mit einer hohen Priorität geladen werden. Versuchen Sie, die Ketten zu verkürzen, die Downloadgröße von Ressourcen zu reduzieren oder das Herunterladen unnötiger Ressourcen aufzuschieben, um den Seitenaufbau zu beschleunigen. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 Kette gefunden}other{# Ketten gefunden}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Tiefe kritischer Anforderungen minimieren"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Laut der Empfehlung von Browserentwicklern sollten Seiten nicht mehr als ungefähr 1.500 DOM-Knoten enthalten. Die ideale Strukturtiefe liegt bei unter 32 Elementen und weniger als 60 unter- und übergeordneten Elementen. Ein großes DOM kann zu hohem Speicherverbrauch, langwierigen [Stilberechnungen](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) und kostspieligen [dynamischen Umbrüchen im Layout](https://developers.google.com/speed/articles/reflow) führen. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 Knoten}other{# Knoten}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Übermäßige DOM-Größe vermeiden"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximale DOM-Tiefe"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Gesamtzahl der DOM-Knoten"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Vermeidet eine übermäßige DOM-Größe"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Sie können Gebrauch von der CSS-Funktion \"font-display\" machen, um sicherzugehen, dass der Text für Nutzer sichtbar ist, während Webfonts geladen werden. [Weitere Informationen](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Darauf achten, dass der Text während der Webfont-Ladevorgänge sichtbar bleibt"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Der gesamte Text bleibt während der Webfont-Ladevorgänge sichtbar"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorie"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Versuchen Sie, die Zeit für das Parsen, Kompilieren und Ausführen von JS zu reduzieren. Die Bereitstellung kleinerer JS-Nutzlasten kann dabei helfen."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Aufwand für Hauptthread minimieren"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimiert den Aufwand für den Hauptthread"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Beim Ergebnis oben handelt es sich um eine Schätzung dessen, wie viele Millisekunden Ihre App benötigt, um während des 5-s-Fensters mit der stärksten Auslastung beim Seitenaufbau auf Nutzereingaben zu reagieren. Wenn die Latenz bei Ihnen über 50 ms liegt, empfinden Nutzer Ihre App möglicherweise als langsam. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Geschätzte Eingabelatenz"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"\"Erste Inhalte gezeichnet\" gibt an, wann der erste Text oder das erste Bild gezeichnet wird. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Erste Inhalte gezeichnet"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"\"Erster CPU-Leerlauf\" gibt den Zeitpunkt an, an dem die Aktivität des Hauptthreads der Seite das erste Mal gering genug ist, um Eingaben zu verarbeiten. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Erster CPU-Leerlauf"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"\"Inhalte weitgehend gezeichnet\" gibt an, wann die Hauptinhalte einer Seite sichtbar sind. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Inhalte weitgehend gezeichnet"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"\"Zeit bis Interaktivität\" gibt den Zeitpunkt an, an dem die Seite voll interaktionsfähig ist. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Zeit bis Interaktivität"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Der Geschwindigkeitsindex zeigt an, wie schnell die Inhalte einer Seite sichtbar dargestellt werden. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Geschwindigkeitsindex"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Weiterleitungen führen zu zusätzlichen Verzögerungen, bevor die Seite geladen werden kann. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Mehrere Weiterleitungen auf die Seite vermeiden"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"TTFB (Time To First Byte) erkennt den Zeitpunkt, an dem Ihr Server eine Antwort sendet. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Stammdokument brauchte {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Serverantwortzeiten reduzieren (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Serverantwortzeiten sind niedrig (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Dauer"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Name"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Beginn"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Typ"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Sie können die User Timing API in Ihre App integrieren. Damit lässt sich die Leistung Ihrer App in der Praxis messen, beispielsweise während Seitenladevorgängen oder wichtigen Nutzerinteraktionen. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 Nutzertiming}other{# Nutzertimings}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Markierungen und Messungen für das Nutzertiming"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Versuchen Sie, Hinweise auf Ressourcen für eine Vorverbindung oder einen DNS-Vorabruf hinzuzufügen, damit möglichst frühzeitig eine Verbindung zu wichtigen Drittanbieterursprüngen hergestellt wird. [Weitere Informationen](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Vorverbindung zu erforderlichen Ursprüngen aufbauen"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Mit <link rel=preload> können Sie das Abrufen von Ressourcen priorisieren, die aktuell später beim Seitenaufbau angefordert werden. [Weitere Informationen](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Wichtige Anforderungen vorab laden"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Weitere Informationen zur Leistung Ihrer App."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnose"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Der wichtigste Faktor bei der Leistung ist, wie schnell Pixel auf dem Bildschirm gerendert werden. Wichtige Messwerte: \"Erste Inhalte gezeichnet\", \"Inhalte weitgehend gezeichnet\""},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Verbesserungen beim Zeichnen der ersten Inhalte"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Diese Optimierungen können den Seitenaufbau beschleunigen."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Empfehlungen"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Messwerte"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Hier können Sie die Ladezeiten verkürzen, damit die Seite so schnell wie möglich reagiert und Einsatzbereit ist. Wichtige Messwerte: \"Zeit bis Interaktivität\", \"Geschwindigkeitsindex\""},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Allgemeine Verbesserungen"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Leistung"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache-TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Größe (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Zeitaufwand"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Mögliche Einsparung (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Mögliche Einsparung (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Mögliche Einsparung von {wastedBytes, number, bytes} ms"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Mögliche Einsparung von {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Überprüfungen ansehen"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Anfangsnavigation"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximale Latenz für kritischen Pfad:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Fehler."},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Fehler gemeldet: keine Informationen zur Überprüfung"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Labdaten"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/)-Analyse der aktuellen Seite in einem emulierten 3G-Netz. Die Werte sind geschätzt und können variieren."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Zusätzliche Elemente zur manuellen Überprüfung"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nicht zutreffend"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Empfehlung"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Geschätzte Einsparung"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Bestandene Prüfungen"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Ergebnisskala:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Einige Probleme haben diese Ausführung von Lighthouse beeinträchtigt:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Die Werte sind geschätzt und können variieren."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Warnungen: "}};


},{}],45:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Οι επεκτάσεις του Chrome επηρέασαν αρνητικά την απόδοση φόρτωσης αυτής της σελίδας. Δοκιμάστε να ελέγξετε τη σελίδα σε κατάσταση ανώνυμης περιήγησης ή από ένα προφίλ του Chrome χωρίς επεκτάσεις."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Αξιολόγηση σεναρίου"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Ανάλυση σεναρίου"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Σύνολο"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Εξετάστε το ενδεχόμενο μείωσης του χρόνου ανάλυσης, σύνθεσης και εκτέλεσης JS. Μπορεί να διαπιστώσετε ότι η προβολή μικρότερων φορτίων δεδομένων JS συμβάλλει προς αυτήν την κατεύθυνση. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Μείωση χρόνου εκτέλεσης JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Χρόνος εκτέλεσης JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Οι μεγάλες εικόνες GIF δεν είναι αποδοτικές για την προβολή περιεχομένου κινούμενων εικόνων. Εξετάστε το ενδεχόμενο χρήσης βίντεο MPEG4/WebM για κινούμενες εικόνες και PNG/WebP για στατικές εικόνες αντί για τη χρήση εικόνων GIF, με στόχο την εξοικονόμηση byte δικτύου. [Μάθετε περισσότερα](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Χρήση μορφών βίντεο για περιεχόμενο κινούμενων εικόνων"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Εξετάστε τη φόρτωση εικόνων εκτός οθόνης και κρυφών εικόνων με καθυστέρηση μετά την ολοκλήρωση της φόρτωσης όλων των σημαντικών πόρων, προκειμένου να ελαττωθεί ο χρόνος μετάβασης σε κατάσταση αλληλεπίδρασης. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Καθυστέρηση φόρτωσης εικόνων εκτός οθόνης"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Υπάρχουν πόροι οι οποίοι αποκλείουν την πρώτη μορφή της σελίδας σας. Εξετάστε το ενδεχόμενο προβολής σημαντικών ενσωματωμένων JS/CSS και καθυστέρησης όλων των μη σημαντικών JS/στυλ. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Εξάλειψη πόρων που αποκλείουν την απόδοση"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Τα μεγάλα φορτία δεδομένων δικτύου συνεπάγονται υψηλό χρηματικό κόστος για τους χρήστες και συσχετίζονται σε μεγάλο βαθμό με εκτενείς χρόνους φόρτωσης. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Το συνολικό μέγεθος ήταν {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Αποφύγετε τα πολύ μεγάλα φορτία δεδομένων δικτύου"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Αποφεύγει τα πολύ μεγάλα φορτία δεδομένων δικτύου"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Με την ελαχιστοποίηση των αρχείων CSS, μπορεί να ελαττωθούν τα μεγέθη φορτίου δεδομένων δικτύου. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Ελαχιστοποίηση CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Με την ελαχιστοποίηση των αρχείων JavaScript, μπορεί να μειωθούν τα μεγέθη φορτίου δεδομένων και να ελαττωθεί ο χρόνος ανάλυσης σεναρίου. [Μάθετε περισσότερα](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Ελαχιστοποίηση JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Καταργήστε κανόνες που δεν χρησιμοποιούνται από τα φύλλα στυλ, για να μειώσετε τον αριθμό των μη απαραίτητων byte που καταναλώνονται από τη δραστηριότητα δικτύου. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Καθυστέρηση μη χρησιμοποιούμενων CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Καταργήστε τυχόν JavaScript που δεν χρησιμοποιείται, για να ελαττώσετε τα byte που καταναλώνονται από τη δραστηριότητα δικτύου."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Κατάργηση JavaScript που δεν χρησιμοποιείται"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Η μεγάλη διάρκεια ζωής της κρυφής μνήμης μπορεί να επιταχύνει τις επαναλαμβανόμενες επισκέψεις στη σελίδα σας. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Βρέθηκε 1 πόρος}other{Βρέθηκαν # πόροι}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Προβολή στατικών στοιχείων με επαρκή πολιτική κρυφής μνήμης"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Χρησιμοποιεί αποδοτική πολιτική κρυφής μνήμης σε στατικά στοιχεία"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Οι βελτιστοποιημένες εικόνες φορτώνονται πιο γρήγορα και καταναλώνουν λιγότερα δεδομένα κινητής τηλεφωνίας. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Αποδοτική κωδικοποίηση εικόνων"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Προβάλετε εικόνες κατάλληλου μεγέθους, για την εξοικονόμηση δεδομένων κινητής τηλεφωνίας και τη βελτίωση του χρόνου φόρτωσης. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Κατάλληλη προσαρμογή μεγέθους εικόνων"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Οι πόροι που βασίζονται σε κείμενο θα πρέπει να προβάλλονται με συμπίεση (gzip, deflate ή brotli), προκειμένου να ελαχιστοποιούνται τα byte δικτύου. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Ενεργοποίηση συμπίεσης κειμένου"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Οι μορφές εικόνας όπως JPEG 2000, JPEG XR και WebP συχνά παρέχουν καλύτερη συμπίεση από ό,τι οι μορφές PNG και JPEG. Αυτό σημαίνει γρηγορότερες λήψεις και μικρότερη κατανάλωση δεδομένων. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Προβολή εικόνων σε μορφές επόμενης γενιάς"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Οι Αλυσίδες κρίσιμων αιτημάτων που ακολουθούν δείχνουν τους πόρους που φορτώνονται με υψηλή προτεραιότητα. Εξετάστε το ενδεχόμενο μείωσης του μεγέθους των αλυσίδων, μείωσης του μεγέθους λήψης πόρων ή καθυστέρησης της λήψης μη απαραίτητων πόρων, για τη βελτίωση της φόρτωσης σελίδας. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Βρέθηκε 1 αλυσίδα}other{Βρέθηκαν # αλυσίδες}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Ελαχιστοποίηση βάθους κρίσιμων αιτημάτων"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Οι μηχανικοί προγραμμάτων περιήγησης συνιστούν να περιέχουν οι σελίδες λιγότερους από ~1.500 κόμβους DOM. Το ιδανικό είναι ένα βάθος δέντρου με < 32 στοιχεία και λιγότερα από 60 θυγατρικά/γονικά στοιχεία. Ένα μεγάλο DOM μπορεί να αυξήσει τη χρήση της μνήμης, να προκαλέσει [υπολογισμούς στυλ] μεγαλύτερης διάρκειας (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) και να δημιουργήσει [επαναληπτικές ροές διάταξης] υψηλού κόστους (https://developers.google.com/speed/articles/reflow). [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 κόμβος}other{# κόμβοι}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Αποφύγετε τα υπερβολικά μεγάλα μεγέθη DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Μέγιστο βάθος DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Σύνολο κόμβων DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Αποφεύγει τα υπερβολικά μεγάλα μεγέθη DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Χρησιμοποιήστε τη λειτουργία CSS προβολής γραμματοσειράς, για να διασφαλίσετε ότι το κείμενο είναι ορατό στους χρήστες κατά τη φόρτωση των γραμματοσειρών ιστοτόπου. [Μάθετε περισσότερα](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Βεβαιωθείτε ότι το κείμενο παραμένει ορατό κατά τη διάρκεια της φόρτωσης γραμματοσειράς ιστοτόπου"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Όλο το κείμενο παραμένει ορατό κατά τη διάρκεια φορτώσεων γραμματοσειράς ιστοτόπου"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Κατηγορία"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Εξετάστε το ενδεχόμενο ελάττωσης του χρόνου ανάλυσης, σύνθεσης και εκτέλεσης JS. Μπορεί να διαπιστώσετε ότι η προβολή μικρότερων φορτίων δεδομένων JS συμβάλλει προς αυτήν την κατεύθυνση."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Ελαχιστοποίηση εργασίας κύριου νήματος"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Ελαχιστοποιεί την εργασία κύριου νήματος"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Η παραπάνω βαθμολογία αποτελεί εκτίμηση του χρόνου που απαιτείται προκειμένου η εφαρμογή σας να ανταποκριθεί στα στοιχεία εισόδου χρήστη, σε χιλιοστά του δευτερολέπτου, κατά τη διάρκεια εκτέλεσης του παραθύρου φόρτωσης σελίδας 5 δευτ. με τη μεγαλύτερη κινητικότητα. Εάν ο λανθάνων χρόνος είναι μεγαλύτερος από 50 ms, οι χρήστες μπορεί να θεωρήσουν ότι η εφαρμογή σας είναι αργή. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Εκτιμώμενος λανθάνων χρόνος στοιχείων εισόδου"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Η Πρώτη σχεδίαση περιεχομένου (FCP) υποδεικνύει πότε μορφοποιείται το πρώτο κείμενο ή η πρώτη εικόνα. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Πρώτη μορφή με περιεχόμενο"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Η Πρώτη αδράνεια CPU υποδεικνύει την πρώτη φορά που το κύριο νήμα μιας σελίδας παρουσιάζει αρκετά χαμηλή κινητικότητα έτσι ώστε να διαχειριστεί στοιχεία εισόδου. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Πρώτη αδράνεια CPU"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Η Πρώτη χρήσιμη μορφή υπολογίζει πότε είναι ορατό το κύριο περιεχόμενο μιας σελίδας. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Πρώτη χρήσιμη μορφή"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Η Αλληλεπίδραση υποδεικνύει πότε η σελίδα είναι πλήρως διαδραστική. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Χρόνος για Αλληλεπίδραση"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Το Ευρετήριο ταχύτητας δείχνει πόσο γρήγορα γίνονται ορατά τα περιεχόμενα μιας σελίδας. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Ευρετήριο ταχύτητας"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Οι ανακατευθύνσεις δημιουργούν επιπλέον καθυστερήσεις προτού να είναι δυνατή η φόρτωση της σελίδας. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Αποφυγή ανακατευθύνσεων πολλών σελίδων"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Ο Χρόνος μέχρι το πρώτο byte προσδιορίζει πότε ο διακομιστής σας στέλνει μια απόκριση. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Το αρχείο ρίζας χρειάστηκε {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Μείωση χρόνων απόκρισης διακομιστή (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Οι χρόνοι απόκρισης διακομιστή είναι χαμηλοί (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Διάρκεια"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Όνομα"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Ώρα έναρξης"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Τύπος"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Εξετάστε το ενδεχόμενο ενίσχυσης της εφαρμογής σας με το User Timing API, για να καταμετράτε την πραγματική απόδοση της εφαρμογής σας κατά τη διάρκεια σημαντικών εμπειριών χρήστη. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 χρόνος χρήστη}other{# χρόνοι χρήστη}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Ενδείξεις και μετρήσεις Χρόνων χρήστη"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Εξετάστε το ενδεχόμενο προσθήκης υποδείξεων πόρου προσύνδεσης ή προανάλυσης dns, για τη δημιουργία πρώιμων συνδέσεων σε σημαντικές προελεύσεις τρίτου μέρους. [Μάθετε περισσότερα](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Προσύνδεση σε απαιτούμενες προελεύσεις"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Εξετάστε το ενδεχόμενο χρήσης <link rel=φορτίου δεδομένων>, για να δώσετε προτεραιότητα στην ανάλυση πόρων των οποίων το αίτημα εμφανίζεται αργότερα στη σελίδα. [Μάθετε περισσότερα](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Σημαντικά αιτήματα προφόρτωσης"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Περισσότερες πληροφορίες σχετικά με την απόδοση της εφαρμογής σας"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Διαγνωστικά στοιχεία"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Η πιο σημαντική πτυχή της απόδοσης είναι η ταχύτητα με την οποία αποδίδονται τα pixel στην οθόνη. Σημαντικές μετρήσεις: Πρώτη μορφή με περιεχόμενο, Πρώτη χρήσιμη μορφή"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Βελτιώσεις πρώτης μορφής"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Αυτοί οι οργανισμοί μπορούν να επιταχύνουν τη φόρτωση της σελίδας σας."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Ευκαιρίες"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Μετρήσεις"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Βελτιώστε τη συνολική εμπειρία φόρτωσης, για να μπορεί η σελίδα να ανταποκρίνεται και να είναι έτοιμη για χρήση το συντομότερο δυνατό. Σημαντικές μετρήσεις: Χρόνος για Αλληλεπίδραση, Ευρετήριο ταχύτητας"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Συνολικές βελτιώσεις"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Απόδοση"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL κρυφής μνήμης"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Μέγεθος (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Χρόνος χρήσης"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Δυνητικές εξοικονομήσεις (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Δυνητικές εξοικονομήσεις (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Δυνητικές εξοικονομήσεις {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Δυνητικές εξοικονομήσεις {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} δ."},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Εμφάνιση ελέγχων"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Αρχική πλοήγηση"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Μέγιστος λανθάνων χρόνος κρίσιμης διαδρομής:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Σφάλμα!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Σφάλμα αναφοράς: Δεν υπάρχουν πληροφορίες ελέγχου"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Εργαστηριακά δεδομένα"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Φάρος](https://developers.google.com/web/tools/lighthouse/) ανάλυση της τρέχουσας σελίδας σε προσομοιωμένο 3G. Οι τιμές αποτελούν εκτιμήσεις και μπορεί να ποικίλουν."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Επιπλέον στοιχεία για μη αυτόματο έλεγχο"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Δεν ισχύει"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Ευκαιρία"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Εκτιμώμενες εξοικονομήσεις"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Έλεγχοι που ολοκληρώθηκαν επιτυχώς"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Κλίμακα βαθμολογίας:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Παρουσιάστηκαν ορισμένα ζητήματα τα οποία επηρεάζουν αυτήν την εκτέλεση του Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Οι τιμές εκτιμώνται και μπορεί να ποικίλουν."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Προειδοποιήσεις: "}};


},{}],46:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome extensions negatively affected this page's load performance. Try auditing the page in incognito mode or from a Chrome profile without extensions."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Script Evaluation"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Script Parse"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reduce JavaScript execution time"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript execution time"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Large GIFs are inefficient for delivering animated content. Consider using MPEG4/WebM videos for animations and PNG/WebP for static images instead of GIF to save network bytes. [Learn more](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Use video formats for animated content"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Consider lazy-loading off-screen and hidden images after all critical resources have finished loading to lower time to interactive. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Defer off-screen images"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Eliminate render-blocking resources"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Large network payloads cost users real money and are highly correlated with long load times. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Total size was {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Avoid enormous network payloads"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Avoids enormous network payloads"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Minifying CSS files can reduce network payload sizes. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minify CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Minifying JavaScript files can reduce payload sizes and script parse time. [Learn more](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minify JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Remove unused rules from stylesheets to reduce unnecessary bytes consumed by network activity. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Defer unused CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Remove unused JavaScript to reduce bytes consumed by network activity."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Remove unused JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"A long cache lifetime can speed up repeat visits to your page. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 resource found}other{# resources found}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Serve static assets with an efficient cache policy"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Uses efficient cache policy on static assets"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimised images load faster and consume less mobile data. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Efficiently encode images"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Serve images that are appropriately-sized to save mobile data and improve load time. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Properly size images"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Text-based resources should be served with compression (gzip, deflate or brotli) to minimise total network bytes. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Enable text compression"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Image formats like JPEG 2000, JPEG XR and WebP often provide better compression than PNG or JPEG, which means faster downloads and less data consumption. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Serve images in next-gen formats"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"The Critical Request Chains below show you what resources are loaded with a high priority. Consider reducing the length of chains, reducing the download size of resources or deferring the download of unnecessary resources to improve page load. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 chain found}other{# chains found}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimise Critical Requests Depth"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Browser engineers recommend pages contain fewer than ~1,500 DOM nodes. The sweet spot is a tree depth < 32 elements and fewer than 60 children/parent element. A large DOM can increase memory usage, cause longer [style calculations](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), and produce costly [layout reflows](https://developers.google.com/speed/articles/reflow). [Learn more](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 node}other{# nodes}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Avoid an excessive DOM size"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximum DOM Depth"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total DOM Nodes"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Avoids an excessive DOM size"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Leverage the font-display CSS feature to ensure text is user-visible while webfonts are loading. [Learn more](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Ensure text remains visible during webfont load"},

"lighthouse-core/audits/font-display.js | title":{
"message":"All text remains visible during webfont loads"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Category"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimise main-thread work"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimises main-thread work"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"The score above is an estimate of how long your app takes to respond to user input, in milliseconds, during the busiest 5-second window of page load. If your latency is higher than 50 ms, users may perceive your app as laggy. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Estimated Input Latency"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"First Contentful Paint marks the time at which the first text or image is painted. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"First Contentful Paint"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"First CPU Idle marks the first time at which the page's main thread is quiet enough to handle input. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"First CPU Idle"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"First Meaningful Paint measures when the primary content of a page is visible. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"First Meaningful Paint"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interactive marks the time at which the page is fully interactive. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Time to Interactive"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Speed Index shows how quickly the contents of a page are visibly populated. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Speed Index"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Redirects introduce additional delays before the page can be loaded. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Avoid multiple page redirects"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Time To First Byte identifies the time at which your server sends a response. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Root document took {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reduce server response times (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Server response times are low (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Duration"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Name"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Start Time"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Type"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Consider instrumenting your app with the User Timing API to measure your app's real-world performance during key user experiences. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 user timing}other{# user timings}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing marks and measures"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Consider adding pre-connect or DNS-prefetch resource hints to establish early connections to important third-party origins. [Learn more](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Pre-connect to required origins"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Consider using <link rel=preload> to prioritise fetching resources that are currently requested later in page load. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Pre-load key requests"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"More information about the performance of your application."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostics"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"The most critical aspect of performance is how quickly pixels are rendered onscreen. Key metrics: First Contentful Paint, First Meaningful Paint"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"First Paint Improvements"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"These optimisations can speed up your page load."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Opportunities"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrics"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Enhance the overall loading experience, so the page is responsive and ready to use as soon as possible. Key metrics: Time to Interactive, Speed Index"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Overall Improvements"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performance"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Size (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Time Spent"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potential Savings (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potential Savings (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potential savings of {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potential savings of {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Show audits"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Initial Navigation"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximum critical path latency:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Error!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Report error: no audit information"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Lab Data"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analysis of the current page on emulated 3G. Values are estimated and may vary."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Additional items to manually check"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Not applicable"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Opportunity"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Estimated Savings"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Passed audits"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Score scale:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"There were issues affecting this run of Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Values are estimated and may vary."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Warnings: "}};


},{}],47:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"[Çĥŕömé éxţéñšîöñš ñéĝåţîvéļý åƒƒéçţéð ţĥîš þåĝé'š ļöåð þéŕƒöŕmåñçé. Ţŕý åûðîţîñĝ ţĥé þåĝé îñ îñçöĝñîţö möðé öŕ ƒŕöm å Çĥŕömé þŕöƒîļé ŵîţĥöûţ éxţéñšîöñš. one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"[Šçŕîþţ Évåļûåţîöñ one two three]"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"[Šçŕîþţ Þåŕšé one two]"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"[Ţöţåļ one]"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"[Çöñšîðéŕ ŕéðûçîñĝ ţĥé ţîmé šþéñţ þåŕšîñĝ, çömþîļîñĝ, åñð éxéçûţîñĝ ĴŠ. Ýöû måý ƒîñð ðéļîvéŕîñĝ šmåļļéŕ ĴŠ þåýļöåðš ĥéļþš ŵîţĥ ţĥîš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/бööţûþ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight]"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"[Ŕéðûçé ĴåvåŠçŕîþţ éxéçûţîöñ ţîmé one two three four five six seven]"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"[ĴåvåŠçŕîþţ éxéçûţîöñ ţîmé one two three]"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"[Ļåŕĝé ĜÎFš åŕé îñéƒƒîçîéñţ ƒöŕ ðéļîvéŕîñĝ åñîmåţéð çöñţéñţ. Çöñšîðéŕ ûšîñĝ MÞÉĜ4/ŴéбM vîðéöš ƒöŕ åñîmåţîöñš åñð ÞÑĜ/ŴéбÞ ƒöŕ šţåţîç îmåĝéš îñšţéåð öƒ ĜÎF ţö šåvé ñéţŵöŕķ бýţéš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ƒûñðåméñţåļš/þéŕƒöŕmåñçé/öþţîmîžîñĝ-çöñţéñţ-éƒƒîçîéñçý/ŕéþļåçé-åñîmåţéð-ĝîƒš-ŵîţĥ-vîðéö/) one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine thirty thirtyone thirtytwo thirtythree thirtyfour thirtyfive thirtysix thirtyseven]"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"[Ûšé vîðéö ƒöŕmåţš ƒöŕ åñîmåţéð çöñţéñţ one two three four five six seven eight]"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"[Çöñšîðéŕ ļåžý-ļöåðîñĝ öƒƒšçŕééñ åñð ĥîððéñ îmåĝéš åƒţéŕ åļļ çŕîţîçåļ ŕéšöûŕçéš ĥåvé ƒîñîšĥéð ļöåðîñĝ ţö ļöŵéŕ ţîmé ţö îñţéŕåçţîvé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/öƒƒšçŕééñ-îmåĝéš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight]"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"[Ðéƒéŕ öƒƒšçŕééñ îmåĝéš one two three]"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"[Ŕéšöûŕçéš åŕé бļöçķîñĝ ţĥé ƒîŕšţ þåîñţ öƒ ýöûŕ þåĝé. Çöñšîðéŕ ðéļîvéŕîñĝ çŕîţîçåļ ĴŠ/ÇŠŠ îñļîñé åñð ðéƒéŕŕîñĝ åļļ ñöñ-çŕîţîçåļ ĴŠ/šţýļéš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/бļöçķîñĝ-ŕéšöûŕçéš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine]"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"[Éļîmîñåţé ŕéñðéŕ-бļöçķîñĝ ŕéšöûŕçéš one two three four]"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"[Ļåŕĝé ñéţŵöŕķ þåýļöåðš çöšţ ûšéŕš ŕéåļ möñéý åñð åŕé ĥîĝĥļý çöŕŕéļåţéð ŵîţĥ ļöñĝ ļöåð ţîméš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ñéţŵöŕķ-þåýļöåðš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive]"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"[Ţöţåļ šîžé ŵåš {ţöţåļБýţéš} ĶБ one two three four five six seven]"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"[Åvöîð éñöŕmöûš ñéţŵöŕķ þåýļöåðš one two three four five six seven]"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"[Åvöîðš éñöŕmöûš ñéţŵöŕķ þåýļöåðš one two three four five six seven]"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"[Mîñîƒýîñĝ ÇŠŠ ƒîļéš çåñ ŕéðûçé ñéţŵöŕķ þåýļöåð šîžéš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/mîñîƒý-çšš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone]"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"[Mîñîƒý ÇŠŠ one two]"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"[Mîñîƒýîñĝ ĴåvåŠçŕîþţ ƒîļéš çåñ ŕéðûçé þåýļöåð šîžéš åñð šçŕîþţ þåŕšé ţîmé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/šþééð/ðöçš/îñšîĝĥţš/MîñîƒýŔéšöûŕçéš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree]"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"[Mîñîƒý ĴåvåŠçŕîþţ one two three]"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"[Ŕémövé ûñûšéð ŕûļéš ƒŕöm šţýļéšĥééţš ţö ŕéðûçé ûññéçéššåŕý бýţéš çöñšûméð бý ñéţŵöŕķ åçţîvîţý. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ûñûšéð-çšš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive]"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"[Ðéƒéŕ ûñûšéð ÇŠŠ one two]"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"[Ŕémövé ûñûšéð ĴåvåŠçŕîþţ ţö ŕéðûçé бýţéš çöñšûméð бý ñéţŵöŕķ åçţîvîţý. one two three four five six seven eight nine ten eleven twelve thirteen]"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"[Ŕémövé ûñûšéð ĴåvåŠçŕîþţ one two three]"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"[Å ļöñĝ çåçĥé ļîƒéţîmé çåñ šþééð ûþ ŕéþéåţ vîšîţš ţö ýöûŕ þåĝé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/çåçĥé-þöļîçý). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{[1 ŕéšöûŕçé ƒöûñð one two]}other{[# ŕéšöûŕçéš ƒöûñð one two three]}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"[Šéŕvé šţåţîç åššéţš ŵîţĥ åñ éƒƒîçîéñţ çåçĥé þöļîçý one two three four five six seven eight nine ten eleven]"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"[Ûšéš éƒƒîçîéñţ çåçĥé þöļîçý öñ šţåţîç åššéţš one two three four five six seven eight nine]"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"[Öþţîmîžéð îmåĝéš ļöåð ƒåšţéŕ åñð çöñšûmé ļéšš çéļļûļåŕ ðåţå. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/öþţîmîžé-îmåĝéš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"[Éƒƒîçîéñţļý éñçöðé îmåĝéš one two three]"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"[Šéŕvé îmåĝéš ţĥåţ åŕé åþþŕöþŕîåţéļý-šîžéð ţö šåvé çéļļûļåŕ ðåţå åñð îmþŕövé ļöåð ţîmé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/övéŕšîžéð-îmåĝéš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive]"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"[Þŕöþéŕļý šîžé îmåĝéš one two three]"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"[Ţéxţ-бåšéð ŕéšöûŕçéš šĥöûļð бé šéŕvéð ŵîţĥ çömþŕéššîöñ (ĝžîþ, ðéƒļåţé öŕ бŕöţļî) ţö mîñîmîžé ţöţåļ ñéţŵöŕķ бýţéš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ţéxţ-çömþŕéššîöñ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven]"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"[Éñåбļé ţéxţ çömþŕéššîöñ one two three]"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"[Îmåĝé ƒöŕmåţš ļîķé ĴÞÉĜ 2000, ĴÞÉĜ XŔ, åñð ŴéбÞ öƒţéñ þŕövîðé бéţţéŕ çömþŕéššîöñ ţĥåñ ÞÑĜ öŕ ĴÞÉĜ, ŵĥîçĥ méåñš ƒåšţéŕ ðöŵñļöåðš åñð ļéšš ðåţå çöñšûmþţîöñ. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ŵéбþ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine thirty]"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"[Šéŕvé îmåĝéš îñ ñéxţ-ĝéñ ƒöŕmåţš one two three four five six seven]"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"[Ţĥé Çŕîţîçåļ Ŕéqûéšţ Çĥåîñš бéļöŵ šĥöŵ ýöû ŵĥåţ ŕéšöûŕçéš åŕé ļöåðéð ŵîţĥ å ĥîĝĥ þŕîöŕîţý. Çöñšîðéŕ ŕéðûçîñĝ ţĥé ļéñĝţĥ öƒ çĥåîñš, ŕéðûçîñĝ ţĥé ðöŵñļöåð šîžé öƒ ŕéšöûŕçéš, öŕ ðéƒéŕŕîñĝ ţĥé ðöŵñļöåð öƒ ûññéçéššåŕý ŕéšöûŕçéš ţö îmþŕövé þåĝé ļöåð. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/çŕîţîçåļ-ŕéqûéšţ-çĥåîñš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine thirty thirtyone thirtytwo thirtythree thirtyfour thirtyfive thirtysix thirtyseven thirtyeight thirtynine forty]"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{[1 çĥåîñ ƒöûñð one two]}other{[# çĥåîñš ƒöûñð one two]}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"[Mîñîmîžé Çŕîţîçåļ Ŕéqûéšţš Ðéþţĥ one two three four five six seven]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"[Éļéméñţ one]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"[Šţåţîšţîç one two]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"[Våļûé one]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"[Бŕöŵšéŕ éñĝîñééŕš ŕéçömméñð þåĝéš çöñţåîñ ƒéŵéŕ ţĥåñ ~1,500 ÐÖM ñöðéš. Ţĥé šŵééţ šþöţ îš å ţŕéé ðéþţĥ < 32 éļéméñţš åñð ƒéŵéŕ ţĥåñ 60 çĥîļðŕéñ/þåŕéñţ éļéméñţ. Å ļåŕĝé ÐÖM çåñ îñçŕéåšé mémöŕý ûšåĝé, çåûšé ļöñĝéŕ [šţýļé çåļçûļåţîöñš](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ƒûñðåméñţåļš/þéŕƒöŕmåñçé/ŕéñðéŕîñĝ/ŕéðûçé-ţĥé-šçöþé-åñð-çömþļéxîţý-öƒ-šţýļé-çåļçûļåţîöñš), åñð þŕöðûçé çöšţļý [ļåýöûţ ŕéƒļöŵš](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/šþééð/åŕţîçļéš/ŕéƒļöŵ). [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ðöm-šîžé). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine thirty thirtyone thirtytwo thirtythree thirtyfour thirtyfive thirtysix thirtyseven thirtyeight thirtynine forty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{[1 ñöðé one]}other{[# ñöðéš one]}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"[Åvöîð åñ éxçéššîvé ÐÖM šîžé one two three four five six]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"[Måxîmûm ÐÖM Ðéþţĥ one two three]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"[Ţöţåļ ÐÖM Ñöðéš one two]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"[Måxîmûm Çĥîļð Éļéméñţš one two three]"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"[Åvöîðš åñ éxçéššîvé ÐÖM šîžé one two three four five six]"},

"lighthouse-core/audits/font-display.js | description":{
"message":"[Ļévéŕåĝé ţĥé ƒöñţ-ðîšþļåý ÇŠŠ ƒéåţûŕé ţö éñšûŕé ţéxţ îš ûšéŕ-vîšîбļé ŵĥîļé ŵéбƒöñţš åŕé ļöåðîñĝ. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ûþðåţéš/2016/02/ƒöñţ-ðîšþļåý). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour]"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"[Éñšûŕé ţéxţ ŕémåîñš vîšîбļé ðûŕîñĝ ŵéбƒöñţ ļöåð one two three four five six seven eight nine ten]"},

"lighthouse-core/audits/font-display.js | title":{
"message":"[Åļļ ţéxţ ŕémåîñš vîšîбļé ðûŕîñĝ ŵéбƒöñţ ļöåðš one two three four five six seven eight nine]"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"[Çåţéĝöŕý one]"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"[Çöñšîðéŕ ŕéðûçîñĝ ţĥé ţîmé šþéñţ þåŕšîñĝ, çömþîļîñĝ åñð éxéçûţîñĝ ĴŠ. Ýöû måý ƒîñð ðéļîvéŕîñĝ šmåļļéŕ ĴŠ þåýļöåðš ĥéļþš ŵîţĥ ţĥîš. one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty]"},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"[Mîñîmîžé måîñ-ţĥŕéåð ŵöŕķ one two three]"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"[Mîñîmîžéš måîñ-ţĥŕéåð ŵöŕķ one two three]"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"[Ţĥé šçöŕé åбövé îš åñ éšţîmåţé öƒ ĥöŵ ļöñĝ ýöûŕ åþþ ţåķéš ţö ŕéšþöñð ţö ûšéŕ îñþûţ, îñ mîļļîšéçöñðš, ðûŕîñĝ ţĥé бûšîéšţ 5š ŵîñðöŵ öƒ þåĝé ļöåð. Îƒ ýöûŕ ļåţéñçý îš ĥîĝĥéŕ ţĥåñ 50 mš, ûšéŕš måý þéŕçéîvé ýöûŕ åþþ åš ļåĝĝý. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/éšţîmåţéð-îñþûţ-ļåţéñçý). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine thirty thirtyone thirtytwo thirtythree thirtyfour thirtyfive thirtysix thirtyseven thirtyeight]"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"[Éšţîmåţéð Îñþûţ Ļåţéñçý one two three]"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"[Fîŕšţ Çöñţéñţƒûļ Þåîñţ måŕķš ţĥé ţîmé åţ ŵĥîçĥ ţĥé ƒîŕšţ ţéxţ öŕ îmåĝé îš þåîñţéð. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ƒîŕšţ-çöñţéñţƒûļ-þåîñţ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive]"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"[Fîŕšţ Çöñţéñţƒûļ Þåîñţ one two three]"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"[Fîŕšţ ÇÞÛ Îðļé måŕķš ţĥé ƒîŕšţ ţîmé åţ ŵĥîçĥ ţĥé þåĝé'š måîñ ţĥŕéåð îš qûîéţ éñöûĝĥ ţö ĥåñðļé îñþûţ. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ƒîŕšţ-îñţéŕåçţîvé). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix]"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"[Fîŕšţ ÇÞÛ Îðļé one two]"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"[Fîŕšţ Méåñîñĝƒûļ Þåîñţ méåšûŕéš ŵĥéñ ţĥé þŕîmåŕý çöñţéñţ öƒ å þåĝé îš vîšîбļé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ƒîŕšţ-méåñîñĝƒûļ-þåîñţ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour]"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"[Fîŕšţ Méåñîñĝƒûļ Þåîñţ one two three]"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"[Îñţéŕåçţîvé måŕķš ţĥé ţîmé åţ ŵĥîçĥ ţĥé þåĝé îš ƒûļļý îñţéŕåçţîvé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/çöñšîšţéñţļý-îñţéŕåçţîvé). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree]"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"[Ţîmé ţö Îñţéŕåçţîvé one two three]"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"[Šþééð Îñðéx šĥöŵš ĥöŵ qûîçķļý ţĥé çöñţéñţš öƒ å þåĝé åŕé vîšîбļý þöþûļåţéð. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/šþééð-îñðéx). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree]"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"[Šþééð Îñðéx one two]"},

"lighthouse-core/audits/redirects.js | description":{
"message":"[Ŕéðîŕéçţš îñţŕöðûçé åððîţîöñåļ ðéļåýš бéƒöŕé ţĥé þåĝé çåñ бé ļöåðéð. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ŕéðîŕéçţš). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/audits/redirects.js | title":{
"message":"[Åvöîð mûļţîþļé þåĝé ŕéðîŕéçţš one two three four five six seven]"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"[Ţîmé Ţö Fîŕšţ Бýţé îðéñţîƒîéš ţĥé ţîmé åţ ŵĥîçĥ ýöûŕ šéŕvéŕ šéñðš å ŕéšþöñšé. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ţţƒб). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree]"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"[Ŕööţ ðöçûméñţ ţööķ {ţîméÎñMš} mš one two three four five six seven]"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"[Ŕéðûçé šéŕvéŕ ŕéšþöñšé ţîméš (ŢŢFБ) one two three four five six seven eight]"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"[Šéŕvéŕ ŕéšþöñšé ţîméš åŕé ļöŵ (ŢŢFБ) one two three four five six seven eight]"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"[Ðûŕåţîöñ one]"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"[Ñåmé one]"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"[Šţåŕţ Ţîmé one two]"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"[Ţýþé one]"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"[Çöñšîðéŕ îñšţŕûméñţîñĝ ýöûŕ åþþ ŵîţĥ ţĥé Ûšéŕ Ţîmîñĝ ÅÞÎ ţö méåšûŕé ýöûŕ åþþ'š ŕéåļ-ŵöŕļð þéŕƒöŕmåñçé ðûŕîñĝ ķéý ûšéŕ éxþéŕîéñçéš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/ûšéŕ-ţîmîñĝ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight]"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{[1 ûšéŕ ţîmîñĝ one two]}other{[# ûšéŕ ţîmîñĝš one two]}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"[Ûšéŕ Ţîmîñĝ måŕķš åñð méåšûŕéš one two three four five six seven]"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"[Çöñšîðéŕ åððîñĝ þŕéçöññéçţ öŕ ðñš-þŕéƒéţçĥ ŕéšöûŕçé ĥîñţš ţö éšţåбļîšĥ éåŕļý çöññéçţîöñš ţö îmþöŕţåñţ ţĥîŕð-þåŕţý öŕîĝîñš. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ƒûñðåméñţåļš/þéŕƒöŕmåñçé/ŕéšöûŕçé-þŕîöŕîţîžåţîöñ#þŕéçöññéçţ). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive twentysix twentyseven twentyeight twentynine]"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"[Þŕéçöññéçţ ţö ŕéqûîŕéð öŕîĝîñš one two three four five six seven]"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"[Çöñšîðéŕ ûšîñĝ <link rel=preload> ţö þŕîöŕîţîžé ƒéţçĥîñĝ ŕéšöûŕçéš ţĥåţ åŕé çûŕŕéñţļý ŕéqûéšţéð ļåţéŕ îñ þåĝé ļöåð. [Ļéåŕñ möŕé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/åûðîţš/þŕéļöåð). one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo twentythree twentyfour twentyfive]"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"[Þŕéļöåð ķéý ŕéqûéšţš one two three]"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"[Möŕé îñƒöŕmåţîöñ åбöûţ ţĥé þéŕƒöŕmåñçé öƒ ýöûŕ åþþļîçåţîöñ. one two three four five six seven eight nine ten eleven twelve]"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"[Ðîåĝñöšţîçš one two]"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"[Ţĥé möšţ çŕîţîçåļ åšþéçţ öƒ þéŕƒöŕmåñçé îš ĥöŵ qûîçķļý þîxéļš åŕé ŕéñðéŕéð öñšçŕééñ. Ķéý méţŕîçš: Fîŕšţ Çöñţéñţƒûļ Þåîñţ, Fîŕšţ Méåñîñĝƒûļ Þåîñţ one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"[Fîŕšţ Þåîñţ Îmþŕövéméñţš one two three]"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"[Ţĥéšé öþţîmîžåţîöñš çåñ šþééð ûþ ýöûŕ þåĝé ļöåð. one two three four five six seven eight nine ten]"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"[Öþþöŕţûñîţîéš one two]"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"[Méţŕîçš one]"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"[Éñĥåñçé ţĥé övéŕåļļ ļöåðîñĝ éxþéŕîéñçé, šö ţĥé þåĝé îš ŕéšþöñšîvé åñð ŕéåðý ţö ûšé åš šööñ åš þöššîбļé. Ķéý méţŕîçš: Ţîmé ţö Îñţéŕåçţîvé, Šþééð Îñðéx one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"[Övéŕåļļ Îmþŕövéméñţš one two three]"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"[Þéŕƒöŕmåñçé one two]"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"[Çåçĥé ŢŢĻ one two]"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"[Šîžé (ĶБ) one two]"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"[Ţîmé Šþéñţ one two]"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"[ÛŔĻ one]"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"[Þöţéñţîåļ Šåvîñĝš (ĶБ) one two three]"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"[Þöţéñţîåļ Šåvîñĝš (mš) one two three]"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"[Þöţéñţîåļ šåvîñĝš öƒ {ŵåšţéðБýţéš} ĶБ one two three four five six seven eight]"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"[Þöţéñţîåļ šåvîñĝš öƒ {ŵåšţéðMš} mš one two three four five six seven]"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"[{ţîméÎñMš} mš one two]"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"[{ţîméÎñMšŠéç} š one two]"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"[Šĥöŵ åûðîţš one two]"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"[Îñîţîåļ Ñåvîĝåţîöñ one two three]"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"[Måxîmûm çŕîţîçåļ þåţĥ ļåţéñçý: one two three four five six seven]"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"[Éŕŕöŕ¡ one]"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"[Ŕéþöŕţ éŕŕöŕ: ñö åûðîţ îñƒöŕmåţîöñ one two three four five six seven]"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"[Ļåб Ðåţå one]"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[[Ļîĝĥţĥöûšé](ĥţţþš://ðévéļöþéŕš.ĝööĝļé.çöm/ŵéб/ţööļš/ļîĝĥţĥöûšé/) åñåļýšîš öƒ ţĥé çûŕŕéñţ þåĝé öñ émûļåţéð 3Ĝ. Våļûéš åŕé éšţîmåţéð åñð måý våŕý. one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty twentyone twentytwo]"},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"[Åððîţîöñåļ îţémš ţö måñûåļļý çĥéçķ one two three four five six seven]"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"[Ñöţ åþþļîçåбļé one two]"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"[Öþþöŕţûñîţý one two]"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"[Éšţîmåţéð Šåvîñĝš one two three]"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"[Þåššéð åûðîţš one two]"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"[Šçöŕé šçåļé: one two]"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"[Ţĥéŕé ŵéŕé îššûéš åƒƒéçţîñĝ ţĥîš ŕûñ öƒ Ļîĝĥţĥöûšé: one two three four five six seven eight nine ten eleven]"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"[Våļûéš åŕé éšţîmåţéð åñð måý våŕý. one two three four five six seven]"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"[Ŵåŕñîñĝš:  one two]"}};


},{}],48:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Las extensiones de Chrome han afectado de forma negativa al rendimiento de carga de esta página. Prueba a auditarla en modo incógnito o desde un perfil de Chrome sin extensiones."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Evaluación de la secuencia de comandos"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Análisis de la secuencia de comandos"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Te recomendamos que reduzcas el tiempo de análisis, compilación y ejecución de JavaScript. Para ello, puedes utilizar cargas útiles de JS más pequeñas. [Más información](https://developers.google.com/web/tools/lighthouse/audits/bootup)"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reduce el tiempo de ejecución de JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Tiempo de ejecución de JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Los GIF de gran tamaño no son eficaces para mostrar contenido animado. Para usar menos bytes de la red, te recomendamos que utilices los formatos de vídeo PEG4/WebM para incluir animaciones y los formatos PNG/WebP para añadir imágenes estáticas en lugar de GIFs. [Más información](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Usa formatos de vídeo para incluir contenido animado"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Te recomendamos que uses la carga diferida con imágenes ocultas y que no aparecen en pantalla una vez que todos los recursos críticos hayan terminado de cargarse para reducir el tiempo hasta que la página es interactiva. [Más información](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Pospón la carga de imágenes que no aparecen en pantalla"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Hay recursos que bloquean el primer renderizado de la página. Te recomendamos que muestres los elementos JS/CSS críticos insertados y pospongas todos los JS/styles que no sean críticos. [Más información](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Elimina los recursos que bloqueen el renderizado"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Si la carga útil de la red es muy grande, los usuarios consumen más datos móviles y las páginas tardan más en cargarse. [Más información](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Tamaño total: {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Evita cargas útiles de red de gran tamaño"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Evita cargas útiles de red de gran tamaño"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Si minificas los archivos CSS, se puede reducir el tamaño de la carga útil de la red. [Más información](https://developers.google.com/web/tools/lighthouse/audits/minify-css)"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minifica los archivos CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Si minificas los archivos JavaScript, se puede reducir el tamaño de la carga útil y el tiempo de análisis de la secuencia de comandos. [Más información](https://developers.google.com/speed/docs/insights/MinifyResources)"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minifica los recursos JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Quita las reglas que no se usen de las hojas de estilo para reducir el número de bytes innecesarios que consume la actividad de red. [Más información](https://developers.google.com/web/tools/lighthouse/audits/unused-css)"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Pospón la carga de archivos CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Quita el contenido JavaScript que no se use para reducir el número de bytes que consume la actividad de red."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Quita los recursos JavaScript que no se usen"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Una duración en caché más larga puede aumentar el número de visitas repetidas a tu página. [Más información](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Se ha encontrado 1 recurso}other{Se han encontrado # recursos}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Publica recursos estáticos con una política de caché eficaz"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Usa una política de caché eficaz en recursos estáticos"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Las imágenes optimizadas se cargan más rápido y consumen menos datos móviles. [Más información](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codifica las imágenes de forma eficaz"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Muestra imágenes con un tamaño adecuado para ahorrar datos móviles y mejorar el tiempo de carga. [Más información](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Usa un tamaño adecuado para las imágenes"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Los recursos basados en texto se deberían publicar comprimidos (gzip, deflate o brotli) para minimizar el total de bytes de la red. [Más información](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Habilita la compresión de texto"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Los formatos como JPEG 2000, JPEG XR y WebP comprimen mejor las imágenes que los formatos PNG o JPEG, lo que hace que se descarguen más rápido y consuman menos datos. [Más información](https://developers.google.com/web/tools/lighthouse/audits/webp)"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Publica imágenes con formatos de próxima generación"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Las cadenas de solicitud crítica que se muestran a continuación indican qué recursos son de alta prioridad. Te recomendamos que reduzcas la longitud de las cadenas, disminuyas el tamaño de los recursos o pospongas la descarga de recursos innecesarios para mejorar la carga de la página. [Más información](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Se ha encontrado 1 cadena}other{Se han encontrado # cadenas}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimiza la profundidad de las solicitudes críticas"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Los ingenieros que desarrollan navegadores recomiendan que las páginas contengan menos de ~1500 nodos de DOM. Lo ideal es conseguir una profundidad de árbol de < 32 elementos y menos de 60 elementos secundarios por cada nodo principal. Los DOM de gran tamaño aumentan el uso de la memoria, hacen que los [cálculos de estilo](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) sean más largos y producen [reinicios de flujo](https://developers.google.com/speed/articles/reflow) más caros. [Más información](https://developers.google.com/web/tools/lighthouse/audits/dom-size)"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nodo}other{# nodos}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Evita un tamaño excesivo de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Profundidad máxima de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Nodos totales de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Evita un tamaño excesivo de DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Utiliza la función de CSS font-display para que los usuarios vean el texto mientras se carga la fuente web. [Más información](https://developers.google.com/web/updates/2016/02/font-display)"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Asegúrate de que el texto permanece visible mientras se carga la fuente web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Todo el texto permanece visible mientras se carga la fuente web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categoría"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Te recomendamos que reduzcas el tiempo de análisis, compilación y ejecución de JavaScript. Para ello, puedes utilizar cargas útiles de JS más pequeñas."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimiza el trabajo del hilo principal"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimiza el trabajo del hilo principal"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"La puntuación anterior es una estimación de cuánto tarda tu aplicación en responder a las acciones de los usuarios (en milisegundos) durante el periodo de 5 s más activo de la carga de la página. Si la latencia es superior a 50 ms, es posible que los usuarios noten que la aplicación funciona con lentitud. [Más información](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Latencia de entrada estimada"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"El primer renderizado con contenido indica el momento en el que se renderiza el primer texto o la primera imagen. [Más información](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Primer renderizado con contenido"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"El primer tiempo inactivo de la CPU indica la primera vez que el hilo principal de la página está lo suficientemente inactivo para recibir acciones del usuario. [Más información](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Primer tiempo inactivo de la CPU"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"El primer renderizado significativo mide el momento en que se muestra el contenido principal de la página. [Más información](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Primer renderizado significativo"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"La métrica Tiempo hasta que está interactiva indica el momento en el que la página es totalmente interactiva. [Más información](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tiempo hasta que está interactiva"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"El índice de velocidad indica la rapidez con la que se puede ver el contenido de una página. [Más información](https://developers.google.com/web/tools/lighthouse/audits/speed-index)"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Índice de velocidad"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Las redirecciones provocan retrasos adicionales antes de que la página se pueda cargar. [Más información](https://developers.google.com/web/tools/lighthouse/audits/redirects)"},

"lighthouse-core/audits/redirects.js | title":{
"message":"Evita que haya varias redirecciones de página"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"El tiempo hasta el primer byte indica el momento en el que el servidor envía una respuesta. [Más información](https://developers.google.com/web/tools/lighthouse/audits/ttfb)"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"El documento raíz ha tardado {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reduce los tiempos de respuesta del servidor (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Los tiempos de respuesta del servidor son rápidos (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Duración"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nombre"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Hora de inicio"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tipo"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Te recomendamos que uses la API User Timing en tu aplicación para calcular su rendimiento real durante las principales experiencias de usuario. [Más información](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 tiempo de usuario}other{# tiempos de usuario}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Medidas y marcas de User Timing"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Te recomendamos que añadas sugerencias de recursos preconnect o dns-prefetch para establecer conexiones previas con orígenes externos. [Más información](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Establece conexión previamente con los orígenes necesarios"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Te recomendamos que uses <link rel=preload> para dar prioridad a los recursos que se solicitan más tarde al cargar la página. [Más información](https://developers.google.com/web/tools/lighthouse/audits/preload)"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Carga previamente las solicitudes clave"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Consulta más información sobre el rendimiento de tu aplicación."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnósticos"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"El aspecto más importante del rendimiento es la rapidez con la que se renderizan los píxeles en la pantalla. Métricas clave: Primer renderizado con contenido y Primer renderizado significativo"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Mejoras del primer renderizado"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Estas optimizaciones pueden hacer que tus páginas se carguen más rápido."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Oportunidades"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Métricas"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Mejora la experiencia de carga general para que la página responda bien y se pueda usar lo antes posible. Métricas clave: Tiempo hasta que está interactiva, Índice de velocidad"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Mejoras generales"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Rendimiento"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Tiempo de vida en caché"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Tamaño (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Duración"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Ahorro potencial (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Ahorro potencial (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Ahorro potencial de {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Ahorro potencial de {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Mostrar auditorías"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navegación inicial"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latencia de ruta crítica máxima:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Error"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Error del informe: no hay información de la auditoría"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Datos de prueba"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) ha analizado la página actual mediante una emulación de 3G. Los valores son estimaciones y pueden variar."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Elementos adicionales que se deben comprobar manualmente"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"No aplicable"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Oportunidad"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Ahorro estimado"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Auditorías aprobadas"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Escala de puntuación:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Algunos problemas han afectado a la ejecución de Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Los valores son estimados y pueden variar."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Advertencias: "}};


},{}],49:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chromen laajennukset heikensivät tämän sivun latausnopeutta. Yritä tarkastaa sivu incognito-tilassa tai Chrome-profiililla, johon ei ole lisätty laajennuksia."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Skriptin arviointi"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Skriptin jäsennys"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Yhteensä"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Suosittelemme vähentämään JS:n jäsentämiseen, kääntämiseen ja suorittamiseen kuluvaa aikaa. Pienempien JS-resurssien jakeleminen voi helpottaa tätä. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Vähennä JavaScriptin suorittamiseen kuluvaa aikaa"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScriptin suorittamiseen kuluva aika"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Suuret GIFit eivät ole tehokas tapa jaella animoitua sisältöä. Voit pienentää ladattavien tavujen määrää jakelemalla animaatioita MPEG4- tai WebM-muodossa ja staattisia kuvia PNG- tai WebP-muodossa. [Lue lisää](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Jakele animaatiosisältöä videomuodossa"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Suosittelemme lykkäämään poissa näkyvistä olevien ja piilotettujen kuvien lataamista, kunnes kaikki kriittiset resurssit on ladattu. Tämä lyhentää interaktiivisuutta edeltävää aikaa. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Lykkää kuvien lataamista, jos ne eivät ole näkyvissä"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resurssit estävät sivun ensimmäisen renderöinnin. Suosittelemme jakelemaan kriittiset JS- ja CSS-osat sivuun upotettuina ja lykkäämään kaikkien ei-kriittisten JS- tai tyyliosien lataamista. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Poista renderöinnin estävät resurssit"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Suuret verkkoresurssit aiheuttavat kuluja käyttäjille ja liittyvät vahvasti pitkiin latausaikoihin. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Yhteenlaskettu koko oli {totalBytes, number, bytes} kt"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Vältä valtavia verkkoresursseja"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Välttää valtavia verkkoresursseja"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS-tiedostojen pienentäminen voi auttaa pienentämään verkkoresurssien kokoa. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Pienennä CSS-tiedostoja"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"JavaScript-tiedostojen pienentäminen voi auttaa pienentämään resurssien kokoa ja lyhentämään skriptin jäsentämiseen kuluvaa aikaa. [Lue lisää](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Pienennä JavaScript-tiedostoja"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Poista käyttämättömät säännöt tyylitiedostoista, jotta voit vähentää verkkotoiminnan tarpeettomasti kuluttamia tavuja. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Lykkää tarpeettoman CSS:n lataamista"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Poista käyttämättömät JavaScript-osat, jotta voit vähentää verkkotoiminnan kuluttamia tavuja."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Poista käyttämätön JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Pitkä välimuistin käyttöikä voi nopeuttaa sivun lataamista, kun käyttäjä avaa sen uudelleen. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 resurssi löydetty}other{# resurssia löydetty}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Käytä tehokasta välimuistikäytäntöä staattisten resurssien jakelemiseen"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Käyttää tehokasta välimuistikäytäntöä staattisten resurssien käsittelyyn"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimoidut kuvat latautuvat nopeammin ja kuluttavat vähemmän mobiilidataa. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Koodaa kuvat tehokkaasti"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Näytä sopivan kokoisia kuvia, jotta voit pienentää mobiilidatan kulutusta ja latausaikoja. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Määritä kuvien koko oikein"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Tekstipohjaiset resurssit on hyvä pakata ennen jakelua (gzip, deflate tai brotli), jotta ladattavien tavujen määrä voidaan minimoida. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Ota tekstin pakkaus käyttöön"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Kuvamuodot, kuten JPEG 2000, JPEG XR ja WebP, pakkaavat sisältöä usein paremmin kuin PNG tai JPEG, minkä vuoksi ne auttavat nopeuttamaan latauksia ja vähentämään datan kulutusta. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Jakele kuvat seuraavan sukupolven muodoissa"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Alla olevat kriittiset pyyntöketjut kertovat, minkä resurssien lataaminen priorisoidaan. Suosittelemme parantamaan sivun latausaikaa lyhentämällä ketjuja, pienentämällä resurssien latauskokoa ja lykkäämällä tarpeettomien resurssien lataamista. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 ketju löydetty}other{# ketjua löydetty}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimoi kriittisten pyyntöjen syvyys"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Selainten kehittäjät suosittelevat käyttämään sivulla enintään noin 1 500:aa DOM-noodia. Sopiva puun syvyys on korkeintaan 32 elementtiä ja alle 60 ala- tai ylätason elementtiä. Suuri DOM voi lisätä muistin käyttöä, pidentää [tyylilaskelmia](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) ja aiheuttaa työläitä [asettelun uudelleenjuoksutuksia](https://developers.google.com/speed/articles/reflow). [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 noodi}other{# noodia}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Vältä liian suurta DOM:ää"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"DOM:n enimmäissyvyys"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"DOM-noodien kokonaismäärä"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Välttää liian suurta DOM:ää"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Käytä CSS:n kirjasimennäyttöominaisuutta, jotta voit varmistaa, että käyttäjä näkee tekstin myös verkkofonttien lataamisen aikana. [Lue lisää](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Varmista, että teksti pysyy näkyvissä verkkofontin lataamisen aikana"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Kaikki teksti pysyy näkyvissä verkkofontin lataamisen aikana"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Luokka"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Suosittelemme vähentämään JS:n jäsentämiseen, kääntämiseen ja suorittamiseen kuluvaa aikaa. Pienempien JS-resurssien jakaminen voi helpottaa tätä."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimoi pääsäikeen työkuorma"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimoi pääsäikeen työkuorman"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Yllä oleva tulos on millisekunteina annettu arvio siitä, kuinka kauan sovelluksellasi kestää vastata käyttäjän syötteeseen sivun lataamisen kiireisimmän, viiden sekunnin mittaisen jakson aikana. Jos viive on yli 50 ms, sovelluksesi voi toimia käyttäjien mielestä hitaasti. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Arvioitu syöttöviive"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Ensimmäinen merkityksellinen piirtäminen kertoo, milloin sivun ensisijainen sisältö tulee näkyviin. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Ensimmäinen sisällön renderöinti"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"CPU:n ensimmäinen toimettomuusjakso kertoo, milloin sivun pääsäikeen tilanne sallii syötteiden käsittelyn. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU:n ensimmäinen toimettomuusjakso"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Ensimmäinen merkityksellinen renderöinti kertoo, milloin sivun ensisijainen sisältö tulee näkyviin. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Ensimmäinen merkityksellinen renderöinti"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktiivisuutta edeltävä aika kertoo, milloin sivun kaikki osat ovat käytettävissä. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Interaktiivisuutta edeltävä aika"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Nopeusindeksi kertoo, kuinka nopeasti sivun sisältö tulee näkyviin. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Nopeusindeksi"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Uudellenohjaukset viivästyttävät sivun lataamista. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Vältä useita uudelleenohjauksia"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Ensimmäistä tavua edeltävä aika kertoo, kuinka kauan kestää, ennen kuin palvelimesi lähettää vastauksen. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Päädokumentti käytti {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Lyhennä palvelimen vastausaikoja (ensimmäistä tavua edeltävä aika)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Palvelimen vastausajat ovat lyhyitä (ensimmäistä tavua edeltävä aika)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Kesto"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nimi"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Aloitusaika"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tyyppi"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Suosittelemme käyttämään sovelluksen kehittämisessä User Timing ‑sovellusliittymää mittaamaan todellista toimivuutta tärkeiden käyttökokemuksien aikana. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 käyttäjän ajankäyttömerkintä}other{# käyttäjän ajankäyttömerkintää}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing ‑merkinnät ja ‑mitat"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Suosittelemme lisäämään sivulle yhteyttä tai DNS:n noutamista edeltäviä resurssivihjeitä, joiden avulla yhteydet tärkeisiin kolmannen osapuolen kohteisiin voidaan muodostaa etukäteen. [Lue lisää](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Muodosta yhteydet pakollisiin kohteisiin etukäteen"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Suosittelemme käyttämään <link rel=preload>-tagia, jotta voit priorisoida resursseja, joiden noutamista pyydetään sivun lataamisen myöhemmässä vaiheessa. [Lue lisää](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Lataa tärkeät pyynnöt etukäteen"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Lisätietoja sovelluksen toiminnasta"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostiikka"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Tehokkuuden tärkein osa-alue on se, kuinka nopeasti pikselit renderöidään näytölle. Tärkeimmät mittarit ovat ensimmäinen sisällön renderöinti ja ensimmäinen merkityksellinen renderöinti."},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Ensimmäistä renderöintiä koskevat parannusehdotukset"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Nämä optimointikeinot voivat nopeuttaa sivun lataamista."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Suositukset"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Tiedot"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Paranna latauskokemusta kokonaisuutena, jotta sivu on responsiivisempi ja käytettävissä mahdollisimman pian. Tärkeimmät mittarit ovat interaktiivisuutta edeltävä aika ja nopeusindeksi."},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Yleiset parannusehdotukset"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Tehokkuus"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Välimuistin käyttöikä"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Koko (kt)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Käytetty aika"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL-osoite"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potentiaalinen säästö (kt)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potentiaalinen säästö (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potentiaalinen säästö: {wastedBytes, number, bytes} kt"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potentiaalinen säästö: {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Näytä tarkastukset"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Ensimmäinen navigointi"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Kriittisen polun enimmäisviive:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Virhe!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Raporttivirhe: ei tarkastustietoja"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratoriodata"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analysoi nykyisen sivun 3G-emulaation avulla. Arvot ovat arvioita ja voivat vaihdella."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Lisää manuaalisesti tarkistettavia kohteita"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Ei sovellu"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Suositus"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Arvioitu säästö"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Hyväksytyt tarkastukset"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Pisteasteikko:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Lighthousen suorituksessa havaittiin ongelmia:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Arvot ovat arvioita ja voivat vaihdella."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Varoitukset: "}};


},{}],50:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Nagkaroon ng negatibong epekto ang mga extension ng Chrome sa performance ng pag-load ng page na ito. Subukang i-audit ang page sa incognito mode o mula sa isang profile sa Chrome nang walang extension."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Pagsusuri ng Script"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Pag-parse ng Script"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Kabuuan"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Pag-isipang bawasan ang oras na ginugugol sa pag-parse, pag-compile, at pagpapagana ng JS. Maaaring mapansin mong nakakatulong dito ang paghahatid ng mas maliliit na payload ng JS. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Pabilisin ang pagpapagana ng JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Bilis ng pagpapagana ng JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Hindi mahusay ang malalaking GIF sa paghahatid ng animated na content. Pag-isipang gumamit ng mga MPEG4/WebM na video para sa mga animation at PNG/WebP para sa mga static na larawan sa halip na GIF para makatipid sa mga byte ng network. [Matuto pa](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Gumamit ng mga format ng video para sa animated na content"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Pag-isipang i-lazy load ang mga larawang wala sa screen at nakatago kapag tapos nang mag-load ang lahat ng mahalagang resource para mapabilis ang time to interactive. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Ipagpaliban ang mga larawang wala sa screen"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Bina-block ng mga resource ang first paint ng iyong page. Pag-isipang ihatid ang mahalagang JS/CSS inline at ipagpaliban ang lahat ng hindi mahalagang JS/istilo. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Alisin ang mga resource na nagba-block ng pag-render"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Malaki ang nagagastos ng mga user sa malalaking payload ng network, at malaki ang kaugnayan ng mga ito sa matagal na pag-load. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Ang kabuuang laki ay {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Iwasan ang malalaking payload ng network"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Umiiwas sa malalaking payload ng network"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Kapag pinaliit ang mga CSS file, maaaring lumiit ang payload ng network. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Paliitin ang CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Kapag pinaliit ang mga JavaScript file, maaaring lumiit ang payload at bumilis ang pag-parse ng script. [Matuto pa](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Paliitin ang JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Alisin ang mga hindi nagamit na panuntunan mula sa mga stylesheet para mabawasan ang mga hindi kinakailangang byte na nakokonsumo ng aktibidad sa network. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Ipagpaliban ang hindi nagamit na CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Alisin ang hindi nagamit na JavaScript para mabawasan ang mga byte na nakokonsumo ng aktibidad sa network."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Alisin ang hindi nagamit na JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Maaaring mapabilis ng mahabang lifetime ng cache ang mga umuulit na pagbisita sa iyong page. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Nakakita ng 1 resource}one{Nakakita ng # resource}other{Nakakita ng # na resource}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Maghatid ng mga static na asset nang may mahusay na patakaran sa cache"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Gumagamit ng mahusay na patakaran sa cache sa mga static na asset"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Mas mabilis mag-load ang mga na-optimize na page at mas kaunti ang nakokonsumong cellular data ng mga ito. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Mahusay na mag-encode ng mga larawan"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Maghatid ng mga larawang naaangkop ang laki para makatipid sa cellular data at mapabilis ang pag-load. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Iangkop ang laki ng mga larawan"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Dapat ihatid ang mga text-based na resource nang may compression (gzip, deflate, o brotli) para mabawasan ang kabuuang byte ng network. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"I-enable ang compression ng text"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Kadalasan, mas mahusay ang compression ng mga format ng imahe gaya ng JPEG 2000, JPEG XR, at WebP kaysa sa compression ng PNG o JPEG, kaya mas mabilis ang pag-download at mas kaunti ang nakokonsumong data ng mga ito. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Maghatid ng mga larawan sa mga makabagong format"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Ipinapakita sa iyo ng Critical Request Chains sa ibaba kung anong mga resource ang nilo-load nang may mataas na priyoridad. Pag-isipang paikliin ang mga chain, paliitin ang mga dina-download sa mga resource, o ipagpaliban ang pag-download ng mga hindi kinakailangang resource para mapabilis ang pag-load ng page [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Nakakita ng 1 chain}one{Nakakita ng # chain}other{Nakakita ng # na chain}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"I-minimize ang Lalim ng Mahahalagang Kahilingan"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Inirerekomenda ng mga engineer ng browser na hindi umabot sa ~1,500 ang mga node ng DOM sa mga page. Ang pinakamainam ay isang lalim ng tree na < 32 elemento at wala pang 60 child/parent na elemento. Ang malaking DOM ay maaaring magresulta sa mas malakas na paggamit ng memory, at magpahaba ng [mga pagkalkula ng istilo](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), at gumawa ng mga magastos na [reflow ng layout](https://developers.google.com/speed/articles/reflow). [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 node}one{# node}other{# na node}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Umiwas sa masyadong malaking DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximum na Lalim ng DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Kabuuang Bilang ng Mga Node ng DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Umiiwas sa masyadong malaking DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Gamitin ang feature na font-display ng CSS para matiyak na nakikita ng user ang text sa pag-load ng mga webfont. [Matuto pa](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Tiyaking patuloy na nakikita ang text sa pag-load ng webfont"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Patuloy na nakikita ang lahat ng text sa pag-load ng webfont"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorya"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Pag-isipang bawasan ang oras na ginugugol sa pag-parse, pag-compile, at pagpapagana ng JS. Maaaring mapansin mong nakakatulong dito ang paghahatid ng mas maliliit na payload ng JS."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Bawasan ang gawain sa pangunahing thread"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Binabawasan ang gawain sa pangunahing thread"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Ang marka sa itaas ay isang pagtataya ng bilis ng pagtugon ng iyong app sa input ng user, na nasa milliseconds, sa pinakaabalang 5 segundong window ng pag-load ng page. Kung mas mataas sa 50 ms ang iyong latency, maaaring ituring ng mga user na mabagal ang app mo. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Tinatayang Latency ng Input"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Minamarkahan ng First Contentful Paint ang oras ng pag-paint sa unang text o larawan. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"First Contentful Paint"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Minamarkahan ng First CPU Idle ang unang beses kung kailan hindi abala ang pangunahing thread ng page at maaari itong mangasiwa ng input. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"First CPU Idle"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Sinusukat ng First Meaningful Paint ang bilis ng pagpapakita sa pangunahing content ng isang page. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"First Meaningful Paint"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Minamarkahan ng Interactive ang oras kung kailan ganap na naging interactive ang page. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Time to Interactive"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Ipinapakita ng Speed Index ang bilis ng pag-populate ng mga content ng isang page. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Speed Index"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Nagpapasimula ang mga pag-redirect ng mga karagdagang pagkaantala bago ma-load ang page. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Iwasan ang mga pag-redirect sa maraming page"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Tinutukoy ng Time To First Byte ang oras kung kailan nagpapadala ng tugon ang iyong server. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Inabot nang {timeInMs, number, milliseconds} ms ang root na dokumento"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Pabilisin ang pagtugon ng server (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Masyadong matagal ang pagtugon ng server (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Tagal"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Pangalan"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Oras ng Pagsisimula"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Uri"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Pag-isipang gumamit ng User Timing API sa iyong app para sukatin ang makatotohanang performance ng app mo sa mahahalagang karanasan ng user. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 timing ng user}one{# timing ng user}other{# na timing ng user}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Mga marka at sukat ng User Timing"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Pag-isipang magdagdag ng resource hint na preconnect o dns-prefetch para makapagtakda ng mga paunang koneksyon sa mahahalagang third-party na origin. [Matuto pa](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Mag-preconnect sa mga kinakailangang origin"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Pag-isipang gumamit ng <link rel=preload> para mabigyang-priyoridad ang pagkuha ng mga resource na kasalukuyang hinihiling, sa pag-load ng page, para sa ibang pagkakataon. [Matuto pa](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"I-preload ang mahahalagang kahilingan"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Higit pang impormasyon tungkol sa performance ng iyong application."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Mga Diagnostic"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Ang pinakamahalagang aspeto ng performance ay ang bilis ng pag-render ng mga pixel sa screen. Mahahalagang sukatan: First Contentful Paint, First Meaningful Paint"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Mga Pagpapahusay sa First Paint"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Maaaring mapabilis ng mga pag-optimize na ito ang pag-load ng iyong page."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Mga Pagkakataon"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Mga Sukatan"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Pagandahin ang pangkalahatang karanasan sa pag-load para bumilis ang pagtugon ng page at magamit ito kaagad. Mahahalagang sukatan: Time to Interactive, Speed Index"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Mga Pangkalahatang Pagpapahusay"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performance"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL ng Cache"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Laki (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Oras na Ginugol"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Maaaring Matipid (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Maaaring Matipid (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Maaaring makatipid ng {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Maaaring makatipid ng {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Ipakita ang mga pag-audit"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Unang Navigation"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximum na latency ng critical path:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Nagka-error!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Error sa ulat: walang impormasyon sa pag-audit"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Data ng Lab"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Ang pagsusuri ng [Lighthouse](https://developers.google.com/web/tools/lighthouse/) sa kasalukuyang page sa ginayang 3G. Tinatantya at maaaring mag-iba ang mga value."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Mga karagdagang item na manual na susuriin"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Hindi naaangkop"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Pagkakataon"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Tinatayang Matitipid"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Mga pumasang pag-audit"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Sukatan ng marka:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"May mga isyung nakakaapekto sa pagpapatakbong ito ng Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Tinataya lang at maaaring mag-iba ang mga value."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Mga Babala: "}};


},{}],51:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Les extensions Chrome ont eu un impact négatif sur les performances de chargement de la page. Essayez de contrôler la page en mode navigation privée ou depuis un profil Chrome sans extensions."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Évaluation des scripts"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Analyse des scripts"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Envisagez de réduire le temps consacré à l'analyse, la compilation et l'exécution de JS. La livraison de charges utiles JS plus petites peut vous aider. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Réduisez le temps d'exécution de JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Délai d'exécution de JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Les grandes images GIF sont inefficaces pour diffuser du contenu animé. Envisagez d'utiliser des vidéos MPEG4/WebM pour les animations et PNG/WebP pour les images statiques au lieu d'images GIF afin d'économiser des octets réseau. [En savoir plus](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Utilisez des formats vidéo pour le contenu animé"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Envisagez de charger des images masquées ou hors écran après le chargement de toutes les ressources essentielles afin de réduire le délai avant interactivité. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Différez le chargement des images hors écran"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Des ressources bloquent la première visualisation (first paint) de votre page. Envisagez de diffuser des feuilles JS/CSS essentielles en ligne et de différer la diffusion de toutes les feuilles JS/de style non essentielles. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Éliminez les ressources qui bloquent le rendu"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Les charges utiles des grands réseaux coûtent de l'argent réel aux utilisateurs et sont fortement corrélées aux délais de chargement interminables. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"La taille totale était de {totalBytes, number, bytes} Ko"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Évitez d'énormes charges utiles de réseau"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Éviter d'énormes charges utiles de réseau"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"La réduction des fichiers CSS peut réduire la taille des charges utiles de réseau. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Réduisez la taille des ressources CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"La minimisation des fichiers JavaScript peut réduire la taille des charges utiles et la durée d'analyse des scripts. [En savoir plus](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Réduisez la taille des ressources JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Supprimez les règles inutilisées des feuilles de style afin de réduire la quantité d'octets utilisés inutilement par l'activité réseau. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Différez le chargement des ressources CSS inutilisées"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Supprimez les ressources JavaScript inutilisées pour réduire la quantité d'octets consommés par l'activité réseau."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Supprimez les ressources JavaScript inutilisées"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Une longue durée de vie du cache peut accélérer les visites répétées sur votre page. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 ressource trouvée}one{# ressource trouvée}other{# ressources trouvées}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Diffusez des éléments statiques grâce à des règles de cache efficaces"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Utiliser des règles de cache efficaces sur les éléments statiques"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Les images optimisées se chargent plus rapidement et consomment moins de données mobiles. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Encodez les images de manière efficace"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Diffusez des images de taille appropriée afin d'économiser des données mobiles et réduire le temps de chargement. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Dimensionnez correctement les images"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Les ressources textuelles doivent être diffusées compressées (Gzip, Deflate ou Brotli) pour réduire le nombre total d'octets du réseau. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Activez la compression de texte"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Les formats d'image comme JPEG 2000, JPEG XR et WebP proposent souvent une meilleure compression que les formats PNG ou JPEG. Par conséquent, les téléchargements sont plus rapides et la consommation de données est réduite. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Diffusez des images aux formats nouvelle génération"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Les Chaînes de demandes critiques ci-dessous vous montrent quelles ressources sont chargées avec une priorité élevée. Envisagez de réduire la longueur des chaînes et la taille de téléchargement des ressources ou de reporter le téléchargement de ressources inutiles afin d'améliorer le chargement des pages. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 chaîne trouvée}one{# chaîne trouvée}other{# chaînes trouvées}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Réduisez la profondeur des demandes critiques"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Les ingénieurs en navigation recommandent que les pages contiennent moins de 1 500 nœuds de DOM environ. La zone d'écoute idéale est une profondeur d'arborescence inférieure à 32 éléments et contenant moins de 60 éléments enfant/parent. Un grand DOM peut accroître l'utilisation de la mémoire, entraîner de plus longs [calculs de style](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) et des [redispositions] coûteuses (https://developers.google.com/speed/articles/reflow). [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nœud}one{# nœud}other{# nœuds}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Évitez une taille excessive de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Profondeur maximum de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total des nœuds de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Éviter une taille excessive de DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Utilisez la fonction d'affichage de la police CSS afin que le texte soit visible par l'utilisateur pendant le chargement des polices Web. [En savoir plus](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Assurez-vous que le texte reste visible pendant le chargement des polices Web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"La totalité du texte reste visible pendant le chargement des polices Web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Catégorie"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Envisagez de réduire le temps consacré à l'analyse, la compilation et l'exécution de JavaScript. La livraison de charges utiles JavaScript plus petites peut vous aider."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Réduisez le travail du thread principal"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Réduire le travail du thread principal"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Le score ci-dessus est une estimation du temps en millisecondes que prend votre application pour réagir à l'intervention de l'utilisateur, pendant la fenêtre de pointe de 5 s de chargement de page. Si le temps de latence est supérieur à 50 ms, les utilisateurs peuvent percevoir votre application comme étant lente. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Estimation du temps de latence avant intervention"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"La statistique \"first contentful paint\" indique le moment où le premier texte ou la première image sont affichés. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"First Contentful Paint"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"La statistique \"Premier processeur inactif\" marque la première fois que le thread principal de la page est suffisamment silencieux pour gérer l'entrée. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Premier processeur inactif"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"La statistique \"Premier passage significatif\" mesure quand le contenu principal d'une page est visible. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Premier passage significatif"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"La statistique \"Temps avant interactivité\" indique quand la page est entièrement interactive. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Délai avant interactivité"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"L'indice de vitesse indique la rapidité avec laquelle le contenu d'une page est disponible. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indice de vitesse"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Les redirections entraînent des retards supplémentaires avant que la page ne puisse être chargée. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Évitez les redirections de page multiples"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"La valeur \"Délai avant premier octet\" (Time To First Byte) identifie l'heure à laquelle votre serveur envoie une réponse. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Le document racine a pris {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Réduisez les délais de réponse du serveur (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Les délais de réponse du serveur sont faibles (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Durée"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nom"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Heure de début"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Type"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Envisagez de doter votre application de l'API User Timing pour mesurer les performances réelles de votre application lors d'expériences utilisateur clés. [En savoir plus](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{[=1]1 temps utilisateur}one{# temps utilisateur}other{# temps utilisateur}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Marques et mesures du temps utilisateur"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Envisagez d'ajouter des indices de ressources de préconnexion ou dns-prefetch pour établir les premières connexions avec des origines tierces importantes. [En savoir plus](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Connectez-vous à l'avance aux origines souhaitées"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Envisagez d'utiliser <link rel=preload> pour hiérarchiser la récupération des ressources actuellement requises pour le chargement ultérieur de la page. [En savoir plus](https://developers.google.com/web/ntools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Préchargez les demandes clés"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Plus d'informations sur les performances de votre application."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostics"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"L'aspect le plus essentiel des performances est la rapidité avec laquelle les pixels sont affichés à l'écran. Statistiques clés : First Contentful Paint, First Meaningful Paint"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Amélioration de First Paint"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Ces optimisations peuvent accélérer le chargement de votre page."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Opportunités"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Statistiques"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Améliorez l'expérience globale de chargement, afin que la page soit réactive et disponible dès que possible. Statistiques clés : délai avant interactivité, indice de vitesse"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Améliorations générales"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performances"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache de la valeur TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Taille (Ko)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Temps passé"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Économies potentielles (Ko)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Économies potentielles (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Économies potentielles de {wastedBytes, number, bytes} Ko"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Économies potentielles de {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Afficher les audits"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navigation initiale"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latence de chemin d'accès critique maximale :"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Erreur"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Erreur de rapport : pas d'information d'audit"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Données de test"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analyse [Lighthouse](https://developers.google.com/web/tools/lighthouse/) de la page actuelle sur 3G émulée. Les valeurs sont des estimations et peuvent varier."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Autres éléments à vérifier manuellement"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Non applicable"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Opportunité"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Estimation des économies"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Audits réussis"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Échelle de score :"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Cette exécution de Lighthouse a rencontré des problèmes :"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Les valeurs sont estimées et peuvent varier."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Avertissements : "}};


},{}],52:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"תוספים ל-Chrome השפיעו לרעה על ביצועי הטעינה של הדף הזה. כדאי לבדוק את הדף במצב גלישה בסתר או באמצעות פרופיל Chrome שאינו כולל תוספים."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"הערכת סקריפט"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"ניתוח סקריפט"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"סה\"כ"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"כדאי לשקול את האפשרות לקצר את הזמן הדרוש לניתוח, הידור וביצוע JS. לשם כך כדאי להשתמש במטענים ייעודיים (payload) קטנים יותר של JS. [מידע נוסף] (https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"יש לקצר את זמן הביצוע של JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"זמן ביצוע של JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"קובצי GIF גדולים לא מעבירים תוכן אנימציה בצורה יעילה. כדי לצמצם את מספר הבייטים שמועברים ברשת, במקום קובצי GIF כדאי לשקול את האפשרות להשתמש בסרטוני MPEG4/WebM בשביל אנימציות ובקובצי PNG/WebP בשביל תמונות סטטיות. [מידע נוסף](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"יש להשתמש בפורמטים של וידאו כדי להציג תוכן אנימציה"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"כדי לקצר את הזמן עד לאינטראקטיביות (Time to Interactive) כדאי לשקול את האפשרות לבצע טעינה הדרגתית של תוכן שאינו מופיע במסך ושל תמונות מוסתרות, אחרי שכל המשאבים הקריטיים סיימו להיטען. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"יש לעכב טעינה של תמונות שאינן מופיעות במסך"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"משאבים חוסמים את העיבוד הראשון (First Paint) בדף. כדאי לשקול את האפשרות לספק תוכן JS/CSS קריטי באופן מוטבע ולעכב את כל תוכן ה-JS/סגנונות שאינם קריטיים. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"יש להימנע ממשאבים שחוסמים עיבוד"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"מטענים ייעודיים (payload) בנפח גדול המועברים ברשת עולים למשתמשים כסף ולרוב מאריכים את זמני הטעינה. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"הגודל הכולל היה {totalBytes, number, bytes} ‏KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"יש להימנע מהעברה של מטענים ייעודיים ענקיים (payload) ברשת"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"נמנע מהעברה של מטענים ייעודיים ענקיים (payload) ברשת"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"הקטנת קובצי CSS יכולה לצמצם את הגודל של מטענים ייעודיים (payload) שמועברים ברשת. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"יש להקטין קובצי CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"הקטנת קובצי JavaScript יכולה לצמצם את המטען הייעודי (payload) ולקצר את משך הזמן הנדרש לניתוח סקריפט. [מידע נוסף](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"יש לקצר את קוד JavaScript למינימום ההכרחי"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"כדי לצמצם צריכה לא נחוצה של בייטים בפעילות ברשת, יש להסיר מגיליונות סגנון כללים שאינם בשימוש. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"יש לעכב טעינה של CSS שאינו בשימוש"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"יש להסיר JavaScript שאינו בשימוש כדי לצמצם צריכת בייטים על-ידי פעילות ברשת."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"יש להסיר JavaScript שאינו בשימוש"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"משך חיים ארוך של מטמון יכול לזרז את הביקורים החוזרים בדף. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{נמצא משאב אחד}two{נמצאו # משאבים}many{נמצאו # משאבים}other{נמצאו # משאבים}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"יש להציג נכסים סטטיים בעזרת מדיניות מטמון יעילה"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"יש להשתמש במדיניות מטמון יעילה בנכסים סטטיים"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"תמונות שעברו אופטימיזציה נטענות מהר יותר וצורכות פחות נתונים בחבילת הגלישה. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"יש לקודד תמונות בצורה יעילה"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"הצגת תמונות שהגודל שלהן הוגדר בצורה נכונה חוסכת צריכת נתונים בחבילת הגלישה ומקצרת את זמן הטעינה. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"יש להגדיר את גודל התמונות בצורה נכונה"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"הצגת משאבים המבוססים על טקסט צריכה להתבצע עם דחיסה (gzip‏, deflate או brotli) כדי לצמצם את סך הבייטים שמועברים ברשת. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"יש להפעיל דחיסת טקסט"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"לעתים קרובות, פורמטים של תמונות כמו JPEG 2000‏, JPEG XR ו-WebP מספקים דחיסה טובה יותר מאשר PNG או JPEG. שימוש בפורמטים האלה מקצר את זמן ההורדות ומצמצם את צריכת הנתונים. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"יש להציג תמונות בפורמטים עדכניים"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"בקטע 'שרשראות בקשה קריטיות' שבהמשך מוצגים המשאבים שנטענים עם עדיפות גבוהה. כדי לשפר את מהירות טעינת הדף, מומלץ לקצר את השרשראות, להקטין את גודל ההורדה של משאבים או לעכב את ההורדה של משאבים לא נחוצים. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{נמצאה שרשרת אחת}two{נמצאו # שרשראות}many{נמצאו # שרשראות}other{נמצאו # שרשראות}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"יש לצמצם את העומק של בקשות קריטיות"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"מפתחי דפדפנים ממליצים שדפים יכילו פחות מכ-1,500 צומתי DOM. המצב האופטימלי הוא עץ בעומק של פחות מ-32 אלמנטים ופחות מ-60 אלמנטים ברמת צאצא/אב. DOM גדול יכול להגדיל את צריכת הזיכרון, להאריך [חישובי סגנון](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) ולגרום לזרימות חוזרות של פריסה שצורכות נתונים רבים [layout reflows](https://developers.google.com/speed/articles/reflow). [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{צומת אחד}two{# צמתים}many{# צמתים}other{# צמתים}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"יש להימנע מ-DOM גדול מדי"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"עומק DOM מרבי"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"המספר הכולל של צומתי DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"נמנע מ-DOM גדול מדי"},

"lighthouse-core/audits/font-display.js | description":{
"message":"שימוש בתכונת תצוגת הגופן של CSS מבטיח שהטקסט מוצג למשתמש בזמן טעינה של webfonts. [מידע נוסף](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"יש לוודא שטקסט ממשיך להופיע במהלך טעינת webfont"},

"lighthouse-core/audits/font-display.js | title":{
"message":"כל הטקסט ממשיך להופיע במהלך טעינות של webfont"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"קטגוריה"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"כדאי לשקול את האפשרות לקצר את הזמן הדרוש לניתוח, הידור וביצוע JS. לשם כך כדאי להשתמש במטענים ייעודיים (payload) קטנים יותר של JS."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"צריך לצמצם את העבודה על התהליכון הראשי"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"מצמצם את העבודה על התהליכון הראשי"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"הערך שלמעלה הוא אומדן של משך הזמן הנדרש לאפליקציה כדי להגיב לקלט של משתמש. הערך מצוין באלפיות שנייה ומתייחס ל-5 השניות העמוסות ביותר בטעינת דף. אם זמן האחזור ארוך מ-50 אלפיות שנייה, המשתמשים עלולים להגיע למסקנה שהאפליקציה איטית. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"אומדן זמן האחזור של קלט"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"המדד 'הצגת תוכן ראשוני' (FCP) מציין את הזמן שבו הטקסט או התמונה הראשונים מוצגים. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"הצגת התוכן הראשוני"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"הערך 'מצב ראשון של חוסר פעילות ב-CPU' ‏(First CPU Idle) מציין את הפעם הראשונה שבה התהליכון הראשי של הדף פנוי מספיק בשביל להגיב לקלט. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"מצב ראשון של חוסר פעילות ב-CPU"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"הערך 'הצגת התוכן העיקרי' מציין מתי התוכן העיקרי של הדף מוצג. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"הצגת התוכן העיקרי"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"'אינטראקטיבי' מציין את הזמן שבו הדף הופך להיות לגמרי אינטראקטיבי. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"זמן עד לאינטראקטיביות"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"מדד המהירות (Speed Index) מראה באיזו מהירות מתמלא התוכן המוצג בדף. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"מדד מהירות (Speed Index)"},

"lighthouse-core/audits/redirects.js | description":{
"message":"הפניות אוטומטיות מוסיפות עיכובים לטעינת הדף. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"יש להימנע מהפניות אוטומטיות מרובות"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"'זמן עד בייט ראשון' (Time To First Byte) הוא פרק הזמן שחולף עד שהשרת שולח תגובה. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"טעינת מסמך השורש ארכה {timeInMs, number, milliseconds} אלפיות שנייה"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"יש לקצר את זמני התגובה של השרת (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"זמני התגובה של השרת ארוכים (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"משך זמן"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"שם"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"שעת התחלה"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"סוג"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"כדי למדוד את ביצועי האפליקציה בפועל במהלך חוויות משתמש חשובות, מומלץ להוסיף לאפליקציה את User Timing API. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{תזמון משתמש אחד}two{# תזמוני משתמש}many{# תזמוני משתמש}other{# תזמוני משתמש}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"סימונים ומדידות של User Timing"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"כדאי לשקול את האפשרות להוסיף את רמזי המשאבים preconnect או dns-prefetch כדי ליצור מראש קישורים אל מקורות חשובים של צד שלישי. [מידע נוסף](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"יש להתחבר מראש למקורות נדרשים"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"כדאי לשקול את האפשרות להשתמש ב-<link rel=preload> כדי לקבוע את סדר העדיפויות של אחזור משאבים שנדרשים בשלב מאוחר יותר של טעינת הדף. [מידע נוסף](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"יש לטעון מראש בקשות עיקריות"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"מידע נוסף לגבי ביצועי האפליקציה."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"ניתוחים"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"היבט הביצועים הקריטי ביותר הוא מהירות העיבוד של פיקסלים במסך. ערכי מפתח: הצגת התוכן הראשוני, הצגת התוכן העיקרי"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"שיפורים בעיבוד ראשון"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"האופטימיזציות האלה יכולות לקצר את זמני טעינת הדף."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"הזדמנויות"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"ערכים"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"צריך לשפר את חוויית הטעינה הכללית, כך שהדף יגיב ויהיה מוכן לשימוש במהירות האפשרית. ערכי מפתח: זמן עד לאינטראקטיביות (Time to Interactive), מדד מהירות (Speed Index)"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"סך השיפורים"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"ביצועים"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"אורך חיים (TTL) של מטמון"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"גודל (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"משך הזמן שנדרש"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"כתובת אתר"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"חיסכון פוטנציאלי (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"פוטנציאל חיסכון (אלפיות שנייה)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"חיסכון פוטנציאלי של {wastedBytes, number, bytes} ‏KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"חיסכון פוטנציאלי של {wastedMs, number, milliseconds} אלפיות שנייה"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} אלפיות שנייה"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} שניות"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"הצגת בדיקות"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"ניווט התחלתי"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"זמן אחזור מקסימלי של נתיב קריטי:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"שגיאה!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"שגיאה בדוח: אין מידע על הבדיקה"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"נתוני בדיקה"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"ניתוח הדף הנוכחי בהדמיית 3G באמצעות [Lighthouse]‏(https://developers.google.com/web/tools/lighthouse/). הערכים הם אומדנים, והם עשויים להשתנות."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"פריטים נוספים שיש לבדוק באופן ידני"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"לא רלוונטי"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"הזדמנות"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"אומדן חיסכון"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"בדיקות עם ציון 'עובר'"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"סולם תוצאות:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"היו בעיות שהשפיעו על ההרצה הזו של Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"הערכים מהווים אומדן והם עשויים להשתנות."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"אזהרות: "}};


},{}],53:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome एक्सटेंशन ने इस पेज के लोड परफ़ॉर्मेंस पर नकारात्मक रूप से असर डाला है. 'गुप्त मोड' में या बिना किसी एक्सटेंशन के Chrome प्रोफ़ाइल से पेज ऑडिट करके देखें."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"स्क्रिप्ट मूल्यांकन"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"स्क्रिप्ट पार्स"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"कुल"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"JS को पार्स करने, कंपाइल करने और एक्ज़ीक्यूट करने में लगने वाला समय कम करने पर विचार करें. आप पाएंगे कि इसके ज़रिए छोटे-छोटे JS पेलोड डिलीवर करने में मदद मिलती है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"JavaScript क्रियान्वयन समय कम करें"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript क्रियान्वयन समय"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"बड़े जीआईएफ़ ऐनिमेटेड सामग्री डिलीवर करने में नाकाफ़ी होते हैं. नेटवर्क बाइट बचाने के इरादे से जीआईएफ़ का इस्तेमाल करने के बजाय, ऐनिमेशन के लिए MPEG4/WebM वीडियो और स्थिर इमेज के लिए PNG/WebP का इस्तेमाल करने पर विचार करें. [ज़्यादा जानें](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"ऐनिमेट की गई सामग्री के लिए वीडियो फ़ॉर्मेट का इस्तेमाल करें"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"इंटरेक्टिव में लगने वाला समय कम करने के लिए, सभी अहम संसाधन लोड हो जाने के बाद ऑफ़स्क्रीन और छिपी हुई इमेज को धीरे-धीरे लोड करने पर विचार करें. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"ऑफ़स्क्रीन इमेज टालें"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"संसाधन आपके पेज के पहले पेंट को ब्लॉक कर रहे हैं. अहम JS/CSS इनलाइन वितरित करने और सभी गैर-अहम JS/शैलियों को टालने पर विचार करें. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"रेंडर ब्लॉक करने वाले संसाधनों को खत्म करें"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"बड़े नेटवर्क वाले पेलोड के लिए उपयोगकर्ताओं को ज़्यादा रकम खर्च करनी पड़ती है और उन पर लोड होने में ज़्यादा समय भी लगता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"कुल आकार {totalBytes, number, bytes} केबी था"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"बहुत ज़्यादा नेटवर्क पेलोड से बचें"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"भारी नेटवर्क पेलोड से बचाता है"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS फ़ाइलों का आकार कम करने से नेटवर्क पेलोड आकार कम किए जा सकते हैं. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSS कम करें"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"JavaScript फ़ाइलों को छोटा करने से पेलोड का आकार और स्क्रिप्ट पार्स करने का समय कम हो सकता है. [ज़्यादा जानें](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScript का आकार कम करें"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"नेटवर्क गतिविधि में खर्च होने वाले गैर-ज़रूरी बाइट कम करने के लिए स्टाइल-शीट से इस्तेमाल नहीं किए गए नियमों को हटाएं. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"इस्तेमाल नहीं किए गए CSS को टालें"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"नेटवर्क गतिविधि में खर्च होने वाले बाइट में कमी करने के लिए इस्तेमाल नहीं किया गया JavaScript हटाएं."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"इस्तेमाल नहीं किया गया JavaScript हटाएं"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"लंबे कैश लाइफ़टाइम से आपके पेज पर दोहराए जाने वाले विज़िट की गति बढ़ सकती है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 संसाधन मिला}one{# संसाधन मिले}other{# संसाधन मिले}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"कुशल कैश नीति के साथ स्थिर एसेट ऑफ़र करें"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"स्थिर एसेट पर कुशल कैश नीति का इस्तेमाल करता है"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"ऑप्टिमाइज़ की गई इमेज तेज़ी से लोड होती हैं और इसमें कम सेल्युलर डेटा खर्च होता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"इमेज को कुशलता से एन्कोड करें"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"ऐसी इमेज ऑफ़र करें जिनका आकार सही हो ताकि सेल्युलर डेटा बचाया जा सके और लोड समय को बेहतर बनाया जा सके. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"सही तरीके के आकार वाली इमेज"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"कुल नेटवर्क बाइट को कम से कम करने के लिए, लेख आधारित संसाधन कंप्रेशन (gzip, deflate या brotli) के साथ ऑफ़र किए जाने चाहिए. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"लेख कंप्रेशन चालू करें"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000, JPEG XR और WebP जैसे इमेज फ़ॉर्मेट में अक्सर PNG या JPEG के मुकाबले बेहतर कंप्रेशन मिलता है, जिसका मतलब है कि डाउनलोड तेज़ी से होते हैं और इनमें कम डेटा खर्च होता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"इमेज अगली जेनरेशन के फ़ॉर्मेट में ऑफ़र करें"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"नीचे दी गई अहम अनुरोध शृंखलाएं आपको वे संसाधन दिखाती हैं जो उच्च प्राथमिकता से भरपूर हैं. शृंखलाओं की अवधि कम करने पर विचार करें, जिससे संसाधनों का डाउनलोड आकार कम हो जाएगा या पेज लोड को बेहतर बनाने के लिए गैर-ज़रूरी संसाधनों का डाउनलोड टल जाएगा. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 शृंखला मिली}one{# शृंखलाएं मिलीं}other{# शृंखलाएं मिलीं}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"अहम अनुरोधों की गहराई कम से कम करें"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"ब्राउज़र इंजीनियर सुझाव देते हैं कि पेज में ~1,500 से कम DOM नोड होने चाहिए. सबसे सही आंकड़ा है < 32 एलीमेंट वाली ट्री गहराई और 60 से कम चिल्ड्रन/पेरेंट एलीमेंट. ज़्यादा बड़े DOM से मेमोरी का इस्तेमाल बढ़ सकता है, जिससे ज़्यादा लंबे [स्टाइल कैल्युलेशन](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) हो सकते हैं और इनसे महंगे [लेआउट रीफ़्लो](https://developers.google.com/speed/articles/reflow) बन सकते हैं. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 नोड}one{# नोड}other{# नोड}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"बहुत ज़्यादा बड़े DOM आकार से बचें"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"सबसे ज़्यादा DOM गहराई"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"कुल DOM नोड"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"बहुत ज़्यादा बड़े DOM आकार से बचता है"},

"lighthouse-core/audits/font-display.js | description":{
"message":"यह पक्का करने के लिए फ़ॉन्ट-डिसप्ले CSS फ़ीचर का फ़ायदा उठाएं कि वेबफ़ॉन्ट लोड होने के दौरान उपयोगकर्ता को लेख दिखाई देता रहे. [ज़्यादा जानें](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"पक्का करें कि वेबफ़ॉन्ट लोड होने के दौरान लेख दिखाई देता रहे"},

"lighthouse-core/audits/font-display.js | title":{
"message":"वेबफ़ॉन्ट लोड होने के दौरान सभी लेख दिखाई देते रहते हैं"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"श्रेणी"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"JS को पार्स करने, कंपाइल करने और एक्ज़ीक्यूट करने में लगने वाला समय कम करने पर विचार करें. आप देखेंगे कि इसके ज़रिए छोटे-छोटे JS पेलोड डिलीवर करने में मदद मिलती है."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"मुख्य थ्रेड के काम को कम करना"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"मुख्य थ्रेड के काम को कम करता है"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"ऊपर दिया गया स्कोर एक अनुमान है कि पेज लोड होने की सबसे व्यस्त 5 सेकंड की विंडो में आपके ऐप्लिकेशन को उपयोगकर्ता इनपुट का जवाब देने में, मिलीसेकंड में कितना समय लगेगा. अगर आपकी प्रतीक्षा अवधि 60 मिलीसेकंड से ज़्यादा है, तो उपयोगकर्ता आपके ऐप्लिकेशन को धीमा मान सकते हैं. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"अनुमानित इनपुट प्रतीक्षा समय"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"फ़र्स्ट कॉन्टेंटफ़ुल पेंट वह समय चिह्नित करता है जब पहले लेख या इमेज को पेंट किया गया हो. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"उपयोगी सामग्री वाला पहला पेंट"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"इस्तेमाल में नहीं पहला सीपीयू (CPU), वह पहला समय चिह्नित करता है जब पेज का मुख्य थ्रेड इनपुट को संभालने के लिए काफ़ी होता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"पहला सीपीयू (CPU) इस्तेमाल में नहीं"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"पहला सार्थक पेंट उस समय का मापन करता है जब किसी पेज की शुरुआती सामग्री दिखाई देती है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"पहला सार्थक पेंट"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"इंटरेक्टिव वह समय चिह्नित करता है जब पेज पूरी तरह इंटरेक्टिव हो जाता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"इंटरएक्टिव में लगने वाला समय"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"गति इंडेक्स दिखाता है कि किसी पेज की सामग्री विज़ुअल रूप से कितनी तेज़ी से पॉपुलेट होती हैं. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"गति इंडेक्स"},

"lighthouse-core/audits/redirects.js | description":{
"message":"'रीडायरेक्ट' पेज लोड किए जाने से पहले और ज़्यादा प्रतीक्षा जोड़ता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"एक से ज़्यादा पेज रीडायरेक्ट करने से बचें"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"पहली बाइट का समय, उस समय की पहचान करता है जब आपका सर्वर कोई जवाब भेजता है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"रूट दस्तावेज़ को {timeInMs, number, milliseconds} मिलीसेकंड लगे"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"सर्वर प्रतिक्रिया समय घटाएं (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"सर्वर के जवाब देने के समय धीमे हैं (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"कुल समय"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"नाम"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"शुरुआत का समय"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"प्रकार"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"प्रमुख उपयोगकर्ता अनुभवों के दौरान, असली दुनिया के माप तैयार करने के लिए अपने ऐप्लिकेशन को 'उपयोगकर्ता समय API (एपीआई)' के ज़रिए तैयार करने पर विचार करें. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 उपयोगकर्ता समय}one{# उपयोगकर्ता समय}other{# उपयोगकर्ता समय}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"उपयोगकर्ता समय अंक और मापन"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"तीसरे पक्ष के अहम मूल से जल्दी कनेक्शन बनाने के लिए प्री-कनेक्ट या dns-प्रीफ़ेच संसाधन संकेत जोड़ने पर विचार करें. [ज़्यादा जानें](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"ज़रूरी मूल से प्री-कनेक्ट करें"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"ऐसे संसाधन फ़ेच करने को प्राथमिकता देने के लिए <link rel=preload> का इस्तेमाल करने पर विचार करें जिनका फ़िलहाल पेज लोड में बाद में अनुरोध किया गया है. [ज़्यादा जानें](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"प्रमुख अनुरोधों को पहले से लोड करें"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"आपके ऐप्लिकेशन के परफ़ॉर्मेंस के बारे में ज़्यादा जानकारी."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"निदान"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"परफ़ॉर्मेंस का सबसे अहम पहलू यह है कि स्क्रीन पर पिक्सेल कितनी तेज़ी से रेंडर होते हैं. प्रमुख मेट्रिक: उपयोगी सामग्री वाला पहला पेंट, पहला उपयोगी पेंट"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"पहले पेंट के सुधार"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"इन ऑप्टिमाइज़ेशन से आपका पेज लोड होने की गति बढ़ सकती है."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"अवसर"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"मेट्रिक"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"पूरे लोडिंग अनुभव को बेहतर बनाएं ताकि पेज जवाब दे और जल्दी से जल्दी इस्तेमाल के लिए तैयार हो जाए. प्रमुख मेट्रिक: इंटरेक्टिव में लगने वाला समय, गति इंडेक्स"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"समस्त सुधार"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"परफ़ॉर्मेंस"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"कैश TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"आकार (केबी)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"बिताया गया समय"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"यूआरएल"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"हो सकने वाली बचत (केबी)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"हो सकने वाली बचत (‍मिली सेकंड)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"{wastedBytes, number, bytes} केबी की हो सकने वाली बचत"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"{wastedMs, number, milliseconds} मिलीसेकंड की हो सकने वाली बचत"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} मिलीसेकंड"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} सेकंड"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"ऑडिट दिखाएं"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"शुरुआती नेविगेशन"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"पाथ का ज़्यादा से ज़्यादा अहम प्रतीक्षा समय:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"गड़बड़ी!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"गड़बड़ी की रिपोर्ट करें: कोई ऑडिट जानकारी नहीं"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"किसी नई या दुबारा जाँची जाने वाली ऐप्लिकेशन के लिए तैयार किया गया डेटा"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"एम्युलेट किए गए 3G पर मौजूदा पेज का [लाइटहाउस](https://developers.google.com/web/tools/lighthouse/) विश्लेषण. मान अनुमानित हैं और इनमें अंतर हो सकता है."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"मैन्युअल रूप से देखे जाने वाले और ज़्यादा आइटम"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"लागू नहीं"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"अवसर"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"अनुमानित बचत"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"पास हुए ऑडिट"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"स्कोर स्केल:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"कुछ समस्याएं आने के कारण Lighthouse के इस रन पर असर पड़ा है:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"मान अनुमानित हैं और इनमें अंतर हो सकता है."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"चेतावनियां: "}};


},{}],54:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chromeova proširenja negativno su utjecala na izvedbu učitavanja ove stranice. Pokušajte pregledati stranicu anonimno ili putem Chromeovog profila bez proširenja."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Procjena skripte"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Raščlamba skripte"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Ukupno"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Savjetujemo vam da skratite vrijeme potrebno za raščlambu, kompiliranje i izvršavanje JS-a. Isporuka manjih JS-ova mogla bi vam pomoći da to postignete. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Skratite vrijeme izvršavanja JavaScripta"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Vrijeme izvršavanja JavaScripta"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Veliki GIF-ovi nisu učinkoviti za isporuku animiranog sadržaja. Savjetujemo vam da umjesto GIF-a upotrebljavate MPEG4/WebM videozapise za animacije i PNG/WebP za statične slike da biste smanjili količinu mrežnih bajtova. [Saznajte više](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Upotrebljavajte formate videozapisa za animirani sadržaj"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Za slike izvan zaslona i skrivene slike savjetujemo odgođeno učitavanje nakon što se učitaju svi kritični resursi da biste skratili vrijeme do interaktivnosti. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Odgodite slike izvan zaslona"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resursi blokiraju prvo bojenje stranice. Savjetujemo vam da kritičan JS/CSS isporučite umetnuto i da odgodite sve nekritične JS-ove/stilove. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Uklonite resurse koji blokiraju generiranje"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Veliki mrežni resursi korisnicima uzrokuju stvarne novčane troškove i usko koreliraju s dugim vremenom učitavanja. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Ukupna veličina bila je {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Izbjegavajte ogromne mrežne resurse"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Izbjegava ogromne mrežne resurse"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Umanjenjem CSS datoteka mogu se smanjiti veličine mrežnih resursa. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Umanjite CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Umanjenjem JavaScript datoteka mogu se smanjiti veličine resursa i skratiti vrijeme raščlambe skripte. [Saznajte više](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Umanjite JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Iz stilskih tablica uklonite nekorištena pravila da biste smanjili nepotrebnu potrošnju bajtova u mrežnoj aktivnosti. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Odgodite nekorišteni CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Uklonite JavaScript koji se ne koristi da biste smanjili potrošnju bajtova u mrežnoj aktivnosti."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Uklonite nekorišteni JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Dugotrajno predmemoriranje može ubrzati ponovljene posjete vašoj stranici. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Pronađen je jedan resurs}one{Pronađen je # resurs}few{Pronađena su # resursa}other{Pronađeno je # resursa}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Poslužite statične elemente s pravilima učinkovitog predmemoriranja"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Upotrebljava pravila učinkovitog predmemoriranja za statične elemente"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimizirane slike učitavaju se brže i troše manje mobilnih podataka. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Kodirajte slike učinkovito"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Poslužite slike prikladnih veličina da biste uštedjeli mobilne podatke i poboljšali vrijeme učitavanja. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Postavite slike u odgovarajućoj veličini"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Tekstualni resursi trebaju se posluživati s kompresijom (gzip, deflate ili brotli) radi minimiziranja ukupne količine mrežnih bajtova. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Omogućite sažimanje teksta"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formati slike kao što su JPEG 2000, JPEG XR i WebP često pružaju bolje sažimanje nego PNG ili JPEG, što znači brža preuzimanja i manju potrošnju podataka. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Poslužite slike u modernim formatima"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Lanci kritičkih zahtjeva u nastavku prikazuju koji se resursi učitavaju s visokim prioritetom. Savjetujemo vam da skratite duljinu lanaca, smanjite veličinu resursa za preuzimanje ili odgodite preuzimanje resursa koji nisu nužni kako biste poboljšali učitavanje stranice. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Pronađen je jedan lanac}one{Pronađen je # lanac}few{Pronađena su # lanca}other{Pronađeno je # lanaca}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimizirajte dubinu kritičnih zahtjeva"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Inženjeri preglednika preporučuju da stranice sadrže manje od ~1500 čvorova DOM-a. Idealno je da je dubina stabla manja od 32 elementa i da ima manje od 60 elemenata podređenih/nadređenih jedinica. Veliki DOM može pojačati upotrebu memorije, uzrokovati dulje [izračune stilova](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) i proizvesti zahtjevna [preoblikovanja izgleda](https://developers.google.com/speed/articles/reflow). [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{Jedan čvor}one{# čvor}few{# čvora}other{# čvorova}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Izbjegavajte pretjeranu veličinu DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimalna dubina DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Ukupan broj čvorova DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Izbjegava pretjeranu veličinu DOM-a"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Iskoristite CSS značajku za prikaz fontova kako bi tekst bio vidljiv korisnicima dok se web-fontovi učitavaju. [Saznajte više](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Neka tekst ostaje vidljiv tijekom učitavanja web-fontova"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Sav tekst ostaje vidljiv tijekom učitavanja web-fontova"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorija"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Savjetujemo vam da skratite vrijeme potrebno za raščlambu, kompiliranje i izvršavanje JS-a. Isporuka manjih JS-ova mogla bi vam pomoći da to postignete."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimizirajte rad glavne niti"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimizira rad glavne niti"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Prethodni je rezultat procjena vremena koje je potrebno da vaša aplikacija reagira na korisnički unos, u milisekundama, tijekom najintenzivnijih pet sekundi učitavanja stranice. Ako je latencija viša od 50 ms, korisnici mogu doživjeti vašu aplikaciju kao usporenu. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Procijenjena latencija unosa"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Prvo renderiranje sadržaja označava vrijeme renderiranja prvog teksta ili slike. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Prvo bojenje sadržaja"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Prvi procesor u mirovanju označava prvi trenutak u kojem je glavna nit stranice dovoljno neopterećena da bi obradila unos. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Prvi procesor u mirovanju"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Prvo smisleno bojenje mjeri kada je vidljiv primarni sadržaj stranice. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Prvo smisleno bojenje"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktivnost označava vrijeme u kojem stranica postaje potpuno interaktivna. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Vrijeme do interaktivnosti"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Indeks brzine prikazuje koliko se brzo sadržaj stranice vidljivo popunjava. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indeks brzine"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Preusmjeravanja uvode dodatna kašnjenja prije nego što se stranica može učitati. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Izbjegavajte višestruka preusmjeravanja stranica"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Vrijeme do prvog bajta navodi vrijeme u koje poslužitelj šalje odgovor. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Za korijenski dokument bilo je potrebno {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Skratite vremena odgovora poslužitelja (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Poslužitelj odgovara sporo (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Trajanje"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Naziv"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Vrijeme početka"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Vrsta"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Savjetujemo vam da na aplikaciju primijenite API za praćenje korisničkog vremena radi mjerenja izvedbe aplikacije u stvarnom vremenu tijekom važnih korisničkih doživljaja. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{Jedno praćenje korisničkog vremena}one{# praćenje korisničkog vremena}few{# praćenja korisničkog vremena}other{# praćenja korisničkog vremena}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Oznake i izmjere Praćenja korisničkog vremena"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Savjetujemo vam da dodate nagovještaje resursa za rano povezivanje ili prethodno dohvaćanje DNS-a radi uspostavljanja ranih veza s važnim izvorima trećih strana. [Saznajte više](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Rano se povežite s potrebnim izvorima"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Savjetujemo vam da koristite <link rel=preload> da biste dali prednost dohvaćanju resursa koji se trenutačno traže kasnije u učitavanju stranice. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Unaprijed učitajte ključne zahtjeve"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Više informacija o izvedbi vaše aplikacije."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Dijagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Najkritičniji je aspekt izvedbe brzina kojom se pikseli generiraju na zaslonu. Ključni mjerni podaci: Prvo bojenje sadržaja, Prvo smisleno bojenje"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Poboljšanja prvog bojenja"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Ove optimizacije mogu ubrzati učitavanje stranice."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Prilike"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Mjerni podaci"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Poboljšajte općeniti doživljaj učitavanja tako da stranica bude responzivna i spremna za upotrebu što je prije moguće. Ključni mjerni podaci: Vrijeme do interaktivnosti, Indeks brzine"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Općenita poboljšanja"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Izvedba"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL predmemoriranja"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Veličina (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Utrošeno vrijeme"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potencijalna ušteda (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potencijalna ušteda (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potencijalna ušteda {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potencijalna ušteda {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Prikažite preglede"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Početna navigacija"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksimalna latencija kritičkog puta:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Pogreška!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Pogreška izvješća: nema podataka o pregledu"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratorijski podaci"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analiza trenutačne stranice na emuliranoj 3G mreži. Vrijednosti su procijenjene i mogu varirati."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Dodatne stavke za ručnu provjeru"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nije primjenjivo"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Prilika"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Procijenjena ušteda"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Uspješni pregledi"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Ljestvica rezultata:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Na ovo izvođenje Lighthousea utjecale su neke poteškoće:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Vrijednosti se procjenjuju i mogu se razlikovati."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Upozorenja: "}};


},{}],55:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Egyes Chrome-bővítmények kedvezőtlenül befolyásolták az oldal betöltési teljesítményét. Próbálkozzon az oldal inkognitómódban vagy bővítmények nélküli Chrome-profilból történő ellenőrzésével."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Szkriptértékelés"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Szkriptelemzés"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Összes"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Érdemes csökkenteni a JS elemzésére, összeállítására és végrehajtására fordított időt. Ebben segítségére lehet a kisebb JS-hasznosadat-forgalom. [További információ](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Csökkentse a JavaScript végrehajtási idejét"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript végrehajtási ideje"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"A nagy méretű GIF-ek nem megfelelők az animált tartalmak megjelenítéséhez. Érdemes MPEG4/WebM formátumú videókat használni az animációkhoz, illetve a PNG/WebP formátumot a statikus képekhez a GIF-ek helyett, hiszen így csökkenteni tudja a hálózati adatforgalmat. [További információ](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)."},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Használjon videoformátumot az animált tartalmakhoz"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Vegye fontolóra a képernyőn kívüli és a rejtett képek késleltetett, a kritikus erőforrások betöltődésének végét követő betöltését, az interaktivitásig tartó idő csökkentése érdekében. [További információ](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Késleltesse a képernyőn kívüli képek betöltését"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Az erőforrások blokkolják az oldal első leképezését. Fontolja meg a kritikus JS/CSS beillesztését, továbbá az összes nem kritikus JS/stílus késleltetését. [További információ](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Távolítsa el a megjelenítést gátló erőforrásokat"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"A nagy hálózati terhelés valódi költséggel jár a felhasználóknak, és jelentősen megnöveli a betöltési időt. [További információ](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"A teljes méret {totalBytes, number, bytes} kB volt"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Kerülje a nagyon nagy hálózati hasznosadat-forgalmat"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"A nagyon nagy hálózati terhelés elkerülése"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"A CSS-fájlok minimalizálása csökkentheti a hálózati hasznosadat-forgalmat. [További információ](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minimalizálja a CSS-fájlokat"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"A JavaScript-fájlok minimalizálásával csökkenthető a hasznosadat-forgalom és a szkriptelemzési idő. [További információ](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minimalizálja a JavaScript-kódot"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Távolítsa el a nem használt szabályokat a stíluslapokból a hálózati tevékenység adatforgalmának csökkentése érdekében. [További információ](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Késleltesse a felhasználatlan CSS-t"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"A nem használt JavaScript-kód eltávolítása a hálózati tevékenység adatforgalmának csökkentéséhez."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Távolítsa el a nem használt JavaScript-kódot"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"A hosszú gyorsítótári élettartam felgyorsíthatja az oldal ismételt látogatását. [További információ](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 erőforrás található}other{# erőforrás található}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Jelenítse meg a statikus eszközöket hatékony gyorsítótár-házirend használatával"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Használjon hatékony gyorsítótár-házirendet a statikus eszközöknél"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Az optimalizált képek gyorsabban töltődnek be, és kisebb mobiladat-forgalommal járnak. [További információ](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Kódolja hatékonyan a képeket"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Használjon olyan képeket, amelyek megfelelő méretükkel elősegítik a mobiladat-forgalom csökkentését és a betöltési idő javulását. [További információ](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Méretezze megfelelően a képeket"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"A szöveges alapú erőforrásokat tömörítéssel (gzip, Deflate vagy Brotli) célszerű megjeleníteni a teljes hálózati adatforgalom minimalizálása érdekében. [További információ](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Engedélyezze a szövegtömörítést"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Az olyan képformátumok, mint a JPEG 2000, a JPEG XR és a WebP gyakran jobb tömörítést biztosítanak a PNG vagy a JPEG formátumnál, ami gyorsabb letöltést és kisebb adatforgalmat jelent. [További információ](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Jelenítse meg a képeket következő generációs formátumokban"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Az alábbi kritikuslekérdezés-láncok megmutatják, hogy milyen források töltődnek be prioritással. Az oldalbetöltés javítása érdekében fontolja meg a láncok hosszának csökkentését, a letöltött erőforrások méretének csökkentését, vagy a felesleges erőforrások letöltésének késleltetését. [További információ.](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 lánc található}other{# lánc található}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimalizálja a kritikus lekérdezések mélységét"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"A böngészőket fejlesztő mérnökök azt javasolják, hogy az oldalakon ~1500 DOM-csomópontnál kevesebb legyen. A legkedvezőbb a 32 elemnél kisebb és a 60 alárendelt/fölérendelt elemnél kisebb famélység. A nagy DOM növelheti a memóriahasználatot, és hosszabb [stílusszámítást](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), valamint költséges [elrendezés-újraszámítást](https://developers.google.com/speed/articles/reflow) eredményezhet. [További információ](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 csomópont}other{# csomópont}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Kerülje a túl nagy DOM-méretet"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximális DOM-mélység"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Összes DOM-csomópont"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Kerüli a túlzó DOM-méretet"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Használja a betűtípus-megjelenítő CSS-funkciót annak biztosításához, hogy a szöveg már a webes betűtípusok betöltődése alatt látható legyen a felhasználó számára. [További információ](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Biztosítsa, hogy a szöveg látható marad a webes betűtípusok betöltése során"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Az összes szöveg látható marad a webes betűtípusok betöltésekor"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategória"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Érdemes csökkenteni a JS elemzésére, összeállítására és végrehajtására fordított időt. Ebben segítségére lehet a kisebb JS-hasznosadat-forgalom."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimalizálja a fő szál terhelését"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimalizálja a fő szál terhelését"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"A fenti pontszám annak a becsült értéke, hogy az alkalmazás mennyi idő alatt reagál – ezredmásodpercben (ms) megadva – a felhasználói adatbevitelre az oldalbetöltés legforgalmasabb 5 másodperces időkeretében. Ha a várakozási idő meghaladja az 50 ms-ot, a felhasználók késlekedést észlelhetnek az alkalmazás használata közben. [További információ](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Becsült bemeneti késés"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Az első vizuális tartalomválasz azt az időpontot jelöli, amikor a rendszer megkezdi az első szöveg vagy kép megjelenítését. [További információ.](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Első, tartalommal rendelkező leképezés"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Az első processzor-üresjárat mutató az első olyan alkalmat jelöli, amikor az oldal főszálának aktivitása elég alacsony ahhoz, hogy kezelni lehessen a bevitt mennyiséget. [További információ](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Első processzor-üresjárat"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Az első releváns leképezés azt méri, hogy mikor válik láthatóvá az adott oldal elsődleges tartalma. [További információ](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Első releváns leképezés"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Az „Interaktív” mutató azt az időt jelzi, amíg az oldal teljesen interaktívvá nem válik. [További információ](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Interaktivitásig eltelt idő"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"A Sebességindex mutató azt jelzi, hogy az adott oldal tartalmai milyen gyorsan válnak láthatóvá. [További információ](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Sebességindex"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Az átirányítások még azelőtt eredményeznek további késéseket, hogy az oldal betöltődhetne. [További információ](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Kerülje a többszörös oldalátirányítást"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Az „első bájtig eltelt idő” mutató az Ön szervere válaszidejét jelöli. [További információ](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"A gyökérdokumentum betöltése ennyi időt vett igénybe: {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Csökkentse a szerver válaszidejét (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Alacsony a szerver válaszideje (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Időtartam"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Név"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Kezdés ideje"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Típus"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Érdemes felhasználnia alkalmazásában a User Timing API-t, amellyel valós használat során mért teljesítményadatokat kaphat a legfontosabb felhasználói műveletekről. [További információ.](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 felhasználói időmérés}other{# felhasználói időmérés}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Felhasználói időzítőjelek és intézkedések"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Vegye fontolóra előcsatlakozási vagy előzetes DNS-lehívási erőforrástippek hozzáadását, hogy korai kapcsolatokat hozhasson létre harmadik felek fontos forrásaival. [További információ](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Csatlakozzon előre a szükséges forrásokhoz"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Fontolja meg a <link rel=preload> parancs használatát az olyan erőforrások lekérdezésének rangsorolásához, amelyek az adott pillanatban az oldal betöltése során később következőként szerepelnek. [További információ](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Töltse be előre a kulcsfontosságú kéréseket"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"További információ alkalmazása teljesítményéről."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnosztika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"A teljesítmény legfontosabb szempontja az, hogy milyen gyorsan jelennek meg a képpontok a képernyőn. Legfontosabb mutatók: Első, tartalommal rendelkező leképezés, Első releváns leképezés"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Az első leképezést érintő fejlesztések"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Ezek az optimalizációk felgyorsíthatják oldala betöltési idejét."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Lehetőségek"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Mutatók"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Növelje az átfogó betöltési élményt annak érdekében, hogy az oldal reszponzív legyen, és a lehető legrövidebb időn belül használhatóvá váljon. Főbb mutatók: interaktivitásig eltelt idő, sebességindex"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Átfogó javítások"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Teljesítmény"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Gyorsítótár-TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Méret (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Eltöltött idő"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potenciális megtakarítás (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potenciális megtakarítás (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"{wastedBytes, number, bytes} kB potenciális megtakarítás"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potenciális megtakarítás értéke: {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Ellenőrzések megjelenítése"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Kezdeti navigáció"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Kritikus elérési út maximális várakozási ideje:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Hiba!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Jelentési hiba: nincs ellenőrzési információ"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboradatok"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Az aktuális oldal [Lighthouse](https://developers.google.com/web/tools/lighthouse/)-elemzése emulált 3G-n. Az értékek becslések, legközelebb eltérhetnek."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"További manuálisan elemzendő elemek"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nem alkalmazható"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Lehetőség"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Becsült megtakarítás"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Sikeresen teljesített ellenőrzések"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Pontozási skála:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"A Lighthouse-futtatást befolyásoló problémák fordultak elő:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Az értékek becsültek és változhatnak."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Figyelmeztetések: "}};


},{}],56:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Ekstensi Chrome berpengaruh negatif terhadap performa pemuatan halaman ini. Coba audit halaman dalam mode penyamaran atau dari profil Chrome tanpa ekstensi."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Evaluasi Skrip"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Penguraian Skrip"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Pertimbangkan mengurangi waktu yang dihabiskan untuk mengurai, mengompilasi, dan mengeksekusi JS. Anda mungkin menemukan bahwa mengirim payload JS yang lebih kecil akan membantu mengurangi waktu. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Mengurangi waktu eksekusi JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Waktu eksekusi JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"GIF berukuran besar tidak efisien untuk menayangkan konten animasi. Pertimbangkan untuk menggunakan video MPEG4/WebM sebagai animasi dan PNG/WebP sebagai gambar statis untuk menggantikan GIF guna menghemat byte jaringan. [Pelajari lebih lanjut](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Gunakan format video untuk konten animasi"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Pertimbangkan pemuatan lambat di balik layar dan gambar tersembunyi setelah semua resource kritis selesai dimuat untuk mengurangi waktu interaktif. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Tunda gambar di balik layar"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resource memblokir paint pertama halaman. Pertimbangkan mengirim inline JS/CSS kritis dan menunda semua JS/gaya yang tidak kritis. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Hilangkan resource yang memblokir render"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Payload jaringan yang besar menimbulkan biaya yang tinggi bagi pengguna dan berkorelasi erat dengan waktu pemuatan yang lama. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Ukuran total {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Menghindari payload jaringan yang sangat besar"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Menghindari payload jaringan yang sangat besar"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Mengecilkan file CSS dapat mengurangi ukuran payload jaringan. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Kecilkan CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Mengecilkan file JavaScript dapat mengurangi ukuran payload dan waktu penguraian skrip. [Pelajari lebih lanjut](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Kecilkan ukuran JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Menghapus aturan yang tidak digunakan dari stylesheet untuk mengurangi byte yang tidak diperlukan tetapi digunakan oleh aktivitas jaringan. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Tunda CSS yang tidak digunakan"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Menghapus JavaScript yang tidak digunakan untuk mengurangi byte yang digunakan oleh aktivitas jaringan."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Hapus JavaScript yang tidak digunakan"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Durasi cache yang panjang dapat mempercepat kunjungan berulang ke halaman. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 resource ditemukan}other{# resource ditemukan}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Tayangkan aset statis dengan kebijakan cache yang efisien"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Menggunakan kebijakan cache yang efisien pada aset statis"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Gambar yang dioptimalkan dimuat lebih cepat dan menghabiskan lebih sedikit kuota. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Enkode gambar secara efisien"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Menayangkan gambar yang berukuran sesuai untuk menghemat kuota dan meningkatkan waktu pemuatan. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Ubah ukuran gambar dengan tepat"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Resource berbasis teks harus ditayangkan dengan kompresi (gzip, deflate, atau brotli) untuk meminimalkan total byte jaringan. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Aktifkan kompresi teks"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Format gambar seperti JPEG 2000, JPEG XR, dan WebP biasanya memberikan kompresi yang lebih baik daripada PNG atau JPEG, sehingga download lebih cepat dan konsumsi kuota lebih kecil. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Tayangkan gambar dalam format generasi berikutnya"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Rantai Permintaan Penting di bawah menampilkan resource apa saja yang dimuat dengan prioritas tinggi. Pertimbangkan mengurangi panjang rantai, mengurangi ukuran download resource, atau menunda download resource yang tidak penting untuk mempercepat pemuatan halaman. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 rantai ditemukan}other{# rantai ditemukan}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimalkan Kedalaman Permintaan Penting"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Engineer browser merekomendasikan halaman berisi kurang dari ~1.500 node DOM. Titik yang efektif adalah kedalaman hierarki < 32 elemen dan kurang dari 60 elemen turunan/induk. DOM yang besar dapat meningkatkan penggunaan memori, menyebabkan [penghitungan gaya] yang lebih lama(https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), dan menghasilkan [penyesuaian tata letak] yang mahal(https://developers.google.com/speed/articles/reflow). [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 node}other{# node}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Menghindari ukuran DOM yang berlebihan"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Kedalaman DOM Maksimum"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total Node DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Menghindari ukuran DOM yang berlebihan"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Memanfaatkan fitur CSS tampilan font untuk memastikan teks terlihat oleh pengguna saat font web sedang dimuat. [Pelajari lebih lanjut](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Pastikan teks tetap terlihat selama pemuatan font web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Semua teks tetap terlihat selama pemuatan font web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategori"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Pertimbangkan mengurangi waktu yang dihabiskan untuk mengurai, mengompilasi, dan mengeksekusi JS. Anda mungkin menemukan bahwa mengirim payload JS yang lebih kecil akan membantu mengurangi waktu."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimalkan pekerjaan thread utama"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Meminimalkan pekerjaan thread utama"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Skor di atas adalah perkiraan durasi yang diperlukan aplikasi untuk merespons masukan pengguna, dalam milidetik, selama durasi 5 detik tersibuk saat pemuatan halaman. Jika latensi di atas 50 md, pengguna dapat menganggap aplikasi lambat. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Perkiraan Latensi Masukan"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"First Contentful Paint menandai waktu saat teks atau gambar pertama di-paint. [Pelajari lebih lanjut] (https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"First Contentful Paint"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"CPU Pertama Tidak Ada Aktivitas menandai waktu pertama kalinya thread utama halaman menjadi agak tenang untuk menangani masukan. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU Pertama Tidak Ada Aktivitas"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"First Meaningful Paint mengukur waktu saat konten utama halaman terlihat. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"First Meaningful Paint"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Metrik Interaktif menandai waktu halaman menjadi interaktif sepenuhnya. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Waktu untuk Interaktif"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Indeks Kecepatan menunjukkan seberapa cepat konten halaman terlihat terisi lengkap. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indeks Kecepatan"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Pengalihan mencakup penundaan tambahan sebelum halaman dapat dimuat. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Hindari pengalihan lebih dari satu halaman"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Time To First Byte mengidentifikasi waktu saat server mengirim respons. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Dokumen root memerlukan waktu {timeInMs, number, milliseconds} md"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Mengurangi waktu respons server (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Waktu respons server sedikit (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Durasi"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nama"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Waktu Mulai"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Jenis"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Pertimbangkan melengkapi aplikasi dengan User Timing API untuk mengukur performa sebenarnya aplikasi Anda selama pengalaman pengguna utama. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 waktu pengguna}other{# waktu pengguna}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Tanda dan ukuran Waktu Pengguna"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Pertimbangkan menambahkan petunjuk menyambungkan terlebih dahulu atau mengambil terlebih dahulu dns resource untuk melakukan sambungan awal ke nama domain pihak ketiga yang penting. [Pelajari lebih lanjut](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Sambungkan terlebih dahulu ke nama domain yang diperlukan"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Pertimbangkan menggunakan <link rel=preload> untuk memprioritaskan pengambilan resource yang saat ini diminta selama pemuatan halaman. [Pelajari lebih lanjut](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Muat permintaan utama terlebih dahulu"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Informasi selengkapnya tentang performa aplikasi Anda."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostik"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Aspek terpenting dari performa adalah seberapa cepat piksel dirender di layar. Metrik utama: First Contentful Paint, First Meaningful Paint"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Penyempurnaan First Paint"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Pengoptimalan ini dapat mempercepat pemuatan halaman."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Peluang"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrik"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Menyempurnakan pengalaman pemuatan halaman keseluruhan, sehingga halaman responsif dan siap untuk digunakan secepatnya. Metrik utama: Waktu untuk Interaktif, Indeks Kecepatan"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Penyempurnaan Keseluruhan"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performa"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL Cache"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Ukuran (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Waktu yang Dihabiskan"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potensi Penghematan (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potensi Penghematan (md)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potensi penghematan {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potensi penghematan {wastedMs, number, milliseconds} md"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} md"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} d"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Tampilkan audit"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navigasi Awal"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latensi lokasi kritis maksimal:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Error!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Error laporan: tidak ada informasi audit"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Data Lab"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analisis halaman saat ini pada 3G teremulasi. Nilai adalah hasil perkiraan dan dapat bervariasi."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Item tambahan untuk diperiksa secara manual"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Tidak berlaku"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Peluang"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Perkiraan Penghematan"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Lulus audit"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Skala skor:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Ada masalah yang memengaruhi jalannya Lighthouse ini:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Nilai adalah hasil perkiraan dan dapat bervariasi."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Peringatan: "}};


},{}],57:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Le estensioni di Chrome incidono negativamente sulle prestazioni di caricamento di questa pagina. Prova a controllare la pagina in modalità di navigazione in incognito o da un profilo Chrome senza estensioni."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Valutazione degli script"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Analisi script"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Totale"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Potresti ridurre i tempi di analisi, compilazione ed esecuzione di JS. A tale scopo potrebbe essere utile pubblicare payload JS di dimensioni inferiori. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Riduci il tempo di esecuzione di JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Tempo di esecuzione JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Le GIF di grandi dimensioni non sono efficaci per pubblicare contenuti animati. Anziché le GIF potresti usare video MPEG4/WebM per le animazioni e PNG/WebP per le immagini statiche. In questo modo userai meno byte di rete. [Ulteriori informazioni](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Usa formati video per i contenuti animati"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Potresti caricare in modo differito le immagini fuori schermo e nascoste al termine del caricamento di tutte le risorse fondamentali per ridurre il tempo necessario per la completa interattività. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Rimanda immagini fuori schermo"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Alcune risorse bloccano la prima visualizzazione della pagina. Potresti pubblicare le risorse JS/CSS fondamentali incorporate e rimandare tutte le risorse JS/styles non fondamentali. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Elimina le risorse di blocco della visualizzazione"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"I payload di rete di grandi dimensioni comportano costi reali per gli utenti e sono strettamente correlati a lunghi tempi di caricamento. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Dimensioni totali: {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Evita payload di rete enormi"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Vengono evitati payload di rete enormi"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Minimizza i file CSS per ridurre le dimensioni dei payload di rete. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minimizza CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Minimizza i file JavaScript per ridurre le dimensioni dei payload e i tempi di analisi degli script. [Ulteriori informazioni](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minimizza JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Rimuovi dai fogli di stile le regole inutilizzate per ridurre i byte superflui consumati dall'attività di rete. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Rimanda codice CSS inutilizzato"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Rimuovi il codice JavaScript inutilizzato per ridurre i byte consumati dall'attività di rete."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Rimuovi il codice JavaScript inutilizzato"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Una lunga durata della cache può velocizzare le visite abituali della tua pagina. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 risorsa trovata}other{# risorse trovate}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Pubblica le risorse statiche con criteri della cache efficaci"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Vengono usati criteri della cache efficaci per le risorse statiche"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Le immagini ottimizzate vengono caricate più velocemente e consumano meno traffico della rete dati. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codifica in modo efficace le immagini"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Pubblica immagini di dimensioni adeguate per consumare meno traffico della rete dati e ridurre i tempi di caricamento. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Usa immagini di dimensioni adeguate"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Le risorse basate sul testo dovrebbero essere pubblicate con compressione (gzip, deflate o brotli) per ridurre al minimo il numero totale di byte di rete. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Attiva la compressione del testo"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"I formati delle immagini come JPEG 2000, JPEG XR e WebP spesso consentono una compressione migliore rispetto a quella dei formati PNG o JPEG, che comporta download più veloci e un minor consumo di dati. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Pubblica immagini in formati più recenti"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Nella sezione Catene di richieste fondamentali indicata di seguito vengono mostrate le risorse caricate con priorità elevata. Potresti ridurre la lunghezza delle catene e le dimensioni del download delle risorse oppure posticipare il download delle risorse non necessarie per migliorare il caricamento della pagina. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 catena trovata}other{# catene trovate}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Riduci al minimo la profondità delle richieste fondamentali"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Gli ingegneri che si occupano dei browser consigliano di usare meno di ~1500 nodi DOM per le pagine. L'ideale sarebbe una struttura ad albero con profondità di < 32 elementi e meno di 60 elementi secondari/principali. Un DOM di grandi dimensioni può aumentare l'utilizzo di memoria, causare [calcoli di stile] più lunghi (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) e generare costosi [adattamenti dinamici del layout](https://developers.google.com/speed/articles/reflow). [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nodo}other{# nodi}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Evita di usare un DOM di dimensioni eccessive"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Profondità massima DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Nodi DOM totali"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Viene evitato un DOM di dimensioni eccessive"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Usa la funzione CSS font-display per assicurarti che il testo sia visibile agli utenti durante il caricamento dei caratteri web. [Ulteriori informazioni](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Assicurati che il testo rimanga visibile durante il caricamento dei caratteri web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Tutto il testo rimane visibile durante il caricamento dei caratteri web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categoria"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Potresti ridurre i tempi di analisi, compilazione ed esecuzione di JS. A tale scopo potrebbe essere utile pubblicare payload JS di dimensioni inferiori."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Riduci al minimo il lavoro del thread principale"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Il lavoro del thread principale è ridotto al minimo"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"La valutazione in alto è una stima del tempo impiegato dall'app, espresso in millisecondi, per rispondere all'input dell'utente durante il periodo di 5 s più impegnativo del caricamento della pagina. Se la latenza è superiore a 50 ms, gli utenti potrebbero considerare lenta la tua app. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Latenza input stimata"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"La metrica Prima visualizzazione con contenuti indica il momento in cui vengono visualizzati il primo testo o la prima immagine. [Ulteriori informazioni] (https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Visualizzazione dei primi contenuti"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"La metrica Prima inattività CPU indica la prima volta in cui il thread principale della pagina è abbastanza tranquillo da poter gestire l'input. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Prima inattività CPU"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"La metrica Visualizzazione primi contenuti utili indica quando diventano visibili i contenuti principali di una pagina. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Visualizzazione primi contenuti utili"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"La metrica Tempo per interattività indica il momento in cui la pagina diventa completamente interattiva. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tempo per interattività"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"La metrica Indice velocità mostra la velocità con cui diventano visibili i contenuti di una pagina. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indice velocità"},

"lighthouse-core/audits/redirects.js | description":{
"message":"I reindirizzamenti comportano ulteriori ritardi prima del caricamento della pagina. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Evita i reindirizzamenti tra più pagine"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"La metrica Tempo per primo byte identifica il momento in cui il server invia una risposta. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Il documento root ha richiesto {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Riduci i tempi di risposta del server (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"I tempi di risposta del server sono brevi (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Durata"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nome"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Inizio"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tipo"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Potresti dotare la tua app dell'API User Timing per misurare le prestazioni reali durante le esperienze utente chiave. [Ulteriori informazioni] (https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 tempo utente}other{# tempi utente}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Indicatori e misure User Timing"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Potresti aggiungere hint di precollegamento o prelettura DNS delle risorse per collegarti anticipatamente a importanti origini di terze parti. [Ulteriori informazioni](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Precollegati alle origini necessarie"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Potresti usare <link rel=preload> per dare la priorità al recupero delle risorse attualmente richieste in un secondo momento nel caricamento della pagina. [Ulteriori informazioni](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Precarica le richieste fondamentali"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Ulteriori informazioni sulle prestazioni della tua applicazione."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostica"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"L'aspetto più importante delle prestazioni è la velocità di visualizzazione dei pixel sullo schermo. Metriche chiave: Visualizzazione dei primi contenuti, Visualizzazione primi contenuti utili"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Miglioramenti della prima visualizzazione"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Queste ottimizzazioni possono velocizzare il caricamento della pagina."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Opportunità"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metriche"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Migliora l'esperienza di caricamento generale per fare in modo che la pagina diventi reattiva e pronta all'uso nel più breve tempo possibile. Metriche chiave: Tempo per interattività, Indice velocità"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Miglioramenti generali"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Prestazioni"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL cache"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Dimensioni (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Tempo trascorso"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potenziali risparmi (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potenziali risparmi (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potenziali risparmi di {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potenziali risparmi di {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Mostra controlli"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navigazione iniziale"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latenza massima del percorso critico:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Errore"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Errore segnalato: nessuna informazione sul controllo"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Dati di prova controllati"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse] (https://developers.google.com/web/tools/lighthouse/) analizza la pagina corrente su 3G emulato. I valori sono delle stime e potrebbero variare."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Ulteriori elementi da controllare manualmente"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Non applicabile"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Opportunità"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Risparmi stimati"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Controlli superati"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Scala di valutazione:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Si sono verificati dei problemi che incidono su questa esecuzione di Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"I valori sono delle stime e potrebbero variare."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Avvisi: "}};


},{}],58:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome 拡張機能がこのページの読み込みに悪影響を及ぼしています。シークレット モードで、または拡張機能なしの Chrome プロファイルからページを監査してみてください。"},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"スクリプトの評価"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"スクリプトの解析"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"合計"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"JS の解析、コンパイル、実行にかかる時間の短縮をご検討ください。配信する JS ペイロードのサイズを抑えると効果が見込めます。[詳細](https://developers.google.com/web/tools/lighthouse/audits/bootup)"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"JavaScript の実行にかかる時間の低減"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript の実行にかかる時間"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"サイズの大きい GIF は、アニメーション コンテンツの配信方法として効率的ではありません。ネットワークの通信量を抑えるため、GIF を使用する代わりに、アニメーションには MPEG4/WebM 動画、静止画像には PNG/WebP を使用することをご検討ください。[詳細](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"アニメーション コンテンツでの動画フォーマットの使用"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"オフスクリーンの非表示の画像は、クリティカルなリソースをすべて読み込んだ後に遅れて読み込むようにして、インタラクティブになるまでの時間を短縮することをご検討ください。[Learn more](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"オフスクリーン画像の遅延読み込み"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"ページの初回ペイントをリソースが阻害しています。クリティカルな JS や CSS はインラインで配信し、それ以外の JS やスタイルはすべて遅らせることをご検討ください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"レンダリングを妨げるリソースの除外"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"ネットワーク ペイロードのサイズが大きいと、ユーザーの金銭的負担が大きくなり、多くの場合、読み込み時間が長くなります。[詳細](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"合計サイズは {totalBytes, number, bytes} KB でした"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"過大なネットワーク ペイロードの回避"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"過大なネットワーク ペイロードの回避"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS ファイルを最小化すると、ネットワーク ペイロードのサイズを抑えることができます。[詳細](https://developers.google.com/web/tools/lighthouse/audits/minify-css)"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSS の最小化"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"JavaScript ファイルを最小化すると、ペイロード サイズとスクリプトの解析時間を抑えることができます。[詳細](https://developers.google.com/speed/docs/insights/MinifyResources)"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScript の最小化"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"使用していないルールをスタイルシートから削除して、データ通信量を減らしてください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/unused-css)"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"使用していない CSS の遅延読み込み"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"使用していない JavaScript を削除して、データ通信量を減らしてください。"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"使用していない JavaScript の削除"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"キャッシュの有効期間を長くすると、再訪問したユーザーへのページの読み込み速度を向上できます。[詳細](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 件のリソースが見つかりました}other{# 件のリソースが見つかりました}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"静的なアセットと効率的なキャッシュ ポリシーの配信"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"静的なアセットでの効率的なキャッシュ ポリシーの使用"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"画像を最適化すると、読み込み時間を速くして、モバイルデータ量を抑えることができます。[詳細](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"効率的な画像フォーマット"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"適切なサイズの画像を配信して、モバイルデータ量と読み込み時間を抑えてください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"適切なサイズの画像"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"テキストベースのリソースは圧縮（gzip、deflate、または brotli）して配信し、ネットワークの全体的な通信量を最小限に抑えてください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"テキスト圧縮の有効化"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000、JPEG XR、WebP などの画像フォーマットは、PNG や JPEG より圧縮性能が高く、ダウンロード時間やデータ使用量を抑えることができます。[詳細](https://developers.google.com/web/tools/lighthouse/audits/webp)"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"次世代フォーマットでの画像の配信"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"下のクリティカル リクエスト チェーンでは、高い優先度で読み込まれたリソースを確認できます。チェーンの長さを縮小する、リソースのダウンロード サイズを抑える、不要なリソースのダウンロードを遅らせるなどしてページの読み込み速度を改善することをご検討ください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 件のチェーンが見つかりました}other{# 件のチェーンが見つかりました}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"クリティカルなリクエストの深さの最小化"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"ブラウザ エンジニアは、ページに含まれる DOM のノード数が 1,500 個を超えないようにすることを推奨しています。ツリーの深さは 32 要素まで、子や親の要素数は 60 個までにするのが最適です。DOM サイズが大きいと、メモリの使用量が増え、[スタイルの計算](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)に時間がかかり、[レイアウトのリフロー](https://developers.google.com/speed/articles/reflow)というコストが発生します。[詳細](https://developers.google.com/web/tools/lighthouse/audits/dom-size)"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 個のノード}other{# 個のノード}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"過大な DOM サイズの回避"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"DOM の最大深さ"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"合計 DOM ノード数"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"過大な DOM サイズの回避"},

"lighthouse-core/audits/font-display.js | description":{
"message":"フォント表示の CSS 機能を使用して、ウェブフォントの読み込み中にユーザーがテキストを見られるようにしてください。[詳細](https://developers.google.com/web/updates/2016/02/font-display)"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"ウェブフォント読み込み中のテキストの表示"},

"lighthouse-core/audits/font-display.js | title":{
"message":"ウェブフォント読み込み中の全テキストの表示"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"カテゴリ"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"JS の解析、コンパイル、実行にかかる時間の短縮をご検討ください。配信する JS ペイロードのサイズを抑えると効果が見込めます。"},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"メインスレッド処理の最小化"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"メインスレッド処理の最小化"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"上のスコアは、ページ読み込みの最もビジーな 5 秒間における、ユーザーの入力に対するアプリの応答時間（ミリ秒）です。待ち時間が 50 ミリ秒より長い場合、アプリの反応が悪いと思われる可能性があります。[詳細](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"入力の推定待ち時間"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"コンテンツの初回ペイントは、テキストまたは画像が初めてペイントされるまでにかかった時間です。[詳細](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"コンテンツの初回ペイント"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"CPU の初回アイドルは、ページのメインスレッド処理が静止し、初めて入力の処理が可能になるまでにかかった時間です。[詳細](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU の初回アイドル"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"意味のあるコンテンツの初回ペイントは、ページの主要なコンテンツが可視化されるまでにかかった時間です。[詳細](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"意味のあるコンテンツの初回ペイント"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"ページが完全にインタラクティブになるまでの時間です。[詳細](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"インタラクティブになるまでの時間"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"速度インデックスは、ページのコンテンツが取り込まれて表示される速さを表します。[詳細](https://developers.google.com/web/tools/lighthouse/audits/speed-index)"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"速度インデックス"},

"lighthouse-core/audits/redirects.js | description":{
"message":"リダイレクトを行うと、ページの読み込みにさらに時間がかかる可能性があります。[詳細](https://developers.google.com/web/tools/lighthouse/audits/redirects)"},

"lighthouse-core/audits/redirects.js | title":{
"message":"複数のページ リダイレクトの回避"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"最初の 1 バイトまでの時間は、サーバーが応答を返すまでにかかった時間を表しています。[詳細](https://developers.google.com/web/tools/lighthouse/audits/ttfb)"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"ルート ドキュメントの読み込みに {timeInMs, number, milliseconds} ミリ秒かかりました"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"サーバー応答時間の短縮（TTFB）"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"サーバーの応答時間が遅い（TTFB）"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"継続時間"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"名前"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"開始時間"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"タイプ"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"User Timing API を使用してアプリをインストルメント化し、主要なユーザー エクスペリエンスでのアプリの実際のパフォーマンスを測定できるようにしてください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/user-timing)"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 件のカスタム速度}other{# 件のカスタム速度}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"カスタム速度の記録と計測"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"事前接続または DNS プリフェッチのリソースヒントを追加して、重要な第三者ドメインへの接続を早期に確立できるようにすることをご検討ください。[詳細](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"必須のドメインへの事前接続"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"<link rel=preload> を使用して、現在ページ読み込みの後のほうでリクエストしているリソースを優先的に取得することをご検討ください。[詳細](https://developers.google.com/web/tools/lighthouse/audits/preload)"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"キー リクエストのプリロード"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"アプリケーションのパフォーマンスに関する詳細。"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"診断"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"パフォーマンスの最も重要な点は、ピクセルをどのくらい速く画面にレンダリングできるかです。主要な指標: コンテンツの初回ペイント、意味のあるコンテンツの初回ペイント"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"初回ペイントの改善点"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"これらの項目を改善すると、ページの読み込み時間を短縮できます。"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"改善できる項目"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"指標"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"読み込みの全体的なパフォーマンスを改善して、ページの反応性や操作性を高めましょう。主要な指標: インタラクティブになるまでの時間、速度インデックス"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"全体的な改善点"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"パフォーマンス"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"キャッシュの TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"サイズ（KB）"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"かかった時間"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"減らせるデータ量（KB）"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"短縮できる時間（ミリ秒）"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"{wastedBytes, number, bytes} KB 減らせます"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"{wastedMs, number, milliseconds} ミリ秒短縮できます"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ミリ秒"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} 秒"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"監査を表示"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"最初の移動先"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"クリティカル パスの最大待ち時間:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"エラー"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"レポートエラー: 監査情報はありません"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"ラボデータ"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"エミュレート済み 3G での現在のページに関する [Lighthouse](https://developers.google.com/web/tools/lighthouse/) 分析です。推定値のため変動する可能性があります。"},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"個別の検証が必要な他の項目"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"該当なし"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"改善できる項目"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"短縮できる時間（推定）"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"合格した監査"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"スコア評価:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Lighthouse の実行に影響する問題が発生しました。"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"推定値のため変動する可能性があります。"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"警告: "}};


},{}],59:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome 확장 프로그램이 이 페이지의 로드 성능에 부정적인 영향을 미쳤습니다. 시크릿 모드나 확장 프로그램이 없는 Chrome 프로필에서 페이지를 검사해 보세요."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"스크립트 평가"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"스크립트 파싱"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"합계"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"JS 파싱, 컴파일, 실행에 소요되는 시간을 줄이세요. 용량이 적은 JS 페이로드를 제공하는 것이 도움이 될 수 있습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/bootup)"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"자바스크립트 실행 시간 단축"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"자바스크립트 실행 시간"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"대용량 GIF는 애니메이션 콘텐츠를 전달하는 데 비효율적입니다. 애니메이션에는 MPEG4/WebM 동영상을, 정적인 이미지에는 PNG/WebP를 GIF 대신 사용하여 네트워크 바이트를 절약하세요. [자세히 알아보기](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"애니메이션 콘텐츠에 동영상 형식 사용하기"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"중요한 리소스의 로드가 모두 완료된 후에는 오프스크린 및 숨겨진 이미지를 지연 로드함으로써 상호작용 시간을 줄이는 것이 좋습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"오프스크린 이미지 지연하기"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"리소스가 페이지의 첫 번째 페인트를 차단하고 있습니다. 중요한 JS/CSS를 인라인으로 전달하고 중요하지 않은 모든 JS/style을 지연하는 것이 좋습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"렌더링 차단 리소스 제거하기"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"네트워크 페이로드가 커지면 사용자에게 실제 비용 부담이 되며 로드 시간이 길어질 수 있습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"총 크기: {totalBytes, number, bytes}KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"네트워크 페이로드가 커지지 않도록 관리하기"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"대규모 네트워크 페이로드 방지하기"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS 파일을 축소하면 네트워크 페이로드의 크기가 줄어들 수 있습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/minify-css)"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSS 축소하기"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"자바스크립트 파일을 줄이면 페이로드 크기 및 스크립트 파싱 시간이 줄어들 수 있습니다. [자세히 알아보기](https://developers.google.com/speed/docs/insights/MinifyResources)"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"자바스크립트 줄이기"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"스타일시트에서 사용되지 않는 규칙을 삭제하여 네트워크 활동에 불필요하게 소비되는 바이트를 줄이세요. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/unused-css)"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"사용하지 않는 CSS 지연하기"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"사용하지 않는 자바스크립트를 삭제하고 네트워크 활동에 소비되는 바이트를 줄이세요."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"사용하지 않는 자바스크립트 삭제하기"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"캐시 수명이 길면 페이지를 반복해서 방문하는 속도가 빨라질 수 있습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{리소스 1개 발견됨}other{리소스 #개 발견됨}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"효율적인 캐시 정책을 사용하여 정적인 애셋 제공하기"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"정적인 애셋에 효율적인 캐시 정책 사용하기"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"최적화된 이미지는 빨리 로드되며 모바일 데이터를 적게 소비합니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"효율적으로 이미지 인코딩하기"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"알맞은 크기의 이미지를 게재하여 모바일 데이터를 절약하고 로드 시간을 단축하세요. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"이미지 크기 적절하게 설정하기"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"총 네트워크 바이트를 최소화하려면 텍스트 기반 리소스를 압축(gzip, deflate, brotli)하여 제공해야 합니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"텍스트 압축 사용"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000, JPEG XR, WebP와 같은 이미지 형식을 사용하면 PNG 또는 JPEG보다 압축률이 높기 때문에 다운로드 속도가 빠르고 데이터 소비량도 줄어듭니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/webp)"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"차세대 형식을 사용해 이미지 제공하기"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"다음의 크리티컬 요청 체인(Critical Request Chains)은 로드 시 우선순위가 높은 리소스를 보여줍니다. 체인의 길이를 줄이고, 리소스의 다운로드 크기를 줄이거나 불필요한 리소스의 다운로드를 지연하여 페이지 로드 속도를 높이는 것이 좋습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1개 체인 발견됨}other{#개 체인 발견됨}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"중요 요청 깊이 최소화하기"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"브라우저 엔지니어들은 페이지에 포함된 DOM 노드의 수가 1,500개 미만인 것이 바람직하다고 말합니다. 최적의 값은 트리 깊이가 요소 32개 미만이고 하위/상위 요소 60개 미만일 때입니다. DOM이 크면 메모리 사용량이 늘어나고 [스타일 계산](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) 시간이 길어질 수 있으며, 큰 비용이 드는 [레이아웃 리플로](https://developers.google.com/speed/articles/reflow)가 발생할 수 있습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/dom-size)"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{노드 1개}other{노드 #개}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"과도한 DOM 크기 지양하기"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"최대 DOM 깊이"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"총 DOM 노드"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"과도한 DOM 크기 지양하기"},

"lighthouse-core/audits/font-display.js | description":{
"message":"웹폰트가 로드되는 동안 사용자에게 텍스트가 표시되도록 글꼴 표시 CSS 기능을 사용하세요. [자세히 알아보기](https://developers.google.com/web/updates/2016/02/font-display)"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"웹폰트가 로드되는 동안 텍스트가 계속 표시되는지 확인하기"},

"lighthouse-core/audits/font-display.js | title":{
"message":"웹폰트가 로드되는 동안 모든 텍스트가 계속 표시됩니다"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"카테고리"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"JS 파싱, 컴파일, 실행에 소요되는 시간을 줄이세요. 용량이 적은 JS 페이로드를 제공하면 도움이 될 수 있습니다."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"기본 스레드 작업 최소화하기"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"기본 스레드 작업 최소화하기"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"위의 점수는 페이지 로드가 가장 많은 5초 동안 앱이 사용자 입력에 응답하는 데 걸리는 시간(ms)의 추정치입니다. 지연 시간이 50ms보다 길면 사용자가 앱이 느리다고 인식할 수 있습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"예상 입력 대기시간"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"콘텐츠가 포함된 첫 페인트는 첫 번째 텍스트 또는 이미지가 표시되는 시간을 나타냅니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"최초 만족 페인트"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"최초 CPU 유휴 상태는 페이지의 기본 스레드가 입력을 처리할 수 있을 만큼 조용한 상태가 된 첫 번째 시간을 표시합니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"최초 CPU 유휴 상태"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"최초 유의미 페인트는 페이지의 기본 콘텐츠가 표시되는 경우를 측정합니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"최초 유의미 페인트"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"상호작용은 페이지가 완전히 상호작용하는 시간을 표시합니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"상호작용 시간"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"속도 색인은 페이지 콘텐츠가 얼마나 빨리 표시되는지 보여줍니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/speed-index)"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"속도 색인"},

"lighthouse-core/audits/redirects.js | description":{
"message":"리디렉션을 사용하면 페이지가 로드되기 전 추가적인 지연이 발생합니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/redirects)"},

"lighthouse-core/audits/redirects.js | title":{
"message":"여러 차례의 페이지 리디렉션 피하기"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Time To First Byte는 서버가 응답을 보내는 시간을 식별합니다. [자세히 알아보기] (https://developers.google.com/web/tools/lighthouse/audits/ttfb)"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"루트 문서에 {timeInMs, number, milliseconds}ms 소요됨"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"서버 응답 시간(TTFB) 단축"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"서버 응답 시간 낮음(TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"시간"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"이름"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"시작 시간"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"유형"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"앱에 User Timing API를 사용하여 중요 사용자 경험이 이루어지는 동안의 실적을 측정하세요. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{사용자 시간 1회}other{사용자 시간 #회}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"사용자 타이밍 표시 및 측정 값"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"사전 연결 또는 DNS 프리페치 리소스 힌트를 추가하여 중요한 타사 원본에 대한 조기 연결을 수립하는 것이 좋습니다. [자세히 알아보기](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"필수 원본 미리 연결하기"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"<link rel=preload>를 사용하여 페이지 로드에서 현재 나중에 요청되는 리소스를 가져오는 데 우선순위를 두는 것이 좋습니다. [자세히 알아보기](https://developers.google.com/web/tools/lighthouse/audits/preload)"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"중요한 요청을 미리 로드하기"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"애플리케이션 성능 관련 추가 정보"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"진단"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"성능에서 가장 중요한 측면은 픽셀이 화면에 렌더링되는 속도입니다. 주요 측정항목: 최초 만족 페인트, 최초 유의미 페인트"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"최초 페인트 개선"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"다음의 최적화 방법을 사용하면 페이지 로드 속도를 높일 수 있습니다."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"추천"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"측정항목"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"페이지가 빠르게 반응하고 가능한 한 빨리 사용할 수 있는 준비가 되도록 전반적인 로드 환경을 강화하세요. 주요 측정항목: 상호작용 시간, 속도 색인"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"전반적인 개선사항"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"성능"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"캐시 TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"크기(KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"소요 시간"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"절감 가능치(KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"절감 가능한 페이지 로드 시간(ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"절감 가능치: {wastedBytes, number, bytes}KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"절감 가능 {wastedMs, number, milliseconds}ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds}ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds}초"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"감사 보기"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"초기 탐색"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"최상 경로 최대 지연 시간:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"오류!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"보고 오류: 감사 정보 없음"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"실험실 데이터"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"에뮬레이트된 3G 환경에서의 현재 페이지 [Lighthouse](https://developers.google.com/web/tools/lighthouse/) 분석 결과입니다. 값은 추정치이며 달라질 수 있습니다."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"직접 확인해야 하는 추가 항목"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"해당 사항 없음"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"추천"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"예상 절감치"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"통과한 감사"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"점수 척도:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Lighthouse 실행에 영향을 미치는 문제가 발생했습니다."},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"값은 추정치이며 달라질 수 있습니다."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"경고: "}};


},{}],60:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"„Chrome“ plėtiniai neigiamai paveikė šio puslapio įkėlimo našumą. Pabandykite patikrinti puslapį inkognito režimu arba naudodami „Chrome“ profilį be plėtinių."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Scenarijaus įvertinimas"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Scenarijaus analizė"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Iš viso"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Apsvarstykite, ar neverta sutrumpinti JS analizei, kompiliavimui ir vykdymui skiriamo laiko. Mažesnės JS naudingosios apkrovos gali padėti tai padaryti. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Sutrumpinkite „JavaScript“ vykdymo laiką"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"„JavaScript“ vykdymo laikas"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Dideli GIF failai nėra efektyvus animuoto turinio pateikimo būdas. Vietoje GIF galite naudoti MPEG4 ar „WebM“ vaizdo įrašų animacijai ir PNG ar „WebP“ statiniams vaizdams pateikti, kad sutaupytumėte tinklo baitų. [Sužinokite daugiau](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Naudokite vaizdo įrašo formatus animuotam turiniui pateikti"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Galbūt verta įkelti ne ekraninius ir paslėptus vaizdus tik tada, kai bus įkelti visi svarbiausi ištekliai, kad sutrumpėtų laikas iki sąveikos. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Atidėkite ne ekraninius vaizdus"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ištekliai blokuoja pirmąjį puslapio parodymą. Galbūt verta pateikti svarbiausius JS ar CSS kaip eilutinius elementus ir atidėti visus nesvarbius JS ar stilius. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Pašalinkite pateikimą blokuojančius išteklius"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Dėl didelių tinklo naudingųjų apkrovų naudotojai praranda pinigus ir jos glaudžiai susijusios su ilgu įkėlimo laiku. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Bendras dydis: {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Išvenkite didelių tinklo naudingųjų apkrovų"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Išvengiama didelių tinklo naudingųjų apkrovų"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Sumažinus CSS failų dydį, gali sumažėti tinklo naudingosios apkrovos. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Sumažinkite CSS failus"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Sumažinus „JavaScript“ failus, galima sumažinti naudingąsias apkrovas ir sutrumpinti scenarijaus analizavimo laiką. [Sužinokite daugiau](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Sumažinkite „JavaScript“"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Pašalinkite nenaudojamas taisykles iš stiliaus failų, kad tinklo veikla sunaudotų mažiau nereikalingų baitų. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Atidėkite nenaudojamus CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Pašalinkite nenaudojamą „JavaScript“, kad tinklo veikla sunaudotų mažiau baitų."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Pašalinkite nenaudojamą „JavaScript“"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Jei talpykla galios ilgiau, pakartotiniai apsilankymai puslapyje gali pagreitėti. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Rastas 1 išteklius}one{Rastas # išteklius}few{Rasti # ištekliai}many{Rasta # ištekliaus}other{Rasta # išteklių}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Statiniams ištekliams taikykite efektyvią talpyklos politiką"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Naudojama efektyvi statinių išteklių talpyklos politika"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimizuoti vaizdai įkeliami greičiau ir sunaudoja mažiau mobiliojo ryšio duomenų. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Efektyviai koduokite vaizdus"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Teikite tinkamo dydžio vaizdus, kad būtų taupomi mobiliojo ryšio duomenys ir puslapis būtų įkeliamas greičiau. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Pasirinkite tinkamo dydžio vaizdus"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Tekstinius išteklius reikėtų suglaudinti (Naudojant „Gzip“, „Deflate“ arba „Brotli“), kad bendrai būtų sunaudojama kuo mažiau tinklo baitų. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Įgalinkite teksto glaudinimą"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Tokių formatų kaip JPEG 2000, JPEG XR ir „WebP“ vaizdai dažniausiai glaudinami geriau nei PNG ar JPEG vaizdai, todėl yra atsisiunčiami greičiau ir sunaudoja mažiau duomenų. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Pateikite naujos kartos formatų vaizdus"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Toliau pateiktose svarbiausių užklausų grandinėse nurodoma, kurie ištekliai įkelti nurodant aukštą prioritetą. Kad puslapio įkėlimas būtų sklandesnis, galbūt verta sutrumpinti grandines, sumažinti atsisiunčiamų išteklių dydį arba atidėti nereikalingų išteklių atsisiuntimą. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Rasta 1 grandinė}one{Rasta # grandinė}few{Rastos # grandinės}many{Rasta # grandinės}other{Rasta # grandinių}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Sumažinkite svarbiausių užklausų gylį"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Naršyklių inžinieriai rekomenduoja puslapiuose turėti ne daugiau nei apytiksliai 1,5 tūkst. DOM mazgų. Optimaliausias medžio gylis – mažiau nei 32 elementai ir mažiau nei 60 poelemenčių bei viršelemenčių. Dėl didelio DOM gali būti sunaudojama daugiau atminties, ilgiau skaičiuojami stiliai (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) ir reikia brangių išdėstymo perskaičiavimų (https://developers.google.com/speed/articles/reflow). [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 mazgas}one{# mazgas}few{# mazgai}many{# mazgo}other{# mazgų}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Venkite per didelių DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimalus DOM gylis"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Bendras DOM mazgų skaičius"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Išvengiama per didelių DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Pasinaudokite šriftų pateikimo CSS funkcija, kad tekstas būtų matomas naudotojui, kol įkeliami žiniatinklio šriftai. [Sužinokite daugiau](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Užtikrinkite, kad įkeliant žiniatinklio šriftą būtų matomas tekstas"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Įkeliant žiniatinklio šriftą matomas visas tekstas"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorija"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Apsvarstykite, ar neverta sutrumpinti JS analizei, kompiliavimui ir vykdymui skiriamo laiko. Mažesnės JS naudingosios apkrovos gali padėti tai padaryti."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Pagrindinės grupės veikimo sutrumpinimas"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Sutrumpinamas pagrindinės grupės veikimas"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Toliau nurodytas rezultatas yra įvertintas laikas milisekundėmis, per kurį programa atsako į naudotojo įvestį per labiausiai užimtas puslapio įkėlimo 5 sekundes. Jei delsa ilgesnė nei 50 ms, naudotojams gali pasirodyti, kad programa veikia lėtai. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Įvertinta įvesties delsa"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Pirmas turiningas žymėjimas nurodo laiką, kada pažymimas pirmasis tekstas ar vaizdas. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Pirmasis „Contentful“ parodymas"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Pirmas cent. procesoriaus laisvas laikas nurodo pirmą laiką, kai pagrindinė puslapio grupė buvo pakankamai neaktyvi, kad galėtų apdoroti įvestį. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Pirmas cent. procesoriaus laisvas laikas"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Pirmasis reikšmingas parodymas nurodo, kada parodomas pagrindinis puslapio turinys. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Pirmasis reikšmingas parodymas"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Sąveika nurodo laiką, per kurį puslapis tampa visiškai sąveikus. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Laikas iki sąveikos"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Greičio rodiklis parodo, kaip greitai pavaizduojamas puslapio turinys. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Greičio rodiklis"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Peradresuojant puslapio įkėlimas dar labiau delsia. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Venkite kelių puslapio peradresavimų"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Laikas iki pirmojo baito nurodo laiką, per kurį serveris atsako. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Šakninio dokumento įkėlimas užtruko {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Serverio atsako laiko sutrumpinimas (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Serverio atsako laikas yra trumpas (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Trukmė"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Pavadinimas"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Pradžios laikas"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tipas"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Galbūt verta apdoroti programą naudojant naudotojo laiko API ir įvertinti programos realų našumą atsižvelgiant į pagrindines naudotojo funkcijas. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 naudotojo laikas}one{# naudotojo laikas}few{# naudotojo laikai}many{# naudotojo laiko}other{# naudotojo laikų}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Naudotojo laiko žymės ir matavimas"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Galbūt verta pridėti išankstinio prijungimo arba DNS išankstinės iškvietos ištekliaus nurodymus, kad ryšys su svarbiais trečiųjų šalių šaltiniais būtų užmezgamas iš anksto. [Sužinokite daugiau](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Iš anksto prisijunkite prie reikiamų šaltinių"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Galbūt verta naudoti <link rel=preload> ir suteikti prioritetą gaunamiems ištekliams, kurių užklausos šiuo metu teikiamos vėliau įkeliant puslapį. [Sužinokite daugiau](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Iš anksto įkelkite svarbiausias užklausas"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Daugiau informacijos apie jūsų programos našumą."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Svarbiausias našumo rodiklis – kaip greitai taškai pateikiami ekrane. Svarbiausia metrika: pirmasis „Contentful“ parodymas, pirmasis reikšmingas parodymas"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Pirmojo parodymo patobulinimai"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Toks optimizavimas gali padėti pagreitinti puslapio įkėlimą."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Galimybės"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrika"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Pagerinkite bendrą įkėlimo našumą, kad puslapis reaguotų ir būtų parengtas naudoti kuo greičiau. Svarbiausia metrika: laikas iki sąveikos, greičio rodiklis"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Bendri patobulinimai"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Našumas"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Talpyklos TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Dydis (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Sugaištas laikas"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Galima sutaupyti (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Galima sutaupyti (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Galima sutaupyti {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Galima sutaupyti {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} sek."},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Rodyti patikras"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Pradinis naršymas"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Didžiausia svarbiausio kelio delsa:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Klaida!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Ataskaitos klaida: nėra patikros informacijos"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratorijos duomenys"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Dabartinio puslapio [„Lighthouse“](https://developers.google.com/web/tools/lighthouse/) analizė naudojant emuliuotą 3G. Vertės yra numatytos ir gali skirtis."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Papildomi elementai, kuriuos reikia patikrinti neautomatiškai"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Netaikoma"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Galimybė"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Numatomos santaupos"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Sėkmingos patikros"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Rezultatų skalė:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Paleidžiant „Lighthouse“ kilo problemų."},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Vertės yra numatytos ir gali skirtis."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Įspėjimai: "}};


},{}],61:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome paplašinājumi negatīvi ietekmē šīs lapas ielādes veiktspēju. Mēģiniet lapas pārbaudi veikt inkognito režīmā vai no Chrome profila bez paplašinājumiem."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Skripta novērtēšana"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Skriptu parsēšana"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Kopā"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Ieteicams samazināt laiku, kas tiek izmantots JS parsēšanai, kompilēšanai un izpildei. Iespējams, konstatēsiet, ka ir noderīgi izmantot mazākas JS lietderīgās slodzes. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"JavaScript izpildes laika samazināšana"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript izpildes laiks"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Lieli GIF attēli nav efektīvi animēta satura rādīšanai. Animācijām ir ieteicams izmantot MPEG4/WebM video, bet statiskiem attēliem — PNG/WebP, nevis GIF, lai samazinātu tīkla lietojumu (baitos). [Uzzināt] vairāk(https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Izmantojiet video failu formātus animētam saturam"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Lai samazinātu laiku līdz interaktivitātei, ārpus ekrāna un paslēptos attēlus ar lēnu ielādi ieteicams atlikt līdz visu svarīgo resursu ielādes pabeigšanai. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Ārpus ekrāna esošo attēlu atlikšana"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resursi bloķē jūsu lapas pirmo satura atveidojumu. Ieteicams rādīt svarīgos JS/CSS iekļautā veidā un atteikties no visiem nesvarīgajiem JS/stiliem. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Samaziniet resursus, kas bloķē renderēšanu"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Lielas tīkla lietderīgās slodzes izmaksā lietotājiem īstu naudu un ir cieša saistītas ar ilgu ielādes laiku. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Kopējais lielums bija {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Pārāk lielas tīkla lietderīgās slodzes nepieļaušana"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Nepieļauj pārāk lielu tīkla lietderīgo slodzi"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Samazinot CSS failus, var samazināties tīkla lietderīgā slodze. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Samaziniet CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Samazinot JavaScript failus, var samazināties lietderīgās slodzes apjomi un skriptu parsēšanas laiks. [Uzzināt vairāk](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScript·samazināšana"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Noņemiet no stila lapām neizmantotās kārtulas, lai samazinātu tīkla aktivitātei nevajadzīgo baitu izmantošanu. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Atlieciet neizmantoto CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Noņemiet neizmantoto JavaScript, lai samazinātu tīkla aktivitātes izmantoto baitu apjomu."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Noņemiet neizmantoto JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Iestatot ilgu kešatmiņas mūžu, lapas atkārtoti apmeklējumi varētu paātrināties. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Atrasts 1 resurss}zero{Atrasti # resursi}one{Atrasts # resurss}other{Atrasti # resursi}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Statisko elementu noteikšana, izmantojot efektīvu kešatmiņas politiku"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Efektīvas kešatmiņas politikas izmantošana statiskiem elementiem"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimizēti attēli tiek ielādēti ātrāk un izmanto mazāku mobilo datu apjomu. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Efektīva attēlu kodēšana"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Rādiet atbilstoša izmēra attēlus, lai tiktu izmantots mazāks mobilo datu apjoms un tiktu uzlabots ielādes laiks. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Atbilstoša lieluma attēli"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Lai samazinātu kopējo tīkla lietojumu (baitos), iesakām izmantot saspiešanu (Gzip, Deflate or Brotli). [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Iespējojiet teksta saspiešanu"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Tādi attēlu formāti kā JPEG 2000, JPEG XR un WebP bieži ir veiksmīgāk saspiežami nekā PNG vai JPEG — tas nozīmē ātrāku lejupielādi un mazāku datu patēriņu. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Rādiet attēlus nākamās paaudzes formātos"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Metrika “Kritisko pieprasījumu ķēdes” tālāk parāda, kuri resursi ir ielādēti ar augstāko prioritāti. Lai uzlabotu lapas ielādi, ieteicams samazināt ķēžu garumu, samazināt resursu lejupielādes apjomu vai atlikt nevajadzīgo resursu lejupielādi.[Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Atrasta 1 ķēde}zero{Atrastas # ķēdes}one{Atrasta # ķēde}other{Atrastas # ķēdes}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Kritisko pieprasījumu dziļuma samazināšana"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Pārlūka inženieri iesaka, lai lapā nebūtu vairāk par 1500 DOM mezgliem. Ieteicams, lai koka dziļums nepārsniegtu 32 elementus un 60 bērnelementus/vecākelementus. Liels DOM var palielināt atmiņas lietojumu, izraisīt ilgākus [stila aprēķinus](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) un radīt dārgu [izkārtojuma plūduma sakārtošanu](https://developers.google.com/speed/articles/reflow). [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 mezgls}zero{# mezglu}one{# mezgls}other{# mezgli}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Pārāk lielu DOM izmēru nepieļaušana"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimālais DOM dziļums"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"DOM mezglu kopskaits"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Nepieļauj pārāk lielus DOM izmērus"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Izmantojiet fonta rādīšanas CSS funkciju, lai nodrošinātu, ka lietotāji tīmekļa fontu ielādes laikā var redzēt tekstu. [Uzzināt vairāk](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Visa teksta redzamības nodrošināšana tīmekļa fonta ielādes laikā"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Tīmekļa fonta ielādes laikā viss teksts paliek redzams"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorija"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Ieteicams samazināt laiku, kas tiek izmantots JS parsēšanai, kompilēšanai un izpildei. Iespējams, konstatēsiet, ka ir noderīgi izmantot mazākas JS lietderīgās slodzes."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Samaziniet galvenā pavediena darbu"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Galvenā pavediena darba samazināšana"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Iepriekš redzamais rādītājs aptuveni norāda, pēc cik ilga laika (milisekundēs) uz lietotāja ievadi reaģēs jūsu lietotne aizņemtākajā lapas ielādes 5 s periodā. Ja latentums pārsniedz 50 ms, iespējams, lietotāji jūsu lietotnes saņems novēloti. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Paredzētais ievades latentums"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Metrika \"Pirmais satura marķējums\" atzīmē laiku, kad tiek marķēts pirmais teksts vai attēls. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Pirmais saturīgais satura atveidojums"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Metrika “Pirmā CPU dīkstāve” norāda laiku, kad lapas galvenais pavediens ir kļuvis pietiekami mazs, lai varētu apstrādāt ievadi. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Pirmā CPU dīkstāve"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Metrika “Pirmais nozīmīgais satura atveidojums” norāda, kad kļūst redzams lapas galvenais saturs. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Pirmais nozīmīgais satura atveidojums"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktivitātes metrika norāda laiku, kad lapa ir pilnībā interaktīva. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Laiks līdz interaktivitātei"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Metrika “Ātruma rādītājs” norāda, cik ātri tiek parādīts lapas saturs. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Ātruma rādītājs"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Novirzīšana rada papildu aizkaves pirms lapas ielādes. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Nepieļaujiet vairākas lapas novirzīšanas"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Metrika “Laiks līdz pirmajam baitam” norāda laiku, kad jūsu serveris nosūta atbildi. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Saknes dokumentam nepieciešamais laiks: {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Servera atbildes laika samazināšana (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Servera atbildes laiks ir mazs (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Ilgums"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Vārds"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Sākuma laiks"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Veids"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Ieteicams pievienot lietotnei Lietotāju laika API, lai noteiktu lietotnes aktuālo veiktspēju lietotāju pamata darbības laikā. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 lietotāja laiks}zero{# lietotāju laiks}one{# lietotāja laiks}other{# lietotāju laiks}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Lietotāju laika atzīmes un mērījumi"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Ieteicams pievienot iepriekš pieslēgtu vai DNS sākotnējo datu iegūšanas resursa norādes, lai izveidotu laicīgus savienojumus ar svarīgiem trešās puses sākumpunktiem. [Uzzināt vairāk](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Veiciet iepriekšēju pieslēgšanu obligātajiem sākumpunktiem"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Ieteicams izmantot <link rel=preload>, lai noteiktu prioritāti tādu resursu iegūšanai, kas pašlaik lapas ielādē tiek pieprasīti vēlāk. [Uzzināt vairāk](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Veiciet svarīgāko pieprasījumu iepriekšēju ielādi"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Plašāka informācija par jūsu lietojumprogrammas veiktspēju"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Vissvarīgākais veiktspējas aspekts ir pikseļu renderēšanas ātrums ekrānā. Galvenās metrikas: “Pirmais saturīgais satura atveidojums”, “Pirmais nozīmīgais satura atveidojums”"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Pirmā satura atveidojuma uzlabojumi"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Šīs optimizācijas var paātrināt lapas ielādi."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Iespējas"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrikas"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Uzlabojiet vispārējo ielādes darbību, lai lapa reaģētu un būtu gatava izmantošanai pēc iespējas ātrāk. Galvenās metrikas: “Laiks līdz interaktivitātei”, “Ātruma rādītājs”"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Vispārēji uzlabojumi"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Veiktspēja"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Kešatmiņas TTL vērtība"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Lielums (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Iztērētais laiks"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potenciālais ietaupījums (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potenciālais ietaupījums (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potenciālais ietaupījums: {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potenciālais ietaupījums: {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Rādīt pārbaudes"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Sākotnējā navigācija"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksimālais kritiskais ceļa latentums:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Kļūda!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Pārskata kļūda: nav pārbaudes informācijas"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratorijas dati"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse] (https://developers.google.com/web/tools/lighthouse/) pašreizējās lapas analīze emulētajā 3G. Vērtības ir aptuvenas un var atšķirties."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Papildu vienumi manuālai pārbaudei"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nav piemērojams"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Iespēja"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Aptuvenais ietaupījums"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Izpildītās pārbaudes"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Rādītāja mērogs:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Radās problēmas, kas ietekmēja šo Lighthouse palaišanu:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Vērtības ir aptuvenas un var atšķirties."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Brīdinājumi: "}};


},{}],62:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome-extensies hadden een negatieve invloed op de laadprestaties van deze pagina. Controleer de pagina in de incognitomodus of via een Chrome-profiel zonder extensies."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Scriptevaluatie"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Script parseren"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Totaal"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Overweeg minder tijd te besteden aan het parseren, compileren en uitvoeren van JS. Het leveren van kleinere JS-payloads kan hierbij helpen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Verkort de JavaScript-uitvoeringstijd"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript-uitvoeringstijd"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Grote gif's zijn niet efficiënt om content met animaties te leveren. Overweeg in plaats van gif's MPEG4-/WebM-video's voor animaties en PNG/WebP voor statische afbeeldingen en bespaar zo netwerkbytes. [Meer informatie](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Gebruik video-indelingen voor content met animaties"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Overweeg afbeeldingen die niet in beeld zijn en verborgen afbeeldingen via 'lazy loading' te laden nadat alle kritieke bronnen zijn geladen om zo de tijd tot interactief te verlagen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Laad afbeeldingen die niet in beeld zijn nog niet"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Bronnen blokkeren de eerste tekenbewerking voor je pagina. Overweeg kritieke JS/css inline te leveren en alle niet-kritieke JS/stijlen uit te stellen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Verwijder bronnen die de weergave blokkeren"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Grote netwerkpayloads kosten gebruikers veel geld en hebben vaak lange laadtijden. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Totale grootte was {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Vermijd enorme netwerkpayloads"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Vermijdt enorme netwerkpayloads"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Als je css-bestanden verkleint, kun je de omvang van netwerkpayloads verkleinen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Verklein de css"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Als je JavaScript-bestanden verkleint, kunnen de omvang van de payload en de parseringstijd van het script worden verkleind. [Meer informatie](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Verklein JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Verwijder niet-gebruikte regels uit stylesheets om het aantal onnodige bytes te verminderen die worden verbruikt door netwerkactiviteit. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Stel niet-gebruikte css uit"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Verwijder ongebruikt JavaScript om het aantal bytes te verminderen dat wordt verbruikt door netwerkactiviteit."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Verwijder ongebruikt JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Een lange levensduur voor het cachegeheugen kan herhaalde bezoeken aan je pagina versnellen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 bron gevonden}other{# bronnen gevonden}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Lever statische items met een efficiënt cachebeleid"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Gebruikt een efficiënt cachebeleid voor statische items"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Geoptimaliseerde afbeeldingen worden sneller geladen en verbruiken minder mobiele data. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codeer afbeeldingen op een efficiënte manier"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Lever afbeeldingen met het juiste formaat om mobiele data te besparen en de laadtijd te verbeteren. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Geef afbeeldingen het juiste formaat"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Tekstgebaseerde bronnen moeten worden geleverd met compressie (gzip, deflate of brotli) om het totale aantal netwerkbytes te minimaliseren. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Schakel tekstcompressie in"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Afbeeldingsindelingen zoals JPEG 2000, JPEG XR en WebP bieden vaak betere compressie dan PNG of JPEG. Dit resulteert in snellere downloads en minder dataverbruik. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Lever afbeeldingen in moderne indelingen"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"De onderstaande kritieke verzoekketens laten zien welke bronnen met een hoge prioriteit worden geladen. Overweeg de lengte van ketens te verkleinen, de downloadgrootte van bronnen te beperken of het downloaden van onnodige bronnen uit te stellen om de laadtijd van de pagina te verbeteren. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 keten gevonden}other{# ketens gevonden}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimaliseer de diepte van kritieke verzoeken"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Browser-engineers bevelen aan dat pagina's minder dan ~1500 DOM-knooppunten bevatten. De perfecte balans is een structuurdiepte van minder dan 32 elementen en minder dan 60 onderliggende/bovenliggende elementen. Een grote DOM kan ervoor zorgen dat het geheugengebruik toeneemt. Dit leidt tot langere [stijlberekeningen](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) en produceert dure [dynamische lay-outaanpassingen](https://developers.google.com/speed/articles/reflow). [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 knooppunt}other{# knooppunten}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Vermijd een overmatig grote DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximum DOM-diepte"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Totaal aantal DOM-knooppunten"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Vermijdt een overmatige grote DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Maak gebruik van de css-functie 'font-display' om ervoor te zorgen dat tekst zichtbaar is voor gebruikers terwijl weblettertypen worden geladen. [Meer informatie](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Zorg ervoor dat tekst zichtbaar blijft tijdens het laden van weblettertypen"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Alle tekst blijft zichtbaar tijdens het laden van weblettertypen"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categorie"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Overweeg minder tijd te besteden aan het parseren, compileren en uitvoeren van JS. Het leveren van kleinere JS-payloads kan hierbij helpen."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Primaire threadbewerkingen minimaliseren"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Primaire threadbewerkingen minimaliseren"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"De bovenstaande score is een schatting van hoelang het duurt voordat je app reageert op gebruikersinvoer (in milliseconden) gedurende de drukste periode van 5 seconden tijdens het laden van de pagina. Als de wachttijd langer dan 50 ms is, kunnen gebruikers je app als traag beschouwen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Geschatte invoerwachttijd"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"'Eerste tekenbewerking met content' geeft het tijdstip aan waarop de eerste tekst of afbeelding is weergegeven. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Eerste tekenbewerking met content"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"'Eerste keer dat CPU inactief was' geeft de eerste keer aan dat de primaire thread van de pagina rustig genoeg was om invoer te verwerken. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Eerste keer dat CPU inactief was"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"'Eerste zinvolle tekenbewerking' meet wanneer de primaire content van een pagina zichtbaar is. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Eerste zinvolle tekenbewerking"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interactief geeft het tijdstip aan waarop de pagina volledig interactief is. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tijd tot interactief"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Snelheidsindex laat zien hoe snel de content van een pagina zichtbaar is. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Snelheidsindex"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Omleidingen zorgen voor extra vertraging voordat de pagina kan worden geladen. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Vermijd meerdere pagina-omleidingen"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"'Tijd tot eerste byte' identificeert het tijdstip waarop je server een reactie stuurt. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Hoofddocument duurde {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Beperk serverreactietijden (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Serverreactietijden zijn laag (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Duur"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Naam"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Begintijd"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Type"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Overweeg je app te voorzien van de API voor gebruikerstiming om de daadwerkelijke prestaties van je app tijdens belangrijke gebruikerservaringen te meten. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 gebruikerstiming}other{# gebruikerstimings}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Markeringen en metingen voor gebruikerstiming"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Overweeg hints voor het vooraf verbinden of dns-prefetchen van bronnen toe te voegen om vroege verbindingen met belangrijke externe herkomsten tot stand te brengen. [Meer informatie](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Maak vooraf verbinding met vereiste herkomsten"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Overweeg <link rel=preload> te gebruiken om prioriteit te geven aan het ophalen van bronnen die momenteel later tijdens het laden van de pagina worden opgehaald. [Meer informatie](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Laad belangrijke verzoeken vooraf"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Meer informatie over de prestaties van je app."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostische gegevens"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Het meest essentiële aspect van de prestaties is hoe snel pixels worden weergegeven op het scherm. Belangrijkste statistieken: Eerste tekenbewerking met content, Eerste zinvolle tekenbewerking"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Verbeteringen voor eerste tekenbewerking"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Deze optimalisaties kunnen het laden van je pagina versnellen."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Aanbevelingen"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Statistieken"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Verbeter de algemene laadfunctionaliteit, zodat de pagina zo snel mogelijk reageert en gebruiksklaar is. Belangrijkste statistieken: Tijd tot interactief, Snelheidsindex"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Algemene verbeteringen"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Prestaties"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache-TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Grootte (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Bestede tijd"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potentiële besparing (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potentiële besparing (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potentiële besparing van {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potentiële besparing van {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Controles weergeven"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Beginnavigatie"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximum wachttijd voor kritiek pad:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Fout"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Rapportfout: geen controlegegevens"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Labgegevens"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analyse met [Lighthouse](https://developers.google.com/web/tools/lighthouse/) van de huidige pagina bij een 3G-emulatie. Waarden worden geschat en kunnen variëren."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Aanvullende items om handmatig te controleren"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"N.v.t."},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Aanbeveling"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Geschatte besparing"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Geslaagde controles"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Scoreschaal:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Er zijn problemen opgetreden bij deze uitvoering van Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Waarden worden geschat en kunnen variëren."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Waarschuwingen: "}};


},{}],63:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome-utvidelser gjør innlastingen av denne siden tregere. Prøv å revidere siden i inkognitomodus eller fra en Chrome-profil uten utvidelser."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Skriptevaluering"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Skriptparsing"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Totalt"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Vurder å redusere tiden som brukes til parsing, kompilering og kjøring i JS. Levering av mindre JS-nyttelaster kan bidra til dette. [Finn ut mer] (https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reduser JavaScript-kjøretiden"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript-kjøretid"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Store GIF-er er mindre effektive for levering av animert innhold. I stedet for GIF bør du vurdere bruk av MPEG4/WebM-videoer for animasjon og PNG/WebP for statiske bilder, da dette belaster nettverket mindre. [Finn ut mer] (https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Bruk videoformat for animert innhold"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Vurder «lat» innlasting av bilder som er utenfor skjermen eller skjult, etter at alle kritiske ressurser er ferdig innlastet, for å redusere tiden det tar før siden blir interaktiv. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Utsett bilder utenfor skjermen"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ressurser blokkerer den første opptegningen av siden din. Vurder å levere kritisk JS/CSS innebygd og utsette all JS / alle stiler som ikke er kritiske. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Eliminer ressurser som blokkerer gjengivelse"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Store nettverksressurser koster brukerne mer og er hovedgrunnen til lange innlastingstider. [Finn ut mer] (https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Den totale størrelsen var {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Unngå enorme nettverksressurser"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Unngår enorme nettverksbelastninger"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Forminskede CSS-filer kan redusere nettverksbelastningen. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Forminsk CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Forminsking av JavaScript-filer kan redusere nyttelaststørrelser og parsetiden for skript. [Finn ut mer](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Forminsk JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Fjern ubrukte regler fra stilark for å redusere unødvendige byte som brukes av nettverksaktiviteten. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Utsett ubrukt CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Fjern ubrukt JavaScript for å redusere antall byte som brukes av nettverksaktiviteten."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Fjern ubrukt JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"En lang bufferlevetid kan øke antall gjentatte besøk på siden din. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 ressurs funnet}other{# ressurser funnet}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Vis statiske ressurser med effektive buffer-retningslinjer"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Bruker effektive buffer-retningslinjer på statiske ressurser"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimaliserte bilder lastes inn raskere og bruker mindre mobildata [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Effektiviser omgjøring av bilder til kode"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Vis bilder som har passende størrelse, for å spare mobildata og få kortere innlastingstid. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Velg riktige bildestørrelser"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Tekstbaserte ressurser bør leveres komprimert (gzip, deflate eller brotli) for å minimerer antall byte gjennom nettverket. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Aktiver tekstkomprimering"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Bildeformater som JPEG 2000, JPEG XR og WebP gir ofte bedre komprimering enn PNG eller JPEG, noe som betyr raskere nedlasting og mindre databruk. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Bruk nyere bildeformater"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"De kritiske forespørselskjedene nedenfor viser hvilke ressurser som er utstedt med høy prioritet. Vurder å redusere lengden på kjedene, redusere nedlastingsstørrelsen på ressurser eller utsette nedlasting av unødvendige ressurser for å bedre sideinnlastingen. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 kjede funnet}other{# kjeder funnet}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimer dybden på kritiske forespørsler"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Nettlesereksperter anbefaler at sider inneholder mindre enn ca. 1500 DOM-noder. Den perfekte verdien er en tredybde på mindre enn 32 elementer og mindre enn 60 underordnede/overordnede elementer. En stor DOM-struktur kan øke minnebruken, føre til at [stilberegninger](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) tar lengre tid, og forårsake kostbare [gjenoppbygginger av sidevisningen](https://developers.google.com/speed/articles/reflow). [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 node}other{# noder}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Unngå for stor DOM-struktur"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimal DOM-dybde"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Totalt antall DOM-noder"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Unngå for stor DOM-struktur"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Bruk CSS-funksjonen font-display til å forsikre deg om at brukerne ser teksten mens skrifttypen for nettet lastes inn. [Finn ut mer](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Sørg for at teksten forblir synlig under innlasting av skrifttyper for nettet"},

"lighthouse-core/audits/font-display.js | title":{
"message":"All tekst forblir synlig under innlasting av skrifttype for nettet"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategori"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Vurder å redusere tiden som brukes til parsing, kompilering og kjøring i JS. Levering av mindre JS-ressurser kan bidra til dette."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimer arbeidet på hovedtråden"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimerer arbeidet på hovedtråden"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Poengsummen ovenfor er et estimat av hvor lang tid (i millisekunder) det tar for appen din å svare på brukerinndata i det travleste 5-sekunders vinduet av sideinnlastingen. Hvis tidsforsinkelsen er høyere enn 50 ms, kan brukeren oppleve appen din som treg. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Anslått tidsforsinkelse for inndata"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Den første innholdsrike opptegningen (FCP) markerer den første gangen tekst eller bilder tegnes opp. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Første innholdsrike opptegning"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Første prosessor ledig markerer den første gangen sidens hovedtråd er stille nok til å klare å håndtere inndata. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Første prosessor ledig"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Første vesentlige opptegning måler når hovedinnholdet på en side er synlig. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Første vesentlige opptegning"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Tid til interaktiv markerer tiden når siden er helt interaktiv. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tid til interaktiv"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Hastighetsindeksen viser hvor raskt innhold på en side blir synlig. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Hastighetsindeks"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Viderekoblinger fører til flere forsinkelser før siden kan lastes inn. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Unngå flere viderekoblinger av siden"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Tid til første byte identifiserer tidspunktet da tjeneren sendte et svar. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Root-dokumentet brukte {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reduser responstiden for tjener (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Svartiden til tjeneren er lav (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Varighet"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Navn"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Starttid"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Type"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Vurder å utstyre appen din med User Timing API for å måle appens reelle ytelse under viktige brukeropplevelser. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{ 1 brukertiming}other{# brukertiminger}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing – merker og intervaller"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Vurder å legge til ressurshint (preconnect eller dns-prefetch) for å opprette tidlige tilkoblinger til viktige tredjepartsplasseringer. [Finn ut mer] (https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Opprett forhåndstilkobling til nødvendige domenenavn"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Vurder bruk av <link rel=preload> for å prioritere henting av ressurser som for øyeblikket er forespurt senere i sideinnlastingen. [Finn ut mer](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Forhåndsinnlast (preload) nøkkelforespørsler"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Mer informasjon om ytelsen til appen din."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostikk"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Det mest kritiske aspektet for ytelse er hvor raskt piksler blir gjengitt på skjermen. Nøkkelberegninger: Første innholdsrike opptegning, Første vesentlige opptegning"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Forbedringer av første opptegning"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Disse optimaliseringene kan gjøre sideinnlastingen raskere."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Muligheter"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Beregninger"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Gjør den totale innlastingsopplevelsen bedre, slik at siden reagerer og er klar til bruk så snart som mulig. Nøkkelberegninger: Tid til interaktiv, Hastighetsindeks"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Forbedringsmuligheter"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Resultater"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Buffer-TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Størrelse (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Brukt tid"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"Nettadresse"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potensielle besparelser (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potensielle besparelser (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potensielle besparelser på {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potensiell besparelse på {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Vis revisjoner"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navigasjonsstart"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksimum kritisk baneforsinkelse:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Feil!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Rapportfeil: ingen revisjonsinformasjon"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Prøvefunksjonsdata"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse]-analyse (https://developers.google.com/web/tools/lighthouse/) av den gjeldende siden på emulert 3G. Verdiene er anslått og kan variere."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Tilleggselementer for manuell kontroll"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Ikke relevant"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Mulighet"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Estimerte besparelser"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Beståtte revisjoner"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Poengskala:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Det oppsto problemer som påvirker denne kjøringen av Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Verdiene er anslått og kan variere."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Advarsler: "}};


},{}],64:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Rozszerzenia Chrome pogorszyły szybkość ładowania tej strony. Przeprowadź audyt strony w trybie incognito lub w profilu Chrome bez rozszerzeń."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Ocena skryptu"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Analiza skryptów"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Razem"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Pomyśl o skróceniu czasu poświęcanego na analizowanie, kompilowanie i wykonywanie kodu JS. Może w tym pomóc dostarczanie mniejszych ładunków JS. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/bootup)"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Skróć czas wykonywania JavaScriptu"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Czas wykonania JavaScriptu"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Duże pliki GIF są nieefektywnym sposobem dostarczania animacji. Proponujemy użyć zamiast nich filmów MPEG4/WebM (animacje) lub plików PNG/WebP (obrazy statyczne), by zmniejszyć ilość przesyłanych danych. [Więcej informacji](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Użyj formatów wideo dla animacji"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Rozważ opóźnione (leniwe) ładowanie obrazów ukrytych i znajdujących się poza ekranem dopiero po zakończeniu ładowania wszystkich zasobów kluczowych, by skrócić czas do pełnej interaktywności. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Odłóż ładowanie obrazów poza ekranem"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Zasoby blokują pierwsze wyrenderowanie strony. Rozważ umieszczenie krytycznego kodu JS/CSS w kodzie strony i opóźnienie ładowania wszystkich niekrytycznych plików JS i stylów. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Wyeliminuj zasoby blokujące renderowanie"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Duże ładunki sieciowe powodują wyższe koszty dla użytkowników i są mocno powiązane z długim czasem ładowania. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Łączny rozmiar to {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Unikaj bardzo dużych ładunków sieciowych"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Unikaj bardzo dużych ładunków sieciowych"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Minifikacja plików CSS może zmniejszyć ładunki sieciowe. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/minify-css)"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minifikuj CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Minifikacja plików JavaScript może zmniejszyć ładunki i skrócić czas analizowania skryptów. [Więcej informacji](https://developers.google.com/speed/docs/insights/MinifyResources)"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minifikuj JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Usuń nieużywane reguły z arkuszy stylów, by zmniejszyć ilość danych przesyłanych w sieci. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/unused-css)"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Opóźnij ładowanie nieużywanego kodu CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Usuń nieużywany kod JavaScript, by zmniejszyć ilość danych przesyłanych w sieci."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Usuń nieużywany JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Długi czas przechowywania w pamięci podręcznej może przyspieszyć ponowne otwarcie strony. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Znaleziono 1 zasób}few{Znaleziono # zasoby}many{Znaleziono # zasobów}other{Znaleziono # zasobu}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Wyświetlaj zasoby statyczne, stosując efektywne zasady pamięci podręcznej"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Stosuje efektywne zasady pamięci podręcznej dla zasobów statycznych"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Zoptymalizowane obrazy ładują się szybciej i wykorzystują mniej komórkowej transmisji danych. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Użyj efektywnego kodowania obrazów"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Wyświetlaj obrazy o odpowiednim rozmiarze, by oszczędzać komórkową transmisję danych i przyspieszyć ładowanie. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Zmień rozmiar obrazów"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Zasoby tekstowe powinny być kompresowane (gzip, deflate lub brotli), by zminimalizować ilość danych przesyłanych w sieci. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Włącz kompresję tekstu"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formaty obrazów, takie jak JPEG 2000, JPEG XR i WebP, często dają lepszą kompresję niż PNG czy JPEG, co przekłada się na szybsze pobieranie i mniejsze wykorzystanie danych. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/webp)"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Wyświetlaj obrazy w formatach nowej generacji"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Poniższe łańcuchy żądań krytycznych pokazują zasoby ładowane z wysokim priorytetem. Aby przyspieszyć ładowanie strony, możesz skrócić łańcuchy, zmniejszyć rozmiar pobieranych zasobów lub opóźnić pobieranie zasobów, które nie są niezbędne. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Znaleziono 1 łańcuch}few{Znaleziono # łańcuchy}many{Znaleziono # łańcuchów}other{Znaleziono # łańcucha}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Zminimalizuj głębię żądań krytycznych"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Twórcy przeglądarek zalecają, by strony zawierały mniej niż około 1500 węzłów DOM. Optymalne jest drzewo o głębokości mniejszej niż 32 elementy i zawierające mniej niż 60 elementów podrzędnych/nadrzędnych. Duży DOM może zwiększyć wykorzystanie pamięci, wydłużyć [obliczanie stylów](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) i powodować kosztowne [przeformatowanie układu](https://developers.google.com/speed/articles/reflow). [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/dom-size)"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 węzeł}few{# węzły}many{# węzłów}other{# węzła}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Unikaj zbyt dużego DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksymalna głębokość DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Łączna liczba węzłów DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Unika zbyt dużego DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Użyj funkcji CSS „font-display”, by zapewnić widoczność tekstu dla użytkownika podczas ładowania czcionek internetowych. [Więcej informacji](https://developers.google.com/web/updates/2016/02/font-display)"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Zapewnij widoczność tekstu podczas ładowania czcionek internetowych"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Cały tekst pozostaje widoczny podczas ładowania czcionek internetowych"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategoria"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Pomyśl o skróceniu czasu poświęcanego na analizowanie, kompilowanie i wykonywanie kodu JS. Może w tym pomóc dostarczanie mniejszych ładunków JS."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Zminimalizuj aktywność głównego wątku"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimalizuje aktywność głównego wątku"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Powyższy wynik jest szacunkowym czasem (w milisekundach), po którym aplikacja reaguje na działanie użytkownika w trakcie najbardziej intensywnego, pięciosekundowego okresu ładowania strony. Jeśli opóźnienie jest większe niż 50 ms, użytkownicy mogą uznać aplikację za powolną. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Szacowane opóźnienie reakcji"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Pierwsze wyrenderowanie treści oznacza czas wyrenderowania pierwszego tekstu lub obrazu. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Pierwsze wyrenderowanie treści"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"CPU bezczynny po raz pierwszy oznacza czas, gdy wątek główny jest po raz pierwszy na tyle mało obciążony, że może obsługiwać działania użytkownika. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU bezczynny po raz pierwszy"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Pierwsze wyrenderowanie czegoś znaczącego oznacza czas pojawienia się na ekranie głównej zawartości strony. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Pierwsze wyrenderowanie czegoś znaczącego"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Czas do pełnej interaktywności oznacza czas, po którym strona jest całkowicie interaktywna. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Czas do pełnej interaktywności"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Indeks szybkości wskazuje, jak szybko strona zapełnia się widocznymi treściami. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/speed-index)"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indeks szybkości"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Przekierowania wprowadzają dodatkowe opóźnienia przed rozpoczęciem ładowania strony. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/redirects)"},

"lighthouse-core/audits/redirects.js | title":{
"message":"Unikaj wielokrotnych przekierowań"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Czas do pierwszego bajtu oznacza czas wysłania odpowiedzi przez serwer. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/ttfb)"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Czas odpowiedzi głównego dokumentu: {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Skróć czasy reakcji serwera (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Czasy odpowiedzi serwera są krótkie (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Czas trwania"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nazwa"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Czas rozpoczęcia"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Typ"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Do aplikacji możesz dodać obsługę interfejsu User Timing API, by mierzyć rzeczywistą szybkość aplikacji z punktu widzenia użytkownika. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/user-timing)"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 czas działań użytkownika}few{# czasy działań użytkownika}many{# czasów działań użytkownika}other{# czasu działań użytkownika}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Znaczniki i odcinki Czasu działań użytkownika"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Rozważ dodanie wskazówek „preconnect” lub „dns-prefetch”, by wcześniej nawiązać połączenia z ważnymi źródłami w innych domenach. [Więcej informacji](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Wcześniej nawiąż połączenia z wymaganymi źródłami"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Pomyśl o użyciu deklaracji <link rel=preload>, by szybciej pobierały się zasoby, które są obecnie żądane na dalszym etapie ładowania strony. [Więcej informacji](https://developers.google.com/web/tools/lighthouse/audits/preload)"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Załaduj wstępnie kluczowe żądania"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Więcej informacji o wydajności aplikacji."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostyka"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Najważniejszym aspektem wydajności jest to, jak szybko piksele zostaną wyświetlone na ekranie. Kluczowe wskaźniki: Pierwsze wyrenderowanie treści, Pierwsze wyrenderowanie czegoś znaczącego"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Ulepszenia pierwszego renderowania"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Te optymalizacje mogą przyspieszyć ładowanie stron."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Możliwości"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Dane"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Usprawnij całe ładowanie, by strona jak najszybciej była gotowa do używania i reagowała na działania użytkownika. Główne wskaźniki: Czas do pełnej interaktywności, Indeks szybkości"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Ogólne usprawnienia"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Wydajność"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Czas przechowywania danych w pamięci podręcznej"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Rozmiar (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Spędzony czas"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potencjalne oszczędności (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potencjalne oszczędności (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potencjalna oszczędność: {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potencjalne przyspieszenie o {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Pokaż audyty"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Początkowa nawigacja"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksymalne opóźnienie ścieżki krytycznej:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Błąd"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Błąd raportu: brak informacji o audycie"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Dane laboratoryjne"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analiza [Lighthouse](https://developers.google.com/web/tools/lighthouse/) bieżącej strony przy emulowanym połączeniu 3G. Wartości są szacunkowe i mogą się zmieniać."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Dodatkowe elementy do ręcznego sprawdzenia"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nie dotyczy"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Możliwość"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Szacowane oszczędności"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Zaliczone audyty"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Skala wyników:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Podczas tego uruchomienia Lighthouse wystąpiły problemy:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Wartości są szacunkowe i mogą się zmieniać."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Ostrzeżenia "}};


},{}],65:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"As extensões do Chrome afetam negativamente o desempenho de carregamento desta página. Experimente efetuar uma auditoria à página no modo de navegação anónima ou com um perfil do Chrome sem extensões."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Avaliação do script"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Análise do script"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Considere reduzir o tempo despendido a analisar, compilar e executar JS. Poderá descobrir que é útil fornecer payloads de JS mais pequenos. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reduza o tempo de execução de JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Tempo de execução de JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Os GIFs grandes são ineficientes para publicar conteúdo animado. Para poupar bytes de rede, considere utilizar vídeos MPEG4/WebM para animações e ficheiros PNG/WebP para imagens estáticas em vez de GIFs. [Saiba mais](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)."},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Utilize formatos de vídeo para conteúdo animado"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Considere utilizar imagens de carregamento lento não visíveis e ocultas após a conclusão do carregamento de todos os recursos críticos, para reduzir o tempo até à interação. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Adie as imagens não visíveis"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"O primeiro preenchimento da sua página está a ser bloqueado por recursos. Considere publicar JS/CSS críticos inline e adiar todos os JS/estilos não críticos. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Elimine recursos que bloqueiam o processamento"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Os grandes payloads de rede têm custos reais para os utilizadores e estão fortemente correlacionados com tempos de carregamento demorados. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"O tamanho total foi de {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Evite enormes payloads de rede"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Evita enormes payloads de rede"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Reduzir os ficheiros CSS pode reduzir os tamanhos dos payloads de rede. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Reduza o CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Reduzir os ficheiros JavaScript pode reduzir os tamanhos dos payloads e o tempo de análise de scripts. [Saiba mais](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Reduza o JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Remova regras não utilizadas das folhas de estilos para reduzir a quantidade de bytes desnecessários consumidos pela atividade da rede. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Adie o CSS não utilizado"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Remova o JavaScript não utilizado para reduzir os bytes consumidos pela atividade da rede."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Remova o JavaScript não utilizado"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Uma duração total longa da cache pode acelerar as visitas repetidas à sua página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 recurso encontrado}other{# recursos encontrados}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Publique recursos estáticos com uma política de cache eficiente"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Utiliza uma política de cache eficiente em recursos estáticos"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"As imagens otimizadas são carregadas mais rapidamente e consomem menos dados móveis. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codifique as imagens de forma eficiente"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Publique imagens com um tamanho adequado para poupar dados móveis e melhorar o tempo de carregamento. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Dimensione adequadamente as imagens"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Os recursos baseados em texto devem ser publicados com compressão (gzip, Deflate ou Brotli) para reduzir o total de bytes de rede. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Ative a compressão de texto"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Muitas vezes, os formatos de imagem como JPEG 2000, JPEG XR e WebP proporcionam uma melhor compressão do que os formatos PNG ou JPEG, o que se traduz em transferências mais rápidas e num menor consumo de dados. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Publique imagens em formatos de última geração"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"As Cadeias de pedidos críticos abaixo apresentam os recursos que são carregados com uma prioridade elevada. Pondere reduzir o comprimento das cadeias, reduzir o tamanho de transferência dos recursos ou adiar a transferência de recursos desnecessários para melhorar o carregamento da página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 cadeia encontrada}other{# cadeias encontradas}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Reduza a profundidade de pedidos críticos"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Os engenheiros de navegadores recomendam que as páginas contenham menos de ~1500 nós de DOM. O ideal é uma árvore com uma profundidade < 32 elementos e menos de 60 elementos superiores/secundários. Um DOM grande pode aumentar a utilização da memória, gerar [cálculos de estilo](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) mais demorados e produzir [ajustes de esquema](https://developers.google.com/speed/articles/reflow) dispendiosos. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nó}other{# nós}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Evite um tamanho excessivo do DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Profundidade máxima do DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total de nós do DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Evita um tamanho excessivo do DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Tire partido da funcionalidade CSS de apresentação de tipos de letra para garantir que o texto é visível para o utilizador enquanto os tipos de letra para Websites são carregados. [Saiba mais](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Garanta que o texto permanece visível durante o carregamento de tipos de letra para Websites"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Todo o texto permanece visível durante os carregamentos de tipos de letra para Websites"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categoria"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Considere reduzir o tempo despendido a analisar, compilar e executar JS. Poderá descobrir que é útil fornecer payloads de JS mais pequenos."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Reduzir as operações do thread principal"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Reduz as operações do thread principal"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"A pontuação acima é uma estimativa do tempo que a sua aplicação demora a responder a ações do utilizador, em milissegundos, durante a janela dos 5 segundos mais ativos de carregamento de página. Se a latência for superior a 50 ms, os utilizadores poderão considerar que a sua aplicação é lenta. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Latência estimada das ações"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"O Primeiro preenchimento com conteúdo assinala o momento de preenchimento com o primeiro texto ou a primeira imagem. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Primeiro preenchimento com conteúdo"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"A métrica Primeira CPU inativa indica quando é que o thread principal da página está suficientemente inativo pela primeira vez para processar ações. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Primeira CPU inativa"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"A métrica Primeiro preenchimento significativo mede quando é que o conteúdo principal de uma página fica visível. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Primeiro preenchimento significativo"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"A métrica Tempo até à interação indica quando é que a página fica completamente interativa. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tempo até à interação"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"A métrica Índice de velocidade apresenta a rapidez de preenchimento visível dos conteúdos de uma página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Índice de velocidade"},

"lighthouse-core/audits/redirects.js | description":{
"message":"A auditoria Redirecionamentos introduz atrasos adicionais antes do carregamento da página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Evite vários redirecionamentos de página"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"A auditoria Tempo até ao primeiro byte indica o tempo de envio de uma resposta pelo seu servidor. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"O documento de raiz demorou {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reduza os tempos de resposta do servidor (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Os tempos de resposta do servidor são curtos (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Duração"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nome"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Hora de início"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tipo"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Pondere a possibilidade de complementar a sua aplicação com a API Tempos do utilizador para analisar o desempenho da aplicação no mundo real durante as principais experiências do utilizador. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 tempo do utilizador}other{# tempos do utilizador}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Marcas e medições de Tempos do utilizador"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Considere adicionar instruções para recursos de pré-ligação ou de obtenção prévia de DNS para estabelecer ligações antecipadamente a origens de terceiros importantes. [Saiba mais](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Efetue a pré-ligação às origens necessárias"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Considere utilizar <link rel=preload> para dar prioridade à obtenção de recursos que são atualmente solicitados mais tarde no carregamento de página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Pré-carregue pedidos-chave"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Mais informações sobre o desempenho da sua aplicação."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnósticos"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"O aspeto mais importante do desempenho é a rapidez de renderização dos píxeis no ecrã. Métricas principais: Primeiro preenchimento com conteúdo, Primeiro preenchimento significativo."},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Melhorias no primeiro preenchimento"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Estas otimizações podem acelerar o carregamento da sua página."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Oportunidades"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Métricas"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Melhore a experiência de carregamento geral para que a página responda e fique pronta a utilizar logo que possível. Métricas principais: Tempo até à interação, Índice de velocidade."},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Melhorias gerais"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Desempenho"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL da cache"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Tamanho (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Tempo gasto"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Poupança potencial (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Poupança potencial (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Poupança potencial de {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Poupança potencial de {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} seg"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Mostrar auditorias"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navegação inicial"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latência crítica máxima do caminho:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Erro!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Erro de relatório: sem informações de auditoria"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Dados laboratoriais"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) análise da página atual em rede 3G emulada. Os valores são aproximados e podem variar."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Itens adicionais a verificar manualmente"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Não aplicável"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Oportunidade"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Poupança estimada"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Auditorias aprovadas"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Escala da pontuação:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Ocorreram problemas que afetaram esta execução do Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Os valores são estimados e podem variar."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Avisos: "}};


},{}],66:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"As extensões do Chrome afetaram negativamente o desempenho de carregamento desta página. Tente fazer a auditoria da página no modo de navegação anônima ou em um perfil do Chrome sem extensões."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Avaliação de script"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Análise de script"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Reduza o tempo gasto com análise, compilação e execução de JS. Você perceberá que exibir payloads de JS menores ajuda a fazer isso. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Reduza o tempo de execução de JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Tempo de execução de JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"GIFs grandes são ineficazes para exibir conteúdo animado. Use vídeos MPEG4/WebM para animações e PNG/WebP para imagens estáticas em vez de GIF, para economizar bytes de rede. [Saiba mais](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Use formatos de vídeo para conteúdo animado"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Use o carregamento lento para imagens fora da tela e ocultas depois que todos os recursos críticos já estiverem carregados, para reduzir o tempo necessário até que a página se torne interativa. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Adie imagens fora da tela"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Alguns recursos estão bloqueando o primeiro aparecimento da sua página. Considere exibir JS/CSS crítico inline e adiar todos os JS/estilos não críticos. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Elimine recursos que impedem a renderização"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Grandes payloads de rede geram custos para os usuários e estão altamente relacionados a tempos maiores de carregamento. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"O tamanho total foi de {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Evite payloads de rede muito grandes"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Evita payloads de rede muito grandes"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"A redução de arquivos CSS pode diminuir o tamanho do payload de rede. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Reduza o CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"A redução de arquivos JavaScript pode diminuir o tamanho de payloads e o tempo de análise de scripts. [Saiba mais](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Reduza o JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Remova regras não utilizadas das folhas de estilos para reduzir o consumo desnecessário de bytes da atividade de rede. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Adie CSS não utilizado"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Remova o JavaScript não utilizado para reduzir o consumo de bytes da atividade de rede."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Remova o JavaScript não utilizado"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Um cache com ciclo de vida longo pode acelerar visitas repetidas à sua página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 recurso encontrado}one{# recurso encontrado}other{# recursos encontrados}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Disponibilize recursos estáticos com uma política de cache eficiente"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Usa uma política de cache eficiente em recursos estáticos"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Imagens otimizadas são carregadas mais rapidamente e consomem menos dados da rede celular. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codifique as imagens com eficiência"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Disponibilize imagens de tamanho adequado para economizar dados da rede celular e melhorar o tempo de carregamento. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Defina um tamanho adequado para as imagens"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Os recursos baseados em texto precisam ser disponibilizados com compactação (gzip, deflate ou brotli) para reduzir o total de bytes da rede. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Ative a compactação de texto"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formatos de imagem como JPEG 2000, JPEG XR e WebP geralmente resultam em uma compactação melhor em comparação a PNG ou JPEG, o que significa downloads mais rápidos e menor consumo de dados. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Disponibilize imagens em formatos de última geração"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"As redes de solicitações críticas abaixo mostram os recursos carregados com alta prioridade. Reduza o tamanho das redes ao diminuir o tamanho do download dos recursos ou ao adiar o download de recursos desnecessários para melhorar o carregamento de página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 rede encontrada}one{# rede encontrada}other{# redes encontradas}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Reduza a profundidade de solicitações críticas"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Os engenheiros de navegador recomendam que as páginas tenham menos de ~1.500 nós de DOM. O ideal é uma profundidade de árvore com < 32 elementos e menos de 60 elementos filhos/pais. Um DOM grande pode aumentar o uso da memória, causar [cálculos de estilo] mais longos (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) e produzir [reflows de layout] de alto custo (https://developers.google.com/speed/articles/reflow). [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nó}one{# nó}other{# nós}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Evite DOM de tamanho excessivo"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Profundidade máxima de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Total de nós de DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Evita DOM de tamanho excessivo"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Use o recurso CSS de exibição de fonte para garantir que o texto possa ser visto pelo usuário enquanto as webfonts são carregadas. [Saiba mais](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Garanta que o texto continue visível durante o carregamento da webfont"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Todo o texto continua visível durante o carregamento da webfont"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categoria"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Reduza o tempo gasto com análise, compilação e execução de JS. Você perceberá que exibir payloads de JS menores ajuda a fazer isso."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimize o trabalho da thread principal"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimiza o trabalho da thread principal"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"A pontuação acima é uma estimativa do tempo que seu aplicativo leva para responder à atividade do usuário, em milésimos de segundo, durante a janela de carregamento de página mais movimentada de cinco segundos. Se a latência for superior a 50 ms, o usuário poderá notar lentidão no aplicativo. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Latência de entrada estimada"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"A primeira exibição de conteúdo marca o momento em que o primeiro texto ou imagem é disponibilizado. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Primeiro aparecimento com conteúdo"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"\"Primeira CPU ociosa\" marca a primeira vez que a thread principal da página fica silenciosa o suficiente para lidar com a entrada. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Primeira CPU ociosa"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"\"Primeiro aparecimento importante\" marca o momento em que o conteúdo principal de uma página se torna visível. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Primeiro aparecimento importante"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"\"Interativa\" marca o momento em que a página se torna totalmente interativa. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tempo até ficar interativa"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"O Índice de velocidade mostra a rapidez com que o conteúdo de uma página é preenchido visivelmente. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Índice de velocidade"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Os redirecionamentos causam mais atrasos antes do carregamento da página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Evite redirecionamentos múltiplos de página"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"\"Tempo até o primeiro byte\" identifica o momento em que seu servidor envia uma resposta. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"O documento raiz levou {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Reduza os tempos de resposta do servidor (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Os tempos de resposta do servidor são baixos (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Duração"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nome"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Horário de início"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tipo"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Instrumente seu app com a User Timing API para medir o desempenho real do app durante as principais experiências do usuário. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 velocidade do usuário}one{# velocidade do usuário}other{# velocidades do usuário}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Marcações e medições de User Timing"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Adicione dicas de recursos de pré-conexão ou pré-busca de DNS para estabelecer conexões antecipadas a origens importantes de terceiros. [Saiba mais](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Pré-conecte às origens necessárias"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Use <link rel=preload> para priorizar a busca posterior de recursos solicitados atualmente no carregamento de página. [Saiba mais](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Pré-carregue as principais solicitações"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Mais informações sobre o desempenho do seu aplicativo."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnóstico"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"O aspecto de desempenho mais importante é a rapidez com que os pixels são renderizados na tela. Principais métricas: Primeiro aparecimento com conteúdo, Primeiro aparecimento importante"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Melhorias do primeiro aparecimento"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Essas otimizações podem acelerar o carregamento de página."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Oportunidades"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Métricas"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Aprimore a experiência geral de carregamento, para que a página seja responsiva e esteja pronta para ser usada assim que possível. Principais métricas: Tempo até fica interativa, Índice de velocidade"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Melhorias gerais"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Desempenho"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Cache TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Tamanho (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Tempo gasto"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Possível economia (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Possível economia (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Possível economia de {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Possível economia de {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Mostrar auditorias"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navegação inicial"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latência máxima do caminho crítico:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Erro!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Informar erro: nenhuma informação de auditoria"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Dados de laboratório"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Análise do [Lighthouse](https://developers.google.com/web/tools/lighthouse/) da página atual em emulação de 3G. Os valores indicados são estimativas e podem variar."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Outros itens para verificação manual"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Não aplicável"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Oportunidade"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Economia estimada"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Auditorias aprovadas"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Escala de pontuação:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Alguns problemas afetaram esta execução do Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Os valores são estimados e podem variar."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Avisos: "}};


},{}],67:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Extensiile Chrome au afectat performanța de încărcare a acestei pagini. Încearcă să auditezi pagina în modul incognito sau dintr-un profil Chrome fără extensii."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Evaluarea scripturilor"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Analizarea scripturilor"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Total"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Poți reduce timpul petrecut cu analizarea, compilarea și executarea JS. Livrarea unor sarcini JS mai mici poate ajuta în acest sens. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Redu timpul de execuție JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Timpul de executare JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"GIF-urile mari nu sunt eficiente pentru difuzarea conținutului animat. Folosește videoclipuri MPEG4/WebM pentru animații și PNG/WebP pentru imagini statice în locul GIF-urilor ca să economisești date în rețea. [Află mai multe](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Folosește formate video pentru conținut animat"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Poți încărca lent imaginile ascunse sau pe cele din afara ecranului după ce toate resursele esențiale s-au încărcat, pentru a micșora durata până la interactivitate. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Amână imaginile din afara ecranului"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resursele blochează prima redare a paginii. Poți să livrezi conținutul JS/CSS esențial inline și să amâni toate elementele JS/stilurile neesențiale. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Elimină resursele care blochează redarea"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Sarcinile mari de rețea îi costă pe utilizatori și sunt corelate cu timpi de încărcare îndelungați. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Dimensiunea totală a fost de {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Evită sarcinile uriașe de rețea"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Evită sarcinile uriașe de rețea"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Comprimarea fișierelor CSS poate reduce dimensiunea sarcinilor de rețea. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Comprimă codul CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Comprimarea fișierelor JavaScript poate reduce dimensiunea sarcinilor și timpul de analizare a scripturilor. [Află mai multe](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Comprimă codul JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Elimină regulile nefolosite din foile de stil pentru a reduce byții inutili consumați de activitatea rețelei. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Amână conținutul CSS nefolosit"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Elimină codul JavaScript nefolosit pentru a reduce byții consumați de activitatea rețelei."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Elimină codul JavaScript nefolosit"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"O durată lungă a memoriei cache poate grăbi accesările repetate ale paginii. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{o resursă găsită}few{# resurse găsite}other{# de resurse găsite}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Difuzează elementele statice cu o politică eficientă de stocare în memoria cache"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Folosește o politică eficientă de stocare în memoria cache pentru elementele statice"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Imaginile optimizate se încarcă mai repede și consumă mai puține date mobile. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Codifică eficient imaginile"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Difuzează imagini de dimensiuni corespunzătoare ca să economisești date mobile și să obții o încărcare mai rapidă. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Dimensionează corect imaginile"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Înainte de difuzare, resursele bazate pe text trebuie comprimate (gzip, deflate sau brotli) pentru a minimiza numărul total de byți în rețea. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Activează comprimarea textului"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formatele de imagine ca JPEG 2000, JPEG XR și WebP oferă adesea o comprimare mai bună decât PNG sau JPEG, ceea ce înseamnă descărcări mai rapide și mai puțin consum de date. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Difuzează imagini în formate moderne"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Lanțurile de solicitări esențiale de mai jos îți arată ce resurse sunt încărcate cu prioritate ridicată. Poți să reduci lungimea lanțurilor, să reduci dimensiunea de descărcare a resurselor sau să amâni descărcarea de resurse inutile pentru a îmbunătăți încărcarea paginilor. [Află mai multe] (https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{un lanț găsit}few{# lanțuri găsite}other{# de lanțuri găsite}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Redu profunzimea solicitărilor esențiale"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Specialiștii în browsere recomandă ca paginile să conțină mai puțin de ~1.500 de noduri DOM. Ideal este ca arborele să aibă o profunzime mai mică de 32 de elemente și mai puțin de 60 de elemente principale/subordonate. Un DOM mare poate crește folosirea memoriei, poate produce [calcule de stil] (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) mai lungi și poate produce [rearanjări ale aspectului](https://developers.google.com/speed/articles/reflow). [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{un nod}few{# noduri}other{# de noduri}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Evită o dimensiune DOM excesivă"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Adâncimea DOM maximă"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Numărul total de noduri DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Evită o dimensiune DOM excesivă"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Poți folosi funcția CSS de afișare a fonturilor pentru a verifica dacă textul este vizibil pentru utilizatori în timp ce se încarcă fonturile web. [Află mai multe](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Asigură-te că textul rămâne vizibil în timpul încărcării fonturilor web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Tot textul rămâne vizibil în timpul încărcării fonturilor web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Categorie"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Poți reduce timpul petrecut cu analizarea, compilarea și executarea JS. Livrarea unor sarcini JS mai mici poate ajuta în acest sens."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimizează procesarea firului principal"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimizează procesarea firului principal"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Scorul de mai sus reprezintă o estimare a duratei necesare pentru ca aplicația să răspundă la comanda utilizatorului, în milisecunde, în cea mai aglomerată fereastră de 5 secunde de încărcare a paginii. Dacă latența este mai mare de 50 ms, utilizatorii îți pot percepe aplicația ca fiind lentă. [Află mai multe] (https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Latența estimată a comenzilor"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Prima redare de conținut arată momentul când se redă primul text sau prima imagine. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Prima redare de conținut"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Primul „CPU inactiv” semnalează primul moment în care firul principal al paginii este suficient de liber pentru a accepta comenzi. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Primul „CPU inactiv”"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Prima redare semnificativă arată momentul când este vizibil conținutul principal al unei pagini. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Prima redare semnificativă"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interactivitatea semnalează momentul când pagina este complet interactivă. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Timpul până la interactivitate"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Indexul de viteză arată cât de repede se completează vizibil conținutul unei pagini. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Index de viteză"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Redirecționările introduc întârzieri suplimentare înainte ca pagina să se poată încărca. [Află mai multe] (https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Evită mai multe redirecționări ale paginii"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Timpul până la primul byte identifică timpul în care serverul trimite un răspuns. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Documentul rădăcină a avut nevoie de {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Redu timpii de răspuns ai serverului (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Serverul răspunde repede (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Durată"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Nume"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Ora de începere"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tip"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Îți poți îmbunătăți aplicația cu API-ul User Timing ca să măsori performanța reală a acesteia în timpul experiențelor de utilizare principale. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{o durată a utilizării}few{# durate ale utilizărilor}other{# de durate ale utilizărilor}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Mărci și dimensiuni pentru Duratele utilizărilor"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Poți adăuga indicii de resurse de preconectare sau dns-prefetch pentru a stabili conexiuni inițiale cu originile terță parte importante. [Află mai multe](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Preconectează la originile necesare"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Poți folosi <link rel=preload> ca să acorzi prioritate preluării resurselor care sunt momentan solicitate mai târziu la încărcarea paginii. [Află mai multe](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Preîncarcă solicitările importante"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Mai multe informații despre performanța aplicației tale."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnosticare"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Cel mai important aspect al performanței este cât de repede se redau pixelii pe ecran. Valori cheie: prima redare de conținut, prima redare semnificativă"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Îmbunătățirile pentru prima redare"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Aceste optimizări pot accelera încărcarea paginii."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Oportunități"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Valori"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Îmbunătățește experiența globală de încărcare, astfel ca pagina să se afișeze și să fie gata de utilizare cât mai curând posibil. Valori cheie: timpul până la interactivitate, indexul de viteză"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Îmbunătățiri generale"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performanță"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL cache"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Dimensiune (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Timp petrecut"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"Adresa URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Economii potențiale (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Economii potențiale (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Poți economisi {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Poți economisi {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Afișează audituri"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Navigare inițială"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Latența maximă a căii critice:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Eroare!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Eroare de raport: nu există informații de auditare"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Datele testului"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analiza în [Lighthouse](https://developers.google.com/web/tools/lighthouse/) a paginii actuale cu o conexiune 3G emulată. Valorile sunt estimate și pot varia."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Elemente suplimentare de verificat manual"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nu se aplică"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Oportunitate"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Economii estimate"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Auditări trecute"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Scala scorului:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Au apărut probleme care au afectat această rulare Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Valorile sunt estimate și pot varia."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Avertismente: "}};


},{}],68:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Расширения Chrome замедляют загрузку этой страницы. Попробуйте использовать режим инкогнито или профиль Chrome без расширений."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Время оценки скриптов"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Время анализа скриптов"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Всего"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Рекомендуем сократить время на анализ, компиляцию и выполнение скриптов JS. Для этого вы можете уменьшить размер фрагментов кода JS. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Сократите время выполнения кода JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Время выполнения кода JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Большие GIF-файлы – неэффективный способ представления анимации. Чтобы сэкономить трафик в сети, используйте видео в формате MPEG4/WebM для анимированного контента и изображения в формате PNG/WebP – для статического. [Подробнее…](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Используйте видеоформаты для анимированного контента"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Чтобы уменьшить время до начала взаимодействия, рекомендуем использовать принцип lazy loading для скрытых изображений после того, как все важные ресурсы будут загружены. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Отложите загрузку скрытых изображений"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Некоторые ресурсы препятствуют загрузке контента страницы. Рекомендуем настроить загрузку необходимых ресурсов JS/CSS в первую очередь и отложить загрузку остальных ресурсов. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Устраните ресурсы, блокирующие отображение"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Чрезмерная нагрузка на сеть стоит пользователям реальных денег и может стать причиной долгого ожидания при работе в Интернете. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Общий размер достиг {totalBytes, number, bytes} КБ"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Предотвратите чрезмерную нагрузку на сеть"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Предотвращение чрезмерной нагрузки на сеть"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Уменьшение CSS-файлов может сократить нагрузку на сеть. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Уменьшите размер кода CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Уменьшение файлов JavaScript может сократить размер фрагментов кода и время анализа скриптов. [Подробнее…](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Уменьшите размер кода JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Чтобы сократить расход трафика, удалите неиспользуемые правила из таблиц стилей. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Отложите загрузку неиспользуемого контента CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Чтобы сократить расход трафика, удалите неиспользуемый код JavaScript."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Удалите неиспользуемый код JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Длительное время хранения кеша может ускорить загрузку при повторных посещениях страницы. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Найден 1 ресурс}one{Найден # ресурс}few{Найдено # ресурса}many{Найдено # ресурсов}other{Найдено # ресурса}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Задайте правила эффективного использования кеша для статических объектов"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Настройка правил эффективного использования кеша для статических объектов"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Оптимизированные изображения загружаются быстрее и расходуют меньше мобильных данных. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Настройте эффективную кодировку изображений"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Чтобы сэкономить мобильные данные и ускорить загрузку, настройте подходящий размер изображений на странице. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Настройте подходящий размер изображений"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Чтобы уменьшить расход трафика в сети, рекомендуем использовать сжатие для текстовых ресурсов (gzip, deflate или brotli). [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Включите сжатие текста"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Для изображений в форматах JPEG 2000, JPEG XR и WebP используется более эффективное сжатие, поэтому они загружаются быстрее и потребляют меньше трафика, чем изображения PNG и JPEG. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Используйте современные форматы изображений"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Приведенные ниже цепочки критических запросов показывают, какие ресурсы загружаются с высоким приоритетом. Чтобы ускорить загрузку страниц, рекомендуем сократить длину цепочек, уменьшить размер скачиваемых ресурсов или отложить скачивание ненужных ресурсов. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Найдена 1 цепочка}one{Найдена # цепочка}few{Найдено # цепочки}many{Найдено # цепочек}other{Найдено # цепочки}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Сократите глубину вложенности критических запросов"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Разработчики браузеров рекомендуют, чтобы на странице было не более 1500 узлов DOM. Наилучшие показатели: глубина вложенности менее 32 элементов, количество дочерних и родительских элементов – менее 60. Сложная структура DOM может увеличить использование памяти, замедлить [вычисление стилей](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) и повысить затраты на [компоновку шаблонов](https://developers.google.com/speed/articles/reflow). [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 узел}one{# узел}few{# узла}many{# узлов}other{# узла}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Сократите размер структуры DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Максимальная глубина вложенности DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Общее количество узлов DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Сокращение размера структуры DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Чтобы пользователь мог видеть текст, пока веб-шрифты не загрузились, используйте функцию отображения шрифтов CSS. [Подробнее…](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Настройте показ всего текста во время загрузки веб-шрифтов"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Показ всего текста во время загрузки веб-шрифтов"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Категория"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Рекомендуем сократить время на анализ, компиляцию и выполнение скриптов JS. Для этого вы можете уменьшить размер фрагментов кода JS."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Минимизируйте работу в основном потоке"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Минимизация работы в основном потоке"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Это значение показывает время в миллисекундах, которое занимает реакция приложения на действия пользователя в течение самых занятых 5 с загрузки страницы. Если это время превышает 50 мс, пользователям может показаться, что ваше приложение работает с задержками. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Приблизительное время задержки при вводе"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Первая отрисовка контента – показатель, который определяет интервал времени между началом загрузки страницы и появлением первого изображения или блока текста. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Время загрузки первого контента"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Этот параметр показывается время, в которое основной поток страницы становится достаточно свободен для обработки ручного ввода. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Время окончания работы ЦП"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Этот параметр показывает время, по истечении которого становится виден основной контент страницы. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Время загрузки достаточной части контента"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Этот параметр представляет собой отметку времени, когда страница становится полностью готова к взаимодействию с пользователем. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Время загрузки для взаимодействия"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Индекс скорости загрузки показывает, насколько быстро контент страницы становится доступен для просмотра. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Индекс скорости загрузки"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Переадресация может стать причиной дополнительной задержки при загрузке страницы. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Избегайте большого количества переадресаций"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Время до получения первого байта показывает задержку, после которой с вашего сервера отправляется ответ на запрос. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Загрузка корневого документа заняла {timeInMs, number, milliseconds} мс"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Сократите время ответа сервера (время до получения первого байта)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Короткое время ответа сервера (время до получения первого байта)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Длительность"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Название"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Время начала"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Тип"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Используйте User Timing API, чтобы измерить реальную производительность своего приложения во время ключевых моментов взаимодействия с пользователями. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 временная метка}one{# временная метка}few{# временные метки}many{# временных меток}other{# временной метки}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Метки и промежутки пользовательского времени"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Чтобы быстро устанавливать соединение с необходимыми сторонними доменами, рекомендуем добавить ресурсные подсказки preconnect или dns-prefetch. [Подробнее…](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Используйте предварительное подключение к необходимым доменам"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Чтобы загружать требуемые ресурсы в порядке приоритета, вам следует использовать <link rel=предварительную загрузку>. [Подробнее…](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Настройте предварительную загрузку ключевых запросов"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Подробная информация о производительности вашего приложения."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Диагностика"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Один из самых важных параметров производительности – насколько быстро пиксели отображаются на экране. Ключевые показатели: \"Время загрузки первого контента\" и \"Время загрузки достаточной части контента\"."},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Уменьшение времени загрузки контента"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Эти действия по оптимизации могут ускорить загрузку страницы."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Оптимизация"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Показатели"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Улучшите параметры загрузки, чтобы страница была готова для работы как можно скорее. Ключевые показатели: \"Время загрузки для взаимодействия\" и \"Индекс скорости загрузки\"."},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Общие улучшения"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Производительность"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Время жизни кеша"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Размер (КБ)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Потраченное время"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Потенциальная экономия данных (КБ)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Потенциальная экономия времени (мс)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Потенциальная экономия данных: {wastedBytes, number, bytes} КБ"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Потенциальная экономия времени: {wastedMs, number, milliseconds} мс"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} мс"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} сек."},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Показать аудиты"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Начальная навигация"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Максимальная задержка критического пути:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Ошибка"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Ошибка отчета: информация аудита отсутствует"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Лабораторные данные"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Анализ [Lighthouse](https://developers.google.com/web/tools/lighthouse/) для текущей страницы в условиях эмулированной 3G-сети. Значения приблизительные и могут изменяться."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Дополнительные объекты для проверки вручную"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Неприменимо"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Возможности"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Приблизительная экономия"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Успешные аудиты"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Легенда:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Во время работы Lighthouse возникли следующие проблемы:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Значения приблизительные и могут изменяться."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Предупреждения: "}};


},{}],69:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Rozšírenia pre Chrome negatívne ovplyvnili výkonnosť načítania tejto stránky. Skúste stránku skontrolovať v režime inkognito alebo profile Chrome bez rozšírení."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Hodnotenie skriptu"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Analýza skriptu"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Celkovo"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Zvážte skrátenie času stráveného analýzou, zostavovaním a spustením JavaScriptu. Možno vám s tým pomôže zobrazovanie menších prenášaných dát JavaScriptu. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Skráťte čas spustenia JavaScriptu"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Čas spustenia JavaScriptu"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Veľké GIFy nie sú vhodné na zobrazovanie animovaného obsahu. Namiesto nich odporúčame použiť videá MPEG4/WebM pre animácie a PNG/WebP pre statické obrázky, aby ste ušetrili spotrebu bajtov v sieti. [Ďalšie informácie](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Pre animovaný obsah použite formáty videa"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Zvážte oneskorené načítanie obrázkov, ktoré sú mimo obrazovky alebo skryté, a to až po dokončení načítania všetkých podstatných zdrojov, čím skrátite čas do interaktívneho vykreslenia. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Oddiaľte načítanie obrázkov mimo obrazovky"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Zdroje blokujú prvé vyfarbenie stránky. Zvážte zobrazovanie podstatných JavaScriptov alebo šablón CSS v texte a oddialenie všetkých nepodstatných JavaScriptov alebo štýlov. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Odstráňte zdroje blokujúce vykreslenie"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Veľké sieťové prenosy dát stoja používateľov mnoho peňazí a často sú spájané s dlhými časmi načítania. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Celková veľkosť bola {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Zabráňte nadmerným sieťovým prenosom dát"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Zabráni nadmerným sieťovým prenosom dát"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Minifikáciou súborov šablón CSS môžete znížiť veľkosti sieťových prenosov dát. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minifikujte súbory CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Minifikáciou súborov JavaScriptu môžete znížiť veľkosti prenášaných dát a čas analýzy skriptu. [Ďalšie informácie](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minifikujte JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Odstráňte nepoužívané pravidlá zo šablón štýlov a znížte tak zbytočnú spotrebu bajtov sieťovou aktivitou. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Oddiaľte nepoužívané šablóny CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Odstráňte nepoužívaný JavaScript a znížte tak spotrebu bajtov sieťovou aktivitou."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Odstráňte nepoužívaný JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Dlhá životnosť vyrovnávacej pamäte môže urýchliť opakované návštevy stránky. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Našiel sa 1 zdroj}few{Našli sa # zdroje}many{# resources found}other{Našlo sa # zdrojov}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Zobrazujte statické podklady s účinnými pravidlami ukladania do vyrovnávacej pamäte"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Používa účinné pravidlá ukladania do vyrovnávacej pamäte pre statické podklady"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimalizované obrázky sa načítavajú rýchlejšie a spotrebúvajú menej mobilných dát. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Účinne zakódujte obrázky"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Zobrazujte obrázky s primeranou veľkosťou, čím ušetríte mobilné dáta a skrátite čas načítania. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Nastavte primeranú veľkosť obrázkov"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Textové zdroje by sa mali zobrazovať komprimované (gzip, deflate alebo brotli), aby sa minimalizovala celková spotreba bajtov v sieti. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Povoľte kompresiu textu"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formáty obrázka, napríklad JPEG 2000, JPEG XR a WebP, zvyčajne poskytujú lepšiu kompresiu než PNG alebo JPEG, čo znamená rýchlejšie sťahovanie a nižšiu spotrebu dát. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Zobrazujte obrázky vo formátoch ďalšej generácie"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Reťazce podstatných žiadostí uvedené nižšie znázorňujú, ktoré zdroje sú načítané s vysokou prioritou. Zvážte skrátenie dĺžky reťazcov, aby ste znížili veľkosť sťahovaných zdrojov, alebo odložte sťahovanie nepotrebných zdrojov, čím zlepšíte načítanie stránky. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Našiel sa 1 reťazec}few{Našli sa # reťazce}many{# chains found}other{Našlo sa # reťazcov}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minimalizujte hĺbku podstatných žiadostí"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Inžinieri prehliadača odporúčajú, aby stránky obsahovali menej ako ~1 500 uzlov DOM. Optimálna hodnota je hĺbka stromovej štruktúry menšia ako 32 prvkov a menej ako 60 podradených/nadradených prvkov. Veľký prvok DOM môže zvýšiť spotrebu pamäte, predĺžiť [výpočty štýlov](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) a spôsobiť nákladné [preformátovania rozložení](https://developers.google.com/speed/articles/reflow). [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 uzol}few{# uzle}many{# nodes}other{# uzlov}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Nepoužívajte nadmerne veľký prvok DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maximálna hĺbka prvku DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Celkový počet uzlov DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Zabráni použitiu nadmerne veľkého prvku DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Využite funkciu CSS zobrazenia písma, ktorá pomôže zaistiť, aby bol text viditeľný používateľom počas načítavania webfontov. [Ďalšie informácie](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Zaistite, aby text zostal počas načítania webfontov viditeľný"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Všetok text zostane počas načítania webfontov viditeľný"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategória"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Zvážte skrátenie času stráveného analýzou, zostavovaním a spustením JavaScriptu. Možno vám s tým pomôže zobrazovanie menších prenášaných dát JavaScriptu."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimalizujte prácu hlavného vlákna"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimalizuje prácu hlavného vlákna"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Skóre uvedené vyššie je odhadovaný čas odozvy na vstup používateľa v milisekundách počas najrušnejších 5 sekúnd načítania stránky. Ak latencia prevyšuje 50 ms, používateľom sa môžu zdať odozvy aplikácie oneskorené. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Odhadovaná latencia vstupu"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Prvé obsahové vyfarbenie označuje čas, za ktorý je vyfarbený prvý text alebo obrázok. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Prvé obsahové vyfarbenie"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Prvá nečinnosť procesora označuje, kedy je hlavné vlákno stránky prvýkrát dostatočne nečinné na spracovanie vstupu. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Prvá nečinnosť procesora"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Prvé účelné vyfarbenie meria, kedy je hlavný obsah stránky viditeľný. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Prvé účelné vyfarbenie"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktívne vykreslenie označuje čas, za ktorý sa stránka stane úplne interaktívnou. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Čas do interaktívneho vykreslenia"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Index rýchlosti znázorňuje, za aký čas sa viditeľne doplní obsah stránky. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Index rýchlosti"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Presmerovania spôsobujú ďalšie oneskorenia pri načítavaní stránky. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Vyhnite sa viacnásobným presmerovaniam stránky"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Čas do prvého bajtu určuje čas, za ktorý váš server odošle odpoveď. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Hlavný dokument trval {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Znížte časy odpovede servera (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Časy odozvy servera sú krátke (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Trvanie"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Názov"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Čas začatia"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Typ"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Zvážte vybavenie aplikácie rozhraním User Timing API a odmerajte tak skutočnú výkonnosť svojej aplikácie počas kľúčových dojmov používateľov. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 trvanie aktivít používateľov}few{# trvania aktivít používateľov}many{# user timings}other{# trvaní aktivít používateľov}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Značky a merania trvania aktivít používateľov"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Zvážte pridanie indikátorov zdrojov predbežného pripojenia alebo predbežného načítania DNS, ktoré vám pomôžu zriadiť predbežné pripojenia k dôležitým zdrojom tretích strán. [Ďalšie informácie](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Nastavte predbežné pripojenie k požadovaným zdrojom"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Zvážte použitie funkcie <link rel=preload>, čím uprednostníte načítanie zdrojov, o ktoré sa momentálne žiada v neskoršej fáze načítania stránky. [Ďalšie informácie](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Predbežne načítavajte kľúčové žiadosti"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Ďalšie informácie o výkonnosti vašej aplikácie"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Najpodstatnejší aspekt výkonnosti je čas, za ktorý sa pixely vykreslia na obrazovke. Kľúčové metriky: Prvé obsahové vyfarbenie, Prvé účelné vyfarbenie."},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Vylepšenia prvého vyfarbenia"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Týmito optimalizáciami môžete zrýchliť načítanie stránky."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Príležitosti"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metriky"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Vylepšite celkové načítavanie, aby bola stránka čo najskôr responzívna a pripravená na použitie. Kľúčové metriky: Čas do interaktívneho vykreslenia, Index rýchlosti"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Celkové vylepšenia"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Výkonnosť"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL vyrovnávacej pamäte"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Veľkosť (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Strávený čas"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"Webová adresa"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potenciálna úspora (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potenciálna úspora (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potenciálna úspora: {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potenciálna úspora: {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Zobraziť kontroly"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Počiatočná navigácia"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maximálna latencia cesty dôležitých žiadostí:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Chyba!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Nahlásenie chyby: žiadne informácie o kontrole"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Údaje laboratória"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analýza aktuálnej stránky nástrojom [Lighthouse](https://developers.google.com/web/tools/lighthouse/) v emulovanom sieťovom pripojení 3G. Hodnoty sú odhadované a môžu sa líšiť."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Ďalšie položky na manuálnu kontrolu"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nehodí sa"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Príležitosti"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Odhadovaná úspora"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Absolvované kontroly"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Hodnotiaca škála:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Vyskytli sa problémy ovplyvňujúce funkčnosť nástroja Lighthouse:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Hodnoty sú odhady, ktoré sa môžu líšiť."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Upozornenia: "}};


},{}],70:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Razširitve za Chrome so negativno vplivale na nalaganje te strani. Poskusite pregledati to stran v načinu brez beleženja zgodovine ali v profilu za Chrome brez razširitev."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Ocenjevanje skripta"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Razčlenitev skripta"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Skupno"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Razmislite o skrajšanju časa, ki ga porabite za razčlenjevanje, prevajanje in izvajanje JavaScripta. Ugotovili boste, da vam lahko pri tem pomaga dostavljanje manjših paketov koristne vsebine JavaScript. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Skrajšajte čas izvajanja JavaScripta"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Čas izvajanja JavaScripta"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Veliki GIF-i so neučinkoviti za dostavljanje animirane vsebine. Razmislite o uporabi videoposnetkov MPEG4/WebM za animacije in slik PNG/WebP za statične slike namesto GIF-ov, s čimer prihranite omrežne bajte. [Več o tem](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Uporabite oblike zapisa videoposnetkov za animirano vsebino"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Razmislite o odloženem nalaganju slik zunaj zaslona in skritih slik po dokončanem nalaganju kritičnih sredstev zaradi skrajšanja časa do interaktivnosti strani. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Odložite nalaganje slik, ki so zunaj zaslona"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Sredstva blokirajo prvo barvanje strani. Razmislite o sprotnem dostavljanju kritičnega JavaScripta/CSS-ja in odlaganju JavaScripta/slogov, ki ni oziroma niso kritični. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Izločite sredstva, ki blokirajo upodabljanje"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Veliki omrežni paketi koristne vsebine uporabnikom povzročajo dejanske stroške in so tesno povezani z dolgimi časi nalaganja. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Skupna velikost je bila {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Izogibajte se velikanskim omrežnim paketom koristne vsebine"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Izogiba se velikanskim omrežnim paketom koristne vsebine"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Z zmanjšanjem datotek CSS-ja lahko zmanjšate velikosti paketov koristne vsebine. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Zmanjšajte CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Z zmanjšanjem datotek JavaScript lahko zmanjšate velikosti paketov koristne vsebine in skrajšate čas razčlenjevanja skriptov. [Več o tem](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Pomanjšajte JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Odstranite neuporabljena pravila iz datotek s slogi, da zmanjšate število nepotrebno uporabljenih bajtov v omrežni dejavnosti. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Odložite neuporabljeni CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Odstranite neuporabljeni JavaScript, če želite zmanjšati število bajtov, uporabljenih v omrežni dejavnosti."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Odstranite neuporabljeni JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Dolgotrajno predpomnjenje lahko pospeši vnovične obiske strani. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Najdeno je bilo 1 sredstvo}one{Najdeno je bilo # sredstvo}two{Najdeni sta bili # sredstvi}few{Najdena so bila # sredstva}other{Najdenih je bilo # sredstev}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Dostavljajte statična sredstva z učinkovitim pravilnikom o predpomnjenju"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Uporaba pravilnika o učinkovitem predpomnjenju za statična sredstva"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimizirane slike se nalagajo hitreje in terjajo manj prenesenih podatkov v mobilnih omrežjih. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Učinkovito kodirajte slike"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Prikazujte slike primerne velikosti, s čimer poskrbite za prihranek prenesenih podatkov v mobilnih omrežjih in izboljšate čas nalaganja. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Uporabite slike ustrezne velikosti"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Pri dostavi besedilnih sredstev uporabite stiskanje (gzip, deflate ali brotli) zaradi zmanjšanja skupnega števila omrežnih bajtov. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Omogočite stiskanje besedila"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Oblike zapisa slik, kot so JPEG 2000, JPEG XR in WebP, pogosto omogočajo učinkovitejše stiskanje kot oblika zapisa PNG ali JPEG, kar pomeni hitrejše prenose in manjšo porabo podatkov. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Dostavljajte slike v sodobnih oblikah zapisa"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Verige kritičnih zahtev spodaj vam prikazujejo, katera sredstva so naložena z visoko prednostjo. Razmislite o skrajšanju verig, zmanjšanju velikosti sredstev ali odlaganju prenosa nepotrebnih sredstev zaradi izboljšanja nalaganja strani. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Najdena je bila 1 veriga}one{Najdena je bila # veriga}two{Najdeni sta bili # verigi}few{Najdene so bile # verige}other{Najdenih je bilo # verig}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Zmanjšajte globino kritičnih zahtev"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Inženirji za brskalnike priporočajo, da strani vsebujejo manj kot približno 1500 vozlišč DOM-a. Idealna vrednost je globina drevesa z manj kot 32 elementi in manj kot 60 podrejenimi/nadrejenimi elementi. Velik DOM lahko povzroči povečano uporabo pomnilnika, daljše [slogovne izračune](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) in drage [prilagoditve postavitve](https://developers.google.com/speed/articles/reflow). [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 vozlišče}one{# vozlišče}two{# vozlišči}few{# vozlišča}other{# vozlišč}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Izogibajte se prekomerni velikosti DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Največja globina DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Skupno število vozlišč DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Izogiba se prekomerni velikosti DOM-a"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Izkoristite funkcijo CSS-ja za prikaz pisave, s čimer poskrbite, da je med nalaganjem spletne pisave besedilo vidno uporabnikom. [Več o tem](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Poskrbite, da bo med nalaganjem spletne pisave besedilo ostalo vidno"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Vse besedilo ostaja vidno med nalaganjem spletne pisave"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorija"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Razmislite o skrajšanju časa, ki ga porabite za razčlenjevanje, prevajanje in izvajanje JavaScripta. Ugotovili boste, da vam lahko pri tem pomaga dostavljanje manjših paketov koristne vsebine JavaScript."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minimizirajte delo glavne niti"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minimizira delo glavne niti"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Zgornji rezultat je ocena, koliko milisekund potrebuje vaša aplikacija za odziv na uporabnikovo dejavnost med najaktivnejšimi 5 sekundami pri nalaganju strani. Če je zakasnitev večja od 50 ms, se lahko uporabnikom zdi, da se aplikacija zatika. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Ocenjena zakasnitev vnosa"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Prvo vsebinsko barvanje označuje čas, ko je pobarvano prvo besedilo oziroma je pobarvana prva slika. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Prvo vsebinsko barvanje"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Prva nedejavnost CPE-ja označuje čas, po katerem je glavna nit strani dovolj neobremenjena, da lahko obravnava vnos. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Prva nedejavnost CPE-ja"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Prvo smiselno barvanje meri, kdaj je vidna glavna vsebina strani. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Prvo smiselno barvanje"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interaktivnost označuje čas, po katerem je stran v celoti interaktivna. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Čas do interaktivnosti"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Indeks hitrosti prikazuje, kako hitro je vsebina strani vidno izpolnjena. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indeks hitrosti"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Preusmeritve vnašajo dodatne zakasnitve nalaganja strani. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Izogibajte se preusmeritvam na več strani"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"»Čas do prvega bajta« navaja čas, v katerem vaš strežnik pošlje odziv. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Korenski dokument je terjal {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Skrajšajte odzivne čase strežnika (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Odzivni časi strežnika so nizki (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Trajanje"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Ime"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Začetni čas"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Vrsta"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Razmislite o uporabi API-ja za merjenje dejanskih izvedb uporabniških dogodkov (User Timing API), če želite izmeriti dejansko delovanje aplikacije med ključnimi uporabniškimi izkušnjami. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 trajanje izvedbe uporabniških dogodkov}one{# trajanje izvedbe uporabniških dogodkov}two{# trajanji izvedbe uporabniških dogodkov}few{# trajanja izvedbe uporabniških dogodkov}other{# trajanj izvedbe uporabniških dogodkov}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Oznake in merjenja trajanj izvedbe uporabniških dogodkov"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Razmislite o dodajanju namigov za sredstva za vnaprejšnje povezovanje ali vnaprejšnji prenos DNS-ja zaradi vzpostavljanja zgodnjih povezav s pomembnimi izvori tretjih oseb. [Več o tem](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Vnaprej se povežite z zahtevanimi izvori"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Razmislite o uporabi oznake <link rel=preload> za dodeljevanje višje stopnje prednosti pri pridobivanju sredstev, ki so trenutno zahtevana pri nadaljnjem nalaganju strani. [Več o tem](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Vnaprej nalagajte ključne zahteve"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Več informacij o delovanju aplikacije."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Bistveni vidik delovanja je, kako hitro se upodabljajo slikovne pike na zaslonu. Ključni meritvi: Prvo vsebinsko barvanje, Prvo smiselno barvanje"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Izboljšave prvega barvanja"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Te optimizacije lahko pospešijo nalaganje strani."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Priložnosti"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Meritve"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Izboljšajte splošno izkušnjo nalaganja, da bo stran odzivna in čim prej pripravljena na uporabo. Ključni meritvi: Čas do interaktivnosti, Indeks hitrosti"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Splošne izboljšave"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Delovanje"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL predpomnjenja"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Velikost (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Porabljeni čas"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Morebitni prihranek (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Morebitni prihranki (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"{wastedBytes, number, bytes} KB morebitnega prihranka"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"{wastedMs, number, milliseconds} ms morebitnega prihranka"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Pokaži preglede"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Začetno krmarjenje"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Največja zakasnitev kritične poti:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Napaka"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Napaka sporočila: ni podatkov o pregledu"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Laboratorijski podatki"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Analiza storitve [Lighthouse](https://developers.google.com/web/tools/lighthouse/) za trenutno stran z emulirano povezavo 3G. Vrednosti so ocenjene in lahko odstopajo."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Dodatni elementi za ročno preverjanje"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Se ne uporablja"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Priložnost"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Ocenjeni prihranek"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Uspešni pregledi"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Rezultatska lestvica:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Na to izvedbo storitve Lighthouse so vplivale težave:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Vrednosti so ocenjene in lahko odstopajo."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Opozorila: "}};


},{}],71:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Dodaci za Chrome su negativno uticali na brzinu učitavanja ove stranice. Probajte da proverite stranicu u režimu bez arhiviranja ili sa Chrome profila bez dodataka."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Procena skripta"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Raščlanjivanje skripta"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Ukupno"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Razmislite o tome da smanjite vreme potrebno za raščlanjivanje, kompajliranje i izvršavanje JS datoteka. Prikazivanje manjih JS resursa će vam možda pomoći u tome. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Smanjite vreme izvršavanja JavaScript datoteka"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Vreme izvršavanja JavaScript-a"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Veliki GIF-ovi nisu korisni za prikazivanje animiranog sadržaja. Razmislite o tome da umesto GIF-ova koristite MPEG4/WebM video snimke za animacije i PNG/WebP za statične slike da biste uštedeli mrežne podatke. [Saznajte više](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Koristite video formate za animirani sadržaj"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Razmislite o tome da odložite učitavanje slika van ekrana i skrivenih slika dok se svi veoma važni resursi ne učitaju kako biste smanjili vreme do početka interakcije. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Odložite slike van ekrana"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Resursi blokiraju prvo prikazivanje stranice. Razmislite o tome da prikazujete sve važne JS/CSS datoteke u tekstu i da odložite sve JS datoteke/stilove koji nisu toliko važni. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Eliminišite resurse koji blokiraju prikazivanje"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Velike mrežne resurse korisnici moraju da plate stvarnim novcem i oni su veoma povezani sa dugim vremenima učitavanja. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Ukupna veličina je bila {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Izbegavajte ogromne mrežne resurse"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Izbegava ogromne mrežne resurse"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Umanjivanjem CSS datoteka možete da smanjite veličine mrežnih resursa. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Umanjite CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Umanjivanje JavaScript datoteka može da smanji veličine resursa i vreme raščlanjivanja skripta. [Saznajte više](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Umanjite JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Uklonite nekorišćena pravila iz opisa stilova da biste smanjili nepotrebnu potrošnju podataka tokom mrežnih aktivnosti. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Odložite nekorišćeni CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Uklonite nekorišćeni JavaScript da biste smanjili potrošnju podataka tokom mrežnih aktivnosti."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Uklonite nekorišćeni JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Dugo trajanje keša može da ubrza ponovne posete stranici. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Pronađen je 1 resurs}one{Pronađen je # resurs}few{Pronađena su # resursa}other{Pronađeno je # resursa}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Prikazujte statične elemente sa efikasnim smernicama keša"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Koristi efikasne smernice keša na statičnim elementima"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimizovane slike se učitavaju brže i troše manje mobilnih podataka. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Efikasno kodirajte slike"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Prikazujte slike odgovarajuće veličine da biste uštedeli mobilne podatke i poboljšali vreme učitavanja. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Odredite odgovarajuću veličinu slika"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Resurse zasnovane na tekstu treba da prikazujete u komprimovanom formatu (gzip, deflate ili brotli) da biste smanjili ukupnu količinu potrošenih mrežnih podataka. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Omogućite kompresiju teksta"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Formati slika kao što su JPEG 2000, JPEG XR i WebP često pružaju bolju kompresiju nego PNG ili JPEG, što znači brža preuzimanja i manju potrošnju podataka. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Prikazujte slike u formatima sledeće generacije"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Lanci veoma važnih zahteva u nastavku vam prikazuju koji resursi se učitavaju sa visokim prioritetom. Razmislite o tome da smanjite dužinu lanaca, da smanjite veličinu preuzimanja za resurse ili da odložite preuzimanje resursa koji nisu neophodni radi bržeg učitavanja stranice. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Pronađen je 1 lanac}one{Pronađen je # lanac}few{Pronađena su # lanca}other{Pronađeno je # lanaca}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Smanjite broj veoma važnih zahteva"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Inženjeri za pregledače preporučuju da stranice sadrže manje od približno 1500 DOM čvorova. Najbolje bi bilo da dubina stabla bude ispod 32 elementa i da ima manje od 60 podređenih/nadređenih elemenata. Veliki DOM može da poveća potrošnju memorije, da izazove duža [izračunavanja stilova](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) i da dovede do skupih [preoblikovanja izgleda](https://developers.google.com/speed/articles/reflow). [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 čvor}one{# čvor}few{# čvora}other{# čvorova}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Izbegavajte preveliku veličinu DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimalna dubina DOM-a"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Ukupan broj DOM čvorova"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Izbegava preveliku veličinu DOM-a"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Iskoristite CSS funkciju za prikaz fontova da biste bili sigurni da korisnik može da vidi tekst dok se veb-fontovi učitavaju. [Saznajte više](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Pobrinite se da tekst ostane vidljiv tokom učitavanja veb-fontova"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Sav tekst ostaje vidljiv tokom učitavanja veb-fontova"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategorija"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Razmislite o tome da smanjite vreme potrebno za raščlanjivanje, kompajliranje i izvršavanje JS datoteka. Prikazivanje manjih JS resursa će vam možda pomoći u tome."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Smanjite rad glavne niti"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Smanjuje rad glavne niti"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Rezultat iznad je procena vremena koje je aplikaciji potrebno da odgovori na unos korisnika, u milisekundama, tokom najprometnijeg roka od 5 sekundi za učitavanje stranice. Ako je kašnjenje veće od 50 ms, korisnici će možda smatrati da aplikacija radi sporo. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Procenjeno kašnjenje unosa"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Prvo prikazivanje sadržaja označava vreme kada se prikazuju prvi tekst ili slika. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Prvo prikazivanje sadržaja"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Vreme prvog neaktivnog procesora označava prvi trenutak u kome je glavna nit stranice dovoljno neaktivna da bi obradila unos. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Vreme prvog neaktivnog procesora"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Prvo značajno prikazivanje označava vreme kada primarni sadržaj stranice postaje vidljiv. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Prvo značajno prikazivanje"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Interakcija označava vreme kada stranica postaje potpuno interaktivna. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Vreme početka interakcije"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Indeks brzine prikazuje koliko brzo sadržaj stranice postaje vidljiv za korisnike. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Indeks brzine"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Preusmeravanja dovode do dodatnih kašnjenja pre učitavanja stranice. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Izbegavajte višestruka preusmeravanja stranice"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Vreme prvog odgovora određuje vreme u koje server šalje odgovor. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Osnovnom dokumentu je trebalo {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Smanjite vremena odgovora servera (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Vremena odgovora servera su kratka (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Trajanje"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Naziv"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Vreme početka"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tip"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Razmislite o tome da opremite aplikaciju API-jem za vreme korisnika da biste izmerili učinak aplikacije u realnom svetu tokom ključnih korisničkih doživljaja. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 vreme korisnika}one{# vreme korisnika}few{# vremena korisnika}other{# vremena korisnika}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Oznake i mere Vremena korisnika"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Razmislite o tome da dodate savete za resurse za povezivanje unapred ili pripremu učitavanja DNS-a kako biste uspostavili rane veze sa važnim izvorima trećih strana. [Saznajte više](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Povežite se unapred sa potrebnim izvorima"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Razmislite o tome da koristite <link rel=preload> kako biste kasnije tokom učitavanja stranice dali prioritet preuzimanju resursa koji se trenutno traže. [Saznajte više](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Unapred učitajte najvažnije zahteve"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Više informacija o učinku aplikacije."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Dijagnostika"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Najvažniji aspekt učinka je brzina kojom se pikseli prikazuju na ekranu. Ključni pokazatelji: Prvo prikazivanje sadržaja, Prvo značajno prikazivanje"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Poboljšanja prvog prikazivanja"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Ove optimizacije mogu da ubrzaju učitavanje stranice."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Mogućnosti"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Pokazatelji"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Poboljšajte opšti doživljaj učitavanja da bi stranica počela da se odaziva i da bi bila spremna za korišćenje u najkraćem mogućem roku. Ključni pokazatelji: Vreme početka interakcije, Indeks brzine"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Opšta poboljšanja"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Učinak"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Vreme preživljavanja keša"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Veličina (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Provedeno vreme"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potencijalna ušteda (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potencijalna ušteda (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Potencijalna ušteda od {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Potencijalna ušteda od {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} sek"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Prikaži provere"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Početna navigacija"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksimalno kašnjenje kritične putanje:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Greška!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Prijavljivanje greške: nema informacija o proveri"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Podaci o eksperimentalnim funkcijama"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analiza aktuelne stranice emulirane pomoću 3G mreže. Vrednosti su procenjene i mogu da se razlikuju."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Dodatne stavke za ručnu proveru"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Nije primenjivo"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Mogućnost"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Procenjena ušteda"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Provere sa zadovoljavajućom ocenom"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Skala rezultata:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Bilo je izvesnih problema koji su uticali na ovo pokretanje Lighthouse-a:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Vrednosti predstavljaju procene i mogu da variraju."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Upozorenja: "}};


},{}],72:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Додаци за Chrome су негативно утицали на брзину учитавања ове странице. Пробајте да проверите страницу у режиму без архивирања или са Chrome профила без додатака."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Процена скрипта"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Рашчлањивање скрипта"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Укупно"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Размислите о томе да смањите време потребно за рашчлањивање, компајлирање и извршавање JS датотека. Приказивање мањих JS ресурса ће вам можда помоћи у томе. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Смањите време извршавања JavaScript датотека"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Време извршавања JavaScript-а"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Велики GIF-ови нису корисни за приказивање анимираног садржаја. Размислите о томе да уместо GIF-ова користите MPEG4/WebM видео снимке за анимације и PNG/WebP за статичне слике да бисте уштедели мрежне податке. [Сазнајте више](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Користите видео формате за анимирани садржај"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Размислите о томе да одложите учитавање слика ван екрана и скривених слика док се сви веома важни ресурси не учитају како бисте смањили време до почетка интеракције. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Одложите слике ван екрана"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ресурси блокирају прво приказивање странице. Размислите о томе да приказујете све важне JS/CSS датотеке у тексту и да одложите све JS датотеке/стилове који нису толико важни. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Елиминишите ресурсе који блокирају приказивање"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Велике мрежне ресурсе корисници морају да плате стварним новцем и они су веома повезани са дугим временима учитавања. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Укупна величина је била {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Избегавајте огромне мрежне ресурсе"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Избегава огромне мрежне ресурсе"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Умањивањем CSS датотека можете да смањите величине мрежних ресурса. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Умањите CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Умањивање JavaScript датотека може да смањи величине ресурса и време рашчлањивања скрипта. [Сазнајте више](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Умањите JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Уклоните некоришћена правила из описа стилова да бисте смањили непотребну потрошњу података током мрежних активности. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Одложите некоришћени CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Уклоните некоришћени JavaScript да бисте смањили потрошњу података током мрежних активности."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Уклоните некоришћени JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Дуго трајање кеша може да убрза поновне посете страници. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Пронађен је 1 ресурс}one{Пронађен је # ресурс}few{Пронађена су # ресурса}other{Пронађено је # ресурса}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Приказујте статичне елементе са ефикасним смерницама кеша"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Користи ефикасне смернице кеша на статичним елементима"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Оптимизоване слике се учитавају брже и троше мање мобилних података. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Ефикасно кодирајте слике"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Приказујте слике одговарајуће величине да бисте уштедели мобилне податке и побољшали време учитавања. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Одредите одговарајућу величину слика"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Ресурсе засноване на тексту треба да приказујете у компримованом формату (gzip, deflate или brotli) да бисте смањили укупну количину потрошених мрежних података. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Омогућите компресију текста"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Формати слика као што су JPEG 2000, JPEG XR и WebP често пружају бољу компресију него PNG или JPEG, што значи бржа преузимања и мању потрошњу података. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Приказујте слике у форматима следеће генерације"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Ланци веома важних захтева у наставку вам приказују који ресурси се учитавају са високим приоритетом. Размислите о томе да смањите дужину ланаца, да смањите величину преузимања за ресурсе или да одложите преузимање ресурса који нису неопходни ради бржег учитавања странице. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Пронађен је 1 ланац}one{Пронађен је # ланац}few{Пронађена су # ланца}other{Пронађено је # ланаца}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Смањите број веома важних захтева"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Инжењери за прегледаче препоручују да странице садрже мање од приближно 1500 DOM чворова. Најбоље би било да дубина стабла буде испод 32 елемента и да има мање од 60 подређених/надређених елемената. Велики DOM може да повећа потрошњу меморије, да изазове дужа [израчунавања стилова](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) и да доведе до скупих [преобликовања изгледа](https://developers.google.com/speed/articles/reflow). [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 чвор}one{# чвор}few{# чвора}other{# чворова}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Избегавајте превелику величину DOM-а"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Максимална дубина DOM-а"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Укупан број DOM чворова"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Избегава превелику величину DOM-а"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Искористите CSS функцију за приказ фонтова да бисте били сигурни да корисник може да види текст док се веб-фонтови учитавају. [Сазнајте више](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Побрините се да текст остане видљив током учитавања веб-фонтова"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Сав текст остаје видљив током учитавања веб-фонтова"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Категорија"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Размислите о томе да смањите време потребно за рашчлањивање, компајлирање и извршавање JS датотека. Приказивање мањих JS ресурса ће вам можда помоћи у томе."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Смањите рад главне нити"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Смањује рад главне нити"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Резултат изнад је процена времена које је апликацији потребно да одговори на унос корисника, у милисекундама, током најпрометнијег рока од 5 секунди за учитавање странице. Ако је кашњење веће од 50 ms, корисници ће можда сматрати да апликација ради споро. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Процењено кашњење уноса"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Прво приказивање садржаја означава време када се приказују први текст или слика. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Прво приказивање садржаја"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Време првог неактивног процесора означава први тренутак у коме је главна нит странице довољно неактивна да би обрадила унос. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Време првог неактивног процесора"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Прво значајно приказивање означава време када примарни садржај странице постаје видљив. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Прво значајно приказивање"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Интеракција означава време када страница постаје потпуно интерактивна. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Време почетка интеракције"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Индекс брзине приказује колико брзо садржај странице постаје видљив за кориснике. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Индекс брзине"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Преусмеравања доводе до додатних кашњења пре учитавања странице. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Избегавајте вишеструка преусмеравања странице"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Време првог одговора одређује време у које сервер шаље одговор. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Основном документу је требало {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Смањите времена одговора сервера (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Времена одговора сервера су кратка (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Трајање"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Назив"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Време почетка"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Тип"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Размислите о томе да опремите апликацију API-јем за време корисника да бисте измерили учинак апликације у реалном свету током кључних корисничких доживљаја. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 време корисника}one{# време корисника}few{# времена корисника}other{# времена корисника}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Ознаке и мере Времена корисника"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Размислите о томе да додате савете за ресурсе за повезивање унапред или припрему учитавања DNS-а како бисте успоставили ране везе са важним изворима трећих страна. [Сазнајте више](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Повежите се унапред са потребним изворима"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Размислите о томе да користите <link rel=preload> како бисте касније током учитавања странице дали приоритет преузимању ресурса који се тренутно траже. [Сазнајте више](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Унапред учитајте најважније захтеве"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Више информација о учинку апликације."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Дијагностика"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Најважнији аспект учинка је брзина којом се пиксели приказују на екрану. Кључни показатељи: Прво приказивање садржаја, Прво значајно приказивање"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Побољшања првог приказивања"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Ове оптимизације могу да убрзају учитавање странице."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Могућности"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Показатељи"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Побољшајте општи доживљај учитавања да би страница почела да се одазива и да би била спремна за коришћење у најкраћем могућем року. Кључни показатељи: Време почетка интеракције, Индекс брзине"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Општа побољшања"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Учинак"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Време преживљавања кеша"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Величина (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Проведено време"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Потенцијална уштеда (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Потенцијална уштеда (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Потенцијална уштеда од {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Потенцијална уштеда од {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} сек"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Прикажи провере"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Почетна навигација"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Максимално кашњење критичне путање:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Грешка!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Пријављивање грешке: нема информација о провери"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Подаци о експерименталним функцијама"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) анализа актуелне странице емулиране помоћу 3G мреже. Вредности су процењене и могу да се разликују."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Додатне ставке за ручну проверу"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Није примењиво"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Могућност"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Процењена уштеда"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Провере са задовољавајућом оценом"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Скала резултата:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Било је извесних проблема који су утицали на ово покретање Lighthouse-а:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Вредности представљају процене и могу да варирају."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Упозорења: "}};


},{}],73:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Inläsningen av den här sidan påverkas negativt av tillägg i Chrome. Testa att granska sidan i inkognitoläge eller med en Chrome-profil utan tillägg."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Utvärdering av skript"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Skriptanalys"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Totalt"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Minska tiden det tar att tolka, kompilera och köra JS-kod. Det brukar hjälpa att minska storleken på JS-resurserna som skickas. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Minska körningstiden för JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Körningstid för JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Stora GIF-bilder är ett ineffektivt sätt att visa animationer på. I stället för GIF kan du använda videor i MPEG4-/WebM-format för animationer och PNG-/WebP-format för statiska bilder, vilket minskar antalet byte som skickas via nätverket. [Läs mer](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Använd videoformat för animationer"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Låt bilder utanför skärmen och dolda bilder läsas in med lat inläsning efter att alla viktiga resurser är inlästa så att tiden till interaktivt tillstånd minskar. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Skjut upp inläsningen av bilder som inte visas på skärmen"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Den första uppritningen av sidan på skärmen blockeras av resurser. Infoga nödvändig JS-/CSS-kod direkt på sidan och skjut upp inläsningen av JS-kod/formatmallar som är mindre viktiga. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Ta bort resurser som blockerar renderingen"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Hög nätverksbelastning kostar användarna pengar och har ett starkt samband med lång inläsningstid. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Storleken totalt var {totalBytes, number, bytes} kB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Undvik enorm nätverksbelastning"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Undviker enorm nätverksbelastning"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Att minifiera CSS-filer kan minska nätverksbelastningen. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Minifiera CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Att minifiera JavaScript-filer kan minska nätverksbelastningen och tiden det tar att tolka skript. [Läs mer](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Minifiera JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Ta bort regler som inte används från formatmallarna, så att färre byte skickas via nätverket i onödan. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Skjut upp CSS som inte används"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Ta bort JavaScript som inte används så att färre byte skickas via nätverket."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Ta bort JavaScript som inte används"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Om filerna cachelagras under längre tid kan upprepade besök på sidan gå snabbare. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 resurs hittades}other{# resurser hittades}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Skicka statiska tillgångar med en effektiv cachelagringspolicy"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Använder en effektiv cachelagringspolicy för statiska tillgångar"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimerade bilder läses in snabbare och förbrukar mindre mobildata. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Koda bilder effektivt"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Minska mobildataförbrukningen och förbättra inläsningstiden genom att skicka bilder i rätt storlek. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Använd bilder med rätt storlek"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Textresurser bör skickas komprimerade (gzip, deflate eller brotli) så att färre byte skickas via nätverket. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Aktivera textkomprimering"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Bildformat som JPEG 2000, JPEG XR och WebP ger ofta bättre komprimering än PNG eller JPEG. Det gör att nedladdningen går snabbare och ger minskad dataförbrukning. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Skicka bilder i modernare bildformat"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Orderkedjorna nedan visar vilka resurser som läses in med hög prioritet. Se om du kan förbättra sidinläsningstiden genom att göra kedjorna kortare, minska storleken på resurser som laddas ned eller skjuta upp nedladdningen av onödiga resurser. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 kedja hittades}other{# kedjor hittades}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Minska antalet steg i viktiga orderkedjor"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Webbläsarutvecklare rekommenderar att en sidas DOM ska ha färre än ca 1 500 noder. Ett träd där djupet är mindre än 32 element och det finns högst 60 underordnade/överordnade element är idealiskt. Stora DOM-träd kan medföra ökad minnesförbrukning, längre [formatmallsberäkningar](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) och resurskrävande [omflödning av layouten](https://developers.google.com/speed/articles/reflow). [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nod}other{# noder}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Undvik ett onödigt stort DOM-träd"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Största DOM-djup"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Totalt antal noder i DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Undviker ett onödigt stort DOM-träd"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Använd funktionen font-display i CSS så att texten är synlig för användaren medan webbteckensnitten läses in. [Läs mer](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Se till att all text förblir synlig medan webbteckensnitten läses in"},

"lighthouse-core/audits/font-display.js | title":{
"message":"All text förblir synlig medan webbteckensnitten läses in"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategori"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Minska tiden det tar att tolka, kompilera och köra JS-kod. Det brukar hjälpa att minska storleken på JS-resurserna som skickas."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Minska arbetsbelastningen på modertråden"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Minskar arbetsbelastningen på modertråden"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Värdet ovan är en uppskattning av hur lång tid (i millisekunder) det tar innan appen svarar på användarens inmatning under den mest aktiva femsekundersperioden av sidinläsningen. Om latensen är högre än 50 ms kan användarna uppfatta det som att appen laggar. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Beräknad inmatningslatens"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Första innehållsrendering anger tidpunkten när den första texten eller bilden ritades upp. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Första uppritningen av innehåll"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Första CPU-avbrottet anger tidpunkten då sidans modertråd först blev inaktiv nog att hantera indata. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Första CPU-inaktivitet"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Första meningsfulla skärmuppritningen anger när sidans primära innehåll var synligt. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Första meningsfulla skärmuppritningen"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Tiden till interaktivt tillstånd anger tidpunkten när sidan blivit helt interaktiv. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Tid till interaktivt tillstånd"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Sidans hastighetsindex visar hur snabbt sidan fylls med synligt innehåll. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Hastighetsindex"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Omdirigeringar medför en ytterligare fördröjning innan sidan kan läsas in. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Undvik upprepade omdirigeringar"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Mätvärdet Tid till första byte anger när servern svarade. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Rotdokumentet tog {timeInMs, number, milliseconds} ms"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Minska svarstiderna från servern (tid till första byte)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Servern svarar snabbt (tid till första byte)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Varaktighet"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Namn"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Starttid"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Typ"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Om du bygger in User Timing API i appen kan du mäta appens prestanda i realtid i samband med viktiga användarupplevelser. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 användartimer}other{# användartimer}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing API – tidsstämplar och mått"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Lägg till signaler för förhandsanslutning eller DNS-förhandshämtning så att viktiga anslutningar till tredje part upprättas tidigt. [Läs mer](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Föranslut till obligatoriska källor"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Prioritera upp resurser som för närvarande hämtas senare under sidinläsningen med <link rel=preload>. [Läs mer](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Läs in viktiga resurser i förväg"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Mer information om appens prestanda."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Diagnostik"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Den viktigaste delen av sidans prestanda är hur snabbt pixlarna renderas på skärmen. Viktiga mätvärden: Första uppritningen av innehåll, Första meningsfulla skärmuppritningen"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Förbättringar av första skärmuppritningen"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"De här optimeringarna kan göra inläsningen av sidan snabbare."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Möjligheter"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Mätvärden"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Förbättra inläsningstiden överlag så att sidan upplevs som responsiv och blir klar att använda så snabbt som möjligt. Viktiga mätvärden: Tid till interaktivt tillstånd, Hastighetsindex"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Övergripande förbättringar"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Prestanda"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Lagringstid i cacheminnet"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Storlek (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Tid som använts"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"Webbadress"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Möjlig databesparing (kB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Möjlig tidsbesparing (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Möjlig databesparing: {wastedBytes, number, bytes} kB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Möjlig tidsbesparing: {wastedMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} s"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Visa granskningar"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Första navigering"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Högsta latens för kritisk kedja:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Fel."},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Rapportfel: ingen granskningsinformation"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Labbdata"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/)-analys av den aktuella sidan med 3G-emulering. Värdena är uppskattningar och kan variera."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Fler saker att kolla manuellt"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Ej tillämpligt"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Möjlighet"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Uppskattad tidsbesparing"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Godkända granskningar"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Poängskala:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Problem uppstod med den här körningen av Lighthouse."},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Värdena är uppskattningar och kan variera."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Varningar: "}};


},{}],74:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome நீட்டிப்புகள் இந்தப் பக்கத்தின் ஏற்றுதல் செயல்திறனை எதிர்மறையாகப் பாதிக்கின்றன. மறைநிலையிலோ, நீட்டிப்புகள் இல்லாத ஒரு Chrome கணக்கிலிருந்தோ பக்கத்தைத் தணிக்கை செய்ய முயலவும்."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"ஸ்கிரிப்ட் மதிப்பாய்வு"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"ஸ்கிரிப்ட் பாகுபடுத்துதல்"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"மொத்தம்"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"JSஸைப் பாகுபடுத்துதல், தொகுத்தல் மற்றும் இயக்குவதில் செலவழிக்கும் நேரத்தைக் குறைக்க முயற்சி செய்யவும். இதற்கு, சிறிய அளவிலான JS ஆதாரங்களை வழங்குவது உதவக்கூடும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"JavaScript செயல்பாட்டு நேரத்தைக் குறைக்கவும்"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript செயல்பாட்டு நேரம்"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"அனிமேஷன் செய்யப்பட்ட உள்ளடக்கத்தை வழங்குவதற்குப் பெரிய அளவிலான GIFகள் பொருத்தமானவை அல்ல. நெட்வொர்க் பைட்களைச் சேமிப்பதற்கு, GIFக்குப் பதிலாக அனிமேஷன்களுக்கு MPEG4/WebM வீடியோக்களையும் நிலையான படங்களுக்கு PNG/WebP வடிவமைப்புகளையும் பயன்படுத்தலாம். [மேலும் அறிக](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"அனிமேஷன் செய்யப்பட்ட உள்ளடக்கங்களுக்கு வீடியோ வடிவமைப்புகளைப் பயன்படுத்தவும்"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"எதிர்வினையாற்றும் நேரத்தைக் குறைப்பதற்கு, முக்கியமான அனைத்து ஆதாரங்களும் ஏற்றப்பட்ட பின்னர், திரைக்கு வெளியிலுள்ள மற்றும் மறைக்கப்பட்ட படங்களை மெதுவாக ஏற்றுமாறு அமைக்கவும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"திரைக்கு வெளியிலுள்ள படங்களைத் தவிர்க்கவும்"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"ஆதாரங்கள் உங்கள் பக்கத்தின் முதல் தோற்றத்தைத் தடுக்கின்றன. முக்கிய JS/CSSஸை இன்லைனில் வழங்கவும். முக்கியமல்லாத அனைத்து JS/ஸ்டைல்களையும் தவிர்க்கவும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"ரென்டரிங்கைத் தடுக்கும் ஆதாரங்களை நீக்கவும்"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"அதிகளவிலான நெட்வொர்க் ஆதாரங்கள், பயனர்களுக்குப் பண இழப்பை ஏற்படுத்துவதோடு, பக்கங்கள் ஏற்றப்பட நீண்ட நேரமாவதற்கும் காரணமாகின்றன. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"மொத்த அளவு {totalBytes, number, bytes} கி.பை."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"அபரிமிதமான நெட்வொர்க் ஆதாரங்களைத் தவிர்க்கவும்"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"அபரிமிதமான நெட்வொர்க் ஆதாரங்களைத் தவிர்க்கிறது"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS கோப்புகளைச் சிறிதாக்கினால் நெட்வொர்க் ஆதாரங்களின் அளவுகள் குறையலாம். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSSஸைச் சிறிதாக்கவும்"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"JavaScript கோப்புகளைச் சிறிதாக்கினால், ஆதாரங்களின் அளவுகளும் ஸ்கிரிப்ட் பாகுபடுத்தப்படும் நேரமும் குறையலாம். [மேலும் அறிக](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScriptடைச் சிறிதாக்கவும்"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"நெட்வொர்க் செயல்பாட்டின்போது பயன்படுத்தப்படும் தேவையற்ற பைட்களைக் குறைக்க, பயன்படுத்தப்படாத விதிகளை ஸ்டைல்ஷீட்களிலிருந்து அகற்றவும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"பயன்படுத்தப்படாத CSSஸைத் தவிர்க்கவும்"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"நெட்வொர்க் செயல்பாடு பயன்படுத்தும் பைட்களைக் குறைப்பதற்கு, பயன்படுத்தப்படாத JavaScriptடை அகற்றவும்."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"பயன்படுத்தப்படாத JavaScriptடை அகற்றவும்"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"தற்காலிக நினைவகத்தின் ஆயுட்காலம் நீண்டதாக இருந்தால், அது மீண்டும் மீண்டும் திறக்கப்படும் உங்கள் இணையப் பக்கங்களை விரைவாக ஏற்றக்கூடும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 ஆதாரம் கண்டறியப்பட்டது}other{# ஆதாரங்கள் கண்டறியப்பட்டன}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"திறனுள்ள தற்காலிக நினைவகக் கொள்கையுடன் நிலையான உள்ளடக்கத்தை வழங்கவும்"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"நிலையான உள்ளடக்கத்தில் திறனுள்ள தற்காலிக நினைவகக் கொள்கையைப் பயன்படுத்துகிறது"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"மேம்படுத்தப்பட்ட படங்கள் மேலும் விரைவாக ஏற்றப்படுவதோடு குறைவான செல்லுலார் டேட்டாவைப் பயன்படுத்தும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"படங்களைத் திறம்பட என்கோடிங் செய்யவும்"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"செல்லுலார் டேட்டாவைச் சேமிக்கவும், பக்கத்தை விரைவாக ஏற்றவும் படங்களைச் சரியான அளவில் வழங்கவும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"படங்களைச் சரியான அளவுக்கு மாற்றவும்"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"மொத்த நெட்வொர்க் பைட்களைக் குறைப்பதற்கு, உரை அடிப்படையிலான ஆதாரங்கள் சுருக்கப்பட்டு (gzip, deflate அல்லது brotli) வழங்கப்பட வேண்டும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"உரைச் சுருக்கத்தை இயக்கவும்"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000, JPEG XR, WebP போன்ற பட வடிவமைப்புகள், PNG அல்லது JPEGயைக் காட்டிலும் சிறந்த அளவுச் சுருக்கத்தை வழங்குகின்றன, இதன் மூலம் பதிவிறக்கங்கள் வேகமாக நடைபெறும், அத்துடன் டேட்டா பயன்பாடும் குறையும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"படங்களை நவீன வடிவமைப்புகளில் வழங்கவும்"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"கீழுள்ள 'முக்கியக் கோரிக்கை வரிசைகள்', எந்தெந்த ஆதாரங்கள் உயர் முன்னுரிமையுடன் ஏற்றப்பட்டன என்பதைக் காண்பிக்கின்றன. பக்கம் ஏற்றப்படுவதன் வேகத்தை அதிகரிக்க, வரிசைகளின் நீளத்தைக் குறைத்தல், ஆதாரங்களின் பதிவிறக்க அளவைக் குறைத்தல் அல்லது தேவையற்ற ஆதாரங்களைப் பதிவிறக்குவதைத் தவிர்த்தல் போன்றவற்றை முயற்சி செய்யவும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 வரிசை கண்டறியப்பட்டது}other{# வரிசைகள் கண்டறியப்பட்டன}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"'முக்கியக் கோரிக்கைகளின் அடுக்கைக்' குறைக்கவும்"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"~1,500 DOM கணுக்களுக்குக் குறைவான கணுக்களைக் கொண்ட பக்கங்களை உலாவிப் பொறியாளர்கள் பரிந்துரைக்கின்றனர். 32 உறுப்புகளுக்குக் குறைவான கிளை அடுக்குகளும் 60க்குக் குறைவான துணைக்கிளை/கிளை உறுப்புகளும் இருப்பது உகந்தது. ஒரு பெரிய DOM, நினைவகப் பயன்பாட்டை அதிகரிக்கலாம், [ஸ்டைல் கணக்கீடுகளை] நீட்டிக்கலாம், மேலும் (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) அதிகச் செலவு பிடிக்கும் [தளவமைப்பு மறுசீராக்கங்களை] ஏற்படுத்தலாம் (https://developers.google.com/speed/articles/reflow). [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 கணு}other{# கணுக்கள்}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"அபரிமிதமான DOM அளவைத் தவிர்க்கவும்"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"அதிகபட்ச DOM கிளை அடுக்கு"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"மொத்த DOM கணுக்கள்"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"அபரிமிதமான DOM அளவைத் தவிர்க்கிறது"},

"lighthouse-core/audits/font-display.js | description":{
"message":"இணைய எழுத்துருக்கள் ஏற்றப்படும்போது உரை எழுத்துகள் பயனருக்குத் தெரிவதை உறுதிசெய்வதற்கு, எழுத்துருக் காட்சியின் CSS அம்சத்தைச் சேர்க்கவும். [மேலும் அறிக](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"இணைய எழுத்துரு ஏற்றப்படும்போது உரை எழுத்துகள் தெரிவதை உறுதிசெய்யவும்"},

"lighthouse-core/audits/font-display.js | title":{
"message":"இணைய எழுத்துருக்கள் ஏற்றப்படும்போது உரை எழுத்துகள் அனைத்தும் தெரிகின்றன"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"வகை"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"JSஸைப் பாகுபடுத்துதல், தொகுத்தல் மற்றும் இயக்குவதில் செலவழிக்கும் நேரத்தைக் குறைக்க முயற்சி செய்யவும். இதற்கு, சிறிய அளவிலான JS ஆதாரங்களை வழங்குவது உதவக்கூடும்."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"முக்கியத் தொடரிழையின் பணியைக் குறைக்கவும்"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"முக்கியத் தொடரிழையின் பணியைக் குறைக்கிறது"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"மேலுள்ள ஸ்கோர், பக்கம் ஏற்றப்படும் பிஸியான 5 வினாடி காலஅளவின்போது பயனரின் உள்ளீட்டுக்குப் பதிலளிக்க உங்கள் ஆப்ஸ் எவ்வளவு நேரம் எடுத்துக் கொள்கிறது என்பதற்கான தோராய மதிப்பாகும், இது மில்லிவினாடிகளில் கணக்கிடப்படுகிறது. பதிலளிப்பதற்கு 50 மி.வி.க்கு அதிகமாகத் தாமதமானால், பயனர்கள் உங்கள் ஆப்ஸை “மெதுவானது” என்று கருதக்கூடும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"தோராயமான உள்ளீட்டுத் தாமதம்"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"'உள்ளடக்கத்துடன் முதல் தோற்றம்' என்பது, முதல் உரை அல்லது படம் தோன்றும் நேரத்தைக் குறிக்கிறது. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"உள்ளடக்கமுள்ள முதல் தோற்றம்"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"'CPU செயல்படாநிலையின் தொடக்க நேரம்' என்பது, உள்ளீட்டை பக்கத்தின் முக்கியத் தொடரிழை கையாள்வதற்குத் தயாராக, செயல்படாநிலையில் இருக்கும் நேரத்தின் தொடக்கத்தைக் குறிக்கிறது. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU செயல்படாநிலையின் தொடக்க நேரம்"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"'அர்த்தமுள்ள முதல் தோற்றம்' என்பது பக்கத்தின் முதன்மை உள்ளடக்கம் எப்போது தெரிகிறது என்பதை அளவிடுகிறது. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"அர்த்தமுள்ள முதல் தோற்றம்"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"'எதிர்வினை' என்பது பக்கம் முழுமையாக எதிர்வினையாற்றும் நேரத்தைக் குறிப்பிடுகிறது. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"எதிர்வினை நேரம்"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"பக்கத்திலுள்ள உள்ளடக்கங்கள் எவ்வளவு விரைவாகத் தெரிகின்றன என்பதை 'வேக அட்டவணை' காண்பிக்கிறது. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"வேக அட்டவணை"},

"lighthouse-core/audits/redirects.js | description":{
"message":"'திசைதிருப்புதல்கள்' பக்கம் ஏற்றப்படுவதற்கு முன்பு கூடுதல் தாமதங்களை ஏற்படுத்தலாம். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"பல பக்கங்களுக்குத் திசைதிருப்புவதைத் தவிர்க்கவும்"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"'முதல் பைட்டின் நேரம்' என்பது உங்கள் சேவையகம் ஒரு பதிலை அனுப்பும் நேரத்தைச் சுட்டிக்காட்டுகிறது. [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"மூல ஆவணம் ஏற்றப்படுவதற்கு {timeInMs, number, milliseconds} மி.வி. ஆனது"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"சேவையக எதிர்வினை நேரங்களைக் குறைக்கவும் (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"சேவையகம் எதிர்வினையாற்றும் நேரங்கள் குறைவாக உள்ளன (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"கால அளவு"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"பெயர்"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"தொடக்க நேரம்"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"வகை"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"முக்கியப் பயனர் அனுபவங்களின்போது உங்கள் ஆப்ஸின் நிகழ்நேர செயல்திறனை அளவிடுவதற்கு, உங்கள் ஆப்ஸில் User Timing APIஐப் பயன்படுத்தலாம். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 பயனர் நேரம்}other{# பயனர் நேரங்கள்}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"பயனர் நேரக் குறிப்புகளும் அளவீடுகளும்"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"முக்கியமான மூன்றாம் தரப்பு டொமைன்களுடன் விரைவான இணைப்புகளை ஏற்படுத்த, ப்ரீகனெக்ட் அல்லது dns-ப்ரீஃபெட்ச் ஆதாரக் குறிப்புகளைச் சேர்க்கலாம். [மேலும் அறிக](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"தேவைப்படும் டொமைன் பெயர்களுக்கு முன்கூட்டியே இணைப்பு வழங்கவும்"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"பக்கம் ஏற்றப்படும்போது, தற்போது பின்னர் கோரப்படும் ஆதாரங்களை முன்னதாகப் பெறுவதற்கு முன்னுரிமைப்படுத்த, <link rel=preload>ஐப் பயன்படுத்தவும். [மேலும் அறிக](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"முக்கியக் கோரிக்கைகளை முன்கூட்டியே ஏற்றவும்"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"உங்கள் ஆப்ஸின் செயல்திறன் பற்றிய மேலும் சில தகவல்கள்."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"பகுப்பாய்வு"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"திரையில் பிக்சல்கள் எவ்வளவு விரைவாக ரென்டரிங் செய்யப்படுகின்றன என்பது செயல்திறனின் மிக முக்கிய அம்சமாகும். முக்கிய அளவீடுகள்: 'உள்ளடக்கமுள்ள முதல் தோற்றம்', 'அர்த்தமுள்ள முதல் தோற்றம்'"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"முதல் தோற்ற மேம்பாடுகள்"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"இந்த மேம்படுத்ததுதல்கள் உங்கள் பக்கத்தை வேகமாக ஏற்றலாம்."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"பரிந்துரைகள்"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"அளவீடுகள்"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"ஒட்டுமொத்தமாகப் பக்கம் ஏற்றப்படும் அனுபவத்தை மேம்படுத்தவும், இதனால் பக்கம் விரைவாக எதிர்வினையாற்றும், அத்துடன் முடிந்தளவு விரைவாகப் பயன்படுத்தத் தயாராக இருக்கும். முக்கிய அளவீடுகள்: 'எதிர்வினை நேரம்', 'வேக அட்டவணை'"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"ஒட்டுமொத்த மேம்பாடுகள்"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"இணையச் செயல்திறன்"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"தற்காலிக நினைவக TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"அளவு (கி.பை.)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"செலவிட்ட நேரம்"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"தோராயமான சேமிப்பு (கி.பை.)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"தோராயமான சேமிப்புகள் (மி.வி.)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"சேமிக்கக்கூடிய அளவு: {wastedBytes, number, bytes} கி.பை."},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"சேமிக்கக்கூடிய நேரம்: {wastedMs, number, milliseconds} மி.வி."},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} மி.வி."},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} வி"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"தணிக்கைகளைக் காட்டு"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"துவக்க நெட்வொர்க் கோரிக்கை"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"முக்கியக் கோரிக்கைத் தடத்தின் அதிகபட்சத் தாமதம்:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"பிழை!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"அறிக்கைப் பிழை: தணிக்கைத் தகவல் இல்லை"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"ஆய்வகத் தரவு"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"எமுலேட்டட் 3G இல் தற்போதைய பக்கத்தின் [Lighthouse](https://developers.google.com/web/tools/lighthouse/) பகுப்பாய்வு. மதிப்புகள் தோராயமானவை, மாறுபடக்கூடியவை."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"கைமுறையாகச் சரிபார்க்க வேண்டிய கூடுதல் விஷயங்கள்"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"பொருந்தாதது"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"பரிந்துரை"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"தோராயமான சேமிப்பு"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"தேர்ச்சி பெற்ற தணிக்கைகள்"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"ஸ்கோர் அளவு:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Lighthouseஸின் இந்த இயக்கத்தைச் சில சிக்கல்கள் பாதிக்கின்றன:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"மதிப்புகள் தோராயமானவை மற்றும் மாறுபடக்கூடியவை."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"எச்சரிக்கைகள்: "}};


},{}],75:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome ఎక్స్‌టెన్షన్‌లు ఈ పేజీ లోడ్ పనితీరును ప్రతికూలంగా ప్రభావితం చేసాయి. ఎక్స్టెన్షన్‌లు లేకుండా పేజీని అజ్ఞాత మోడ్‌లో లేదా ఎక్స్‌టెన్షన్‌లు లేని Chrome ప్రొఫైల్‌లో ఆడిట్ చేయడాన్ని ప్రయత్నించండి."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"స్క్రిప్ట్ మూల్యనిర్ధారణ"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"స్క్రిప్ట్ అన్వయింపు"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"మొత్తం"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"అన్వయించడం, సంగ్రహణ చేయడం మరియు JSను అమలు చేయడానికి వెచ్చించే సమయాన్ని తగ్గించడాన్ని పరిగణించండి. చిన్న JS పేలోడ్‌లను అందించడం ఈ విషయంలో మీకు సహాయకరంగా అనిపించవచ్చు. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"JavaScript అమలు సమయాన్ని తగ్గించండి"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript అమలు సమయం"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"యానిమేట్ చేయబడిన కంటెంట్‌ను అందించడంలో పెద్ద GIFలు సమర్థవంతంగా పనిచేయవు. నెట్‌వర్క్ బైట్‌లను పొదుపు చేయడానికి GIFకి బదులుగా యానిమేషన్ కోసం MPEG4/WebM వీడియోలను, నిశ్చల చిత్రాల కోసం PNG/WebPను ఉపయోగించడాన్ని పరిగణించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"యానిమేటెడ్ కంటెంట్ కోసం వీడియో ఫార్మాట్‌లను ఉపయోగించండి"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"పేజీలో పూర్తి పరస్పర చర్యకు పట్టే సమయం తక్కువగా ఉన్నప్పుడు అన్ని క్లిష్టమైన వనరులు లోడ్ అవ్వడం పూర్తి చేసి, ఆ తర్వాతే ఆఫ్‌స్క్రీన్ మరియు దాగి ఉన్న చిత్రాలను నెమ్మదిగా లోడ్ చేయడాన్ని పరిగణించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"ఆఫ్‌స్క్రీన్ చిత్రాలను వాయిదా వేయండి"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"వనరులు మీ పేజీ మొదటి పెయింట్‌ను బ్లాక్ చేస్తున్నాయి. క్లిష్టమైన JS/CSSలను ఇన్‌లైన్‌లో పంపించడం మరియు క్లిష్టం-కాని అన్ని JS/శైలులను తీసివేయడాన్ని పరిగణించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"రెండర్-బ్లాకింగ్ వనరులను నివారించండి"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"పెద్ద నెట్‌వర్క్ పేలోడ్‌లకు వినియోగదారులు నిజమైన డబ్బును చెల్లించాలి మరియు అవి అధికంగా సుదీర్ఘ లోడ్ సమయాలతో ముడిపడి ఉంటాయి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"మొత్తం పరిమాణం {totalBytes, number, bytes} KBగా ఉండేది"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"అతి పెద్ద నెట్‌వర్క్ పేలోడ్‌లను నివారించండి"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"అతి పెద్ద నెట్‌వర్క్ పేలోడ్‌లను నివారిస్తుంది"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS ఫైల్‌లను చిన్నవిగా చేయడం నెట్‌వర్క్ పేలోడ్ పరిమాణాలను తగ్గించవచ్చు. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSSని చిన్నదిగా చేయండి"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"JavaScript ఫైల్‌లను చిన్నవిగా చేయడం పేలోడ్ పరిమాణాలని మరియు స్క్రిప్ట్‌ను అన్వయించడానికి పట్టే సమయాన్ని తగ్గించగలదు. [మరింత తెలుసుకోండి](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScriptను చిన్నదిగా చేయండి"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"నెట్‌వర్క్ కార్యకలాపం ఉపయోగిస్తున్న అనవసర బైట్‌లను తగ్గించడానికి శైలిషీట్‌ల నుండి ఉపయోగించని నియమాలను తీసివేయండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"ఉపయోగించని CSSను వాయిదా వేయండి"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"నెట్‌వర్క్ కార్యకలాపం వినియోగించే బైట్‌లను తగ్గించడానికి ఉపయోగించని JavaScriptను తీసివేయండి."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"ఉపయోగించని JavaScriptను తీసివేయండి"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"దీర్ఘమైన కాష్ జీవితకాలం మీ పేజీకి పునరావృత సందర్శనలను వేగవంతం చేయవచ్చు. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 వనరు కనుగొనబడింది}other{ # వనరులు కనుగొనబడ్డాయి}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"నిశ్చల ఆస్తులను సమర్ధవంతమైన కాష్ విధానంతో అందించండి"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"నిశ్చలమైన ఆస్తులపై సమర్ధవంతమైన కాష్ విధానాన్ని ఉపయోగిస్తుంది"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"ఆప్టిమైజ్ చేయబడిన చిత్రాలు త్వరగా లోడ్ అవుతాయి మరియు తక్కువ సెల్యులార్ డేటాను ఉపయోగిస్తాయి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"చిత్రాలను సమర్థవంతంగా ఎన్‌కోడ్ చేయండి"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"సెల్యులార్ డేటాను పొదుపు చేయడానికి మరియు లోడ్ సమయాన్ని మెరుగుపరచడానికి తగిన-పరిమాణానికి మార్చబడిన చిత్రాలను అందించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"చిత్రాల పరిమాణాన్ని సరిగ్గా మార్చండి"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"మొత్తం నెట్‌వర్క్ బైట్‌లను తగ్గించడానికి వచనం-ఆధారిత వనరులు ఖచ్చితంగా కుదింపు (gzip, deflate లేదా brotli)తో అందించబడాలి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"వచనం కుదింపును ప్రారంభించండి"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000, JPEG XR, మరియు WebP వంటి చిత్రం ఫార్మాట్‌లు తరచుగా PNG లేదా JPEG కంటే మెరుగైన కుదింపును అందిస్తాయి, దీనర్ధం వేగవంతమైన డౌన్‌లోడ్‌లు మరియు తక్కువ డేటా వినియోగం. [మరింత తెలుసుకోండి] (https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"చిత్రాలను తర్వాతి-తరం ఫార్మాట్‌లలో అందించండి"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"కింది క్లిష్టమైన అభ్యర్ధన గొలుసులు ఏ వనరులు అధిక ప్రాధాన్యతతో లోడ్ అయ్యాయో చూపిస్తాయి. పేజీ లోడ్‌ను మెరుగుపరచడానికి గొలుసుల పొడవును తగ్గించడం, వనరుల డౌన్‌లోడ్ పరిమాణాన్ని తగ్గించడం, లేదా అనవసర వనరులను డౌన్‌లోడ్ చేయడాన్ని వాయిదా వేయడం పరిగణించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 గొలుసు కనుగొనబడింది}other{# గొలుసులు కనుగొనబడ్డాయి}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"క్లిష్టమైన అభ్యర్ధనల గాఢత్వమును తగ్గించండి"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"పేజీలలో ~1,500 కన్నా తక్కువ DOM నోడ్‌లు ఉండాలని బ్రౌజర్ ఇంజినీర్లు సిఫార్సు చేస్తారు. ఉత్తమమైన స్థాయి < 32 అంశాల ట్రీ గాఢత మరియు 60 పిల్లలు/తల్లి/తండ్రి అంశం కన్నా తక్కువ ఉండడం. పెద్ద DOM మెమరీ వినియోగాన్ని పెంచవచ్చు, సుదీర్ఘ [శైలి గణనలు] కు దారి తీయవచ్చు (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), మరియు ఖరీదైన [లేఅవుట్ రీఫ్లోలు]ను ఉత్పత్తి చేయవచ్చు (https://developers.google.com/speed/articles/reflow). [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 నోడ్}other{# నోడ్‌లు}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"అధిక DOM పరిమాణాన్ని నివారించండి"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"DOM గరిష్ట గాఢత్వము"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"మొత్తం DOM నోడ్‌లు"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"అధిక DOM పరిమాణాన్ని నివారిస్తుంది"},

"lighthouse-core/audits/font-display.js | description":{
"message":"వెబ్ ఫాంట్‌లు లోడ్ అవుతున్నప్పుడు వచనం వినియోగదారుకు కనిపించేలా ఉందని నిర్ధారించుకోవడానికి ఫాంట్-ప్రదర్శన CSS ఫీచర్‌ను శక్తివంతం చేయండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"వెబ్ ఫాంట్ లోడ్ సమయంలో వచనం కనిపించేటట్లు నిర్ధారించుకోండి"},

"lighthouse-core/audits/font-display.js | title":{
"message":"వెబ్ ఫాంట్ లోడ్‌ల సమయంలో వచనం మొత్తం కనిపిస్తూ ఉంటుంది"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"వర్గం"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"అన్వయించడం, సంగ్రహణ చేయడం మరియు JSను అమలు చేయడానికి వెచ్చించే సమయాన్ని తగ్గించడాన్ని పరిగణించండి. చిన్న JS పేలోడ్‌లను అందించడం ఈ విషయంలో మీకు సహాయకరంగా అనిపించవచ్చు."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"ప్రధాన థ్రెడ్ పనిని తగ్గించండి"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"ప్రధాన థ్రెడ్ పనిని తగ్గిస్తుంది"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"పేజీ లోడ్‌కు అత్యంత రద్దీ అయిన 5 సెకన్ల విండో సమయంలో, వినియోగదారు ఇన్‌పుట్‌కు ప్రతిస్పందిచడానికి, మిల్లీ సెకండ్లలో, మీ యాప్ తీసుకునే సమయం యొక్క అంచనాని పైన పేర్కొన్న స్కోర్ అందిస్తుంది. మీ ప్రతి స్పందన సమయం 50మి. సె కన్నా ఎక్కువ అయితే, మీ యాప్ వేగవంతంగా పని చేయట్లేదని వినియోగదారులు భావించవచ్చు. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"అంచనా వేయబడిన ఇన్‌పుట్ ప్రతిస్పందన సమయం"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"మొదటి కంటెంట్ సహిత పెయింట్ ఏదైనా వచనం లేదా చిత్రం మొదటిసారి పెయింట్ చేయబడిన సమయాన్ని గుర్తిస్తుంది. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"మొదటి కంటెంట్ సహిత పెయింట్"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"మొదటి CPU ఖాళీ సమయం మొదటి సారిగా పేజీ యొక్క ప్రధాన థ్రెడ్ ఇన్‌పుట్‌ను నిర్వహించడానికి సరిపోయినంత ఖాళీగా ఉన్న సమయాన్ని గుర్తిస్తుంది. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU మొదటి ఖాళీ సమయం"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"మొదటి అర్ధవంతమైన పెయింట్ ఒక పేజీ ప్రాథమిక కంటెంట్ ఎప్పుడు కనిపించింది అనేదానికి ఒక కొలమానం. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"మొదటి అర్థవంతమైన పెయింట్"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"పేజీలో పూర్తి పరస్పర చర్యకు పట్టే సమయం, ఆ పేజీ పరస్పర చర్యకు పూర్తిగా సిద్దమయ్యేందుకు తీసుకున్న సమయాన్ని గుర్తిస్తుంది. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"పేజీలో పూర్తి పరస్పర చర్యకు పట్టే సమయం"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"వేగం సూచిక ఒక పేజీ కంటెంట్‌లు ఎంత వేగంగా ప్రత్యక్షంగా చూపించబడతాయో చూపిస్తుంది. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"వేగం సూచిక"},

"lighthouse-core/audits/redirects.js | description":{
"message":"మళ్లింపులు పేజీ లోడ్ అవ్వడానికి ముందు అదనపు ఆలస్యాలను కలగచేస్తాయి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"అనేక పేజీ మళ్లింపులను నివారించండి"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"మొదటి బైట్ సమయం మీ సర్వర్ ప్రతిస్పందనను పంపించిన సమయాన్ని గుర్తిస్తుంది. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"రూట్ పత్రం {timeInMs, number, milliseconds} మి. సె తీసుకుంది"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"సర్వర్ ప్రతిస్పందన సమయాలను తగ్గించండి (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"సర్వర్ ప్రతిస్పందన సమయాలు తక్కువగా ఉన్నాయి (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"వ్యవధి"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"పేరు"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"ప్రారంభ సమయం"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"రకం"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"కీలక వినియోగదారు అనుభవాల సమయంలో మీ యాప్ వాస్తవ ప్రపంచ పనితీరును అంచనా వేయడానికి, మీ యాప్ కోసం వినియోగదారు సమయానుకూల APIని కొలమానంగా చేసుకుని పరిశీలించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 వినియోగదారు సమయం}other{# వినియోగదారు సమయాలు}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"వినియోగదారు సమయం మార్కులు మరియు కొలమానాలు"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"ముఖ్యమైన మూడవ-పక్ష మూలాలకు ముందస్తు కనెక్ష్‌లను స్థాపించడానికి ముందుగా కనెక్ట్ చేయి లేదా dns ప్రి-ఫెచింగ్ వనరు సూచనలను జోడించడాన్ని పరిగణించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"అవసరమైన మూలాలకు ముందుగా కనెక్ట్ చేయండి"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"ప్రస్తుతం పేజీ లోడ్‌లో తర్వాత అభ్యర్ధించబడిన వనరులను పొందడాన్ని ప్రాధాన్యపరచడానికి <link rel=preload>ను ఉపయోగించడాన్ని పరిగణించండి. [మరింత తెలుసుకోండి](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"కీలక అభ్యర్ధనలను ముందుగా లోడ్ చేయండి"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"మీ అప్లికేషన్ పనితీరు గురించి మరింత సమాచారం."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"సమస్య విశ్లేషణ"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"పిక్సెల్‌లు ఎంత వేగంగా స్క్రీన్ పై ప్రదర్శింపబడతాయి అనేది పనితీరులో అతి క్లష్టమైన అంశం. కీలక గణంకాలు: మొదటి కంటెంట్ సహిత పెయింట్, మొదటి అర్ధవంతమైన పెయింట్"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"మొదటి పెయింట్ మెరుగుదలలు"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"ఈ ఆప్టిమైజేషన్‌లు మీ పేజీ లోడ్‌ అవ్వడాన్ని వేగవంతం చేయవచ్చు."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"అవకాశాలు"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"గణాంకాలు"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"పేజీ ఎంత త్వరగా వీలైతే అంత త్వరగా ప్రతిస్పందించి, ఉపయోగించడానికి సిద్దంగా ఉండడానికి, మొత్తం లోడింగ్ అనుభవాన్ని మెరుగుపరచండి. కీలక గణాంకాలు: పేజీలో పూర్తి పరస్పర చర్యకు పట్టే సమయం, వేగం సూచిక"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"మొత్తం మొరుగుదలలు"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"పనితీరు"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"కాష్ TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"పరిమాణం (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"వెచ్చించిన సమయం"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"ఆదా చేయగల పరిమాణం (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"ఆదా చేయగల వ్యవధి (మి. సె)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"ఆదా చేయగల పరిమాణం {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"ఆదా చేయగల వ్యవధి {wastedMs, number, milliseconds} మి. సెలు"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} మి. సె"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} సె"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"ఆడిట్‌లను చూపించండి"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"ప్రారంభ నావిగేషన్"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"గరిష్ట క్లిష్టమైన మార్గ ప్రతిస్పందన సమయం:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"ఎర్రర్ ఏర్పడింది!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"నివేదిక ఎర్రర్: ఆడిట్ సమాచారం లేదు"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"ల్యాబ్ డేటా"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"ఎములేటెడ్ 3Gలో ప్రస్తుత పేజీ [లైట్‌హౌస్](https://developers.google.com/web/tools/lighthouse/) విశ్లేషణ. విలువలు అంచనా ప్రకారం అందించినవి, కనుక తేడాలు ఉండవచ్చు."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"మాన్యువల్‌గా తనిఖీ చేయవలసిన అదనపు అంశాలు"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"వర్తించదు"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"అవకాశం"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"అంచనా వేసిన పొదుపులు"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"ఉత్తీర్ణత సాధించిన ఆడిట్‌లు"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"స్కోర్ స్థాయి:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Lighthouse యొక్క ఈ అమలును ప్రభావితం చేసిన సమస్యలు ఉన్నాయి:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"విలువలు అంచనా వేయబడ్డాయి మరియు మారవచ్చు."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"హెచ్చరికలు: "}};


},{}],76:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"ส่วนขยาย Chrome ส่งผลเสียต่อประสิทธิภาพในการโหลดของหน้านี้ ลองตรวจสอบหน้าในโหมดไม่ระบุตัวตนหรือจากโปรไฟล์ Chrome ที่ไม่มีส่วนขยาย"},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"การประเมินสคริปต์"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"การแยกวิเคราะห์สคริปต์"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"รวม"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"พิจารณาลดเวลาที่ใช้ในการแยกวิเคราะห์ แปลโปรแกรม และดำเนินการกับ JS การส่งเปย์โหลด JS ปริมาณน้อยอาจช่วยในเรื่องนี้ได้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/bootup)"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"ลดเวลาในการดำเนินการกับ JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"เวลาในการดำเนินการกับ JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"GIF ขนาดใหญ่ไม่มีประสิทธิภาพในการแสดงเนื้อหาภาพเคลื่อนไหว พิจารณาใช้วิดีโอ MPEG4/WebM สำหรับภาพเคลื่อนไหวและใช้ PNG/WebP สำหรับภาพนิ่งแทน GIF เพื่อประหยัดไบต์ของเครือข่าย [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"ใช้รูปแบบวิดีโอสำหรับเนื้อหาภาพเคลื่อนไหว"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"พิจารณาโหลดรูปภาพนอกหน้าจอและรูปภาพที่ซ่อนไว้เท่าที่จำเป็นหลังจากที่ทรัพยากรที่สำคัญทั้งหมดโหลดเสร็จแล้วเพื่อลดเวลาในการโต้ตอบ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"เลื่อนเวลาโหลดรูปภาพนอกจอภาพ"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"ทรัพยากรบล็อกการแสดงผลครั้งแรกของหน้าเว็บอยู่ พิจารณาแสดง JS/CSS ที่สำคัญในหน้าและเลื่อนเวลาแสดง JS/สไตล์ที่ไม่สำคัญทั้งหมดออกไป [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"กำจัดทรัพยากรที่บล็อกการแสดงผล"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"เปย์โหลดปริมาณมากของเครือข่ายทำให้ผู้ใช้เสียค่าใช้จ่ายสูงและสัมพันธ์กับเวลาการโหลดนานเป็นอย่างมาก [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"ขนาดรวมเดิมคือ {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"หลีกเลี่ยงเปย์โหลดเครือข่ายปริมาณมาก"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"หลีกเลี่ยงเปย์โหลดเครือข่ายปริมาณมาก"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"การลดขนาดไฟล์ CSS ช่วยลดขนาดเปย์โหลดของเครือข่ายได้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/minify-css)"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"ลดขนาด CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"การลดขนาดไฟล์ JavaScript ช่วยลดขนาดเปย์โหลดและเวลาในการแยกวิเคราะห์สคริปต์ได้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/speed/docs/insights/MinifyResources)"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"ลดขนาด JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"นำกฎที่ไม่ได้ใช้ออกจากสไตล์ชีตเพื่อลดจำนวนไบต์ที่ไม่จำเป็นที่กิจกรรมเครือข่ายใช้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/unused-css)"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"เลื่อนเวลาโหลด CSS ที่ไม่ได้ใช้"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"นำ JavaScript ที่ไม่ได้ใช้ออกเพื่อลดจำนวนไบต์ที่กิจกรรมเครือข่ายใช้"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"นำ JavaScript ที่ไม่ได้ใช้ออก"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"อายุการใช้งานแคชที่ยาวนานช่วยเพิ่มการเข้าชมหน้าเว็บซ้ำได้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{พบทรัพยากร 1 รายการ}other{พบทรัพยากร # รายการ}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"แสดงเนื้อหาคงที่ที่มีนโยบายแคชที่มีประสิทธิภาพ"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"ใช้นโยบายแคชที่มีประสิทธิภาพกับเนื้อหาคงที่"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"รูปภาพที่ได้รับการเพิ่มประสิทธิภาพจะโหลดได้เร็วขึ้นและใช้อินเทอร์เน็ตมือถือน้อยลง [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"เข้ารหัสรูปภาพอย่างมีประสิทธิภาพ"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"แสดงรูปภาพที่มีขนาดเหมาะสมเพื่อประหยัดอินเทอร์เน็ตมือถือและปรับปรุงเวลาในการโหลด [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"ปรับขนาดรูปภาพให้เหมาะสม"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"ทรัพยากรแบบข้อความควรแสดงผลโดยมีการบีบอัด (Gzip, Deflate หรือ Brotli) เพื่อลดจำนวนไบต์เครือข่ายทั้งหมด [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"เปิดใช้การบีบอัดข้อความ"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"รูปแบบรูปภาพอย่างเช่น JPEG 2000, JPEG XR และ WebP มักบีบอัดได้ดีกว่า PNG หรือ JPEG ซึ่งหมายความว่าจะดาวน์โหลดได้เร็วขึ้นและใช้อินเทอร์เน็ตน้อยลง [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/webp)"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"แสดงรูปภาพในรูปแบบสมัยใหม่"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"ห่วงโซ่คำขอที่สำคัญด้านล่างแสดงให้เห็นทรัพยากรที่โหลดโดยมีลำดับความสำคัญสูง พิจารณาลดความยาวของห่วงโซ่ ลดขนาดการดาวน์โหลดของทรัพยากร หรือเลื่อนเวลาการดาวน์โหลดทรัพยากรที่ไม่จำเป็นเพื่อปรับปรุงการโหลดหน้าเว็บ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{พบห่วงโซ่ 1 รายการ}other{พบห่วงโซ่ # รายการ}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"ลดความลึกของคำขอที่สำคัญ"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"วิศวกรเบราว์เซอร์แนะนำให้ใช้หน้าเว็บที่มีโหนด DOM น้อยกว่าประมาณ 1,500 รายการ ความลึกที่เหมาะที่สุดคือแบบต้นไม้ซึ่งมีองค์ประกอบน้อยกว่า 32 รายการและมีองค์ประกอบย่อย/หลักน้อยกว่า 60 รายการ DOM ขนาดใหญ่อาจใช้หน่วยความจำเพิ่มขึ้น ทำให้[การคำนวณสไตล์](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)ยาวนานขึ้น และสร้าง[การจัดเรียงการออกแบบใหม่](https://developers.google.com/speed/articles/reflow)ที่ต้องใช้ค่าใช้จ่ายสูง [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/dom-size)"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 โหนด}other{# โหนด}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"หลีกเลี่ยง DOM ที่มีขนาดใหญ่เกินไป"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"ความลึก DOM สูงสุด"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"โหนด DOM ทั้งหมด"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"หลีกเลี่ยง DOM ที่มีขนาดใหญ่เกินไป"},

"lighthouse-core/audits/font-display.js | description":{
"message":"ใช้ประโยชน์จากฟีเจอร์ CSS สำหรับแสดงแบบอักษรเพื่อให้ผู้ใช้มองเห็นข้อความได้ในขณะที่กำลังโหลดเว็บฟอนต์ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/updates/2016/02/font-display)"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"ตรวจสอบว่าข้อความจะยังมองเห็นได้ในระหว่างการโหลดเว็บฟอนต์"},

"lighthouse-core/audits/font-display.js | title":{
"message":"ข้อความทั้งหมดจะยังมองเห็นได้ในระหว่างการโหลดเว็บฟอนต์"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"หมวดหมู่"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"พิจารณาลดเวลาที่ใช้ในการแยกวิเคราะห์ แปลโปรแกรม และดำเนินการกับ JS การส่งเปย์โหลด JS ปริมาณน้อยอาจช่วยในเรื่องนี้ได้"},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"ลดการทำงานของเธรดหลัก"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"ลดการทำงานของเธรดหลัก"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"คะแนนข้างต้นเป็นระยะเวลาโดยประมาณที่แอปใช้เพื่อตอบสนองอินพุตของผู้ใช้ระหว่างการโหลดหน้าเว็บในกรอบเวลา 5 วินาทีที่ทำงานหนักที่สุด มีหน่วยเป็นมิลลิวินาที หากเวลาในการตอบสนองนานกว่า 50 มิลลิวินาที ผู้ใช้อาจรู้สึกว่าแอปช้า [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"เวลาในการตอบสนองต่ออินพุตโดยประมาณ"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"First Contentful Paint ระบุเวลาที่มีการแสดงผลข้อความหรือรูปภาพครั้งแรก [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"การแสดงผลที่มีเนื้อหาเต็มครั้งแรก"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"CPU ไม่ได้ใช้งานครั้งแรกระบุครั้งแรกที่เธรดหลักของหน้าเว็บว่างพอที่จะจัดการกับอินพุต [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU ไม่ได้ใช้งานครั้งแรก"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"การแสดงผลที่มีความหมายครั้งแรกวัดเมื่อเนื้อหาหลักของหน้าเว็บปรากฏ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"การแสดงผลที่มีความหมายครั้งแรก"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"การโต้ตอบระบุเวลาที่หน้าเว็บโต้ตอบได้อย่างสมบูรณ์ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"เวลาในการโต้ตอบ"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"ดัชนีความเร็วแสดงให้เห็นความเร็วที่เนื้อหาของหน้าปรากฏจนดูสมบูรณ์ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/speed-index)"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"ดัชนีความเร็ว"},

"lighthouse-core/audits/redirects.js | description":{
"message":"การเปลี่ยนเส้นทางทำให้เกิดความล่าช้ามากขึ้นก่อนที่หน้าเว็บจะโหลดได้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/redirects)"},

"lighthouse-core/audits/redirects.js | title":{
"message":"หลีกเลี่ยงการเปลี่ยนเส้นทางหลายหน้า"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"เวลาที่ใช้ไบต์แรกระบุเวลาที่เซิร์ฟเวอร์ส่งการตอบกลับ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/ttfb)"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"เอกสารรากใช้เวลา {timeInMs, number, milliseconds} มิลลิวินาที"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"ลดเวลาในการตอบกลับของเซิร์ฟเวอร์ (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"เวลาตอบสนองของเซิร์ฟเวอร์ต่ำ (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"ระยะเวลา"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"ชื่อ"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"เวลาเริ่มต้น"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"ประเภท"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"พิจารณาติดตั้ง User Timing API ในแอปเพื่อวัดประสิทธิภาพในระหว่างประสบการณ์สำคัญของผู้ใช้ในชีวิตจริงได้ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/user-timing)"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{ระยะเวลาของผู้ใช้ 1 รายการ}other{ระยะเวลาของผู้ใช้ # รายการ}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"ระยะเวลาที่เจาะจงของผู้ใช้และระยะเวลาทั่วไป"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"พิจารณาเพิ่มการเชื่อมต่อล่วงหน้าหรือดึงข้อมูล DNS ล่วงหน้าสำหรับการเปลี่ยนแปลงทรัพยากรเพื่อสร้างการเชื่อมต่อกับต้นทางที่สำคัญของบุคคลที่สามตั้งแต่เนิ่นๆ [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"เชื่อมต่อกับต้นทางที่จำเป็นล่วงหน้า"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"พิจารณาใช้ <link rel=preload> เพื่อจัดลำดับความสำคัญในการเรียกทรัพยากรที่มีการขอให้โหลดหน้าเว็บภายหลัง [ดูข้อมูลเพิ่มเติม](https://developers.google.com/web/tools/lighthouse/audits/preload)"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"โหลดคำขอสำคัญล่วงหน้า"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"ข้อมูลเพิ่มเติมเกี่ยวกับประสิทธิภาพของแอปพลิเคชัน"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"การวินิจฉัย"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"ประสิทธิภาพที่สำคัญที่สุดคือความเร็วที่พิกเซลแสดงผลในหน้าจอ เมตริกที่สำคัญ ได้แก่ การแสดงผลที่มีเนื้อหาเต็มครั้งแรก การแสดงผลที่มีความหมายครั้งแรก"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"การปรับปรุงการแสดงผลครั้งแรก"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"การเพิ่มประสิทธิภาพเหล่านี้เพิ่มความเร็วในการโหลดหน้าเว็บได้"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"โอกาส"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"เมตริก"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"ปรับปรุงประสบการณ์ในการโหลดโดยรวมเพื่อให้หน้าเว็บตอบสนองและพร้อมใช้งานโดยเร็วที่สุด เมตริกที่สำคัญ ได้แก่ เวลาในการโต้ตอบ ดัชนีความเร็ว"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"การปรับปรุงโดยรวม"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"ประสิทธิภาพ"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"แคช TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"ขนาด (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"เวลาที่ใช้"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"ไบต์ที่อาจประหยัดได้ (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"เวลาที่อาจประหยัดได้ (มิลลิวินาที)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"อาจประหยัดได้ {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"อาจประหยัดเวลาได้ {wastedMs, number, milliseconds} มิลลิวินาที"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} มิลลิวินาที"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} วินาที"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"แสดงการตรวจสอบ"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"การนำทางเริ่มต้น"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"เวลาในการตอบสนองของเส้นทางสำคัญที่ยาวที่สุด"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"ข้อผิดพลาด!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"ข้อผิดพลาดในรายงาน: ไม่มีข้อมูลการตรวจสอบ"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"ข้อมูลในห้องทดลอง"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) การวิเคราะห์หน้าปัจจุบันบน 3G จำลอง ค่าต่างๆ เป็นค่าประมาณและอาจแตกต่างกันไป"},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"รายการเพิ่มเติมที่ควรตรวจสอบด้วยตนเอง"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"ไม่เกี่ยวข้อง"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"โอกาส"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"เวลาที่ประหยัดได้โดยประมาณ"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"การตรวจสอบที่ผ่านแล้ว"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"ระดับคะแนน"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"เกิดปัญหาที่มีผลต่อการทำงานนี้ของ Lighthouse"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"ค่ามาจากการประมาณและอาจแตกต่างกันไป"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"คำเตือน "}};


},{}],77:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome uzantıları bu sayfanın yükleme performansını olumsuz etkilemiştir. Sayfayı gizli modda veya uzantı içermeyen bir Chrome profilinden denetlemeyi deneyin."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Komut Dosyası Değerlendirmesi"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Komut Dosyası Ayrıştırma"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Toplam"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"JS'yi ayrıştırma, derleme ve yürütme için harcanan zamanı azaltma seçeneğini değerlendirin. Daha küçük JS yüklerinin sağlanmasının bu konuda yardımcı olduğunu fark edebilirsiniz. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"JavaScript yürütme süresini azaltın"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript yürütme süresi"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Büyük GIF'ler, animasyonlu içeriğin sunulmasında verimli olmaz. Ağ veri miktarından tasarruf etmek üzere animasyonlar için MPEG4/WebM videoları ve statik resimler için GIF yerine PNG/WebP kullanma seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Animasyonlu içerik için video biçimleri kullanın"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Etkileşimli hale gelme süresini kısaltmak için ekran dışındaki ve gizli resimleri, tüm kritik kaynakların yüklenmesi bittikten sonra gecikmeli olarak yükleme seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Ekran dışındaki resimleri ertele"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Kaynaklar, sayfanızda ilk boyayı engelliyor. Kritik JS/CSS'yi satır içinde yayınlama ve kritik olmayan tüm JS/stilleri erteleme seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Oluşturmayı engelleyen kaynakları ortadan kaldırın"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Büyük ağ yüklerinin kullanıcılara maddi anlamda maliyeti vardır ve bu ağ yükleri, uzun yükleme süreleriyle yakından ilişkilidir. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Toplam boyut: {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Çok büyük ağ yüklerinden kaçının"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Çok büyük ağ yüklerini önler"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"CSS dosyalarının küçültülmesi ağ yükü boyutlarını azaltabilir. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"CSS'yi küçültün"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"JavaScript dosyalarının küçültülmesi yük boyutlarını azaltabilir ve komut dosyası ayrıştırma süresini kısaltabilir. [Daha fazla bilgi](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"JavaScript'i küçült"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Ağ etkinliğiyle tüketilen gereksiz bayt sayısını azaltmak için kullanılmayan kuralları stil sayfalarından kaldırın. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Kullanılmayan CSS'yi erteleyin"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Ağ etkinliğinin kullandığı bayt sayısını azaltmak için kullanılmayan JavaScript'i kaldırın."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Kullanılmayan JavaScript'i kaldırın"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Uzun önbellek ömrü, sayfanızın tekrar ziyaret edilmesi sürecini hızlandırabilir. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{1 kaynak bulundu}other{# kaynak bulundu}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Statik öğeleri verimli bir önbellek politikasıyla yayınlayın"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Statik öğelerde verimli önbellek politikası kullanır"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Optimize edilmiş resimler daha hızlı yüklenir ve daha az hücresel veri kullanır. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Resimleri verimli bir şekilde kodlayın"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Hücresel veriden tasarruf etmek ve yükleme süresini iyileştirmek için uygun boyutlu resimler sunun. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Doğru boyuta sahip resimler"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Metne dayalı kaynaklar, toplam ağ baytı sayısını en aza indirmek için sıkıştırılarak (gizp, deflate veya brotli) yayınlanmalıdır. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Metin sıkıştırmayı etkinleştirin"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000, JPEG XR ve WebP gibi resim biçimleri genellikle PNG veya JPEG'den daha iyi sıkıştırma sağlar. Böylece indirme işlemleri daha hızlı tamamlanır ve veri tüketimi daha az olur. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Resimleri yeni nesil biçimlerde yayınlayın"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Aşağıdaki Kritik İstek Zincirleri, hangi kaynakların yüksek öncelikle yüklendiğini göstermektedir. Sayfa yüklemesini iyileştirmek için zincir uzunluğunu azaltma, kaynakların indirme boyutunu küçültme veya gereksiz kaynakların indirilmesini erteleme seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{1 zincir bulundu}other{# zincir bulundu}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Kritik İsteklerin Derinliğini En Aza İndirin"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Tarayıcı mühendisleri, sayfaların yaklaşık olarak 1500'den az DOM düğümü içermesini önerir. En etkili nokta, 32 öğeden ve 60 alt/üst öğeden az olan bir ağaç derinliğidir. Büyük bir DOM, bellek kullanımını artırarak daha uzun [stil hesaplamalarına] (https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) yol açabilir ve yüksek maliyetli [düzen yeniden düzenlemeleri](https://developers.google.com/speed/articles/reflow) oluşturabilir. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 düğüm}other{# düğüm}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Aşırı büyük bir DOM boyutundan kaçının"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Maksimum DOM Derinliği"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Toplam DOM Düğümü"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Aşırı büyük bir DOM boyutunu önler"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Web yazı tipleri yüklenirken kullanıcının metni görebilmesini sağlamak için yazı tipi görüntüleme CSS özelliğinden yararlanın. [Daha fazla bilgi](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Web yazı tipi yüklemesi sırasında metnin görünür halde kalmasını sağlayın"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Web yazı tipi yüklenirken tüm metin görünür halde kalır"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Kategori"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"JS'yi ayrıştırma, derleme ve yürütme için harcanan zamanı kısaltma seçeneğini değerlendirin. Daha küçük JS yüklerinin sağlanması bu konuda yardımcı olabilir."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Ana iş parçacığı çalışmasını en aza indir"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Ana iş parçacığının çalışmasını en aza indirir"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Yukarıdaki puan, sayfa yüklemesinin en yoğun olduğu 5 saniyelik zaman aralığında uygulamanızın kullanıcı girişine kaç milisaniye içinde yanıt vereceğine dair bir tahmindir. Gecikmeniz 50 ms'nin üzerinde olursa kullanıcılar uygulamanızın durakladığını düşünebilir. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Tahmini Giriş Gecikmesi"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"İlk Zengin İçerikli Boyama, ilk metnin veya resmin boyandığı zamanı işaret eder. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"İlk Zengin İçerikli Boya"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"İlk CPU Boşta metriği, sayfanın ana iş parçacığının girişi işlemek için yeterli olduğu ilk anı işaret eder. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"İlk CPU Boşta"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"İlk Anlamlı Boya, bir sayfanın ana içeriğinin ne zaman görünür hale geldiğini ölçer. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"İlk Anlamlı Boya"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Etkileşimli metriği, sayfanın tam olarak etkileşimli hale gelme süresini işaret eder. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Etkileşim Süresi"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Hız İndeksi, bir sayfa içeriğinin görsel olarak ne kadar hızlı doldurulabildiğini gösterir. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Hız İndeksi"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Yönlendirmeler, sayfanın yüklenmesinden önce ek gecikmelere neden olur. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Birden çok sayfa yönlendirmesini önleyin"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"İlk Bayt Zamanı, sunucunuzun bir yanıt gönderme zamanını tanımlar. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Root dokümanı {timeInMs, number, milliseconds} ms sürdü"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Sunucu yanıt sürelerini kısaltın (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Sunucu yanıt süreleri düşük (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Süre"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Ad"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Başlangıç Zamanı"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Tür"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Önemli kullanıcı deneyimleri esnasında uygulamanızın gerçek dünya performansını ölçmek için uygulamanıza User Timing API'si ekleme seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 kullanıcı zamanlaması}other{# kullanıcı zamanlaması}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Kullanıcı Zamanlaması işaretleri ve ölçüleri"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Önemli üçüncü taraf kaynaklarına erken bağlantılar oluşturmak için önceden bağlanma veya DNS önceden getirme kaynak ipuçları ekleme seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Gerekli kaynaklara önceden bağlan"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Şu anda istenen kaynakları sayfa yüklemenin sonraki aşamalarında getirmeye öncelik tanımak için <link rel=preload> öğesini kullanma seçeneğini değerlendirin. [Daha fazla bilgi](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Önemli istekleri önceden yükleyin"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Uygulamanızın performansı hakkında daha fazla bilgi."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Teşhis"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Performansın en kritik unsuru, piksellerin ekranda oluşturulma hızıdır. Önemli metrikler: İlk Zengin İçerikli Boya, İlk Anlamlı Boya"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"İlk Boya İyileştirmeleri"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Bu optimizasyonlar, sayfanızın yüklenmesini hızlandırabilir."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Fırsatlar"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Metrikler"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Toplam yükleme deneyimini geliştirerek sayfanın mümkün olan en kısa sürede duyarlı ve kullanıma hazır olmasını sağlayın. Önemli metrikler: Etkileşim Süresi, Hız İndeksi"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Toplam İyileştirmeler"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Performans"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL'yi Önbelleğe Alma"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Boyut (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Harcanan Süre"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Potansiyel Tasarruflar (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Potansiyel Tasarruf (ms)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"{wastedBytes, number, bytes} KB potansiyel tasarruf"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"{wastedMs, number, milliseconds} ms potansiyel tasarruf"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} ms"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} sn."},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Denetimleri göster"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"İlk Gezinme"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Maksimum kritik yol gecikmesi:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Hata!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Bildirme hatası: denetim bilgisi yok"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Test Verileri"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Mevcut sayfanın 3G kullanılarak gerçekleştirilen [Lighthouse](https://developers.google.com/web/tools/lighthouse/) analizi. Değerler tahmini olup değişiklik gösterebilir."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Manuel olarak kontrol edilecek ek öğeler"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Geçerli değil"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Fırsat"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Tahmini Tasarruf Miktarı"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Başarılı denetimler"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Puan ölçeği:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Şu Lighthouse çalışmasını etkileyen sorunlar vardı:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Değerler tahminidir ve değişiklik gösterebilir."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Uyarılar: "}};


},{}],78:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Розширення Chrome негативно впливають на завантаження цієї сторінки. Спробуйте перевірити сторінку в режимі анонімного перегляду або в профілі Chrome без розширень."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Оцінка сценарію"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Синтаксичний аналіз сценарію"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Усього"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Радимо зменшити час синтаксичного аналізу, компілювання й запуску сценаріїв JavaScript. Завантажувати менші обсяги даних JavaScript може бути корисно. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Зменште час виконання JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Час виконання JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Великі файли GIF неефективні для передавання анімованого вмісту. Щоб заощадити байти мережі, радимо замість формату GIF використовувати MPEG4 або WebM для анімацій і PNG чи WebP для статичних зображень. [Докладніше](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Використовуйте формати відео для анімованого вмісту"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Щоб пришвидшити взаємодію, використовуйте закадрові й приховані зображення, коли завантажаться всі важливі ресурси. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Відкладіть закадрові зображення"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Ресурси блокують перше відображення сторінки. Вбудовуйте важливі файли JavaScript або CSS і відкладайте всі некритичні файли JavaScript чи стилі. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Вилучіть ресурси, які блокують відображення"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Великі обсяги мережевих даних дорогі для користувачів і довго завантажуються. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Загальний розмір – {totalBytes, number, bytes} KБ"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Уникайте великих обсягів даних у мережі"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Уникається великий обсяг даних мережі"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Стиснення файлів CSS може зменшити обсяг даних у мережі. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Зменште СSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Стиснення файлів JavaScript може зменшити обсяг даних і час синтаксичного аналізу сценарію. [Докладніше](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Зменште файл JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Видаліть із таблиць стилів правила, які ви не використовуєте, щоб зменшити кількість зайвих байтів під час активності в мережі. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Відкладіть вміст CSS, який не використовується"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Видаліть файли JavaScript, які ви не використовуєте, щоб зменшити кількість байтів під час активності в мережі."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Вилучіть файли JavaScript, які ви не використовуєте"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Збереження кешу за довгий час може пришвидшити завантаження сторінки під час повторних відвідувань. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Знайдено 1 ресурс}one{Знайдено # ресурс}few{Знайдено # ресурси}many{Знайдено # ресурсів}other{Знайдено # ресурсу}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Показуйте статичні об’єкти за допомогою ефективних правил кешування"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Використовуються ефективні правила кешування статичних об’єктів"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Оптимізовані зображення завантажуються швидше й використовують менше мобільного трафіку. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Ефективно кодуйте зображення"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Показуйте зображення правильного розміру, щоб заощадити мобільний трафік і покращити час завантаження. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Правильно виберіть розмір зображень"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Текстові ресурси потрібно відображати зі стисненням (Gzip, Deflate чи Brotli), щоб мінімізувати загальну кількість байтів у мережі. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Увімкніть стиснення тексту"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Формати зображень JPEG 2000, JPEG XR і WebP часто краще стискаються, ніж PNG чи JPEG. Тому вони швидше завантажуються й використовують менше даних. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Показуйте зображення в нових форматах"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Ланцюжки важливих запитів нижче показують, які ресурси мають високий пріоритет. Щоб пришвидшити завантаження сторінки, зменште довжину ланцюжків і розмір завантажень або відкладіть завантаження непотрібних ресурсів. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Знайдено 1 ланцюжок}one{Знайдено # ланцюжок}few{Знайдено # ланцюжки}many{Знайдено # ланцюжків}other{Знайдено # ланцюжка}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Мінімізуйте глибину важливих запитів"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Розробники веб-переглядачів радять, щоб сторінки містили до ~1500 вузлів DOM. Зона найкращого сприйняття – глибина дерева < 32 елементів і до 60 дитячих чи батьківських елементів. Великий файл DOM може збільшувати використання пам’яті, спричиняти довше [обчислення стилів](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) і створювати дороге [перекомпонування макетів](https://developers.google.com/speed/articles/reflow). [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 вузол}one{# вузол}few{# вузли}many{# вузлів}other{# вузла}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Уникайте надмірного розміру DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Максимальна глибина DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Загальна кількість вузлів DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Уникається надмірний розмір DOM"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Використовуйте функцію відображення шрифтів CSS, щоб текст було видно під час завантаження шрифтів. [Докладніше](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Переконайтеся, що текст залишається видимим під час завантаження веб-шрифту"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Увесь текст залишається видимим під час завантаження веб-шрифтів"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Категорія"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Зменште час виконання синтаксичного аналізу, компілювання й запуску сценаріїв JavaScript. Завантажувати менші обсяги даних JavaScript може бути корисно."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Мінімізуйте роботу основного потоку"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Мінімізується робота основного потоку"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Результат вище показує, скільки часу в мілісекундах додаток відповідає на ввід користувача під час п’ятисекундного періоду завантаження сторінки. Якщо затримка перевищує 50 мс, користувачі можуть вважати ваш додаток повільним. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Приблизна затримка введення"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Час завантаження першого вмісту показує, коли з’являється текст чи зображення. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Перше відображення всього вмісту"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Перший простій ЦП вказує, коли основний ланцюжок сторінки вперше може обробити введення. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"Перший простій ЦП"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Перше значне відображення вказує, коли видно основний вміст сторінки. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Перше значне відображення"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Показник взаємодії позначає час повної активності сторінки. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Час до повної взаємодії"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Індекс швидкості показує, через скільки часу відображається вміст сторінки. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Індекс швидкості"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Переспрямування додають затримки під час завантаження сторінки. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Уникайте переспрямувань кількох сторінок"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Час до першого байта визначає швидкість реакції сервера. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Кореневий документ відповів через {timeInMs, number, milliseconds} мс"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Зменште час відповіді сервера (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Сервер довго відповідає (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Тривалість"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Назва"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Час початку"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Тип"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Використовуйте в додатку User Timing API, щоб отримувати показники ефективності додатка під час взаємодії з користувачами. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 позначка часу користувача}one{# позначка часу користувача}few{# позначки часу користувача}many{# позначок часу користувача}other{# позначки часу користувача}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Показники й мітки часу користувача"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Додайте в ресурси корективи для попереднього з’єднання чи виклику DNS, щоб заздалегідь установлювати з’єднання з важливими джерелами третіх сторін. [Докладніше](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Попередньо під’єднуйтеся до потрібних джерел"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Використовуйте <link rel=preload>, щоб указати пріоритетність завантаження ресурсів, які наразі запитуються пізніше під час завантаження сторінки. [Докладніше](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Попередньо завантажуйте основні запити"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Докладніше про ефективність додатка."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Діагностика"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Найважливішим аспектом ефективності є швидкість відображення пікселів на екрані. Основні показники: перше відображення вмісту, перше значне відображення"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Покращення першого відображення"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Ці оптимізації можуть пришвидшити завантаження сторінки."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Можливості"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Показники"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Покращте загальну ефективність завантаження, щоб сторінка швидко реагувала й завантажувалася. Основні показники: час до повної взаємодії, індекс швидкості"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Загальні покращення"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Ефективність"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"TTL кешу"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Розмір (КБ)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Витрачений час"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL-адреса"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Потенційне заощадження (КБ)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Потенційне заощадження (мс)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Потенційне заощадження – {wastedBytes, number, bytes} КБ"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Потенційне заощадження – {wastedMs, number, milliseconds} мс"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} мс"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} c"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Показати перевірки"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Початкова навігація"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Максимальна критична затримка шляху:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Помилка."},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Повідомлення про помилку: немає інформації про перевірку"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Дані тестів"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Аналіз [Lighthouse](https://developers.google.com/web/tools/lighthouse/) поточної сторінки в імітованій мережі 3G. Значення приблизні й можуть відрізнятися."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Додаткові елементи, які потрібно перевірити вручну"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Не застосовуються"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Можливість"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Приблизне заощадження"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Виконані перевірки"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Шкала результатів:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Під час запуску Lighthouse виникли перелічені нижче проблеми."},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Значення приблизні й можуть відрізнятися."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Застереження. "}};


},{}],79:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Các tiện ích của Chrome ảnh hưởng tiêu cực đến hiệu suất tải của trang này. Hãy thử kiểm tra trang ở chế độ ẩn danh hoặc từ một hồ sơ trên Chrome không có tiện ích."},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"Đánh giá tập lệnh"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"Phân tích cú pháp tập lệnh"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"Tổng"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"Hãy xem xét giảm thời gian dùng để phân tích cú pháp, biên soạn và thực thi JS. Bạn có thể giải quyết vấn đề này bằng cách phân phối các tải trọng JS nhỏ hơn. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/bootup)."},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"Giảm thời gian thực thi JavaScript"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"Thời gian thực thi JavaScript"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"Các ảnh GIF lớn không hiệu quả trong việc phân phối nội dung động. Hãy xem xét sử dụng video MPEG4/WebM cho ảnh động và PNG/WebP cho ảnh tĩnh thay vì ảnh GIF để tiết kiệm dữ liệu mạng (số byte mạng). [Tìm hiểu thêm](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"Sử dụng các định dạng video cho nội dung động"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"Xem xét trì hoãn tải các hình ảnh ẩn và ngoài màn hình sau khi tất cả tài nguyên quan trọng tải xong để giảm thời gian tương tác. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)."},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"Trì hoãn tải các hình ảnh ngoài màn hình"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"Các tài nguyên đang chặn hình ảnh đầu tiên trang của bạn. Hãy xem xét phân phối nội dòng JS/CSS quan trọng và trì hoãn mọi JS/kiểu không quan trọng. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)."},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"Loại bỏ các tài nguyên chặn hiển thị"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"Tải trọng mạng lớn gây tốn tiền cho người dùng và thường dẫn đến thời gian tải lâu. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)."},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"Tổng kích thước là {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"Tránh các tài nguyên lớn trên mạng"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"Tránh tài nguyên lớn trên mạng"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"Việc giảm kích thước tệp CSS có thể giảm kích thước tài nguyên trên mạng. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/minify-css)."},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"Rút gọn CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"Việc giảm kích thước tệp JavaScript có thể giảm kích thước tải trọng và thời gian phân tích cú pháp tập lệnh. [Tìm hiểu thêm](https://developers.google.com/speed/docs/insights/MinifyResources)."},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"Rút gọn JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"Xóa các quy tắc không dùng khỏi tờ mẫu để giảm số byte không cần thiết tiêu tốn vào hoạt động mạng. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/unused-css)."},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"Trì hoãn tải CSS không dùng"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"Xóa JavaScript không dùng để giảm số byte tiêu tốn vào hoạt động mạng."},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"Xóa JavaScript không dùng"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"Tuổi thọ lâu dài của bộ nhớ đệm có thể tăng tốc số lượt truy cập lặp lại vào trang của bạn. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)."},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{Đã tìm thấy 1 tài nguyên}other{Đã tìm thấy # tài nguyên}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"Phân phối các nội dung tĩnh bằng chính sách bộ nhớ đệm hiệu quả"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"Sử dụng chính sách bộ nhớ đệm hiệu quả cho các nội dung tĩnh"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"Hình ảnh được tối ưu hóa sẽ tải nhanh hơn và tiêu tốn ít dữ liệu di động hơn. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)."},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"Mã hóa hình ảnh hiệu quả"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"Phân phối hình ảnh có kích thước phù hợp để tiết kiệm dữ liệu di động và cải thiện thời gian tải. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)."},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"Thay đổi kích thước hình ảnh cho phù hợp"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"Các tài nguyên dựa trên văn bản phải được phân phối ở định dạng nén (gzip, deflate hoặc brotli) để giảm thiểu tổng số byte mạng. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/text-compression)."},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"Bật tính năng nén văn bản"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"Các định dạng hình ảnh như JPEG 2000, JPEG XR và WebP thường nén tốt hơn so với các định dạng PNG hoặc JPEG. Điều này có nghĩa là tốc độ tải xuống nhanh hơn và tiêu tốn ít dữ liệu hơn. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/webp)."},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"Phân phối hình ảnh ở định dạng mới và hiệu quả hơn"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"Các chuỗi yêu cầu quan trọng dưới đây cho bạn biết những tài nguyên có mức độ ưu tiên cao sẽ được tải. Hãy cân nhắc giảm độ dài chuỗi, giảm kích thước tài nguyên tải xuống hoặc trì hoãn tải xuống các tài nguyên không cần thiết để cải thiện tốc độ tải trang. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)."},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{Đã tìm thấy 1 chuỗi}other{Đã tìm thấy # chuỗi}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"Giảm thiểu độ sâu của các yêu cầu quan trọng"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"Các công cụ của trình duyệt đề xuất các trang nên chứa ít hơn 1.500 nút DOM. Điểm ngọt là độ sâu của cây có ít hơn 32 thành phần và 60 thành phần con/cấp độ gốc. Một DOM lớn có thể tăng mức sử dụng bộ nhớ, khiến [các phép tính về kiểu](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations) dài hơn đồng thời tạo ra [các chỉnh sửa bố cục](https://developers.google.com/speed/articles/reflow) tốn kém. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/dom-size)."},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 nút}other{# nút}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"Tránh kích thước DOM quá lớn"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"Độ sâu DOM tối đa"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"Tổng số nút DOM"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"Tránh kích thước DOM quá lớn"},

"lighthouse-core/audits/font-display.js | description":{
"message":"Sử dụng tính năng CSS hiển thị phông chữ để đảm bảo văn bản hiển thị với người dùng khi phông chữ web đang tải. [Tìm hiểu thêm](https://developers.google.com/web/updates/2016/02/font-display)."},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"Đảm bảo văn bản vẫn hiển thị trong khi tải phông chữ web"},

"lighthouse-core/audits/font-display.js | title":{
"message":"Tất cả văn bản vẫn hiển thị trong khi tải phông chữ web"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"Danh mục"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"Hãy xem xét giảm thời gian dùng để phân tích cú pháp, biên soạn và thực thi JS. Bạn có thể giải quyết vấn đề này bằng cách phân phối các tải trọng JS nhỏ hơn."},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"Giảm thiểu công việc theo chuỗi chính"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"Giảm thiểu công việc theo chuỗi chính"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"Điểm số ở trên là điểm số ước tính về khoảng thời gian tính bằng mili giây mà ứng dụng của bạn cần để phản hồi thông tin người dùng nhập vào trong cửa sổ tải trang 5 giây bận rộn nhất. Nếu thời gian chờ lớn hơn 50 mili giây, người dùng có thể coi ứng dụng của bạn là chạy chậm. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)."},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"Thời gian chờ nhập thông tin theo ước tính"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"Chỉ số Hình ảnh có nội dung đầu tiên đánh dấu thời điểm hiển thị văn bản hoặc hình ảnh đầu tiên. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)."},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"Hình ảnh có nội dung đầu tiên"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"Chỉ số CPU nhàn rỗi đầu tiên đánh dấu thời điểm đầu tiên chuỗi chính của trang đủ yên tĩnh để xử lý thông tin nhập vào. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)."},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"CPU nhàn rỗi đầu tiên"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"Chỉ số Hình ảnh có ý nghĩa đầu tiên đo lường thời điểm nội dung chính của trang hiển thị. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)."},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"Hình ảnh có ý nghĩa đầu tiên"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"Chỉ số Thời điểm tương tác đánh dấu thời điểm trang tương tác hoàn toàn. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)."},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"Thời điểm tương tác"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"Chỉ mục tốc độ cho biết nội dung của một trang hiển thị nhanh chóng đến mức nào. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/speed-index)."},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"Chỉ mục tốc độ"},

"lighthouse-core/audits/redirects.js | description":{
"message":"Các lần chuyển hướng sẽ làm tốc độ tải trang chậm hơn. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/redirects)."},

"lighthouse-core/audits/redirects.js | title":{
"message":"Tránh chuyển hướng trang nhiều lần"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"Chỉ số Thời gian cho byte đầu tiên xác định thời gian máy chủ của bạn gửi một phản hồi. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/ttfb)."},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"Tài liệu gốc mất {timeInMs, number, milliseconds} mili giây"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"Giảm thời gian phản hồi của máy chủ (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"Thời gian phản hồi của máy chủ chậm (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"Thời lượng"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"Tên"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"Thời gian bắt đầu"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"Loại"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"Cân nhắc trang bị API Thời gian người dùng cho ứng dụng để đo lường hiệu suất thực tế của ứng dụng trong trải nghiệm người dùng chính. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/user-timing)."},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 dấu thời gian người dùng}other{# dấu thời gian người dùng}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"Các thời điểm cụ thể và khoảng thời gian được ghi lại bằng API Thời gian người dùng"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"Xem xét thêm các gợi ý về tài nguyên kết nối trước hoặc tìm nạp DNS trước để thiết lập các kết nối sớm tới các miền quan trọng của bên thứ ba. [Tìm hiểu thêm](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)."},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"Kết nối trước với các tên miền bắt buộc"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"Hãy xem xét sử dụng <link rel=preload> để ưu tiên tìm nạp tài nguyên đang được yêu cầu vào một thời điểm khác trong quá trình tải trang. [Tìm hiểu thêm](https://developers.google.com/web/tools/lighthouse/audits/preload)."},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"Tải trước các yêu cầu chính"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"Thông tin khác về hiệu suất ứng dụng của bạn."},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"Chẩn đoán"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"Khía cạnh quan trọng nhất của hiệu suất là tốc độ hiển thị pixel nhanh chóng trên màn hình. Các chỉ số chính: Hình ảnh có nội dung đầu tiên, Hình ảnh có ý nghĩa đầu tiên"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"Các thao tác để cải thiện thời gian hiển thị hình ảnh đầu tiên"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"Những đề xuất tối ưu hóa này có thể tăng tốc độ tải trang của bạn."},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"Cơ hội"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"Các chỉ số"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"Cải thiện trải nghiệm tải tổng thể để trang phản hồi và sẵn sàng cho bạn sử dụng sớm nhất có thể. Các số liệu chính: Thời điểm tương tác, Chỉ mục tốc độ"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"Các thao tác để cải thiện hiệu suất tổng thể"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"Hiệu suất"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"Thời gian tồn tại (TTL) của bộ nhớ đệm"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"Kích thước (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"Thời gian sử dụng"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"URL"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"Số byte có thể tiết kiệm được (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"Thời lượng có thể tiết kiệm được (mili giây)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"Số byte có thể tiết kiệm được là {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"Thời lượng có thể tiết kiệm được là {wastedMs, number, milliseconds} mili giây"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} mili giây"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} giây"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"Hiển thị kết quả kiểm tra"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"Điều hướng ban đầu"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"Độ trễ tối đa của đường dẫn quan trọng:"},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"Lỗi!"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"Lỗi báo cáo: không có thông tin kiểm tra"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"Dữ liệu của phòng thí nghiệm"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"Số liệu phân tích về [Lighthouse](https://developers.google.com/web/tools/lighthouse/) của trang hiện tại trên mạng 3G mô phỏng. Đây là các giá trị ước tính và có thể thay đổi."},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"Các mục bổ sung cần kiểm tra theo cách thủ công"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"Không áp dụng"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"Cơ hội"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"Thời lượng tiết kiệm được theo ước tính"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"Số lần kiểm tra đạt yêu cầu"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"Thang điểm:"},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"Đã xảy ra sự cố ảnh hưởng đến lần chạy Lighthouse này:"},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"Các giá trị chỉ là ước tính và có thể thay đổi."},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"Cảnh báo: "}};


},{}],80:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome 擴充程式會對此頁面的載入效能產生負面影響。建議透過無痕模式或使用未安裝擴充程式的 Chrome 設定檔來審核頁面。"},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"指令碼評估"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"指令碼剖析"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"總計"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"建議減少剖析、編譯和執行 JS 所用的時間。傳送較小的 JS 負載可能有所幫助。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/bootup)。"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"縮短 JavaScript 執行時間"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript 執行時間"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"大型 GIF 放送動畫內容效率往往不佳。建議改用 MPEG4/WebM 格式的動畫影片和 PNG/WebP 格式的靜態圖片，以節省網絡位元組。[瞭解詳情](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"使用影片格式的動畫內容"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"建議延遲載入螢幕外的項目並隱藏圖片，直到重要資源全部載入後再開始操作，以縮短可互動時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)。"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"延遲載入螢幕外圖片"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"過多資源往往會阻止系統首次繪製頁面。建議內嵌重要的 JS/CSS，延遲所有不重要的 JS/樣式。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)。"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"排除阻止呈現的資源"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"網絡負載過大會造成使用者的費用負擔，且往往與過長載入時間息息相關。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)。"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"總大小為 {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"避免網絡負載過大"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"避免網絡負載過大"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"壓縮 CSS 檔案可減少網絡負載大小。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/minify-css)。"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"壓縮 CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"壓縮 JavaScript 檔案可減少負載大小和指令碼剖析時間。[瞭解詳情](https://developers.google.com/speed/docs/insights/MinifyResources)。"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"壓縮 Javascript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"從樣式表中移除未使用的規則，減少網絡活動耗用的不必要位元組。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/unused-css)。"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"延遲未使用的 CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"移除未使用的 JavaScript，以減少網絡活動耗用的位元組。"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"移除未使用的 JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"延長快取期限可加快重覆瀏覽頁面的速度。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)。"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{已找到 1 項資源}other{已找到 # 項資源}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"採用有效的快取政策提供靜態資產"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"使用有效的快取政策處理靜態資產"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"優化圖片以加快載入速度，減少流動數據用量。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)。"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"有效地進行圖片編碼"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"提供適當大小的圖片有助節省流動數據用量，並縮短載入時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)。"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"適當調整圖片大小"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"文字資源應經過 (gzip、deflate 或 brotli) 壓縮，以將網絡位元總數減至最少。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/text-compression)。"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"啟用文字壓縮"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000、JPEG XR 和 WebP 等圖片格式通常比 PNG 或 JPEG 有更好的壓縮效果，能夠更快完成下載及減少數據用量。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/webp)。"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"提供 next-gen 格式的圖片"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"下方的「關鍵要求鏈結」顯示以高優先次序發佈的資源。為了提高頁面載入速度，建議您縮短鏈結長度，縮減下載資源的大小，或延遲下載不必要資源。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)。"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{已找到 1 個鏈結}other{已找到 # 個鏈結}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"將重要要求深度降至最低"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"瀏覽器工程師建議，頁面包含的 DOM 節點數量應少於 1,500 個左右。理想樹狀深度應包含少於 32 個元素，且少於 60 個子/父元素。大型 DOM 會增加記憶體用量、導致[樣式運算](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)所用時間延長並產生昂貴的[版面配置自動重排](https://developers.google.com/speed/articles/reflow)費用。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/dom-size)。"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 個節點}other{# 個節點}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"避免 DOM 過大"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"DOM 深度上限"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"DOM 節點總數"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"避免 DOM 過大"},

"lighthouse-core/audits/font-display.js | description":{
"message":"運用顯示字型的 CSS 功能，確保使用者可在網頁字型載入時看到文字。[瞭解詳情](https://developers.google.com/web/updates/2016/02/font-display)。"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"確保文字在網頁字型載入時仍然顯示"},

"lighthouse-core/audits/font-display.js | title":{
"message":"在網頁字型載入時，所有文字仍然顯示"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"類別"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"建議減少剖析、編譯和執行 JS 所用的時間。傳送較小的 JS 負載可能有所幫助。"},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"將主要執行緒的工作減至最少"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"將主要執行緒的工作減至最少"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"上方的分數是在頁面載入視窗最忙碌的 5 秒期間，您的應用程式對使用者輸入動作的預計回應時間 (以毫秒為單位)。如果延遲超過 50 毫秒，使用者可能會認為應用程式的速度緩慢。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)。"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"預計輸入延遲時間"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"「首次內容繪製時間」標示繪製首個文字/首張圖片的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)。"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"首次內容繪製時間"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"「首次 CPU 閒置時間」標示頁面的主要執行緒首次有空處理輸入的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)。"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"首次 CPU 閒置時間"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"「首次有效繪製時間」評估頁面主要內容顯示的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)。"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"首次有效繪製時間"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"「可互動所需時間」用於標示頁面可進行完整互動前所需的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)。"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"可互動所需時間"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"「速度指數」會顯示頁面內容的展現速度。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/speed-index)。"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"速度指數"},

"lighthouse-core/audits/redirects.js | description":{
"message":"重新導向會導致頁面延遲載入。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/redirects)。"},

"lighthouse-core/audits/redirects.js | title":{
"message":"避免多次頁面重新導向"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"「首個字節時間」會指出您的伺服器傳送回應的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/ttfb)。"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"根文件用了 {timeInMs, number, milliseconds} 毫秒"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"縮短伺服器回應時間 (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"伺服器回應時間短 (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"時間長度"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"名稱"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"開始時間"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"類別"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"建議使用「用戶使用時間」檢測您的應用程式，評估其在關鍵使用者體驗期間的實際成效。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/user-timing)。"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 個用戶使用時間標記}other{# 個用戶使用時間標記}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"用戶使用時間標記和測量結果"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"建議新增預先連線或預先擷取 DNS 的資源提示，及早連線至重要的第三方來源。[瞭解詳情](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)。"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"預先連接至必要來源"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"建議使用 <link rel=preload> 來指定優先需要的網絡要求，並預先擷取資源。[瞭解詳情(https://developers.google.com/web/tools/lighthouse/audits/preload)。"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"預先載入關鍵要求"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"進一步瞭解應用程式效能。"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"診斷"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"評估效能的最重要指標在於像素在畫面上的呈現速度。關鍵數據：「首次內容繪製時間」、「首次有效繪製時間」"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"首次繪製改進"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"這些優化建議可提高您的頁面載入速度。"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"優化建議"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"數據"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"改善整體載入體驗，令網頁反應更靈敏快捷，盡快可供用戶使用。關鍵數據：可互動時間、速度指數"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"整體改進"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"效能"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"快取 TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"大小 (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"所用的時間"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"網址"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"可節省的用量 (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"可節省的時間 (毫秒)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"可節省 {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"可節省 {wastedMs, number, milliseconds} 毫秒"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} 毫秒"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} 秒"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"顯示審核結果"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"初始導覽"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"關鍵路徑延遲時間上限："},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"發生錯誤！"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"報告錯誤：無審核資料"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"實驗室數據"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) 在 3G 模擬網絡上分析目前網頁。此為預計值，可能與實際值有所不同。"},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"其他手動檢查項目"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"不適用"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"優化建議"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"預計節省的時間"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"已通過的審核"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"分數等級："},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"導致這次 Lighthouse 無法順利執行的問題："},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"此為預計值，可能與實際值有所不同。"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"警告： "}};


},{}],81:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome 擴充功能對這個頁面的載入效能有負面影響。建議透過無痕模式或不含擴充功能的 Chrome 設定檔來稽核頁面。"},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"指令碼評估"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"指令碼剖析"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"總計"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"建議減少剖析、編譯和執行 JS 所耗費的時間。提供較小的 JS 酬載可能會有幫助。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/bootup)"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"減少 JavaScript 執行時間"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript 執行時間"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"使用大型 GIF 檔案來呈現動畫內容會降低網路傳輸效率，建議改用 MPEG4/WebM 影片格式來呈現動畫效果，或是使用 PNG/WebP 格式來顯示靜態圖片，以減少網路傳輸的資料量。[瞭解詳情](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"使用影片格式的動畫內容"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"建議延遲載入畫面外的項目並隱藏圖片，直到重要資源全部載入後再開始作業，以減少可互動時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"延後載入畫面外圖片"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"資源過多會妨礙首次繪製頁面。建議內嵌重要的 JS/CSS，延遲所有不重要的 JS/樣式。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"排除禁止轉譯的資源"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"大量網路酬載會造成使用者的費用負擔，而且往往會導致載入耗時過長。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"總大小為 {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"避免耗用大量網路資源"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"避免耗用大量網路資源"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"壓縮 CSS 檔案可以減少網路酬載大小。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/minify-css)"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"壓縮 CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"壓縮 JavaScript 檔案可以減少酬載大小和指令碼剖析時間。[瞭解詳情](https://developers.google.com/speed/docs/insights/MinifyResources)"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"壓縮 JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"移除樣式表中的無用規則，盡量避免網路活動消耗不必要的流量。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/unused-css)"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"延後未使用的 CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"移除未使用的 JavaScript，減少網路活動消耗的流量。"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"移除未使用的 JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"快取效期越長，增加造訪您頁面的頻率就越高。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{找到 1 項資源}other{找到 # 項資源}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"運用有效的快取政策提供靜態資產"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"使用有效的快取政策處理靜態資產"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"最佳化圖片載入速度，減少行動數據用量。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"圖片編碼有效率"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"提供適當大小的圖片有助於節省行動數據用量、縮短載入時間。[Learn more](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"使用合適的圖片大小"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"提供的文字資源應經過 (gzip、deflate 或 brotli) 壓縮，將網路傳輸的資料量降至最低。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/text-compression)"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"啟用文字壓縮"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000、JPEG XR 和 WebP 等圖片格式通常壓縮效率優於 PNG 或 JPEG，能夠更快下載完成及減少數據用量。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/webp)"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"提供 next-gen 格式的圖片"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"下方的「關鍵要求鏈結」顯示的是以高優先順序載入的資源。為了提高頁面載入速度，建議你縮短鏈結長度，降低下載資源的大小，或是延後下載非必要資源。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)。"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{找到 1 個鏈結}other{找到 # 個鏈結}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"將關鍵要求層級降至最低"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"瀏覽器工程師建議，頁面包含的 DOM 節點數量應少於 1,500 個左右。理想樹狀層級應包含少於 32 個元素，以及少於 60 個下層/上層元素。大型的 DOM 可能造成記憶體用量增加、延長[樣式運算](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)的過程，還會導致費工的[版面配置重排](https://developers.google.com/speed/articles/reflow)。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/dom-size)"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 個節點}other{# 個節點}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"避免 DOM 過大"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"DOM 層級上限"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"DOM 節點總數"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"避免 DOM 過大"},

"lighthouse-core/audits/font-display.js | description":{
"message":"運用顯示字型的 CSS 功能，確保使用者可以在載入網路字型時看到文字。[瞭解詳情](https://developers.google.com/web/updates/2016/02/font-display)"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"確認載入網站字型時文字不會消失"},

"lighthouse-core/audits/font-display.js | title":{
"message":"載入網站字型時沒有任何文字消失"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"類別"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"建議減少剖析、編譯和執行 JS 所耗費的時間。提供較小的 JS 酬載可能會有幫助。"},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"將主要執行緒的工作降到最低"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"將主要執行緒的工作降到最低"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"上方的分數是在頁面載入視窗最忙碌的 5 秒期間，您的應用程式對於使用者輸入動作的預計回應時間 (以毫秒為單位)。如果延遲超過 50 毫秒，使用者可能會感覺應用程式的速度很慢。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"預估輸入延遲"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"「首次顯示內容所需時間」會標記寫下第一個文字或繪製第一張圖片的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)。"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"首次內容繪製"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"首次 CPU 閒置標記的是頁面的主要執行緒在第一次處理輸入作業前所需的閒置時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"首次 CPU 閒置"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"首次有效繪製可供衡量頁面主要內容顯示的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"首次有效繪製"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"可互動時間標記的是頁面提供完整互動功能的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"可互動時間"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"速度指數會顯示頁面內容填入的速度。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/speed-index)"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"速度指數"},

"lighthouse-core/audits/redirects.js | description":{
"message":"重新導向會導致頁面延遲載入。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/redirects)"},

"lighthouse-core/audits/redirects.js | title":{
"message":"避免進行多次頁面重新導向"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"第一個位元組時間會指出您的伺服器傳送回應的時間。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/ttfb)"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"根文件用時 {timeInMs, number, milliseconds} 毫秒"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"減少伺服器回應時間 (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"伺服器回應時間低 (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"時間長度"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"名稱"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"開始時間"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"類型"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"建議你使用 User Timing API 檢測應用程式在關鍵使用者體驗期間的實際成效。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/user-timing)。"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 個 User Timing 標記}other{# 個 User Timing 標記}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing 標記和測量結果"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"建議新增預先連線或預先擷取 DNS 的資源提示，及早連線至重要的第三方來源。[瞭解詳情](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"預先連上必要來源"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"建議使用 <link rel=preload> 指定在頁面載入後立即需要的資源，以優先擷取這類資源。[瞭解詳情](https://developers.google.com/web/tools/lighthouse/audits/preload)"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"預先載入重要要求"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"關於您應用程式效能的更多資訊。"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"診斷"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"像素呈現在畫面上的速度是最重要的效能層面。重要指標：首次內容繪製、首次有效繪製"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"改進首次繪製程序"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"這些最佳化建議可以提高您的頁面載入速度。"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"最佳化建議"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"指標"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"改進整體載入體驗，採用回應式頁面設計，儘快為使用者提供服務。重要指標：可互動時間、速度指數"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"整體改進"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"效能"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"快取 TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"大小 (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"花費的時間"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"網址"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"潛在減少量 (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"潛在減少量 (毫秒)"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"可減少 {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"可減少 {wastedMs, number, milliseconds} 毫秒"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} 毫秒"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} 秒"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"顯示稽核結果"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"起始導覽"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"關鍵路徑延遲時間上限："},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"發生錯誤！"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"回報錯誤：無稽核資訊"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"研究資料"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) 在 3G 模擬網路上分析目前網頁。分析結果為預估值，可能與實際情況有所出入。"},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"其他手動檢查項目"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"不適用"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"最佳化建議"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"預估減少量"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"通過稽核項目"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"分數量尺："},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"有問題導致 Lighthouse 無法順利執行這項作業："},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"此為預估值，可能與實際情況有所出入。"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"警告： "}};


},{}],82:[function(require,module,exports){
module.exports={
"lighthouse-core/audits/bootup-time.js | chromeExtensionsWarning":{
"message":"Chrome 扩展程序对此网页的加载性能产生了负面影响。请尝试在无痕模式下或使用未安装这些扩展程序的 Chrome 个人资料审核此网页。"},

"lighthouse-core/audits/bootup-time.js | columnScriptEval":{
"message":"脚本评估"},

"lighthouse-core/audits/bootup-time.js | columnScriptParse":{
"message":"脚本解析"},

"lighthouse-core/audits/bootup-time.js | columnTotal":{
"message":"总计"},

"lighthouse-core/audits/bootup-time.js | description":{
"message":"考虑减少为解析、编译和执行 JS 而花费的时间。您可能会发现，提供较小的 JS 负载有助于实现此目标。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/bootup)。"},

"lighthouse-core/audits/bootup-time.js | failureTitle":{
"message":"缩短 JavaScript 执行用时"},

"lighthouse-core/audits/bootup-time.js | title":{
"message":"JavaScript 执行用时"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | description":{
"message":"使用大型 GIF 提供动画内容会导致效率低下。不妨考虑改用 MPEG4/WebM 视频（来提供动画）和 PNG/WebP（来提供静态图片）以减少网络活动消耗的字节数。[了解详情](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/replace-animated-gifs-with-video/)"},

"lighthouse-core/audits/byte-efficiency/efficient-animated-content.js | title":{
"message":"使用视频格式提供动画内容"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | description":{
"message":"考虑在所有关键资源加载完毕后推迟加载屏幕外图片和处于隐藏状态的图片，从而缩短可交互前的耗时。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/offscreen-images)。"},

"lighthouse-core/audits/byte-efficiency/offscreen-images.js | title":{
"message":"推迟加载屏幕外图片"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | description":{
"message":"资源阻止了系统对您网页的首次绘制。请考虑以内嵌方式提供关键的 JS/CSS 并推迟提供所有非关键的 JS/样式。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/blocking-resources)。"},

"lighthouse-core/audits/byte-efficiency/render-blocking-resources.js | title":{
"message":"移除阻塞渲染的资源"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | description":{
"message":"网络负载过大不仅会让用户付出真金白银，还极有可能会延长加载用时。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/network-payloads)。"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | displayValue":{
"message":"总大小为 {totalBytes, number, bytes} KB"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | failureTitle":{
"message":"避免网络负载过大"},

"lighthouse-core/audits/byte-efficiency/total-byte-weight.js | title":{
"message":"避免网络负载过大"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | description":{
"message":"缩减 CSS 文件大小可缩减网络负载规模。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/minify-css)。"},

"lighthouse-core/audits/byte-efficiency/unminified-css.js | title":{
"message":"缩减 CSS"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | description":{
"message":"如果缩减 JavaScript 文件大小，则既能缩减负载规模，又能缩短脚本解析用时。[了解详情](https://developers.google.com/speed/docs/insights/MinifyResources)。"},

"lighthouse-core/audits/byte-efficiency/unminified-javascript.js | title":{
"message":"缩减 JavaScript"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | description":{
"message":"从样式表中移除未使用的规则，以减少网络活动消耗的不必要的字节数。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/unused-css)。"},

"lighthouse-core/audits/byte-efficiency/unused-css-rules.js | title":{
"message":"推迟加载未使用的 CSS"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | description":{
"message":"移除未使用的 JavaScript 可减少网络活动消耗的字节数。"},

"lighthouse-core/audits/byte-efficiency/unused-javascript.js | title":{
"message":"移除未使用的 JavaScript"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | description":{
"message":"延长缓存期限可加快重访您网页的速度。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/cache-policy)。"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | displayValue":{
"message":"{itemCount,plural, =1{找到了 1 项资源}other{找到了 # 项资源}}"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | failureTitle":{
"message":"采用高效的缓存策略提供静态资源"},

"lighthouse-core/audits/byte-efficiency/uses-long-cache-ttl.js | title":{
"message":"针对静态资源使用高效的缓存策略"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | description":{
"message":"如果图片经过了优化，则加载速度会更快，且消耗的移动数据网络流量会更少。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/optimize-images)。"},

"lighthouse-core/audits/byte-efficiency/uses-optimized-images.js | title":{
"message":"对图片进行高效编码"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | description":{
"message":"提供适当大小的图片可节省移动数据网络流量并缩短加载用时。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/oversized-images)。"},

"lighthouse-core/audits/byte-efficiency/uses-responsive-images.js | title":{
"message":"适当调整图片大小"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | description":{
"message":"对于文本资源，应先压缩（gzip、deflate 或 brotli），然后再提供，以最大限度地减少网络活动消耗的字节总数。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/text-compression)。"},

"lighthouse-core/audits/byte-efficiency/uses-text-compression.js | title":{
"message":"启用文本压缩"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | description":{
"message":"JPEG 2000、JPEG XR 和 WebP 等图片格式的压缩效果通常比 PNG 或 JPEG 好，因此下载速度更快，消耗的数据流量更少。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/webp)。"},

"lighthouse-core/audits/byte-efficiency/uses-webp-images.js | title":{
"message":"采用新一代格式提供图片"},

"lighthouse-core/audits/critical-request-chains.js | description":{
"message":"下面的关键请求链显示了以高优先级加载的资源。请考虑缩短链长、缩减资源的下载文件大小，或者推迟下载不必要的资源，从而提高网页加载速度。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/critical-request-chains)。"},

"lighthouse-core/audits/critical-request-chains.js | displayValue":{
"message":"{itemCount,plural, =1{找到了 1 条请求链}other{找到了 # 条请求链}}"},

"lighthouse-core/audits/critical-request-chains.js | title":{
"message":"最大限度地缩短关键请求深度"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnElement":{
"message":"Element"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnStatistic":{
"message":"Statistic"},

"lighthouse-core/audits/dobetterweb/dom-size.js | columnValue":{
"message":"Value"},

"lighthouse-core/audits/dobetterweb/dom-size.js | description":{
"message":"浏览器工程师建议，网页包含的 DOM 节点最好少于 1500 个左右。理想状况是，树深度少于 32 个元素，且少于 60 个子/父元素。大型 DOM 可能会增加内存使用量、导致[样式计算](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations)用时延长并产生高昂的[布局重排](https://developers.google.com/speed/articles/reflow)费用。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/dom-size)。"},

"lighthouse-core/audits/dobetterweb/dom-size.js | displayValue":{
"message":"{itemCount,plural, =1{1 个节点}other{# 个节点}}"},

"lighthouse-core/audits/dobetterweb/dom-size.js | failureTitle":{
"message":"避免 DOM 规模过大"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMDepth":{
"message":"最大 DOM 深度"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMNodes":{
"message":"DOM 节点总数"},

"lighthouse-core/audits/dobetterweb/dom-size.js | statisticDOMWidth":{
"message":"Maximum Child Elements"},

"lighthouse-core/audits/dobetterweb/dom-size.js | title":{
"message":"避免 DOM 规模过大"},

"lighthouse-core/audits/font-display.js | description":{
"message":"利用 font-display 这项 CSS 功能，确保文本在网页字体加载期间始终对用户可见。[了解详情](https://developers.google.com/web/updates/2016/02/font-display)。"},

"lighthouse-core/audits/font-display.js | failureTitle":{
"message":"确保文本在网页字体加载期间保持可见状态"},

"lighthouse-core/audits/font-display.js | title":{
"message":"在网页字体加载期间，所有文本都保持可见状态"},

"lighthouse-core/audits/mainthread-work-breakdown.js | columnCategory":{
"message":"类别"},

"lighthouse-core/audits/mainthread-work-breakdown.js | description":{
"message":"考虑减少为解析、编译和执行 JS 而花费的时间。您可能会发现，提供较小的 JS 负载有助于实现此目标。"},

"lighthouse-core/audits/mainthread-work-breakdown.js | failureTitle":{
"message":"最大限度地减少主线程工作"},

"lighthouse-core/audits/mainthread-work-breakdown.js | title":{
"message":"最大限度地减少主线程工作"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | description":{
"message":"上面的分数是估算值，表示您的应用在网页加载最繁忙的 5 秒期间大概需要花费多长时间（以毫秒为单位）才能对用户输入做出响应。如果您的延迟时间超过了 50 毫秒，用户可能会感觉您的应用运行迟缓。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency)。"},

"lighthouse-core/audits/metrics/estimated-input-latency.js | title":{
"message":"输入延迟（估算值）"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | description":{
"message":"首次内容绘制时间标记了绘制出首个文本或首张图片的时间。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint)。"},

"lighthouse-core/audits/metrics/first-contentful-paint.js | title":{
"message":"首次内容绘制时间"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | description":{
"message":"首次 CPU 闲置时间标记了网页的主线程首次有空处理输入操作的时间。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/first-interactive)。"},

"lighthouse-core/audits/metrics/first-cpu-idle.js | title":{
"message":"首次 CPU 闲置时间"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | description":{
"message":"首次有效绘制时间测量了网页主要内容开始对用户可见的时间。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)。"},

"lighthouse-core/audits/metrics/first-meaningful-paint.js | title":{
"message":"首次有效绘制时间"},

"lighthouse-core/audits/metrics/interactive.js | description":{
"message":"可交互前的耗时标记了网页提供完整交互功能的时间。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/consistently-interactive)。"},

"lighthouse-core/audits/metrics/interactive.js | title":{
"message":"可交互前的耗时"},

"lighthouse-core/audits/metrics/speed-index.js | description":{
"message":"速度指数表明了网页内容的可见填充速度。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/speed-index)。"},

"lighthouse-core/audits/metrics/speed-index.js | title":{
"message":"速度指数"},

"lighthouse-core/audits/redirects.js | description":{
"message":"重定向会在网页可加载前引入更多延迟。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/redirects)。"},

"lighthouse-core/audits/redirects.js | title":{
"message":"避免多次网页重定向"},

"lighthouse-core/audits/time-to-first-byte.js | description":{
"message":"首字节显示前的耗时表明了服务器发出响应的时间。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/ttfb)。"},

"lighthouse-core/audits/time-to-first-byte.js | displayValue":{
"message":"根文档花费了 {timeInMs, number, milliseconds} 毫秒"},

"lighthouse-core/audits/time-to-first-byte.js | failureTitle":{
"message":"缩短服务器响应用时 (TTFB)"},

"lighthouse-core/audits/time-to-first-byte.js | title":{
"message":"服务器响应用时较短 (TTFB)"},

"lighthouse-core/audits/user-timings.js | columnDuration":{
"message":"时长"},

"lighthouse-core/audits/user-timings.js | columnName":{
"message":"名称"},

"lighthouse-core/audits/user-timings.js | columnStartTime":{
"message":"开始时间"},

"lighthouse-core/audits/user-timings.js | columnType":{
"message":"类型"},

"lighthouse-core/audits/user-timings.js | description":{
"message":"考虑使用 User Timing API 检测您的应用，从而衡量应用在关键用户体验中的实际性能。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/user-timing)。"},

"lighthouse-core/audits/user-timings.js | displayValue":{
"message":"{itemCount,plural, =1{1 项 User Timing 结果}other{# 项 User Timing 结果}}"},

"lighthouse-core/audits/user-timings.js | title":{
"message":"User Timing 标记和测量结果"},

"lighthouse-core/audits/uses-rel-preconnect.js | description":{
"message":"考虑添加 preconnect 或 dns-prefetch 资源提示，以尽早与重要的第三方来源建立连接。[了解详情](https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect)。"},

"lighthouse-core/audits/uses-rel-preconnect.js | title":{
"message":"预先连接到必要的来源"},

"lighthouse-core/audits/uses-rel-preload.js | description":{
"message":"考虑使用 <link rel=preload> 来优先提取当前在网页加载后期请求的资源。[了解详情](https://developers.google.com/web/tools/lighthouse/audits/preload)。"},

"lighthouse-core/audits/uses-rel-preload.js | title":{
"message":"预加载关键请求"},

"lighthouse-core/config/default-config.js | diagnosticsGroupDescription":{
"message":"详细了解您的应用的性能。"},

"lighthouse-core/config/default-config.js | diagnosticsGroupTitle":{
"message":"诊断结果"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupDescription":{
"message":"像素在屏幕上的呈现速度是性能的最重要方面。关键指标：首次内容绘制时间、首次有效绘制时间"},

"lighthouse-core/config/default-config.js | firstPaintImprovementsGroupTitle":{
"message":"改进首次绘制"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupDescription":{
"message":"这些优化建议可以加快网页加载速度。"},

"lighthouse-core/config/default-config.js | loadOpportunitiesGroupTitle":{
"message":"优化建议"},

"lighthouse-core/config/default-config.js | metricGroupTitle":{
"message":"指标"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupDescription":{
"message":"改善整体的加载体验，使该网页响应迅速且可尽快投入使用。关键指标：可交互前的耗时、速度指数"},

"lighthouse-core/config/default-config.js | overallImprovementsGroupTitle":{
"message":"整体改进"},

"lighthouse-core/config/default-config.js | performanceCategoryTitle":{
"message":"性能"},

"lighthouse-core/lib/i18n/i18n.js | columnCacheTTL":{
"message":"缓存 TTL"},

"lighthouse-core/lib/i18n/i18n.js | columnSize":{
"message":"大小 (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnTimeSpent":{
"message":"花费的时间"},

"lighthouse-core/lib/i18n/i18n.js | columnURL":{
"message":"网址"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedBytes":{
"message":"有望节省的流量 (KB)"},

"lighthouse-core/lib/i18n/i18n.js | columnWastedMs":{
"message":"有望节省的时间（毫秒）"},

"lighthouse-core/lib/i18n/i18n.js | displayValueByteSavings":{
"message":"有望节省 {wastedBytes, number, bytes} KB"},

"lighthouse-core/lib/i18n/i18n.js | displayValueMsSavings":{
"message":"有望节省 {wastedMs, number, milliseconds} 毫秒"},

"lighthouse-core/lib/i18n/i18n.js | ms":{
"message":"{timeInMs, number, milliseconds} 毫秒"},

"lighthouse-core/lib/i18n/i18n.js | seconds":{
"message":"{timeInMs, number, seconds} 秒"},

"lighthouse-core/report/html/renderer/util.js | auditGroupExpandTooltip":{
"message":"显示审核结果"},

"lighthouse-core/report/html/renderer/util.js | crcInitialNavigation":{
"message":"初始导航"},

"lighthouse-core/report/html/renderer/util.js | crcLongestDurationLabel":{
"message":"关键路径延迟时间上限："},

"lighthouse-core/report/html/renderer/util.js | errorLabel":{
"message":"出错了！"},

"lighthouse-core/report/html/renderer/util.js | errorMissingAuditInfo":{
"message":"报告错误：没有任何审核信息"},

"lighthouse-core/report/html/renderer/util.js | labDataTitle":{
"message":"实验室数据"},

"lighthouse-core/report/html/renderer/util.js | lsPerformanceCategoryDescription":{
"message":"[Lighthouse](https://developers.google.com/web/tools/lighthouse/) 使用模拟 3G 网络对当前页面进行的分析。这些值都是估算值，且可能会因时而异。"},

"lighthouse-core/report/html/renderer/util.js | manualAuditsGroupTitle":{
"message":"待手动检查的其他项"},

"lighthouse-core/report/html/renderer/util.js | notApplicableAuditsGroupTitle":{
"message":"不适用"},

"lighthouse-core/report/html/renderer/util.js | opportunityResourceColumnLabel":{
"message":"优化建议"},

"lighthouse-core/report/html/renderer/util.js | opportunitySavingsColumnLabel":{
"message":"有望节省的总时间（估算值）"},

"lighthouse-core/report/html/renderer/util.js | passedAuditsGroupTitle":{
"message":"已通过的审核"},

"lighthouse-core/report/html/renderer/util.js | scorescaleLabel":{
"message":"分数等级："},

"lighthouse-core/report/html/renderer/util.js | toplevelWarningsMessage":{
"message":"此次 Lighthouse 运行并不顺利，原因如下："},

"lighthouse-core/report/html/renderer/util.js | varianceDisclaimer":{
"message":"这些值都是估算值，且可能会因时而异。"},

"lighthouse-core/report/html/renderer/util.js | warningHeader":{
"message":"警告： "}};


},{}],83:[function(require,module,exports){





'use strict';

const URL=require('./url-shim.js');





function doExist(manifest){
if(!manifest||!manifest.icons){
return false;
}
if(manifest.icons.value.length===0){
return false;
}
return true;
}






function pngSizedAtLeast(sizeRequirement,manifest){


const iconValues=manifest.icons.value;

const flattenedSizes=[];
iconValues.

filter(icon=>!icon.value.type.value||
icon.value.type.value&&
icon.value.type.value==='image/png').

filter(icon=>icon.value.src.value&&
new URL(icon.value.src.value).pathname.endsWith('.png')).
forEach(icon=>{

if(icon.value.sizes.value){
flattenedSizes.push(...icon.value.sizes.value);
}
});

return flattenedSizes.

filter(size=>/\d+x\d+/.test(size)).
filter(size=>{

const sizeStrs=size.split(/x/i);

const sizeNums=[parseFloat(sizeStrs[0]),parseFloat(sizeStrs[1])];

const areIconsBigEnough=sizeNums[0]>=sizeRequirement&&sizeNums[1]>=sizeRequirement;

const areIconsSquare=sizeNums[0]===sizeNums[1];
return areIconsBigEnough&&areIconsSquare;
});
}

module.exports={
doExist,
pngSizedAtLeast};


},{"./url-shim.js":"url"}],84:[function(require,module,exports){





'use strict';





function convertNodeTimingsToTrace(nodeTimings){

const traceEvents=[];
const baseTs=1e9;
const baseEvent={pid:1,tid:1,cat:'devtools.timeline'};
const frame='A00001';

const toMicroseconds=ms=>baseTs+ms*1000;

traceEvents.push(createFakeTracingStartedEvent());
traceEvents.push({...createFakeTracingStartedEvent(),name:'TracingStartedInBrowser'});


let requestId=1;
let lastEventEndTime=0;
for(const[node,timing]of nodeTimings.entries()){
lastEventEndTime=Math.max(lastEventEndTime,timing.endTime);
if(node.type==='cpu'){

const cpuNode=node;
traceEvents.push(...createFakeTaskEvents(cpuNode,timing));
}else{
const networkNode=node;

if(/^data/.test(networkNode.record.url))continue;
traceEvents.push(...createFakeNetworkEvents(networkNode.record,timing));
}
}


traceEvents.push(
...createFakeTaskEvents(

{childEvents:[],event:{}},
{
startTime:lastEventEndTime+1000,
endTime:lastEventEndTime+1001}));




return{traceEvents};




function createFakeTracingStartedEvent(){
const argsData={
frameTreeNodeId:1,
sessionId:'1.1',
page:frame,
persistentIds:true,
frames:[{frame,url:'about:blank',name:'',processId:1}]};


return{
...baseEvent,
ts:baseTs-1e5,
ph:'I',
s:'t',
cat:'disabled-by-default-devtools.timeline',
name:'TracingStartedInPage',
args:{data:argsData},
dur:0};

}






function createFakeTaskEvents(cpuNode,timing){
const argsData={
url:'',
frame,
lineNumber:0,
columnNumber:0};


const eventTs=toMicroseconds(timing.startTime);


const events=[
{
...baseEvent,
ph:'X',
name:'Task',
ts:eventTs,
dur:(timing.endTime-timing.startTime)*1000,
args:{data:argsData}}];



const nestedBaseTs=cpuNode.event.ts||0;
const multiplier=(timing.endTime-timing.startTime)*1000/cpuNode.event.dur;

const netReqEvents=new Set(['ResourceSendRequest','ResourceFinish',
'ResourceReceiveResponse','ResourceReceivedData']);
for(const event of cpuNode.childEvents){
if(netReqEvents.has(event.name))continue;
const ts=eventTs+(event.ts-nestedBaseTs)*multiplier;
const newEvent={...event,...{pid:baseEvent.pid,tid:baseEvent.tid},ts};
if(event.dur)newEvent.dur=event.dur*multiplier;
events.push(newEvent);
}

return events;
}






function createFakeNetworkEvents(record,timing){
requestId++;



let{startTime,endTime}=timing;
if(startTime===endTime)endTime+=0.3;

const requestData={requestId:requestId.toString(),frame};

const baseRequestEvent={...baseEvent,ph:'I',s:'t',dur:0};

const sendRequestData={
...requestData,
requestMethod:record.requestMethod,
url:record.url,
priority:record.priority};


const receiveResponseData={
...requestData,
statusCode:record.statusCode,
mimeType:record.mimeType,
encodedDataLength:record.transferSize,
fromCache:record.fromDiskCache,
fromServiceWorker:record.fetchedViaServiceWorker};


const resourceFinishData={
...requestData,
decodedBodyLength:record.resourceSize,
didFail:!!record.failed,
finishTime:endTime};



const events=[
{
...baseRequestEvent,
name:'ResourceSendRequest',
ts:toMicroseconds(startTime),
args:{data:sendRequestData}},

{
...baseRequestEvent,
name:'ResourceFinish',
ts:toMicroseconds(endTime),
args:{data:resourceFinishData}}];



if(!record.failed){
events.push({
...baseRequestEvent,
name:'ResourceReceiveResponse',
ts:toMicroseconds((startTime+endTime)/2),
args:{data:receiveResponseData}});

}

return events;
}
}

module.exports={
simulationNamesToIgnore:[
'unlabeled',

'optimisticFirstCPUIdle',
'optimisticFlexFirstCPUIdle',
'pessimisticFirstCPUIdle',
'optimisticSpeedIndex',
'optimisticFlexSpeedIndex',
'pessimisticSpeedIndex',
'optimisticEstimatedInputLatency',
'optimisticFlexEstimatedInputLatency',
'pessimisticEstimatedInputLatency'],

convertNodeTimingsToTrace};


},{}],85:[function(require,module,exports){





'use strict';

const strings=require('./strings');









class LighthouseError extends Error{




constructor(errorDefinition,properties){
super(errorDefinition.code);
this.name='LHError';
this.code=errorDefinition.code;
this.friendlyMessage=errorDefinition.message;
this.lhrRuntimeError=!!errorDefinition.lhrRuntimeError;
if(properties)Object.assign(this,properties);

Error.captureStackTrace(this,LighthouseError);
}





static fromLighthouseError(err){
const{code,friendlyMessage:message,...rest}=err;

return new LighthouseError({code,message},{...rest});
}






static fromProtocolMessage(method,protocolError){

const protocolErrors=Object.values(LighthouseError.errors).filter(e=>e.pattern);

const matchedErrorDefinition=protocolErrors.find(e=>e.pattern.test(protocolError.message));
if(matchedErrorDefinition){
return new LighthouseError(matchedErrorDefinition,{
protocolMethod:method,
protocolError:protocolError.message});

}


let errMsg=`(${method}): ${protocolError.message}`;
if(protocolError.data)errMsg+=` (${protocolError.data})`;
const error=new Error(`Protocol error ${errMsg}`);
return Object.assign(error,{protocolMethod:method,protocolError:protocolError.message});
}}


const ERRORS={

NO_SPEEDLINE_FRAMES:{
code:'NO_SPEEDLINE_FRAMES',
message:strings.didntCollectScreenshots,
lhrRuntimeError:true},

SPEEDINDEX_OF_ZERO:{
code:'SPEEDINDEX_OF_ZERO',
message:strings.didntCollectScreenshots,
lhrRuntimeError:true},

NO_SCREENSHOTS:{
code:'NO_SCREENSHOTS',
message:strings.didntCollectScreenshots,
lhrRuntimeError:true},

INVALID_SPEEDLINE:{
code:'INVALID_SPEEDLINE',
message:strings.didntCollectScreenshots,
lhrRuntimeError:true},



NO_TRACING_STARTED:{
code:'NO_TRACING_STARTED',
message:strings.badTraceRecording,
lhrRuntimeError:true},

NO_NAVSTART:{
code:'NO_NAVSTART',
message:strings.badTraceRecording,
lhrRuntimeError:true},

NO_FCP:{
code:'NO_FCP',
message:strings.badTraceRecording,
lhrRuntimeError:true},

NO_DCL:{
code:'NO_DCL',
message:strings.badTraceRecording,
lhrRuntimeError:true},

NO_FMP:{
code:'NO_FMP',
message:strings.badTraceRecording},



FMP_TOO_LATE_FOR_FCPUI:{code:'FMP_TOO_LATE_FOR_FCPUI',message:strings.pageLoadTookTooLong},
NO_FCPUI_IDLE_PERIOD:{code:'NO_FCPUI_IDLE_PERIOD',message:strings.pageLoadTookTooLong},
NO_TTI_CPU_IDLE_PERIOD:{code:'NO_TTI_CPU_IDLE_PERIOD',message:strings.pageLoadTookTooLong},
NO_TTI_NETWORK_IDLE_PERIOD:{
code:'NO_TTI_NETWORK_IDLE_PERIOD',
message:strings.pageLoadTookTooLong},



NO_DOCUMENT_REQUEST:{
code:'NO_DOCUMENT_REQUEST',
message:strings.pageLoadFailed,
lhrRuntimeError:true},


FAILED_DOCUMENT_REQUEST:{
code:'FAILED_DOCUMENT_REQUEST',
message:strings.pageLoadFailed,
lhrRuntimeError:true},


ERRORED_DOCUMENT_REQUEST:{
code:'ERRORED_DOCUMENT_REQUEST',
message:strings.pageLoadFailed,
lhrRuntimeError:true},



TRACING_ALREADY_STARTED:{
code:'TRACING_ALREADY_STARTED',
message:strings.internalChromeError,
pattern:/Tracing.*started/,
lhrRuntimeError:true},

PARSING_PROBLEM:{
code:'PARSING_PROBLEM',
message:strings.internalChromeError,
pattern:/Parsing problem/,
lhrRuntimeError:true},

READ_FAILED:{
code:'READ_FAILED',
message:strings.internalChromeError,
pattern:/Read failed/,
lhrRuntimeError:true},



REQUEST_CONTENT_TIMEOUT:{
code:'REQUEST_CONTENT_TIMEOUT',
message:strings.requestContentTimeout},



INVALID_URL:{
code:'INVALID_URL',
message:strings.urlInvalid}};




LighthouseError.errors=ERRORS;
LighthouseError.NO_ERROR='NO_ERROR';
LighthouseError.UNKNOWN_ERROR='UNKNOWN_ERROR';
module.exports=LighthouseError;


},{"./strings":92}],86:[function(require,module,exports){





'use strict';

const URL=require('./url-shim');
const cssParsers=require('cssstyle/lib/parsers');

const ALLOWED_DISPLAY_VALUES=[
'fullscreen',
'standalone',
'minimal-ui',
'browser'];





const DEFAULT_DISPLAY_MODE='browser';

const ALLOWED_ORIENTATION_VALUES=[
'any',
'natural',
'landscape',
'portrait',
'portrait-primary',
'portrait-secondary',
'landscape-primary',
'landscape-secondary'];






function isValidColor(color){
return cssParsers.valueType(color)===cssParsers.TYPES.COLOR;
}





function parseString(raw,trim){
let value;
let warning;

if(typeof raw==='string'){
value=trim?raw.trim():raw;
}else{
if(raw!==undefined){
warning='ERROR: expected a string.';
}
value=undefined;
}

return{
raw,
value,
warning};

}




function parseColor(raw){
const color=parseString(raw);


if(color.value===undefined){
return color;
}


if(!isValidColor(color.raw)){
color.value=undefined;
color.warning='ERROR: color parsing failed.';
}

return color;
}




function parseName(jsonInput){
return parseString(jsonInput.name,true);
}




function parseShortName(jsonInput){
return parseString(jsonInput.short_name,true);
}







function checkSameOrigin(url1,url2){
const parsed1=new URL(url1);
const parsed2=new URL(url2);

return parsed1.origin===parsed2.origin;
}







function parseStartUrl(jsonInput,manifestUrl,documentUrl){
const raw=jsonInput.start_url;


if(raw===''){
return{
raw,
value:documentUrl,
warning:'ERROR: start_url string empty'};

}
const parsedAsString=parseString(raw);
if(!parsedAsString.value){
parsedAsString.value=documentUrl;
return parsedAsString;
}


let startUrl;
try{
startUrl=new URL(raw,manifestUrl).href;
}catch(e){

return{
raw,
value:documentUrl,
warning:'ERROR: invalid start_url relative to ${manifestUrl}'};

}


if(!checkSameOrigin(startUrl,documentUrl)){
return{
raw,
value:documentUrl,
warning:'ERROR: start_url must be same-origin as document'};

}

return{
raw,
value:startUrl};

}




function parseDisplay(jsonInput){
const parsedString=parseString(jsonInput.display,true);
const stringValue=parsedString.value;

if(!stringValue){
return{
raw:jsonInput,
value:DEFAULT_DISPLAY_MODE,
warning:parsedString.warning};

}

const displayValue=stringValue.toLowerCase();
if(!ALLOWED_DISPLAY_VALUES.includes(displayValue)){
return{
raw:jsonInput,
value:DEFAULT_DISPLAY_MODE,
warning:'ERROR: \'display\' has invalid value '+displayValue+
`. will fall back to ${DEFAULT_DISPLAY_MODE}.`};

}

return{
raw:jsonInput,
value:displayValue,
warning:undefined};

}




function parseOrientation(jsonInput){
const orientation=parseString(jsonInput.orientation,true);

if(orientation.value&&
!ALLOWED_ORIENTATION_VALUES.includes(orientation.value.toLowerCase())){
orientation.value=undefined;
orientation.warning='ERROR: \'orientation\' has an invalid value, will be ignored.';
}

return orientation;
}





function parseIcon(raw,manifestUrl){

const src=parseString(raw.src,true);

if(src.value===''){
src.value=undefined;
}
if(src.value){

src.value=new URL(src.value,manifestUrl).href;
}

const type=parseString(raw.type,true);

const density={
raw:raw.density,
value:1,

warning:undefined};

if(density.raw!==undefined){
density.value=parseFloat(density.raw);
if(isNaN(density.value)||!isFinite(density.value)||density.value<=0){
density.value=1;
density.warning='ERROR: icon density cannot be NaN, +∞, or less than or equal to +0.';
}
}

let sizes;
const parsedSizes=parseString(raw.sizes);
if(parsedSizes.value!==undefined){

const set=new Set();
parsedSizes.value.trim().split(/\s+/).forEach(size=>set.add(size.toLowerCase()));
sizes={
raw:raw.sizes,
value:set.size>0?Array.from(set):undefined,
warning:undefined};

}else{
sizes={...parsedSizes,value:undefined};
}

return{
raw,
value:{
src,
type,
density,
sizes},

warning:undefined};

}





function parseIcons(jsonInput,manifestUrl){
const raw=jsonInput.icons;

if(raw===undefined){
return{
raw,

value:[],
warning:undefined};

}

if(!Array.isArray(raw)){
return{
raw,

value:[],
warning:'ERROR: \'icons\' expected to be an array but is not.'};

}



const value=raw.

filter(icon=>icon.src!==undefined).

map(icon=>parseIcon(icon,manifestUrl)).

filter(parsedIcon=>parsedIcon.value.src.value!==undefined);

return{
raw,
value,
warning:undefined};

}




function parseApplication(raw){
const platform=parseString(raw.platform,true);
const id=parseString(raw.id,true);


const appUrl=parseString(raw.url,true);
if(appUrl.value){
try{

appUrl.value=new URL(appUrl.value).href;
}catch(e){
appUrl.value=undefined;
appUrl.warning='ERROR: invalid application URL ${raw.url}';
}
}

return{
raw,
value:{
platform,
id,
url:appUrl},

warning:undefined};

}




function parseRelatedApplications(jsonInput){
const raw=jsonInput.related_applications;

if(raw===undefined){
return{
raw,
value:undefined,
warning:undefined};

}

if(!Array.isArray(raw)){
return{
raw,
value:undefined,
warning:'ERROR: \'related_applications\' expected to be an array but is not.'};

}



const value=raw.
filter(application=>!!application.platform).
map(parseApplication).
filter(parsedApp=>!!parsedApp.value.id.value||!!parsedApp.value.url.value);

return{
raw,
value,
warning:undefined};

}




function parsePreferRelatedApplications(jsonInput){
const raw=jsonInput.prefer_related_applications;
let value;
let warning;

if(typeof raw==='boolean'){
value=raw;
}else{
if(raw!==undefined){
warning='ERROR: \'prefer_related_applications\' expected to be a boolean.';
}
value=undefined;
}

return{
raw,
value,
warning};

}




function parseThemeColor(jsonInput){
return parseColor(jsonInput.theme_color);
}




function parseBackgroundColor(jsonInput){
return parseColor(jsonInput.background_color);
}







function parse(string,manifestUrl,documentUrl){
if(manifestUrl===undefined||documentUrl===undefined){
throw new Error('Manifest and document URLs required for manifest parsing.');
}

let jsonInput;

try{
jsonInput=JSON.parse(string);
}catch(e){
return{
raw:string,
value:undefined,
warning:'ERROR: file isn\'t valid JSON: '+e};

}


const manifest={
name:parseName(jsonInput),
short_name:parseShortName(jsonInput),
start_url:parseStartUrl(jsonInput,manifestUrl,documentUrl),
display:parseDisplay(jsonInput),
orientation:parseOrientation(jsonInput),
icons:parseIcons(jsonInput,manifestUrl),
related_applications:parseRelatedApplications(jsonInput),
prefer_related_applications:parsePreferRelatedApplications(jsonInput),
theme_color:parseThemeColor(jsonInput),
background_color:parseBackgroundColor(jsonInput)};



return{
raw:string,
value:manifest,
warning:undefined};

}

module.exports=parse;

},{"./url-shim":"url","cssstyle/lib/parsers":161}],87:[function(require,module,exports){





'use strict';

const NetworkRequest=require('./network-request');
const EventEmitter=require('events').EventEmitter;
const log=require('lighthouse-logger');

const IGNORED_NETWORK_SCHEMES=['data','ws'];



class NetworkRecorder extends EventEmitter{



constructor(){
super();


this._records=[];

this._recordsById=new Map();
}

getRecords(){
return Array.from(this._records);
}





on(event,listener){
return super.on(event,listener);
}





once(event,listener){
return super.once(event,listener);
}

isIdle(){
return!!this._getActiveIdlePeriod(0);
}

is2Idle(){
return!!this._getActiveIdlePeriod(2);
}




_getActiveIdlePeriod(allowedRequests){
const quietPeriods=NetworkRecorder.findNetworkQuietPeriods(this._records,allowedRequests);
return quietPeriods.find(period=>!Number.isFinite(period.end));
}

_emitNetworkStatus(){
const zeroQuiet=this._getActiveIdlePeriod(0);
const twoQuiet=this._getActiveIdlePeriod(2);

if(twoQuiet&&zeroQuiet){
log.verbose('NetworkRecorder','network fully-quiet');
this.emit('network-2-idle');
this.emit('networkidle');
}else if(twoQuiet&&!zeroQuiet){
log.verbose('NetworkRecorder','network semi-quiet');
this.emit('network-2-idle');
this.emit('networkbusy');
}else{
log.verbose('NetworkRecorder','network busy');
this.emit('network-2-busy');
this.emit('networkbusy');
}
}







static _isQUICAndFinished(record){
const isQUIC=record.responseHeaders&&record.responseHeaders.
some(header=>header.name.toLowerCase()==='alt-svc'&&/quic/.test(header.value));
const receivedHeaders=record.timing&&record.timing.receiveHeadersEnd>0;
return!!(isQUIC&&receivedHeaders&&record.endTime);
}







static _isFrameRootRequestAndFinished(record){
const isFrameRootRequest=record.url===record.documentURL;
const responseReceived=record.responseReceivedTime>0;
return!!(isFrameRootRequest&&responseReceived&&record.endTime);
}









static findNetworkQuietPeriods(networkRecords,allowedConcurrentRequests,endTime=Infinity){


let timeBoundaries=[];
networkRecords.forEach(record=>{
const scheme=record.parsedURL&&record.parsedURL.scheme;
if(IGNORED_NETWORK_SCHEMES.includes(scheme)){
return;
}


timeBoundaries.push({time:record.startTime*1000,isStart:true});
if(record.finished||
NetworkRecorder._isQUICAndFinished(record)||
NetworkRecorder._isFrameRootRequestAndFinished(record)){
timeBoundaries.push({time:record.endTime*1000,isStart:false});
}
});

timeBoundaries=timeBoundaries.
filter(boundary=>boundary.time<=endTime).
sort((a,b)=>a.time-b.time);

let numInflightRequests=0;
let quietPeriodStart=0;

const quietPeriods=[];
timeBoundaries.forEach(boundary=>{
if(boundary.isStart){

if(numInflightRequests===allowedConcurrentRequests){
quietPeriods.push({start:quietPeriodStart,end:boundary.time});
}
numInflightRequests++;
}else{
numInflightRequests--;

if(numInflightRequests===allowedConcurrentRequests){
quietPeriodStart=boundary.time;
}
}
});


if(numInflightRequests<=allowedConcurrentRequests){
quietPeriods.push({start:quietPeriodStart,end:endTime});
}

return quietPeriods.filter(period=>period.start!==period.end);
}







onRequestStarted(request){
this._records.push(request);
this._recordsById.set(request.requestId,request);

this._emitNetworkStatus();
}







onRequestFinished(request){
this.emit('requestloaded',request);
this._emitNetworkStatus();
}







onRequestWillBeSent(data){
const originalRequest=this._findRealRequest(data.requestId);

if(!originalRequest){
const request=new NetworkRequest();
request.onRequestWillBeSent(data);
this.onRequestStarted(request);
return;
}


if(!data.redirectResponse){
return;
}



const modifiedData={
...data,


initiator:originalRequest.initiator,
requestId:`${originalRequest.requestId}:redirect`};

const redirectedRequest=new NetworkRequest();

redirectedRequest.onRequestWillBeSent(modifiedData);
originalRequest.onRedirectResponse(data);

originalRequest.redirectDestination=redirectedRequest;
redirectedRequest.redirectSource=originalRequest;


this.onRequestStarted(redirectedRequest);
this.onRequestFinished(originalRequest);
}




onRequestServedFromCache(data){
const request=this._findRealRequest(data.requestId);
if(!request)return;
request.onRequestServedFromCache();
}




onResponseReceived(data){
const request=this._findRealRequest(data.requestId);
if(!request)return;
request.onResponseReceived(data);
}




onDataReceived(data){
const request=this._findRealRequest(data.requestId);
if(!request)return;
request.onDataReceived(data);
}




onLoadingFinished(data){
const request=this._findRealRequest(data.requestId);
if(!request)return;
request.onLoadingFinished(data);
this.onRequestFinished(request);
}




onLoadingFailed(data){
const request=this._findRealRequest(data.requestId);
if(!request)return;
request.onLoadingFailed(data);
this.onRequestFinished(request);
}




onResourceChangedPriority(data){
const request=this._findRealRequest(data.requestId);
if(!request)return;
request.onResourceChangedPriority(data);
}





dispatch(event){
if(!event.method.startsWith('Network.')){
return;
}

switch(event.method){
case'Network.requestWillBeSent':return this.onRequestWillBeSent(event.params);
case'Network.requestServedFromCache':return this.onRequestServedFromCache(event.params);
case'Network.responseReceived':return this.onResponseReceived(event.params);
case'Network.dataReceived':return this.onDataReceived(event.params);
case'Network.loadingFinished':return this.onLoadingFinished(event.params);
case'Network.loadingFailed':return this.onLoadingFailed(event.params);
case'Network.resourceChangedPriority':return this.onResourceChangedPriority(event.params);
default:return;}

}










_findRealRequest(requestId){
let request=this._recordsById.get(requestId);
if(!request)return undefined;

while(request.redirectDestination){
request=request.redirectDestination;
}

return request;
}






static recordsFromLogs(devtoolsLog){
const networkRecorder=new NetworkRecorder();

devtoolsLog.forEach(message=>networkRecorder.dispatch(message));


const records=networkRecorder.getRecords();


const recordsByURL=new Map();
for(const record of records){
if(recordsByURL.has(record.url))continue;
recordsByURL.set(record.url,record);
}


for(const record of records){
const stackFrames=record.initiator.stack&&record.initiator.stack.callFrames||[];
const initiatorURL=record.initiator.url||stackFrames[0]&&stackFrames[0].url;
const initiator=recordsByURL.get(initiatorURL)||record.redirectSource;
if(initiator){
record.setInitiatorRequest(initiator);
}

let finalRecord=record;
while(finalRecord.redirectDestination)finalRecord=finalRecord.redirectDestination;
if(finalRecord===record||finalRecord.redirects)continue;

const redirects=[];
for(
let redirect=finalRecord.redirectSource;
redirect;
redirect=redirect.redirectSource)
{
redirects.unshift(redirect);
}

finalRecord.redirects=redirects;
}

return records;
}}


module.exports=NetworkRecorder;

},{"./network-request":88,"events":111,"lighthouse-logger":147}],88:[function(require,module,exports){
(function(global){





'use strict';







const URL=require('./url-shim');

const SECURE_SCHEMES=['data','https','wss','blob','chrome','chrome-extension','about'];















const RESOURCE_TYPES={
XHR:'XHR',
Fetch:'Fetch',
EventSource:'EventSource',
Script:'Script',
Stylesheet:'Stylesheet',
Image:'Image',
Media:'Media',
Font:'Font',
Document:'Document',
TextTrack:'TextTrack',
WebSocket:'WebSocket',
Other:'Other',
Manifest:'Manifest',
SignedExchange:'SignedExchange',
Ping:'Ping',
CSPViolationReport:'CSPViolationReport'};


module.exports=class NetworkRequest{
constructor(){
this.requestId='';

this.connectionId='0';
this.connectionReused=false;

this.url='';
this.protocol='';
this.isSecure=false;
this.parsedURL={scheme:''};
this.documentURL='';

this.startTime=-1;

this.endTime=-1;

this.responseReceivedTime=-1;

this.transferSize=0;
this.resourceSize=0;
this.fromDiskCache=false;
this.fromMemoryCache=false;

this.finished=false;
this.requestMethod='';
this.statusCode=-1;

this.redirectSource=undefined;

this.redirectDestination=undefined;

this.redirects=undefined;
this.failed=false;
this.localizedFailDescription='';

this.initiator={type:'other'};

this.timing=undefined;

this.resourceType=undefined;
this.mimeType='';

this.priority='Low';

this.initiatorRequest=undefined;

this.responseHeaders=[];

this.responseHeadersText='';

this.fetchedViaServiceWorker=false;

this.frameId='';
this.isLinkPreload=false;
}




hasErrorStatusCode(){
return this.statusCode>=400;
}




setInitiatorRequest(initiator){
this.initiatorRequest=initiator;
}




onRequestWillBeSent(data){
this.requestId=data.requestId;

const url=new URL(data.request.url);
this.url=data.request.url;
this.documentURL=data.documentURL;
this.parsedURL={
scheme:url.protocol.split(':')[0],

host:url.hostname,
securityOrigin:url.origin};

this.isSecure=SECURE_SCHEMES.includes(this.parsedURL.scheme);

this.startTime=data.timestamp;

this.requestMethod=data.request.method;

this.initiator=data.initiator;
this.resourceType=data.type&&RESOURCE_TYPES[data.type];
this.priority=data.request.initialPriority;

this.frameId=data.frameId;
this.isLinkPreload=data.initiator.type==='preload'||!!data.request.isLinkPreload;
}

onRequestServedFromCache(){
this.fromMemoryCache=true;
}




onResponseReceived(data){
this._onResponse(data.response,data.timestamp,data.type);
this.frameId=data.frameId;
}




onDataReceived(data){
this.resourceSize+=data.dataLength;
if(data.encodedDataLength!==-1){
this.transferSize+=data.encodedDataLength;
}
}




onLoadingFinished(data){

if(this.finished)return;

this.finished=true;
this.endTime=data.timestamp;
if(data.encodedDataLength>=0){
this.transferSize=data.encodedDataLength;
}

this._updateResponseReceivedTimeIfNecessary();
this._updateTransferSizeForLightRiderIfNecessary();
}




onLoadingFailed(data){

if(this.finished)return;

this.finished=true;
this.endTime=data.timestamp;

this.failed=true;
this.resourceType=data.type&&RESOURCE_TYPES[data.type];
this.localizedFailDescription=data.errorText;

this._updateResponseReceivedTimeIfNecessary();
}




onResourceChangedPriority(data){
this.priority=data.newPriority;
}




onRedirectResponse(data){
if(!data.redirectResponse)throw new Error('Missing redirectResponse data');
this._onResponse(data.redirectResponse,data.timestamp,data.type);
this.resourceType=undefined;
this.finished=true;
this.endTime=data.timestamp;

this._updateResponseReceivedTimeIfNecessary();
}






_onResponse(response,timestamp,resourceType){
this.url=response.url;

this.connectionId=String(response.connectionId);
this.connectionReused=response.connectionReused;

if(response.protocol)this.protocol=response.protocol;

this.responseReceivedTime=timestamp;

this.transferSize=response.encodedDataLength;
if(typeof response.fromDiskCache==='boolean')this.fromDiskCache=response.fromDiskCache;

this.statusCode=response.status;

this.timing=response.timing;
if(resourceType)this.resourceType=RESOURCE_TYPES[resourceType];
this.mimeType=response.mimeType;
this.responseHeadersText=response.headersText||'';
this.responseHeaders=NetworkRequest._headersDictToHeadersArray(response.headers);

this.fetchedViaServiceWorker=!!response.fromServiceWorker;

if(this.fromMemoryCache)this.timing=undefined;
if(this.timing)this._recomputeTimesWithResourceTiming(this.timing);

this._updateTransferSizeForLightRiderIfNecessary();
}






_recomputeTimesWithResourceTiming(timing){


this.startTime=timing.requestTime;
const headersReceivedTime=timing.requestTime+timing.receiveHeadersEnd/1000;
if(!this.responseReceivedTime||this.responseReceivedTime<0){
this.responseReceivedTime=headersReceivedTime;
}

this.responseReceivedTime=Math.min(this.responseReceivedTime,headersReceivedTime);
this.responseReceivedTime=Math.max(this.responseReceivedTime,this.startTime);
this.endTime=Math.max(this.endTime,this.responseReceivedTime);
}





_updateResponseReceivedTimeIfNecessary(){
this.responseReceivedTime=Math.min(this.endTime,this.responseReceivedTime);
}




_updateTransferSizeForLightRiderIfNecessary(){

if(!global.isLightRider)return;

if(this.transferSize)return;

const totalFetchedSize=this.responseHeaders.find(item=>item.name==='X-TotalFetchedSize');

if(!totalFetchedSize)return;
this.transferSize=parseFloat(totalFetchedSize.value);
}







static getRequestIdForBackend(requestId){
return requestId.replace(/(:redirect)+$/,'');
}







static _headersDictToHeadersArray(headersDict){
const result=[];
for(const name of Object.keys(headersDict)){
const values=headersDict[name].split('\n');
for(let i=0;i<values.length;++i){
result.push({name:name,value:values[i]});
}
}
return result;
}

static get TYPES(){
return RESOURCE_TYPES;
}};


}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"./url-shim":"url"}],89:[function(require,module,exports){






'use strict';














function wrapRuntimeEvalErrorInBrowser(err){
err=err||new Error();
const fallbackMessage=typeof err==='string'?err:'unknown error';

return{
__failedInBrowser:true,
name:err.name||'Error',
message:err.message||fallbackMessage,
stack:err.stack||new Error().stack};

}






function registerPerformanceObserverInPage(){
window.____lastLongTask=window.performance.now();
const observer=new window.PerformanceObserver(entryList=>{
const entries=entryList.getEntries();
for(const entry of entries){
if(entry.entryType==='longtask'){
const taskEnd=entry.startTime+entry.duration;
window.____lastLongTask=Math.max(window.____lastLongTask,taskEnd);
}
}
});

observer.observe({entryTypes:['longtask']});





window.____lhPerformanceObserver=observer;
}





function checkTimeSinceLastLongTask(){


return new Promise(resolve=>{
const timeoutRequested=window.performance.now()+50;

setTimeout(()=>{

const timeoutFired=window.performance.now();
const timeSinceLongTask=timeoutFired-timeoutRequested<50?
timeoutFired-window.____lastLongTask:0;
resolve(timeSinceLongTask);
},50);
});
}







function getElementsInDocument(selector){

const results=[];


const _findAllElements=nodes=>{
for(let i=0,el;el=nodes[i];++i){
if(!selector||el.matches(selector)){
results.push(el);
}

if(el.shadowRoot){
_findAllElements(el.shadowRoot.querySelectorAll('*'));
}
}
};
_findAllElements(document.querySelectorAll('*'));

return results;
}








function getOuterHTMLSnippet(element,ignoreAttrs=[]){
const clone=element.cloneNode();

ignoreAttrs.forEach(attribute=>{
clone.removeAttribute(attribute);
});

const reOpeningTag=/^.*?>/;
const match=clone.outerHTML.match(reOpeningTag);

return match&&match[0]||'';
}














function ultradumbBenchmark(){
const start=Date.now();
let iterations=0;

while(Date.now()-start<500){
let s='';
for(let j=0;j<100000;j++)s+='a';

iterations++;
}

const durationInSeconds=(Date.now()-start)/1000;
return iterations/durationInSeconds;
}

module.exports={
wrapRuntimeEvalErrorInBrowserString:wrapRuntimeEvalErrorInBrowser.toString(),
registerPerformanceObserverInPageString:registerPerformanceObserverInPage.toString(),
checkTimeSinceLastLongTaskString:checkTimeSinceLastLongTask.toString(),
getElementsInDocumentString:getElementsInDocument.toString(),
getOuterHTMLSnippetString:getOuterHTMLSnippet.toString(),
getOuterHTMLSnippet:getOuterHTMLSnippet,
ultradumbBenchmark:ultradumbBenchmark,
ultradumbBenchmarkString:ultradumbBenchmark.toString()};


},{}],90:[function(require,module,exports){





'use strict';

const log=require('lighthouse-logger');




const SENTRY_URL='https://a6bb0da87ee048cc9ae2a345fc09ab2e:63a7029f46f74265981b7e005e0f69f8@sentry.io/174697';


const SAMPLE_RATE=0.01;


const SAMPLED_ERRORS=[];




const noop=()=>{};





const sentryDelegate={
init,

captureMessage:noop,

captureBreadcrumb:noop,

getContext:noop,

captureException:async()=>{}};






function init(opts){

if(!opts.flags.enableErrorReporting){
return;
}


if(SAMPLE_RATE<=Math.random()){
return;
}

try{
const Sentry=require('raven');
const sentryConfig=Object.assign({},opts.environmentData,
{captureUnhandledRejections:true});
Sentry.config(SENTRY_URL,sentryConfig).install();


sentryDelegate.captureMessage=(...args)=>Sentry.captureMessage(...args);
sentryDelegate.captureBreadcrumb=(...args)=>Sentry.captureBreadcrumb(...args);
sentryDelegate.getContext=()=>Sentry.getContext();


sentryDelegate.captureException=async(err,opts={})=>{

if(!err)return;



if(err.expected)return;


const sampledErrorMatch=SAMPLED_ERRORS.find(sample=>sample.pattern.test(err.message));
if(sampledErrorMatch&&sampledErrorMatch.rate<=Math.random())return;



if(err.protocolMethod){

opts.fingerprint=['{{ default }}',err.protocolMethod,err.protocolError];
}

return new Promise(resolve=>{
Sentry.captureException(err,opts,()=>resolve());
});
};

const context=Object.assign({
url:opts.url,
deviceEmulation:!opts.flags.disableDeviceEmulation,
emulatedFormFactor:opts.flags.emulatedFormFactor,
throttlingMethod:opts.flags.throttlingMethod},
opts.flags.throttling);
Sentry.mergeContext({extra:Object.assign({},opts.environmentData.extra,context)});
}catch(e){
log.warn(
'sentry',
'Could not load raven library, errors will not be reported.');

}
}

module.exports=sentryDelegate;

},{"lighthouse-logger":147,"raven":107}],91:[function(require,module,exports){





'use strict';








function erf(x){

const sign=Math.sign(x);
x=Math.abs(x);

const a1=0.254829592;
const a2=-0.284496736;
const a3=1.421413741;
const a4=-1.453152027;
const a5=1.061405429;
const p=0.3275911;
const t=1/(1+p*x);
const y=t*(a1+t*(a2+t*(a3+t*(a4+t*a5))));
return sign*(1-y*Math.exp(-x*x));
}















function getLogNormalDistribution(median,falloff){
const location=Math.log(median);




const logRatio=Math.log(falloff/median);
const shape=Math.sqrt(1-3*logRatio-Math.sqrt((logRatio-3)*(logRatio-3)-8))/2;

return{
computeComplementaryPercentile(x){
const standardizedX=(Math.log(x)-location)/(Math.SQRT2*shape);
return(1-erf(standardizedX))/2;
}};

}










function linearInterpolation(x0,y0,x1,y1,x){
const slope=(y1-y0)/(x1-x0);
return y0+(x-x0)*slope;
}

module.exports={
linearInterpolation,
getLogNormalDistribution};


},{}],92:[function(require,module,exports){





'use strict';


module.exports={
didntCollectScreenshots:`Chrome didn't collect any screenshots during the page load. Please make sure there is content visible on the page, and then try re-running Lighthouse.`,
badTraceRecording:`Something went wrong with recording the trace over your page load. Please run Lighthouse again.`,
pageLoadTookTooLong:`Your page took too long to load. Please follow the opportunities in the report to reduce your page load time, and then try re-running Lighthouse.`,
pageLoadFailed:`Lighthouse was unable to reliably load the page you requested. Make sure you are testing the correct URL and that the server is properly responding to all requests.`,
internalChromeError:`An internal Chrome error occurred. Please restart Chrome and try re-running Lighthouse.`,
requestContentTimeout:'Fetching resource content has exceeded the allotted time',
urlInvalid:`The URL you have provided appears to be invalid.`};


},{}],93:[function(require,module,exports){





'use strict';
















const taskGroups={
parseHTML:{
id:'parseHTML',
label:'Parse HTML & CSS',
traceEventNames:['ParseHTML','ParseAuthorStyleSheet']},

styleLayout:{
id:'styleLayout',
label:'Style & Layout',
traceEventNames:[
'ScheduleStyleRecalculation',
'RecalculateStyles',
'UpdateLayoutTree',
'InvalidateLayout',
'Layout']},


paintCompositeRender:{
id:'paintCompositeRender',
label:'Rendering',
traceEventNames:[
'Animation',
'RequestMainThreadFrame',
'ActivateLayerTree',
'DrawFrame',
'HitTest',
'PaintSetup',
'Paint',
'PaintImage',
'Rasterize',
'RasterTask',
'ScrollLayer',
'UpdateLayer',
'UpdateLayerTree',
'CompositeLayers']},


scriptParseCompile:{
id:'scriptParseCompile',
label:'Script Parsing & Compilation',
traceEventNames:['v8.compile','v8.compileModule','v8.parseOnBackground']},

scriptEvaluation:{
id:'scriptEvaluation',
label:'Script Evaluation',
traceEventNames:[
'EventDispatch',
'EvaluateScript',
'v8.evaluateModule',
'FunctionCall',
'TimerFire',
'FireIdleCallback',
'FireAnimationFrame',
'RunMicrotasks',
'V8.Execute']},


garbageCollection:{
id:'garbageCollection',
label:'Garbage Collection',
traceEventNames:[
'GCEvent',
'MinorGC',
'MajorGC',
'ThreadState::performIdleLazySweep',
'ThreadState::completeSweep',
'BlinkGCMarking']},


other:{
id:'other',
label:'Other',
traceEventNames:[
'MessageLoop::RunTask',
'TaskQueueManager::ProcessTaskFromWorkQueue',
'ThreadControllerImpl::DoWork']}};





const taskNameToGroup={};
for(const group of Object.values(taskGroups)){
for(const traceEventName of group.traceEventNames){
taskNameToGroup[traceEventName]=group;
}
}

module.exports={
taskGroups,
taskNameToGroup};


},{}],94:[function(require,module,exports){






'use strict';

const log=require('lighthouse-logger');



function findValueInMetricsAuditFn(metricName){
return auditResults=>{
const metricsAudit=auditResults.metrics;
if(!metricsAudit||!metricsAudit.details||!metricsAudit.details.items)return;

const values=metricsAudit.details.items[0];
return values&&values[metricName];
};
}

class Metrics{
constructor(traceEvents,auditResults){
this._traceEvents=traceEvents;
this._auditResults=auditResults;
}





static get metricsDefinitions(){
return[
{
name:'Navigation Start',
id:'navstart',
getTs:findValueInMetricsAuditFn('observedNavigationStartTs'),
getTiming:findValueInMetricsAuditFn('observedNavigationStart')},

{
name:'First Contentful Paint',
id:'ttfcp',
getTs:findValueInMetricsAuditFn('observedFirstContentfulPaintTs'),
getTiming:findValueInMetricsAuditFn('observedFirstContentfulPaint')},

{
name:'First Meaningful Paint',
id:'ttfmp',
getTs:findValueInMetricsAuditFn('observedFirstMeaningfulPaintTs'),
getTiming:findValueInMetricsAuditFn('observedFirstMeaningfulPaint')},

{
name:'Speed Index',
id:'si',
getTs:findValueInMetricsAuditFn('observedSpeedIndexTs'),
getTiming:findValueInMetricsAuditFn('observedSpeedIndex')},

{
name:'First Visual Change',
id:'fv',
getTs:findValueInMetricsAuditFn('observedFirstVisualChangeTs'),
getTiming:findValueInMetricsAuditFn('observedFirstVisualChange')},

{
name:'Visually Complete 100%',
id:'vc100',
getTs:findValueInMetricsAuditFn('observedLastVisualChangeTs'),
getTiming:findValueInMetricsAuditFn('observedLastVisualChange')},

{
name:'First CPU Idle',
id:'ttfi',
getTs:findValueInMetricsAuditFn('firstCPUIdleTs'),
getTiming:findValueInMetricsAuditFn('firstCPUIdle')},

{
name:'Interactive',
id:'tti',
getTs:findValueInMetricsAuditFn('interactiveTs'),
getTiming:findValueInMetricsAuditFn('interactive')},

{
name:'End of Trace',
id:'eot',
getTs:findValueInMetricsAuditFn('observedTraceEndTs'),
getTiming:findValueInMetricsAuditFn('observedTraceEnd')},

{
name:'On Load',
id:'onload',
getTs:findValueInMetricsAuditFn('observedLoadTs'),
getTiming:findValueInMetricsAuditFn('observedLoad')},

{
name:'DOM Content Loaded',
id:'dcl',
getTs:findValueInMetricsAuditFn('observedDomContentLoadedTs'),
getTiming:findValueInMetricsAuditFn('observedDomContentLoaded')}];


}





gatherMetrics(){
const metricDfns=Metrics.metricsDefinitions;
const resolvedMetrics=[];
metricDfns.forEach(metric=>{

try{
resolvedMetrics.push({
id:metric.id,
name:metric.name,
ts:metric.getTs(this._auditResults)});

}catch(e){
log.error('pwmetrics-events',`${metric.name} timestamp not found: ${e.message}`);
}
});
return resolvedMetrics;
}





identifyNavigationStartEvt(metrics){
const navStartMetric=metrics.find(e=>e.id==='navstart');
if(!navStartMetric)return;
this._navigationStartEvt=this._traceEvents.find(
e=>e.name==='navigationStart'&&e.ts===navStartMetric.ts);

}








synthesizeEventPair(metric){

const eventBase={
pid:this._navigationStartEvt.pid,
tid:this._navigationStartEvt.tid,
cat:'blink.user_timing',
name:metric.name,
args:{},

id:`0x${(Math.random()*1000000|0).toString(16)}`};

const fakeMeasureStartEvent=Object.assign({},eventBase,{
ts:this._navigationStartEvt.ts,
ph:'b'});

const fakeMeasureEndEvent=Object.assign({},eventBase,{
ts:metric.ts,
ph:'e'});

return[fakeMeasureStartEvent,fakeMeasureEndEvent];
}




generateFakeEvents(){
const fakeEvents=[];
const metrics=this.gatherMetrics();
if(metrics.length===0){
log.error('metrics-events','Metrics collection had errors, not synthetizing trace events');
return[];
}

this.identifyNavigationStartEvt(metrics);
if(!this._navigationStartEvt){
log.error('pwmetrics-events','Reference navigationStart not found');
return[];
}

metrics.forEach(metric=>{
if(metric.id==='navstart'){
return;
}
if(!metric.ts){
log.error('pwmetrics-events',`(${metric.name}) missing timestamp. Skipping…`);
return;
}
log.verbose('pwmetrics-events',`Sythesizing trace events for ${metric.name}`);
fakeEvents.push(...this.synthesizeEventPair(metric));
});
return fakeEvents;
}}


module.exports=Metrics;

},{"lighthouse-logger":147}],95:[function(require,module,exports){





'use strict';



const BASE_RESPONSE_LATENCY=16;

const SCHEDULABLE_TASK_TITLE='TaskQueueManager::ProcessTaskFromWorkQueue';

const SCHEDULABLE_TASK_TITLE_ALT1='ThreadControllerImpl::DoWork';

const SCHEDULABLE_TASK_TITLE_ALT2='ThreadControllerImpl::RunTask';
const LHError=require('../lh-error');

class TraceProcessor{






static assertHasToplevelEvents(events){
const hasToplevelTask=events.some(TraceProcessor.isScheduleableTask);
if(!hasToplevelTask){
throw new Error('Could not find any top level events');
}
}


















static _riskPercentiles(durations,totalTime,percentiles,clippedLength=0){
let busyTime=0;
for(let i=0;i<durations.length;i++){
busyTime+=durations[i];
}
busyTime-=clippedLength;


let completedTime=totalTime-busyTime;
let duration=0;
let cdfTime=completedTime;
const results=[];

let durationIndex=-1;
let remainingCount=durations.length+1;
if(clippedLength>0){

remainingCount--;
}


for(const percentile of percentiles){


const percentileTime=percentile*totalTime;
while(cdfTime<percentileTime&&durationIndex<durations.length-1){
completedTime+=duration;
remainingCount-=duration<0?-1:1;

if(clippedLength>0&&clippedLength<durations[durationIndex+1]){
duration=-clippedLength;
clippedLength=0;
}else{
durationIndex++;
duration=durations[durationIndex];
}


cdfTime=completedTime+Math.abs(duration)*remainingCount;
}


results.push({
percentile,
time:Math.max(0,(percentileTime-completedTime)/remainingCount)+
BASE_RESPONSE_LATENCY});

}

return results;
}











static getRiskToResponsiveness(
events,
startTime,
endTime,
percentiles=[0.5,0.75,0.9,0.99,1])
{
const totalTime=endTime-startTime;
percentiles.sort((a,b)=>a-b);

const ret=TraceProcessor.getMainThreadTopLevelEventDurations(events,startTime,endTime);
return TraceProcessor._riskPercentiles(ret.durations,totalTime,percentiles,
ret.clippedLength);
}








static getMainThreadTopLevelEventDurations(topLevelEvents,startTime=0,endTime=Infinity){


const durations=[];
let clippedLength=0;

for(const event of topLevelEvents){
if(event.end<startTime||event.start>endTime){
continue;
}

let duration=event.duration;
let eventStart=event.start;
if(eventStart<startTime){

eventStart=startTime;
duration=event.end-startTime;
}

if(event.end>endTime){

clippedLength=duration-(endTime-eventStart);
}

durations.push(duration);
}
durations.sort((a,b)=>a-b);

return{
durations,
clippedLength};

}









static getMainThreadTopLevelEvents(tabTrace,startTime=0,endTime=Infinity){
const topLevelEvents=[];

for(const event of tabTrace.mainThreadEvents){
if(!TraceProcessor.isScheduleableTask(event)||!event.dur)continue;

const start=(event.ts-tabTrace.navigationStartEvt.ts)/1000;
const end=(event.ts+event.dur-tabTrace.navigationStartEvt.ts)/1000;
if(start>endTime||end<startTime)continue;

topLevelEvents.push({
start,
end,
duration:event.dur/1000});

}

return topLevelEvents;
}





static findTracingStartedEvt(events){

let startedInPageEvt;


const startedInBrowserEvt=events.find(e=>e.name==='TracingStartedInBrowser');
if(startedInBrowserEvt&&startedInBrowserEvt.args.data&&
startedInBrowserEvt.args.data.frames){
const mainFrame=startedInBrowserEvt.args.data.frames.find(frame=>!frame.parent);
const pid=mainFrame&&mainFrame.processId;
const threadNameEvt=events.find(e=>e.pid===pid&&e.ph==='M'&&
e.cat==='__metadata'&&e.name==='thread_name'&&e.args.name==='CrRendererMain');
startedInPageEvt=mainFrame&&threadNameEvt?
Object.assign({},startedInBrowserEvt,{
pid,tid:threadNameEvt.tid,name:'TracingStartedInPage',
args:{data:{page:mainFrame.frame}}}):
undefined;
}


if(!startedInPageEvt){


startedInPageEvt=events.find(e=>e.name==='TracingStartedInPage');
}

if(!startedInPageEvt)throw new LHError(LHError.errors.NO_TRACING_STARTED);


const frameId=startedInPageEvt.args.data.page;
return{startedInPageEvt,frameId};
}





static isScheduleableTask(evt){
return evt.name===SCHEDULABLE_TASK_TITLE||
evt.name===SCHEDULABLE_TASK_TITLE_ALT1||
evt.name===SCHEDULABLE_TASK_TITLE_ALT2;
}}









module.exports=TraceProcessor;

},{"../lh-error":85}],96:[function(require,module,exports){
(function(global){






'use strict';





module.exports=function(){
if(global.SDK){
return global.SDK;
}


global.SDK={};
global.TextUtils={};
global.Node={
ELEMENT_NODE:1,
TEXT_NODE:3};

global.Protocol={
CSS:{
StyleSheetOrigin:{
Injected:'injected',
UserAgent:'user-agent',
Inspector:'inspector',
Regular:'regular'}}};








String.prototype.computeLineEndings=function(){
const endings=[];
for(let i=0;i<this.length;i++){
if(this.charAt(i)==='\n'){
endings.push(i);
}
}
endings.push(this.length);
return endings;
};

require('chrome-devtools-frontend/front_end/text_utils/Text.js');
require('chrome-devtools-frontend/front_end/text_utils/TextRange.js');
require('chrome-devtools-frontend/front_end/sdk/CSSMatchedStyles.js');
require('chrome-devtools-frontend/front_end/sdk/CSSMedia.js');
require('chrome-devtools-frontend/front_end/sdk/CSSMetadata.js');
require('chrome-devtools-frontend/front_end/sdk/CSSProperty.js');
require('chrome-devtools-frontend/front_end/sdk/CSSRule.js');
require('chrome-devtools-frontend/front_end/sdk/CSSStyleDeclaration.js');

return global.SDK;
}();

}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"chrome-devtools-frontend/front_end/sdk/CSSMatchedStyles.js":153,"chrome-devtools-frontend/front_end/sdk/CSSMedia.js":154,"chrome-devtools-frontend/front_end/sdk/CSSMetadata.js":155,"chrome-devtools-frontend/front_end/sdk/CSSProperty.js":156,"chrome-devtools-frontend/front_end/sdk/CSSRule.js":157,"chrome-devtools-frontend/front_end/sdk/CSSStyleDeclaration.js":158,"chrome-devtools-frontend/front_end/text_utils/Text.js":159,"chrome-devtools-frontend/front_end/text_utils/TextRange.js":160}],97:[function(require,module,exports){
















'use strict';



const ELLIPSIS='\u2026';
const NBSP='\xa0';
const PASS_THRESHOLD=0.9;

const RATINGS={
PASS:{label:'pass',minScore:PASS_THRESHOLD},
AVERAGE:{label:'average',minScore:0.5},
FAIL:{label:'fail'},
ERROR:{label:'error'}};


class Util{
static get PASS_THRESHOLD(){
return PASS_THRESHOLD;
}

static get MS_DISPLAY_VALUE(){
return`%10d${NBSP}ms`;
}









static prepareReportResult(result){

const clone=JSON.parse(JSON.stringify(result));


if(!clone.configSettings.locale){
clone.configSettings.locale='en';
}
Util.setNumberDateLocale(clone.configSettings.locale);
if(clone.i18n&&clone.i18n.rendererFormattedStrings){
Util.updateAllUIStrings(clone.i18n.rendererFormattedStrings);
}

if(typeof clone.categories!=='object')throw new Error('No categories provided.');
clone.reportCategories=Object.values(clone.categories);


for(const category of clone.reportCategories){
category.auditRefs.forEach(auditMeta=>{
const result=clone.audits[auditMeta.id];
auditMeta.result=result;
});
}

return clone;
}





static updateAllUIStrings(rendererFormattedStrings){

for(const[key,value]of Object.entries(rendererFormattedStrings)){
Util.UIStrings[key]=value;
}
}





static formatDisplayValue(displayValue){
if(typeof displayValue==='string')return displayValue;
if(!displayValue)return'';

const replacementRegex=/%([0-9]*(\.[0-9]+)?d|s)/;
const template=displayValue[0];
if(typeof template!=='string'){


return'UNKNOWN';
}

let output=template;
for(const replacement of displayValue.slice(1)){
if(!replacementRegex.test(output)){

console.warn('Too many replacements given');
break;
}

output=output.replace(replacementRegex,match=>{
const granularity=Number(match.match(/[0-9.]+/))||1;
return match==='%s'?
replacement.toLocaleString():
(Math.round(Number(replacement)/granularity)*granularity).toLocaleString();
});
}

if(replacementRegex.test(output)){

console.warn('Not enough replacements given');
}

return output;
}








static showAsPassed(audit){
switch(audit.scoreDisplayMode){
case'manual':
case'not-applicable':
return true;
case'error':
case'informative':
return false;
case'numeric':
case'binary':
default:
return Number(audit.score)>=RATINGS.PASS.minScore;}

}







static calculateRating(score,scoreDisplayMode){

if(scoreDisplayMode==='manual'||scoreDisplayMode==='not-applicable'){
return RATINGS.PASS.label;
}else if(scoreDisplayMode==='error'){
return RATINGS.ERROR.label;
}else if(score===null){
return RATINGS.FAIL.label;
}


let rating=RATINGS.FAIL.label;
if(score>=RATINGS.PASS.minScore){
rating=RATINGS.PASS.label;
}else if(score>=RATINGS.AVERAGE.minScore){
rating=RATINGS.AVERAGE.label;
}
return rating;
}







static formatNumber(number,granularity=0.1){
const coarseValue=Math.round(number/granularity)*granularity;
return coarseValue.toLocaleString(Util.numberDateLocale);
}






static formatBytesToKB(size,granularity=0.1){
const kbs=(Math.round(size/1024/granularity)*granularity).
toLocaleString(Util.numberDateLocale);
return`${kbs}${NBSP}KB`;
}






static formatMilliseconds(ms,granularity=10){
const coarseTime=Math.round(ms/granularity)*granularity;
return`${coarseTime.toLocaleString(Util.numberDateLocale)}${NBSP}ms`;
}






static formatSeconds(ms,granularity=0.1){
const coarseTime=Math.round(ms/1000/granularity)*granularity;
return`${coarseTime.toLocaleString(Util.numberDateLocale)}${NBSP}s`;
}






static formatDateTime(date){

const options={
month:'short',day:'numeric',year:'numeric',
hour:'numeric',minute:'numeric',timeZoneName:'short'};

let formatter=new Intl.DateTimeFormat(Util.numberDateLocale,options);



const tz=formatter.resolvedOptions().timeZone;
if(!tz||tz.toLowerCase()==='etc/unknown'){
options.timeZone='UTC';
formatter=new Intl.DateTimeFormat(Util.numberDateLocale,options);
}
return formatter.format(new Date(date));
}





static formatDuration(timeInMilliseconds){
let timeInSeconds=timeInMilliseconds/1000;
if(Math.round(timeInSeconds)===0){
return'None';
}


const parts=[];
const unitLabels={
d:60*60*24,
h:60*60,
m:60,
s:1};


Object.keys(unitLabels).forEach(label=>{
const unit=unitLabels[label];
const numberOfUnits=Math.floor(timeInSeconds/unit);
if(numberOfUnits>0){
timeInSeconds-=numberOfUnits*unit;
parts.push(`${numberOfUnits}\xa0${label}`);
}
});

return parts.join(' ');
}






static getURLDisplayName(parsedUrl,options){

options=options||{numPathParts:undefined,preserveQuery:undefined,
preserveHost:undefined};
const numPathParts=options.numPathParts!==undefined?options.numPathParts:2;
const preserveQuery=options.preserveQuery!==undefined?options.preserveQuery:true;
const preserveHost=options.preserveHost||false;

let name;

if(parsedUrl.protocol==='about:'||parsedUrl.protocol==='data:'){

name=parsedUrl.href;
}else{
name=parsedUrl.pathname;
const parts=name.split('/').filter(part=>part.length);
if(numPathParts&&parts.length>numPathParts){
name=ELLIPSIS+parts.slice(-1*numPathParts).join('/');
}

if(preserveHost){
name=`${parsedUrl.host}/${name.replace(/^\//,'')}`;
}
if(preserveQuery){
name=`${name}${parsedUrl.search}`;
}
}

const MAX_LENGTH=64;

name=name.replace(/([a-f0-9]{7})[a-f0-9]{13}[a-f0-9]*/g,`$1${ELLIPSIS}`);

name=name.replace(/([a-zA-Z0-9-_]{9})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9-_]{10,}/g,
`$1${ELLIPSIS}`);

name=name.replace(/(\d{3})\d{6,}/g,`$1${ELLIPSIS}`);

name=name.replace(/\u2026+/g,ELLIPSIS);


if(name.length>MAX_LENGTH&&name.includes('?')){

name=name.replace(/\?([^=]*)(=)?.*/,`?$1$2${ELLIPSIS}`);


if(name.length>MAX_LENGTH){
name=name.replace(/\?.*/,`?${ELLIPSIS}`);
}
}


if(name.length>MAX_LENGTH){
const dotIndex=name.lastIndexOf('.');
if(dotIndex>=0){
name=name.slice(0,MAX_LENGTH-1-(name.length-dotIndex))+

`${ELLIPSIS}${name.slice(dotIndex)}`;
}else{
name=name.slice(0,MAX_LENGTH-1)+ELLIPSIS;
}
}

return name;
}






static parseURL(url){
const parsedUrl=new URL(url);
return{
file:Util.getURLDisplayName(parsedUrl),
hostname:parsedUrl.hostname,
origin:parsedUrl.origin};

}





static getEnvironmentDisplayValues(settings){
const emulationDesc=Util.getEmulationDescriptions(settings);

return[
{
name:'Device',
description:emulationDesc.deviceEmulation},

{
name:'Network throttling',
description:emulationDesc.networkThrottling},

{
name:'CPU throttling',
description:emulationDesc.cpuThrottling}];


}





static getEmulationDescriptions(settings){
let cpuThrottling;
let networkThrottling;
let summary;

const throttling=settings.throttling;

switch(settings.throttlingMethod){
case'provided':
cpuThrottling='Provided by environment';
networkThrottling='Provided by environment';
summary='No throttling applied';
break;
case'devtools':{
const{cpuSlowdownMultiplier,requestLatencyMs}=throttling;
cpuThrottling=`${Util.formatNumber(cpuSlowdownMultiplier)}x slowdown (DevTools)`;
networkThrottling=`${Util.formatNumber(requestLatencyMs)}${NBSP}ms HTTP RTT, `+
`${Util.formatNumber(throttling.downloadThroughputKbps)}${NBSP}Kbps down, `+
`${Util.formatNumber(throttling.uploadThroughputKbps)}${NBSP}Kbps up (DevTools)`;
summary='Throttled Fast 3G network';
break;
}
case'simulate':{
const{cpuSlowdownMultiplier,rttMs,throughputKbps}=throttling;
cpuThrottling=`${Util.formatNumber(cpuSlowdownMultiplier)}x slowdown (Simulated)`;
networkThrottling=`${Util.formatNumber(rttMs)}${NBSP}ms TCP RTT, `+
`${Util.formatNumber(throughputKbps)}${NBSP}Kbps throughput (Simulated)`;
summary='Simulated Fast 3G network';
break;
}
default:
cpuThrottling='Unknown';
networkThrottling='Unknown';
summary='Unknown';}


let deviceEmulation='No emulation';
if(!settings.disableDeviceEmulation){
if(settings.emulatedFormFactor==='mobile')deviceEmulation='Emulated Nexus 5X';
if(settings.emulatedFormFactor==='desktop')deviceEmulation='Emulated Desktop';
}

return{
deviceEmulation,
cpuThrottling,
networkThrottling,
summary:`${deviceEmulation}, ${summary}`};

}





static setNumberDateLocale(locale){
Util.numberDateLocale=locale;


if(Util.numberDateLocale==='en-XA')Util.numberDateLocale='de';
}}






Util.numberDateLocale='en';





Util.UIStrings={

varianceDisclaimer:'Values are estimated and may vary.',

opportunityResourceColumnLabel:'Opportunity',

opportunitySavingsColumnLabel:'Estimated Savings',


errorMissingAuditInfo:'Report error: no audit information',

errorLabel:'Error!',

warningHeader:'Warnings: ',

auditGroupExpandTooltip:'Show audits',

passedAuditsGroupTitle:'Passed audits',

notApplicableAuditsGroupTitle:'Not applicable',

manualAuditsGroupTitle:'Additional items to manually check',


toplevelWarningsMessage:'There were issues affecting this run of Lighthouse:',

scorescaleLabel:'Score scale:',


crcInitialNavigation:'Initial Navigation',

crcLongestDurationLabel:'Maximum critical path latency:',


lsPerformanceCategoryDescription:'[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analysis of the current page on emulated 3G. Values are estimated and may vary.',

labDataTitle:'Lab Data'};


if(typeof module!=='undefined'&&module.exports){
module.exports=Util;
}else{
self.Util=Util;
}

},{}],98:[function(require,module,exports){





'use strict';

const htmlReportAssets=require('./html/html-report-assets');

class ReportGenerator{






static replaceStrings(source,replacements){
if(replacements.length===0){
return source;
}

const firstReplacement=replacements[0];
const nextReplacements=replacements.slice(1);
return source.
split(firstReplacement.search).
map(part=>ReportGenerator.replaceStrings(part,nextReplacements)).
join(firstReplacement.replacement);
}






static generateReportHtml(lhr){
const sanitizedJson=JSON.stringify(lhr).
replace(/</g,'\\u003c').
replace(/\u2028/g,'\\u2028').
replace(/\u2029/g,'\\u2029');
const sanitizedJavascript=htmlReportAssets.REPORT_JAVASCRIPT.replace(/<\//g,'\\u003c/');

return ReportGenerator.replaceStrings(htmlReportAssets.REPORT_TEMPLATE,[
{search:'%%LIGHTHOUSE_JSON%%',replacement:sanitizedJson},
{search:'%%LIGHTHOUSE_JAVASCRIPT%%',replacement:sanitizedJavascript},
{search:'/*%%LIGHTHOUSE_CSS%%*/',replacement:htmlReportAssets.REPORT_CSS},
{search:'%%LIGHTHOUSE_TEMPLATES%%',replacement:htmlReportAssets.REPORT_TEMPLATES}]);

}













static generateReportCSV(lhr){


const CRLF='\r\n';
const separator=',';

const escape=value=>`"${value.replace(/"/g,'""')}"`;


const header=['category','name','title','type','score'];
const table=Object.values(lhr.categories).map(category=>{
return category.auditRefs.map(auditRef=>{
const audit=lhr.audits[auditRef.id];

const numericScore=audit.score===null?-1:audit.score;
return[category.title,audit.id,audit.title,audit.scoreDisplayMode,numericScore].
map(value=>value.toString()).
map(escape);
});
});


const flattedTable=[].concat(...table);
return[header,...flattedTable].map(row=>row.join(separator)).join(CRLF);
}







static generateReport(lhr,outputModes){
const outputAsArray=Array.isArray(outputModes);
if(typeof outputModes==='string')outputModes=[outputModes];

const output=outputModes.map(outputMode=>{

if(outputMode==='html'){
return ReportGenerator.generateReportHtml(lhr);
}

if(outputMode==='csv'){
return ReportGenerator.generateReportCSV(lhr);
}

if(outputMode==='json'){
return JSON.stringify(lhr,null,2);
}

throw new Error('Invalid output mode: '+outputMode);
});

return outputAsArray?output:output[0];
}}


module.exports=ReportGenerator;

},{"./html/html-report-assets":107}],99:[function(require,module,exports){
(function(process,__dirname){





'use strict';

const isDeepEqual=require('lodash.isequal');
const Driver=require('./gather/driver.js');
const GatherRunner=require('./gather/gather-runner');
const ReportScoring=require('./scoring');
const Audit=require('./audits/audit');
const log=require('lighthouse-logger');
const i18n=require('./lib/i18n/i18n.js');
const assetSaver=require('./lib/asset-saver');

const path=require('path');
const URL=require('./lib/url-shim');
const Sentry=require('./lib/sentry');
const generateReport=require('./report/report-generator').generateReport;
const LHError=require('./lib/lh-error.js');




class Runner{





static async run(connection,runOpts){
try{
const startTime=Date.now();
const settings=runOpts.config.settings;





const lighthouseRunWarnings=[];

const sentryContext=Sentry.getContext();
Sentry.captureBreadcrumb({
message:'Run started',
category:'lifecycle',
data:sentryContext&&sentryContext.extra});








let artifacts;
let requestedUrl;
if(settings.auditMode&&!settings.gatherMode){

const path=Runner._getArtifactsPath(settings);
artifacts=await assetSaver.loadArtifacts(path);
requestedUrl=artifacts.URL.requestedUrl;

if(!requestedUrl){
throw new Error('Cannot run audit mode on empty URL');
}
if(runOpts.url&&!URL.equalWithExcludedFragments(runOpts.url,requestedUrl)){
throw new Error('Cannot run audit mode on different URL');
}
}else{
if(typeof runOpts.url!=='string'||runOpts.url.length===0){
throw new Error(`You must provide a url to the runner. '${runOpts.url}' provided.`);
}

try{

requestedUrl=new URL(runOpts.url).href;
}catch(e){
throw new Error('The url provided should have a proper protocol and hostname.');
}

artifacts=await Runner._gatherArtifactsFromBrowser(requestedUrl,runOpts,connection);

if(settings.gatherMode){
const path=Runner._getArtifactsPath(settings);
await assetSaver.saveArtifacts(artifacts,path);
}
}


if(settings.gatherMode&&!settings.auditMode)return;


if(!runOpts.config.audits){
throw new Error('No audits to evaluate.');
}
const auditResults=await Runner._runAudits(settings,runOpts.config.audits,artifacts,
lighthouseRunWarnings);


log.log('status','Generating results...');

if(artifacts.LighthouseRunWarnings){
lighthouseRunWarnings.push(...artifacts.LighthouseRunWarnings);
}


const lighthouseVersion=require('../package.json').version;


const resultsById={};
for(const audit of auditResults){
resultsById[audit.id]=audit;
}


let categories={};
if(runOpts.config.categories){
categories=ReportScoring.scoreAllCategories(runOpts.config.categories,resultsById);
}


const lhr={
userAgent:artifacts.HostUserAgent,
environment:{
networkUserAgent:artifacts.NetworkUserAgent,
hostUserAgent:artifacts.HostUserAgent,
benchmarkIndex:artifacts.BenchmarkIndex},

lighthouseVersion,
fetchTime:artifacts.fetchTime,
requestedUrl:requestedUrl,
finalUrl:artifacts.URL.finalUrl,
runWarnings:lighthouseRunWarnings,
runtimeError:Runner.getArtifactRuntimeError(artifacts),
audits:resultsById,
configSettings:settings,
categories,
categoryGroups:runOpts.config.groups||undefined,
timing:{total:Date.now()-startTime},
i18n:{
rendererFormattedStrings:i18n.getRendererFormattedStrings(settings.locale),
icuMessagePaths:{}}};




lhr.i18n.icuMessagePaths=i18n.replaceIcuMessageInstanceIds(lhr,settings.locale);

const report=generateReport(lhr,settings.output);
return{lhr,artifacts,report};
}catch(err){
await Sentry.captureException(err,{level:'fatal'});
throw err;
}
}








static async _gatherArtifactsFromBrowser(requestedUrl,runnerOpts,connection){
if(!runnerOpts.config.passes){
throw new Error('No browser artifacts are either provided or requested.');
}

const driver=runnerOpts.driverMock||new Driver(connection);
const gatherOpts={
driver,
requestedUrl,
settings:runnerOpts.config.settings};

const artifacts=await GatherRunner.run(runnerOpts.config.passes,gatherOpts);
return artifacts;
}









static async _runAudits(settings,audits,artifacts,runWarnings){
log.log('status','Analyzing and running audits...');
artifacts=Object.assign({},Runner.instantiateComputedArtifacts(),artifacts);

if(artifacts.settings){
const overrides={
locale:undefined,
gatherMode:undefined,
auditMode:undefined,
output:undefined};

const normalizedGatherSettings=Object.assign({},artifacts.settings,overrides);
const normalizedAuditSettings=Object.assign({},settings,overrides);


if(!isDeepEqual(normalizedGatherSettings,normalizedAuditSettings)){
throw new Error('Cannot change settings between gathering and auditing');
}
}


const sharedAuditContext={
settings,
LighthouseRunWarnings:runWarnings,
computedCache:new Map()};



const auditResults=[];
for(const auditDefn of audits){
const auditResult=await Runner._runAudit(auditDefn,artifacts,sharedAuditContext);
auditResults.push(auditResult);
}

return auditResults;
}










static async _runAudit(auditDefn,artifacts,sharedAuditContext){
const audit=auditDefn.implementation;
const status=`Evaluating: ${i18n.getFormatted(audit.meta.title,'en-US')}`;

log.log('status',status);
let auditResult;
try{

for(const artifactName of audit.meta.requiredArtifacts){
const noArtifact=artifacts[artifactName]===undefined;



const noTrace=artifactName==='traces'&&!artifacts.traces[Audit.DEFAULT_PASS];

if(noArtifact||noTrace){
log.warn('Runner',
`${artifactName} gatherer, required by audit ${audit.meta.id}, did not run.`);
throw new Error(`Required ${artifactName} gatherer did not run.`);
}



if(artifacts[artifactName]instanceof Error){


const artifactError=artifacts[artifactName];

Sentry.captureException(artifactError,{
tags:{gatherer:artifactName},
level:'error'});


log.warn('Runner',`${artifactName} gatherer, required by audit ${audit.meta.id},`+
` encountered an error: ${artifactError.message}`);


const error=new Error(
`Required ${artifactName} gatherer encountered an error: ${artifactError.message}`);

error.expected=true;
throw error;
}
}


const auditOptions=Object.assign({},audit.defaultOptions,auditDefn.options);
const auditContext={
options:auditOptions,
...sharedAuditContext};


const product=await audit.audit(artifacts,auditContext);
auditResult=Audit.generateAuditResult(audit,product);
}catch(err){
log.warn(audit.meta.id,`Caught exception: ${err.message}`);
if(err.fatal){
throw err;
}

Sentry.captureException(err,{tags:{audit:audit.meta.id},level:'error'});

const errorMessage=err.friendlyMessage?
`${err.friendlyMessage} (${err.message})`:
`Audit error: ${err.message}`;
auditResult=Audit.generateErrorAuditResult(audit,errorMessage);
}

log.verbose('statusEnd',status);
return auditResult;
}






static getArtifactRuntimeError(artifacts){
for(const possibleErrorArtifact of Object.values(artifacts)){
if(possibleErrorArtifact instanceof LHError&&possibleErrorArtifact.lhrRuntimeError){
const errorMessage=possibleErrorArtifact.friendlyMessage||possibleErrorArtifact.message;

return{
code:possibleErrorArtifact.code,
message:errorMessage};

}
}

return{
code:LHError.NO_ERROR,
message:''};

}





static getAuditList(){
const ignoredFiles=[
'audit.js',
'violation-audit.js',
'accessibility/axe-audit.js',
'multi-check-audit.js',
'byte-efficiency/byte-efficiency-audit.js',
'manual/manual-audit.js'];


const fileList=[
...["accessibility","audit.js","bootup-time.js","byte-efficiency","content-width.js","critical-request-chains.js","deprecations.js","dobetterweb","errors-in-console.js","final-screenshot.js","font-display.js","image-aspect-ratio.js","is-on-https.js","load-fast-enough-for-pwa.js","mainthread-work-breakdown.js","manifest-short-name-length.js","manual","metrics","metrics.js","mixed-content.js","multi-check-audit.js","network-requests.js","predictive-perf.js","redirects-http.js","redirects.js","screenshot-thumbnails.js","seo","service-worker.js","splash-screen.js","themed-omnibox.js","time-to-first-byte.js","user-timings.js","uses-rel-preconnect.js","uses-rel-preload.js","viewport.js","violation-audit.js","webapp-install-banner.js","without-javascript.js","works-offline.js"],
...["appcache-manifest.js","doctype.js","dom-size.js","external-anchors-use-rel-noopener.js","geolocation-on-start.js","js-libraries.js","no-document-write.js","no-vulnerable-libraries.js","no-websql.js","notification-on-start.js","password-inputs-can-be-pasted-into.js","uses-http2.js","uses-passive-event-listeners.js"].map(f=>`dobetterweb/${f}`),
...["estimated-input-latency.js","first-contentful-paint.js","first-cpu-idle.js","first-meaningful-paint.js","interactive.js","speed-index.js"].map(f=>`metrics/${f}`),
...["canonical.js","font-size.js","hreflang.js","http-status-code.js","is-crawlable.js","link-text.js","manual","meta-description.js","plugins.js","robots-txt.js"].map(f=>`seo/${f}`),
...["mobile-friendly.js","structured-data.js"].map(f=>`seo/manual/${f}`),
...["accesskeys.js","aria-allowed-attr.js","aria-required-attr.js","aria-required-children.js","aria-required-parent.js","aria-roles.js","aria-valid-attr-value.js","aria-valid-attr.js","audio-caption.js","axe-audit.js","button-name.js","bypass.js","color-contrast.js","definition-list.js","dlitem.js","document-title.js","duplicate-id.js","frame-title.js","html-has-lang.js","html-lang-valid.js","image-alt.js","input-image-alt.js","label.js","layout-table.js","link-name.js","list.js","listitem.js","manual","meta-refresh.js","meta-viewport.js","object-alt.js","tabindex.js","td-headers-attr.js","th-has-data-cells.js","valid-lang.js","video-caption.js","video-description.js"].
map(f=>`accessibility/${f}`),
...["custom-controls-labels.js","custom-controls-roles.js","focus-traps.js","focusable-controls.js","heading-levels.js","interactive-element-affordance.js","logical-tab-order.js","managed-focus.js","offscreen-content-hidden.js","use-landmarks.js","visual-order-follows-dom.js"].
map(f=>`accessibility/manual/${f}`),
...["byte-efficiency-audit.js","efficient-animated-content.js","offscreen-images.js","render-blocking-resources.js","total-byte-weight.js","unminified-css.js","unminified-javascript.js","unused-css-rules.js","unused-javascript.js","uses-long-cache-ttl.js","uses-optimized-images.js","uses-responsive-images.js","uses-text-compression.js","uses-webp-images.js"].
map(f=>`byte-efficiency/${f}`),
...["manual-audit.js","pwa-cross-browser.js","pwa-each-page-has-url.js","pwa-page-transitions.js"].map(f=>`manual/${f}`)];

return fileList.filter(f=>{
return /\.js$/.test(f)&&!ignoredFiles.includes(f);
}).sort();
}





static getGathererList(){
const fileList=[
...["accessibility.js","cache-contents.js","chrome-console-messages.js","css-usage.js","dobetterweb","fonts.js","gatherer.js","html-without-javascript.js","http-redirect.js","image-usage.js","js-usage.js","manifest.js","mixed-content.js","offline.js","runtime-exceptions.js","scripts.js","seo","service-worker.js","start-url.js","theme-color.js","viewport-dimensions.js","viewport.js"],
...["canonical.js","crawlable-links.js","embedded-content.js","font-size.js","hreflang.js","meta-description.js","meta-robots.js","robots-txt.js"].map(f=>`seo/${f}`),
...["anchors-with-no-rel-noopener.js","appcache.js","doctype.js","domstats.js","js-libraries.js","optimized-images.js","password-inputs-with-prevented-paste.js","response-compression.js","tags-blocking-first-paint.js","websql.js"].
map(f=>`dobetterweb/${f}`)];

return fileList.filter(f=>/\.js$/.test(f)&&f!=='gatherer.js').sort();
}





static getComputedGathererList(){
const filenamesToSkip=[
'computed-artifact.js',
'metrics',
'metrics/lantern-metric.js',
'metrics/metric.js',


'new-computed-artifact.js',
'manifest-values.js'];


const fileList=[
...["computed-artifact.js","critical-request-chains.js","load-simulator.js","main-resource.js","main-thread-tasks.js","manifest-values.js","metrics","network-analysis.js","network-records.js","network-throughput.js","new-computed-artifact.js","page-dependency-graph.js","pushed-requests.js","screenshots.js","speedline.js","trace-of-tab.js"],
...["estimated-input-latency.js","first-contentful-paint.js","first-cpu-idle.js","first-meaningful-paint.js","interactive.js","lantern-estimated-input-latency.js","lantern-first-contentful-paint.js","lantern-first-cpu-idle.js","lantern-first-meaningful-paint.js","lantern-interactive.js","lantern-metric.js","lantern-speed-index.js","metric.js","speed-index.js"].map(f=>`metrics/${f}`)];


return fileList.filter(f=>/\.js$/.test(f)&&!filenamesToSkip.includes(f)).sort();
}





static instantiateComputedArtifacts(){
const computedArtifacts={};
Runner.getComputedGathererList().forEach(function(filename){

filename=filename.replace(/\.js$/,'');
const ArtifactClass=require('./gather/computed/'+filename);
const artifact=new ArtifactClass(computedArtifacts);


computedArtifacts['request'+artifact.name]=artifact.request.bind(artifact);
});

return computedArtifacts;
}











static resolvePlugin(plugin,configDir,category){




try{
return require.resolve(plugin);
}catch(e){}




const cwdPath=path.resolve(process.cwd(),plugin);
try{
return require.resolve(cwdPath);
}catch(e){}

const errorString='Unable to locate '+(
category?`${category}: `:'')+
`${plugin} (tried to require() from '${__dirname}' and load from '${cwdPath}'`;

if(!configDir){
throw new Error(errorString+')');
}




const relativePath=path.resolve(configDir,plugin);
try{
return require.resolve(relativePath);
}catch(requireError){}

throw new Error(errorString+` and '${relativePath}')`);
}






static _getArtifactsPath(settings){
const{auditMode,gatherMode}=settings;


if(typeof auditMode==='string')return path.resolve(process.cwd(),auditMode);
if(typeof gatherMode==='string')return path.resolve(process.cwd(),gatherMode);

return path.join(process.cwd(),'latest-run');
}}


module.exports=Runner;

}).call(this,require('_process'),"/../lighthouse-core");
},{"../package.json":188,"./audits/audit":2,"./gather/driver.js":19,"./gather/gather-runner":20,"./lib/asset-saver":24,"./lib/i18n/i18n.js":36,"./lib/lh-error.js":85,"./lib/sentry":90,"./lib/url-shim":"url","./report/report-generator":98,"./scoring":100,"_process":126,"lighthouse-logger":147,"lodash.isequal":178,"path":124}],100:[function(require,module,exports){






'use strict';

const Audit=require('./audits/audit');






const clampTo2Decimals=val=>Math.round(val*100)/100;

class ReportScoring{





static arithmeticMean(items){

items=items.filter(item=>item.weight>0);

if(items.some(item=>item.score===null))return null;

const results=items.reduce(
(result,item)=>{
const score=item.score;
const weight=item.weight;

return{
weight:result.weight+weight,
sum:result.sum+score*weight};

},
{weight:0,sum:0});


return clampTo2Decimals(results.sum/results.weight||0);
}







static scoreAllCategories(configCategories,resultsByAuditId){

const scoredCategories={};

for(const[categoryId,configCategory]of Object.entries(configCategories)){

const auditRefs=configCategory.auditRefs.map(configMember=>{
const member={...configMember};





const result=resultsByAuditId[member.id];
if(result.scoreDisplayMode===Audit.SCORING_MODES.NOT_APPLICABLE||
result.scoreDisplayMode===Audit.SCORING_MODES.INFORMATIVE||
result.scoreDisplayMode===Audit.SCORING_MODES.MANUAL){
member.weight=0;
}

return member;
});

const scores=auditRefs.map(auditRef=>({
score:resultsByAuditId[auditRef.id].score,
weight:auditRef.weight}));

const score=ReportScoring.arithmeticMean(scores);

scoredCategories[categoryId]={
...configCategory,
auditRefs,
id:categoryId,
score};

}

return scoredCategories;
}}


module.exports=ReportScoring;

},{"./audits/audit":2}],101:[function(require,module,exports){





'use strict';

const lighthouse=require('../../../lighthouse-core/index');
const RawProtocol=require('../../../lighthouse-core/gather/connections/raw');
const Config=require('../../../lighthouse-core/config/config');
const defaultConfig=require('../../../lighthouse-core/config/default-config.js');
const i18n=require('../../../lighthouse-core/lib/i18n/i18n.js');
const log=require('lighthouse-logger');









function getDefaultConfigForCategories(categoryIDs){
return{
extends:'lighthouse:default',
settings:{
onlyCategories:categoryIDs}};


}








function runLighthouseInWorker(port,url,flags,categoryIDs){

flags.logLevel=flags.logLevel||'info';
const config=getDefaultConfigForCategories(categoryIDs);
const connection=new RawProtocol(port);

return lighthouse(url,flags,config,connection);
}





function getDefaultCategories(){
const categories=Config.getCategories(defaultConfig);
categories.forEach(cat=>cat.title=i18n.getFormatted(cat.title,'en-US'));
return categories;
}


function listenForStatus(listenCallback){
log.events.addListener('status',listenCallback);
}

if(typeof module!=='undefined'&&module.exports){

module.exports={
getDefaultConfigForCategories,
runLighthouseInWorker,
getDefaultCategories,
listenForStatus};

}



if(typeof self!=='undefined'&&self instanceof self.WorkerGlobalScope){

self.runLighthouseInWorker=runLighthouseInWorker;

self.listenForStatus=listenForStatus;
}

},{"../../../lighthouse-core/config/config":7,"../../../lighthouse-core/config/default-config.js":9,"../../../lighthouse-core/gather/connections/raw":17,"../../../lighthouse-core/index":22,"../../../lighthouse-core/lib/i18n/i18n.js":36,"lighthouse-logger":147}],102:[function(require,module,exports){
(function(global){
'use strict';










function compare(a,b){
if(a===b){
return 0;
}

var x=a.length;
var y=b.length;

for(var i=0,len=Math.min(x,y);i<len;++i){
if(a[i]!==b[i]){
x=a[i];
y=b[i];
break;
}
}

if(x<y){
return-1;
}
if(y<x){
return 1;
}
return 0;
}
function isBuffer(b){
if(global.Buffer&&typeof global.Buffer.isBuffer==='function'){
return global.Buffer.isBuffer(b);
}
return!!(b!=null&&b._isBuffer);
}



























var util=require('util/');
var hasOwn=Object.prototype.hasOwnProperty;
var pSlice=Array.prototype.slice;
var functionsHaveNames=function(){
return function foo(){}.name==='foo';
}();
function pToString(obj){
return Object.prototype.toString.call(obj);
}
function isView(arrbuf){
if(isBuffer(arrbuf)){
return false;
}
if(typeof global.ArrayBuffer!=='function'){
return false;
}
if(typeof ArrayBuffer.isView==='function'){
return ArrayBuffer.isView(arrbuf);
}
if(!arrbuf){
return false;
}
if(arrbuf instanceof DataView){
return true;
}
if(arrbuf.buffer&&arrbuf.buffer instanceof ArrayBuffer){
return true;
}
return false;
}




var assert=module.exports=ok;






var regex=/\s*function\s+([^\(\s]*)\s*/;

function getName(func){
if(!util.isFunction(func)){
return;
}
if(functionsHaveNames){
return func.name;
}
var str=func.toString();
var match=str.match(regex);
return match&&match[1];
}
assert.AssertionError=function AssertionError(options){
this.name='AssertionError';
this.actual=options.actual;
this.expected=options.expected;
this.operator=options.operator;
if(options.message){
this.message=options.message;
this.generatedMessage=false;
}else{
this.message=getMessage(this);
this.generatedMessage=true;
}
var stackStartFunction=options.stackStartFunction||fail;
if(Error.captureStackTrace){
Error.captureStackTrace(this,stackStartFunction);
}else{

var err=new Error();
if(err.stack){
var out=err.stack;


var fn_name=getName(stackStartFunction);
var idx=out.indexOf('\n'+fn_name);
if(idx>=0){


var next_line=out.indexOf('\n',idx+1);
out=out.substring(next_line+1);
}

this.stack=out;
}
}
};


util.inherits(assert.AssertionError,Error);

function truncate(s,n){
if(typeof s==='string'){
return s.length<n?s:s.slice(0,n);
}else{
return s;
}
}
function inspect(something){
if(functionsHaveNames||!util.isFunction(something)){
return util.inspect(something);
}
var rawname=getName(something);
var name=rawname?': '+rawname:'';
return'[Function'+name+']';
}
function getMessage(self){
return truncate(inspect(self.actual),128)+' '+
self.operator+' '+
truncate(inspect(self.expected),128);
}












function fail(actual,expected,message,operator,stackStartFunction){
throw new assert.AssertionError({
message:message,
actual:actual,
expected:expected,
operator:operator,
stackStartFunction:stackStartFunction});

}


assert.fail=fail;








function ok(value,message){
if(!value)fail(value,true,message,'==',assert.ok);
}
assert.ok=ok;





assert.equal=function equal(actual,expected,message){
if(actual!=expected)fail(actual,expected,message,'==',assert.equal);
};




assert.notEqual=function notEqual(actual,expected,message){
if(actual==expected){
fail(actual,expected,message,'!=',assert.notEqual);
}
};




assert.deepEqual=function deepEqual(actual,expected,message){
if(!_deepEqual(actual,expected,false)){
fail(actual,expected,message,'deepEqual',assert.deepEqual);
}
};

assert.deepStrictEqual=function deepStrictEqual(actual,expected,message){
if(!_deepEqual(actual,expected,true)){
fail(actual,expected,message,'deepStrictEqual',assert.deepStrictEqual);
}
};

function _deepEqual(actual,expected,strict,memos){

if(actual===expected){
return true;
}else if(isBuffer(actual)&&isBuffer(expected)){
return compare(actual,expected)===0;



}else if(util.isDate(actual)&&util.isDate(expected)){
return actual.getTime()===expected.getTime();




}else if(util.isRegExp(actual)&&util.isRegExp(expected)){
return actual.source===expected.source&&
actual.global===expected.global&&
actual.multiline===expected.multiline&&
actual.lastIndex===expected.lastIndex&&
actual.ignoreCase===expected.ignoreCase;



}else if((actual===null||typeof actual!=='object')&&(
expected===null||typeof expected!=='object')){
return strict?actual===expected:actual==expected;







}else if(isView(actual)&&isView(expected)&&
pToString(actual)===pToString(expected)&&
!(actual instanceof Float32Array||
actual instanceof Float64Array)){
return compare(new Uint8Array(actual.buffer),
new Uint8Array(expected.buffer))===0;







}else if(isBuffer(actual)!==isBuffer(expected)){
return false;
}else{
memos=memos||{actual:[],expected:[]};

var actualIndex=memos.actual.indexOf(actual);
if(actualIndex!==-1){
if(actualIndex===memos.expected.indexOf(expected)){
return true;
}
}

memos.actual.push(actual);
memos.expected.push(expected);

return objEquiv(actual,expected,strict,memos);
}
}

function isArguments(object){
return Object.prototype.toString.call(object)=='[object Arguments]';
}

function objEquiv(a,b,strict,actualVisitedObjects){
if(a===null||a===undefined||b===null||b===undefined)
return false;

if(util.isPrimitive(a)||util.isPrimitive(b))
return a===b;
if(strict&&Object.getPrototypeOf(a)!==Object.getPrototypeOf(b))
return false;
var aIsArgs=isArguments(a);
var bIsArgs=isArguments(b);
if(aIsArgs&&!bIsArgs||!aIsArgs&&bIsArgs)
return false;
if(aIsArgs){
a=pSlice.call(a);
b=pSlice.call(b);
return _deepEqual(a,b,strict);
}
var ka=objectKeys(a);
var kb=objectKeys(b);
var key,i;


if(ka.length!==kb.length)
return false;

ka.sort();
kb.sort();

for(i=ka.length-1;i>=0;i--){
if(ka[i]!==kb[i])
return false;
}


for(i=ka.length-1;i>=0;i--){
key=ka[i];
if(!_deepEqual(a[key],b[key],strict,actualVisitedObjects))
return false;
}
return true;
}




assert.notDeepEqual=function notDeepEqual(actual,expected,message){
if(_deepEqual(actual,expected,false)){
fail(actual,expected,message,'notDeepEqual',assert.notDeepEqual);
}
};

assert.notDeepStrictEqual=notDeepStrictEqual;
function notDeepStrictEqual(actual,expected,message){
if(_deepEqual(actual,expected,true)){
fail(actual,expected,message,'notDeepStrictEqual',notDeepStrictEqual);
}
}





assert.strictEqual=function strictEqual(actual,expected,message){
if(actual!==expected){
fail(actual,expected,message,'===',assert.strictEqual);
}
};




assert.notStrictEqual=function notStrictEqual(actual,expected,message){
if(actual===expected){
fail(actual,expected,message,'!==',assert.notStrictEqual);
}
};

function expectedException(actual,expected){
if(!actual||!expected){
return false;
}

if(Object.prototype.toString.call(expected)=='[object RegExp]'){
return expected.test(actual);
}

try{
if(actual instanceof expected){
return true;
}
}catch(e){

}

if(Error.isPrototypeOf(expected)){
return false;
}

return expected.call({},actual)===true;
}

function _tryBlock(block){
var error;
try{
block();
}catch(e){
error=e;
}
return error;
}

function _throws(shouldThrow,block,expected,message){
var actual;

if(typeof block!=='function'){
throw new TypeError('"block" argument must be a function');
}

if(typeof expected==='string'){
message=expected;
expected=null;
}

actual=_tryBlock(block);

message=(expected&&expected.name?' ('+expected.name+').':'.')+(
message?' '+message:'.');

if(shouldThrow&&!actual){
fail(actual,expected,'Missing expected exception'+message);
}

var userProvidedMessage=typeof message==='string';
var isUnwantedException=!shouldThrow&&util.isError(actual);
var isUnexpectedException=!shouldThrow&&actual&&!expected;

if(isUnwantedException&&
userProvidedMessage&&
expectedException(actual,expected)||
isUnexpectedException){
fail(actual,expected,'Got unwanted exception'+message);
}

if(shouldThrow&&actual&&expected&&
!expectedException(actual,expected)||!shouldThrow&&actual){
throw actual;
}
}




assert.throws=function(block,error,message){
_throws(true,block,error,message);
};


assert.doesNotThrow=function(block,error,message){
_throws(false,block,error,message);
};

assert.ifError=function(err){if(err)throw err;};

var objectKeys=Object.keys||function(obj){
var keys=[];
for(var key in obj){
if(hasOwn.call(obj,key))keys.push(key);
}
return keys;
};

}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"util/":146}],103:[function(require,module,exports){
'use strict';

exports.byteLength=byteLength;
exports.toByteArray=toByteArray;
exports.fromByteArray=fromByteArray;

var lookup=[];
var revLookup=[];
var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;

var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i=0,len=code.length;i<len;++i){
lookup[i]=code[i];
revLookup[code.charCodeAt(i)]=i;
}



revLookup['-'.charCodeAt(0)]=62;
revLookup['_'.charCodeAt(0)]=63;

function getLens(b64){
var len=b64.length;

if(len%4>0){
throw new Error('Invalid string. Length must be a multiple of 4');
}



var validLen=b64.indexOf('=');
if(validLen===-1)validLen=len;

var placeHoldersLen=validLen===len?
0:
4-validLen%4;

return[validLen,placeHoldersLen];
}


function byteLength(b64){
var lens=getLens(b64);
var validLen=lens[0];
var placeHoldersLen=lens[1];
return(validLen+placeHoldersLen)*3/4-placeHoldersLen;
}

function _byteLength(b64,validLen,placeHoldersLen){
return(validLen+placeHoldersLen)*3/4-placeHoldersLen;
}

function toByteArray(b64){
var tmp;
var lens=getLens(b64);
var validLen=lens[0];
var placeHoldersLen=lens[1];

var arr=new Arr(_byteLength(b64,validLen,placeHoldersLen));

var curByte=0;


var len=placeHoldersLen>0?
validLen-4:
validLen;

for(var i=0;i<len;i+=4){
tmp=
revLookup[b64.charCodeAt(i)]<<18|
revLookup[b64.charCodeAt(i+1)]<<12|
revLookup[b64.charCodeAt(i+2)]<<6|
revLookup[b64.charCodeAt(i+3)];
arr[curByte++]=tmp>>16&0xFF;
arr[curByte++]=tmp>>8&0xFF;
arr[curByte++]=tmp&0xFF;
}

if(placeHoldersLen===2){
tmp=
revLookup[b64.charCodeAt(i)]<<2|
revLookup[b64.charCodeAt(i+1)]>>4;
arr[curByte++]=tmp&0xFF;
}

if(placeHoldersLen===1){
tmp=
revLookup[b64.charCodeAt(i)]<<10|
revLookup[b64.charCodeAt(i+1)]<<4|
revLookup[b64.charCodeAt(i+2)]>>2;
arr[curByte++]=tmp>>8&0xFF;
arr[curByte++]=tmp&0xFF;
}

return arr;
}

function tripletToBase64(num){
return lookup[num>>18&0x3F]+
lookup[num>>12&0x3F]+
lookup[num>>6&0x3F]+
lookup[num&0x3F];
}

function encodeChunk(uint8,start,end){
var tmp;
var output=[];
for(var i=start;i<end;i+=3){
tmp=
(uint8[i]<<16&0xFF0000)+(
uint8[i+1]<<8&0xFF00)+(
uint8[i+2]&0xFF);
output.push(tripletToBase64(tmp));
}
return output.join('');
}

function fromByteArray(uint8){
var tmp;
var len=uint8.length;
var extraBytes=len%3;
var parts=[];
var maxChunkLength=16383;


for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){
parts.push(encodeChunk(
uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));

}


if(extraBytes===1){
tmp=uint8[len-1];
parts.push(
lookup[tmp>>2]+
lookup[tmp<<4&0x3F]+
'==');

}else if(extraBytes===2){
tmp=(uint8[len-2]<<8)+uint8[len-1];
parts.push(
lookup[tmp>>10]+
lookup[tmp>>4&0x3F]+
lookup[tmp<<2&0x3F]+
'=');

}

return parts.join('');
}

},{}],104:[function(require,module,exports){

},{}],105:[function(require,module,exports){
(function(process,Buffer){
'use strict';


var assert=require('assert');

var Zstream=require('pako/lib/zlib/zstream');
var zlib_deflate=require('pako/lib/zlib/deflate.js');
var zlib_inflate=require('pako/lib/zlib/inflate.js');
var constants=require('pako/lib/zlib/constants');

for(var key in constants){
exports[key]=constants[key];
}


exports.NONE=0;
exports.DEFLATE=1;
exports.INFLATE=2;
exports.GZIP=3;
exports.GUNZIP=4;
exports.DEFLATERAW=5;
exports.INFLATERAW=6;
exports.UNZIP=7;

var GZIP_HEADER_ID1=0x1f;
var GZIP_HEADER_ID2=0x8b;




function Zlib(mode){
if(typeof mode!=='number'||mode<exports.DEFLATE||mode>exports.UNZIP){
throw new TypeError('Bad argument');
}

this.dictionary=null;
this.err=0;
this.flush=0;
this.init_done=false;
this.level=0;
this.memLevel=0;
this.mode=mode;
this.strategy=0;
this.windowBits=0;
this.write_in_progress=false;
this.pending_close=false;
this.gzip_id_bytes_read=0;
}

Zlib.prototype.close=function(){
if(this.write_in_progress){
this.pending_close=true;
return;
}

this.pending_close=false;

assert(this.init_done,'close before init');
assert(this.mode<=exports.UNZIP);

if(this.mode===exports.DEFLATE||this.mode===exports.GZIP||this.mode===exports.DEFLATERAW){
zlib_deflate.deflateEnd(this.strm);
}else if(this.mode===exports.INFLATE||this.mode===exports.GUNZIP||this.mode===exports.INFLATERAW||this.mode===exports.UNZIP){
zlib_inflate.inflateEnd(this.strm);
}

this.mode=exports.NONE;

this.dictionary=null;
};

Zlib.prototype.write=function(flush,input,in_off,in_len,out,out_off,out_len){
return this._write(true,flush,input,in_off,in_len,out,out_off,out_len);
};

Zlib.prototype.writeSync=function(flush,input,in_off,in_len,out,out_off,out_len){
return this._write(false,flush,input,in_off,in_len,out,out_off,out_len);
};

Zlib.prototype._write=function(async,flush,input,in_off,in_len,out,out_off,out_len){
assert.equal(arguments.length,8);

assert(this.init_done,'write before init');
assert(this.mode!==exports.NONE,'already finalized');
assert.equal(false,this.write_in_progress,'write already in progress');
assert.equal(false,this.pending_close,'close is pending');

this.write_in_progress=true;

assert.equal(false,flush===undefined,'must provide flush value');

this.write_in_progress=true;

if(flush!==exports.Z_NO_FLUSH&&flush!==exports.Z_PARTIAL_FLUSH&&flush!==exports.Z_SYNC_FLUSH&&flush!==exports.Z_FULL_FLUSH&&flush!==exports.Z_FINISH&&flush!==exports.Z_BLOCK){
throw new Error('Invalid flush value');
}

if(input==null){
input=Buffer.alloc(0);
in_len=0;
in_off=0;
}

this.strm.avail_in=in_len;
this.strm.input=input;
this.strm.next_in=in_off;
this.strm.avail_out=out_len;
this.strm.output=out;
this.strm.next_out=out_off;
this.flush=flush;

if(!async){

this._process();

if(this._checkError()){
return this._afterSync();
}
return;
}


var self=this;
process.nextTick(function(){
self._process();
self._after();
});

return this;
};

Zlib.prototype._afterSync=function(){
var avail_out=this.strm.avail_out;
var avail_in=this.strm.avail_in;

this.write_in_progress=false;

return[avail_in,avail_out];
};

Zlib.prototype._process=function(){
var next_expected_header_byte=null;




switch(this.mode){
case exports.DEFLATE:
case exports.GZIP:
case exports.DEFLATERAW:
this.err=zlib_deflate.deflate(this.strm,this.flush);
break;
case exports.UNZIP:
if(this.strm.avail_in>0){
next_expected_header_byte=this.strm.next_in;
}

switch(this.gzip_id_bytes_read){
case 0:
if(next_expected_header_byte===null){
break;
}

if(this.strm.input[next_expected_header_byte]===GZIP_HEADER_ID1){
this.gzip_id_bytes_read=1;
next_expected_header_byte++;

if(this.strm.avail_in===1){

break;
}
}else{
this.mode=exports.INFLATE;
break;
}


case 1:
if(next_expected_header_byte===null){
break;
}

if(this.strm.input[next_expected_header_byte]===GZIP_HEADER_ID2){
this.gzip_id_bytes_read=2;
this.mode=exports.GUNZIP;
}else{


this.mode=exports.INFLATE;
}

break;
default:
throw new Error('invalid number of gzip magic number bytes read');}



case exports.INFLATE:
case exports.GUNZIP:
case exports.INFLATERAW:
this.err=zlib_inflate.inflate(this.strm,this.flush);


if(this.err===exports.Z_NEED_DICT&&this.dictionary){

this.err=zlib_inflate.inflateSetDictionary(this.strm,this.dictionary);
if(this.err===exports.Z_OK){

this.err=zlib_inflate.inflate(this.strm,this.flush);
}else if(this.err===exports.Z_DATA_ERROR){



this.err=exports.Z_NEED_DICT;
}
}
while(this.strm.avail_in>0&&this.mode===exports.GUNZIP&&this.err===exports.Z_STREAM_END&&this.strm.next_in[0]!==0x00){





this.reset();
this.err=zlib_inflate.inflate(this.strm,this.flush);
}
break;
default:
throw new Error('Unknown mode '+this.mode);}

};

Zlib.prototype._checkError=function(){

switch(this.err){
case exports.Z_OK:
case exports.Z_BUF_ERROR:
if(this.strm.avail_out!==0&&this.flush===exports.Z_FINISH){
this._error('unexpected end of file');
return false;
}
break;
case exports.Z_STREAM_END:

break;
case exports.Z_NEED_DICT:
if(this.dictionary==null){
this._error('Missing dictionary');
}else{
this._error('Bad dictionary');
}
return false;
default:

this._error('Zlib error');
return false;}


return true;
};

Zlib.prototype._after=function(){
if(!this._checkError()){
return;
}

var avail_out=this.strm.avail_out;
var avail_in=this.strm.avail_in;

this.write_in_progress=false;


this.callback(avail_in,avail_out);

if(this.pending_close){
this.close();
}
};

Zlib.prototype._error=function(message){
if(this.strm.msg){
message=this.strm.msg;
}
this.onerror(message,this.err);


this.write_in_progress=false;
if(this.pending_close){
this.close();
}
};

Zlib.prototype.init=function(windowBits,level,memLevel,strategy,dictionary){
assert(arguments.length===4||arguments.length===5,'init(windowBits, level, memLevel, strategy, [dictionary])');

assert(windowBits>=8&&windowBits<=15,'invalid windowBits');
assert(level>=-1&&level<=9,'invalid compression level');

assert(memLevel>=1&&memLevel<=9,'invalid memlevel');

assert(strategy===exports.Z_FILTERED||strategy===exports.Z_HUFFMAN_ONLY||strategy===exports.Z_RLE||strategy===exports.Z_FIXED||strategy===exports.Z_DEFAULT_STRATEGY,'invalid strategy');

this._init(level,windowBits,memLevel,strategy,dictionary);
this._setDictionary();
};

Zlib.prototype.params=function(){
throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset=function(){
this._reset();
this._setDictionary();
};

Zlib.prototype._init=function(level,windowBits,memLevel,strategy,dictionary){
this.level=level;
this.windowBits=windowBits;
this.memLevel=memLevel;
this.strategy=strategy;

this.flush=exports.Z_NO_FLUSH;

this.err=exports.Z_OK;

if(this.mode===exports.GZIP||this.mode===exports.GUNZIP){
this.windowBits+=16;
}

if(this.mode===exports.UNZIP){
this.windowBits+=32;
}

if(this.mode===exports.DEFLATERAW||this.mode===exports.INFLATERAW){
this.windowBits=-1*this.windowBits;
}

this.strm=new Zstream();

switch(this.mode){
case exports.DEFLATE:
case exports.GZIP:
case exports.DEFLATERAW:
this.err=zlib_deflate.deflateInit2(this.strm,this.level,exports.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);
break;
case exports.INFLATE:
case exports.GUNZIP:
case exports.INFLATERAW:
case exports.UNZIP:
this.err=zlib_inflate.inflateInit2(this.strm,this.windowBits);
break;
default:
throw new Error('Unknown mode '+this.mode);}


if(this.err!==exports.Z_OK){
this._error('Init error');
}

this.dictionary=dictionary;

this.write_in_progress=false;
this.init_done=true;
};

Zlib.prototype._setDictionary=function(){
if(this.dictionary==null){
return;
}

this.err=exports.Z_OK;

switch(this.mode){
case exports.DEFLATE:
case exports.DEFLATERAW:
this.err=zlib_deflate.deflateSetDictionary(this.strm,this.dictionary);
break;
default:
break;}


if(this.err!==exports.Z_OK){
this._error('Failed to set dictionary');
}
};

Zlib.prototype._reset=function(){
this.err=exports.Z_OK;

switch(this.mode){
case exports.DEFLATE:
case exports.DEFLATERAW:
case exports.GZIP:
this.err=zlib_deflate.deflateReset(this.strm);
break;
case exports.INFLATE:
case exports.INFLATERAW:
case exports.GUNZIP:
this.err=zlib_inflate.inflateReset(this.strm);
break;
default:
break;}


if(this.err!==exports.Z_OK){
this._error('Failed to reset stream');
}
};

exports.Zlib=Zlib;
}).call(this,require('_process'),require("buffer").Buffer);
},{"_process":126,"assert":102,"buffer":109,"pako/lib/zlib/constants":118,"pako/lib/zlib/deflate.js":120,"pako/lib/zlib/inflate.js":107,"pako/lib/zlib/zstream":123}],106:[function(require,module,exports){
(function(process){
'use strict';

var Buffer=require('buffer').Buffer;
var Transform=require('stream').Transform;
var binding=require('./binding');
var util=require('util');
var assert=require('assert').ok;
var kMaxLength=require('buffer').kMaxLength;
var kRangeErrorMessage='Cannot create final Buffer. It would be larger '+'than 0x'+kMaxLength.toString(16)+' bytes';



binding.Z_MIN_WINDOWBITS=8;
binding.Z_MAX_WINDOWBITS=15;
binding.Z_DEFAULT_WINDOWBITS=15;




binding.Z_MIN_CHUNK=64;
binding.Z_MAX_CHUNK=Infinity;
binding.Z_DEFAULT_CHUNK=16*1024;

binding.Z_MIN_MEMLEVEL=1;
binding.Z_MAX_MEMLEVEL=9;
binding.Z_DEFAULT_MEMLEVEL=8;

binding.Z_MIN_LEVEL=-1;
binding.Z_MAX_LEVEL=9;
binding.Z_DEFAULT_LEVEL=binding.Z_DEFAULT_COMPRESSION;


var bkeys=Object.keys(binding);
for(var bk=0;bk<bkeys.length;bk++){
var bkey=bkeys[bk];
if(bkey.match(/^Z/)){
Object.defineProperty(exports,bkey,{
enumerable:true,value:binding[bkey],writable:false});

}
}


var codes={
Z_OK:binding.Z_OK,
Z_STREAM_END:binding.Z_STREAM_END,
Z_NEED_DICT:binding.Z_NEED_DICT,
Z_ERRNO:binding.Z_ERRNO,
Z_STREAM_ERROR:binding.Z_STREAM_ERROR,
Z_DATA_ERROR:binding.Z_DATA_ERROR,
Z_MEM_ERROR:binding.Z_MEM_ERROR,
Z_BUF_ERROR:binding.Z_BUF_ERROR,
Z_VERSION_ERROR:binding.Z_VERSION_ERROR};


var ckeys=Object.keys(codes);
for(var ck=0;ck<ckeys.length;ck++){
var ckey=ckeys[ck];
codes[codes[ckey]]=ckey;
}

Object.defineProperty(exports,'codes',{
enumerable:true,value:Object.freeze(codes),writable:false});


exports.Deflate=Deflate;
exports.Inflate=Inflate;
exports.Gzip=Gzip;
exports.Gunzip=Gunzip;
exports.DeflateRaw=DeflateRaw;
exports.InflateRaw=InflateRaw;
exports.Unzip=Unzip;

exports.createDeflate=function(o){
return new Deflate(o);
};

exports.createInflate=function(o){
return new Inflate(o);
};

exports.createDeflateRaw=function(o){
return new DeflateRaw(o);
};

exports.createInflateRaw=function(o){
return new InflateRaw(o);
};

exports.createGzip=function(o){
return new Gzip(o);
};

exports.createGunzip=function(o){
return new Gunzip(o);
};

exports.createUnzip=function(o){
return new Unzip(o);
};



exports.deflate=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new Deflate(opts),buffer,callback);
};

exports.deflateSync=function(buffer,opts){
return zlibBufferSync(new Deflate(opts),buffer);
};

exports.gzip=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new Gzip(opts),buffer,callback);
};

exports.gzipSync=function(buffer,opts){
return zlibBufferSync(new Gzip(opts),buffer);
};

exports.deflateRaw=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new DeflateRaw(opts),buffer,callback);
};

exports.deflateRawSync=function(buffer,opts){
return zlibBufferSync(new DeflateRaw(opts),buffer);
};

exports.unzip=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new Unzip(opts),buffer,callback);
};

exports.unzipSync=function(buffer,opts){
return zlibBufferSync(new Unzip(opts),buffer);
};

exports.inflate=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new Inflate(opts),buffer,callback);
};

exports.inflateSync=function(buffer,opts){
return zlibBufferSync(new Inflate(opts),buffer);
};

exports.gunzip=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new Gunzip(opts),buffer,callback);
};

exports.gunzipSync=function(buffer,opts){
return zlibBufferSync(new Gunzip(opts),buffer);
};

exports.inflateRaw=function(buffer,opts,callback){
if(typeof opts==='function'){
callback=opts;
opts={};
}
return zlibBuffer(new InflateRaw(opts),buffer,callback);
};

exports.inflateRawSync=function(buffer,opts){
return zlibBufferSync(new InflateRaw(opts),buffer);
};

function zlibBuffer(engine,buffer,callback){
var buffers=[];
var nread=0;

engine.on('error',onError);
engine.on('end',onEnd);

engine.end(buffer);
flow();

function flow(){
var chunk;
while(null!==(chunk=engine.read())){
buffers.push(chunk);
nread+=chunk.length;
}
engine.once('readable',flow);
}

function onError(err){
engine.removeListener('end',onEnd);
engine.removeListener('readable',flow);
callback(err);
}

function onEnd(){
var buf;
var err=null;

if(nread>=kMaxLength){
err=new RangeError(kRangeErrorMessage);
}else{
buf=Buffer.concat(buffers,nread);
}

buffers=[];
engine.close();
callback(err,buf);
}
}

function zlibBufferSync(engine,buffer){
if(typeof buffer==='string')buffer=Buffer.from(buffer);

if(!Buffer.isBuffer(buffer))throw new TypeError('Not a string or buffer');

var flushFlag=engine._finishFlushFlag;

return engine._processChunk(buffer,flushFlag);
}



function Deflate(opts){
if(!(this instanceof Deflate))return new Deflate(opts);
Zlib.call(this,opts,binding.DEFLATE);
}

function Inflate(opts){
if(!(this instanceof Inflate))return new Inflate(opts);
Zlib.call(this,opts,binding.INFLATE);
}


function Gzip(opts){
if(!(this instanceof Gzip))return new Gzip(opts);
Zlib.call(this,opts,binding.GZIP);
}

function Gunzip(opts){
if(!(this instanceof Gunzip))return new Gunzip(opts);
Zlib.call(this,opts,binding.GUNZIP);
}


function DeflateRaw(opts){
if(!(this instanceof DeflateRaw))return new DeflateRaw(opts);
Zlib.call(this,opts,binding.DEFLATERAW);
}

function InflateRaw(opts){
if(!(this instanceof InflateRaw))return new InflateRaw(opts);
Zlib.call(this,opts,binding.INFLATERAW);
}


function Unzip(opts){
if(!(this instanceof Unzip))return new Unzip(opts);
Zlib.call(this,opts,binding.UNZIP);
}

function isValidFlushFlag(flag){
return flag===binding.Z_NO_FLUSH||flag===binding.Z_PARTIAL_FLUSH||flag===binding.Z_SYNC_FLUSH||flag===binding.Z_FULL_FLUSH||flag===binding.Z_FINISH||flag===binding.Z_BLOCK;
}






function Zlib(opts,mode){
var _this=this;

this._opts=opts=opts||{};
this._chunkSize=opts.chunkSize||exports.Z_DEFAULT_CHUNK;

Transform.call(this,opts);

if(opts.flush&&!isValidFlushFlag(opts.flush)){
throw new Error('Invalid flush flag: '+opts.flush);
}
if(opts.finishFlush&&!isValidFlushFlag(opts.finishFlush)){
throw new Error('Invalid flush flag: '+opts.finishFlush);
}

this._flushFlag=opts.flush||binding.Z_NO_FLUSH;
this._finishFlushFlag=typeof opts.finishFlush!=='undefined'?opts.finishFlush:binding.Z_FINISH;

if(opts.chunkSize){
if(opts.chunkSize<exports.Z_MIN_CHUNK||opts.chunkSize>exports.Z_MAX_CHUNK){
throw new Error('Invalid chunk size: '+opts.chunkSize);
}
}

if(opts.windowBits){
if(opts.windowBits<exports.Z_MIN_WINDOWBITS||opts.windowBits>exports.Z_MAX_WINDOWBITS){
throw new Error('Invalid windowBits: '+opts.windowBits);
}
}

if(opts.level){
if(opts.level<exports.Z_MIN_LEVEL||opts.level>exports.Z_MAX_LEVEL){
throw new Error('Invalid compression level: '+opts.level);
}
}

if(opts.memLevel){
if(opts.memLevel<exports.Z_MIN_MEMLEVEL||opts.memLevel>exports.Z_MAX_MEMLEVEL){
throw new Error('Invalid memLevel: '+opts.memLevel);
}
}

if(opts.strategy){
if(opts.strategy!=exports.Z_FILTERED&&opts.strategy!=exports.Z_HUFFMAN_ONLY&&opts.strategy!=exports.Z_RLE&&opts.strategy!=exports.Z_FIXED&&opts.strategy!=exports.Z_DEFAULT_STRATEGY){
throw new Error('Invalid strategy: '+opts.strategy);
}
}

if(opts.dictionary){
if(!Buffer.isBuffer(opts.dictionary)){
throw new Error('Invalid dictionary: it should be a Buffer instance');
}
}

this._handle=new binding.Zlib(mode);

var self=this;
this._hadError=false;
this._handle.onerror=function(message,errno){


_close(self);
self._hadError=true;

var error=new Error(message);
error.errno=errno;
error.code=exports.codes[errno];
self.emit('error',error);
};

var level=exports.Z_DEFAULT_COMPRESSION;
if(typeof opts.level==='number')level=opts.level;

var strategy=exports.Z_DEFAULT_STRATEGY;
if(typeof opts.strategy==='number')strategy=opts.strategy;

this._handle.init(opts.windowBits||exports.Z_DEFAULT_WINDOWBITS,level,opts.memLevel||exports.Z_DEFAULT_MEMLEVEL,strategy,opts.dictionary);

this._buffer=Buffer.allocUnsafe(this._chunkSize);
this._offset=0;
this._level=level;
this._strategy=strategy;

this.once('end',this.close);

Object.defineProperty(this,'_closed',{
get:function(){
return!_this._handle;
},
configurable:true,
enumerable:true});

}

util.inherits(Zlib,Transform);

Zlib.prototype.params=function(level,strategy,callback){
if(level<exports.Z_MIN_LEVEL||level>exports.Z_MAX_LEVEL){
throw new RangeError('Invalid compression level: '+level);
}
if(strategy!=exports.Z_FILTERED&&strategy!=exports.Z_HUFFMAN_ONLY&&strategy!=exports.Z_RLE&&strategy!=exports.Z_FIXED&&strategy!=exports.Z_DEFAULT_STRATEGY){
throw new TypeError('Invalid strategy: '+strategy);
}

if(this._level!==level||this._strategy!==strategy){
var self=this;
this.flush(binding.Z_SYNC_FLUSH,function(){
assert(self._handle,'zlib binding closed');
self._handle.params(level,strategy);
if(!self._hadError){
self._level=level;
self._strategy=strategy;
if(callback)callback();
}
});
}else{
process.nextTick(callback);
}
};

Zlib.prototype.reset=function(){
assert(this._handle,'zlib binding closed');
return this._handle.reset();
};



Zlib.prototype._flush=function(callback){
this._transform(Buffer.alloc(0),'',callback);
};

Zlib.prototype.flush=function(kind,callback){
var _this2=this;

var ws=this._writableState;

if(typeof kind==='function'||kind===undefined&&!callback){
callback=kind;
kind=binding.Z_FULL_FLUSH;
}

if(ws.ended){
if(callback)process.nextTick(callback);
}else if(ws.ending){
if(callback)this.once('end',callback);
}else if(ws.needDrain){
if(callback){
this.once('drain',function(){
return _this2.flush(kind,callback);
});
}
}else{
this._flushFlag=kind;
this.write(Buffer.alloc(0),'',callback);
}
};

Zlib.prototype.close=function(callback){
_close(this,callback);
process.nextTick(emitCloseNT,this);
};

function _close(engine,callback){
if(callback)process.nextTick(callback);


if(!engine._handle)return;

engine._handle.close();
engine._handle=null;
}

function emitCloseNT(self){
self.emit('close');
}

Zlib.prototype._transform=function(chunk,encoding,cb){
var flushFlag;
var ws=this._writableState;
var ending=ws.ending||ws.ended;
var last=ending&&(!chunk||ws.length===chunk.length);

if(chunk!==null&&!Buffer.isBuffer(chunk))return cb(new Error('invalid input'));

if(!this._handle)return cb(new Error('zlib binding closed'));






if(last)flushFlag=this._finishFlushFlag;else{
flushFlag=this._flushFlag;


if(chunk.length>=ws.length){
this._flushFlag=this._opts.flush||binding.Z_NO_FLUSH;
}
}

this._processChunk(chunk,flushFlag,cb);
};

Zlib.prototype._processChunk=function(chunk,flushFlag,cb){
var availInBefore=chunk&&chunk.length;
var availOutBefore=this._chunkSize-this._offset;
var inOff=0;

var self=this;

var async=typeof cb==='function';

if(!async){
var buffers=[];
var nread=0;

var error;
this.on('error',function(er){
error=er;
});

assert(this._handle,'zlib binding closed');
do{
var res=this._handle.writeSync(flushFlag,chunk,
inOff,
availInBefore,
this._buffer,
this._offset,
availOutBefore);
}while(!this._hadError&&callback(res[0],res[1]));

if(this._hadError){
throw error;
}

if(nread>=kMaxLength){
_close(this);
throw new RangeError(kRangeErrorMessage);
}

var buf=Buffer.concat(buffers,nread);
_close(this);

return buf;
}

assert(this._handle,'zlib binding closed');
var req=this._handle.write(flushFlag,chunk,
inOff,
availInBefore,
this._buffer,
this._offset,
availOutBefore);

req.buffer=chunk;
req.callback=callback;

function callback(availInAfter,availOutAfter){





if(this){
this.buffer=null;
this.callback=null;
}

if(self._hadError)return;

var have=availOutBefore-availOutAfter;
assert(have>=0,'have should not go down');

if(have>0){
var out=self._buffer.slice(self._offset,self._offset+have);
self._offset+=have;

if(async){
self.push(out);
}else{
buffers.push(out);
nread+=out.length;
}
}


if(availOutAfter===0||self._offset>=self._chunkSize){
availOutBefore=self._chunkSize;
self._offset=0;
self._buffer=Buffer.allocUnsafe(self._chunkSize);
}

if(availOutAfter===0){




inOff+=availInBefore-availInAfter;
availInBefore=availInAfter;

if(!async)return true;

var newReq=self._handle.write(flushFlag,chunk,inOff,availInBefore,self._buffer,self._offset,self._chunkSize);
newReq.callback=callback;
newReq.buffer=chunk;
return;
}

if(!async)return false;


cb();
}
};

util.inherits(Deflate,Zlib);
util.inherits(Inflate,Zlib);
util.inherits(Gzip,Zlib);
util.inherits(Gunzip,Zlib);
util.inherits(DeflateRaw,Zlib);
util.inherits(InflateRaw,Zlib);
util.inherits(Unzip,Zlib);
}).call(this,require('_process'));
},{"./binding":105,"_process":126,"assert":102,"buffer":109,"stream":141,"util":146}],107:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments);
},{"dup":104}],108:[function(require,module,exports){
(function(global){
'use strict';

var buffer=require('buffer');
var Buffer=buffer.Buffer;
var SlowBuffer=buffer.SlowBuffer;
var MAX_LEN=buffer.kMaxLength||2147483647;
exports.alloc=function alloc(size,fill,encoding){
if(typeof Buffer.alloc==='function'){
return Buffer.alloc(size,fill,encoding);
}
if(typeof encoding==='number'){
throw new TypeError('encoding must not be number');
}
if(typeof size!=='number'){
throw new TypeError('size must be a number');
}
if(size>MAX_LEN){
throw new RangeError('size is too large');
}
var enc=encoding;
var _fill=fill;
if(_fill===undefined){
enc=undefined;
_fill=0;
}
var buf=new Buffer(size);
if(typeof _fill==='string'){
var fillBuf=new Buffer(_fill,enc);
var flen=fillBuf.length;
var i=-1;
while(++i<size){
buf[i]=fillBuf[i%flen];
}
}else{
buf.fill(_fill);
}
return buf;
};
exports.allocUnsafe=function allocUnsafe(size){
if(typeof Buffer.allocUnsafe==='function'){
return Buffer.allocUnsafe(size);
}
if(typeof size!=='number'){
throw new TypeError('size must be a number');
}
if(size>MAX_LEN){
throw new RangeError('size is too large');
}
return new Buffer(size);
};
exports.from=function from(value,encodingOrOffset,length){
if(typeof Buffer.from==='function'&&(!global.Uint8Array||Uint8Array.from!==Buffer.from)){
return Buffer.from(value,encodingOrOffset,length);
}
if(typeof value==='number'){
throw new TypeError('"value" argument must not be a number');
}
if(typeof value==='string'){
return new Buffer(value,encodingOrOffset);
}
if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){
var offset=encodingOrOffset;
if(arguments.length===1){
return new Buffer(value);
}
if(typeof offset==='undefined'){
offset=0;
}
var len=length;
if(typeof len==='undefined'){
len=value.byteLength-offset;
}
if(offset>=value.byteLength){
throw new RangeError('\'offset\' is out of bounds');
}
if(len>value.byteLength-offset){
throw new RangeError('\'length\' is out of bounds');
}
return new Buffer(value.slice(offset,offset+len));
}
if(Buffer.isBuffer(value)){
var out=new Buffer(value.length);
value.copy(out,0,0,value.length);
return out;
}
if(value){
if(Array.isArray(value)||typeof ArrayBuffer!=='undefined'&&value.buffer instanceof ArrayBuffer||'length'in value){
return new Buffer(value);
}
if(value.type==='Buffer'&&Array.isArray(value.data)){
return new Buffer(value.data);
}
}

throw new TypeError('First argument must be a string, Buffer, '+'ArrayBuffer, Array, or array-like object.');
};
exports.allocUnsafeSlow=function allocUnsafeSlow(size){
if(typeof Buffer.allocUnsafeSlow==='function'){
return Buffer.allocUnsafeSlow(size);
}
if(typeof size!=='number'){
throw new TypeError('size must be a number');
}
if(size>=MAX_LEN){
throw new RangeError('size is too large');
}
return new SlowBuffer(size);
};

}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"buffer":109}],109:[function(require,module,exports){








'use strict';

var base64=require('base64-js');
var ieee754=require('ieee754');

exports.Buffer=Buffer;
exports.SlowBuffer=SlowBuffer;
exports.INSPECT_MAX_BYTES=50;

var K_MAX_LENGTH=0x7fffffff;
exports.kMaxLength=K_MAX_LENGTH;















Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();

if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!=='undefined'&&
typeof console.error==='function'){
console.error(
'This browser lacks typed array (Uint8Array) support which is required by '+
'`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');

}

function typedArraySupport(){

try{
var arr=new Uint8Array(1);
arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42;}};
return arr.foo()===42;
}catch(e){
return false;
}
}

Object.defineProperty(Buffer.prototype,'parent',{
get:function(){
if(!(this instanceof Buffer)){
return undefined;
}
return this.buffer;
}});


Object.defineProperty(Buffer.prototype,'offset',{
get:function(){
if(!(this instanceof Buffer)){
return undefined;
}
return this.byteOffset;
}});


function createBuffer(length){
if(length>K_MAX_LENGTH){
throw new RangeError('Invalid typed array length');
}

var buf=new Uint8Array(length);
buf.__proto__=Buffer.prototype;
return buf;
}











function Buffer(arg,encodingOrOffset,length){

if(typeof arg==='number'){
if(typeof encodingOrOffset==='string'){
throw new Error(
'If encoding is specified then the first argument must be a string');

}
return allocUnsafe(arg);
}
return from(arg,encodingOrOffset,length);
}


if(typeof Symbol!=='undefined'&&Symbol.species&&
Buffer[Symbol.species]===Buffer){
Object.defineProperty(Buffer,Symbol.species,{
value:null,
configurable:true,
enumerable:false,
writable:false});

}

Buffer.poolSize=8192;

function from(value,encodingOrOffset,length){
if(typeof value==='number'){
throw new TypeError('"value" argument must not be a number');
}

if(isArrayBuffer(value)||value&&isArrayBuffer(value.buffer)){
return fromArrayBuffer(value,encodingOrOffset,length);
}

if(typeof value==='string'){
return fromString(value,encodingOrOffset);
}

return fromObject(value);
}









Buffer.from=function(value,encodingOrOffset,length){
return from(value,encodingOrOffset,length);
};



Buffer.prototype.__proto__=Uint8Array.prototype;
Buffer.__proto__=Uint8Array;

function assertSize(size){
if(typeof size!=='number'){
throw new TypeError('"size" argument must be of type number');
}else if(size<0){
throw new RangeError('"size" argument must not be negative');
}
}

function alloc(size,fill,encoding){
assertSize(size);
if(size<=0){
return createBuffer(size);
}
if(fill!==undefined){



return typeof encoding==='string'?
createBuffer(size).fill(fill,encoding):
createBuffer(size).fill(fill);
}
return createBuffer(size);
}





Buffer.alloc=function(size,fill,encoding){
return alloc(size,fill,encoding);
};

function allocUnsafe(size){
assertSize(size);
return createBuffer(size<0?0:checked(size)|0);
}




Buffer.allocUnsafe=function(size){
return allocUnsafe(size);
};



Buffer.allocUnsafeSlow=function(size){
return allocUnsafe(size);
};

function fromString(string,encoding){
if(typeof encoding!=='string'||encoding===''){
encoding='utf8';
}

if(!Buffer.isEncoding(encoding)){
throw new TypeError('Unknown encoding: '+encoding);
}

var length=byteLength(string,encoding)|0;
var buf=createBuffer(length);

var actual=buf.write(string,encoding);

if(actual!==length){



buf=buf.slice(0,actual);
}

return buf;
}

function fromArrayLike(array){
var length=array.length<0?0:checked(array.length)|0;
var buf=createBuffer(length);
for(var i=0;i<length;i+=1){
buf[i]=array[i]&255;
}
return buf;
}

function fromArrayBuffer(array,byteOffset,length){
if(byteOffset<0||array.byteLength<byteOffset){
throw new RangeError('"offset" is outside of buffer bounds');
}

if(array.byteLength<byteOffset+(length||0)){
throw new RangeError('"length" is outside of buffer bounds');
}

var buf;
if(byteOffset===undefined&&length===undefined){
buf=new Uint8Array(array);
}else if(length===undefined){
buf=new Uint8Array(array,byteOffset);
}else{
buf=new Uint8Array(array,byteOffset,length);
}


buf.__proto__=Buffer.prototype;
return buf;
}

function fromObject(obj){
if(Buffer.isBuffer(obj)){
var len=checked(obj.length)|0;
var buf=createBuffer(len);

if(buf.length===0){
return buf;
}

obj.copy(buf,0,0,len);
return buf;
}

if(obj){
if(ArrayBuffer.isView(obj)||'length'in obj){
if(typeof obj.length!=='number'||numberIsNaN(obj.length)){
return createBuffer(0);
}
return fromArrayLike(obj);
}

if(obj.type==='Buffer'&&Array.isArray(obj.data)){
return fromArrayLike(obj.data);
}
}

throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.');
}

function checked(length){


if(length>=K_MAX_LENGTH){
throw new RangeError('Attempt to allocate Buffer larger than maximum '+
'size: 0x'+K_MAX_LENGTH.toString(16)+' bytes');
}
return length|0;
}

function SlowBuffer(length){
if(+length!=length){
length=0;
}
return Buffer.alloc(+length);
}

Buffer.isBuffer=function isBuffer(b){
return b!=null&&b._isBuffer===true;
};

Buffer.compare=function compare(a,b){
if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){
throw new TypeError('Arguments must be Buffers');
}

if(a===b)return 0;

var x=a.length;
var y=b.length;

for(var i=0,len=Math.min(x,y);i<len;++i){
if(a[i]!==b[i]){
x=a[i];
y=b[i];
break;
}
}

if(x<y)return-1;
if(y<x)return 1;
return 0;
};

Buffer.isEncoding=function isEncoding(encoding){
switch(String(encoding).toLowerCase()){
case'hex':
case'utf8':
case'utf-8':
case'ascii':
case'latin1':
case'binary':
case'base64':
case'ucs2':
case'ucs-2':
case'utf16le':
case'utf-16le':
return true;
default:
return false;}

};

Buffer.concat=function concat(list,length){
if(!Array.isArray(list)){
throw new TypeError('"list" argument must be an Array of Buffers');
}

if(list.length===0){
return Buffer.alloc(0);
}

var i;
if(length===undefined){
length=0;
for(i=0;i<list.length;++i){
length+=list[i].length;
}
}

var buffer=Buffer.allocUnsafe(length);
var pos=0;
for(i=0;i<list.length;++i){
var buf=list[i];
if(ArrayBuffer.isView(buf)){
buf=Buffer.from(buf);
}
if(!Buffer.isBuffer(buf)){
throw new TypeError('"list" argument must be an Array of Buffers');
}
buf.copy(buffer,pos);
pos+=buf.length;
}
return buffer;
};

function byteLength(string,encoding){
if(Buffer.isBuffer(string)){
return string.length;
}
if(ArrayBuffer.isView(string)||isArrayBuffer(string)){
return string.byteLength;
}
if(typeof string!=='string'){
string=''+string;
}

var len=string.length;
if(len===0)return 0;


var loweredCase=false;
for(;;){
switch(encoding){
case'ascii':
case'latin1':
case'binary':
return len;
case'utf8':
case'utf-8':
case undefined:
return utf8ToBytes(string).length;
case'ucs2':
case'ucs-2':
case'utf16le':
case'utf-16le':
return len*2;
case'hex':
return len>>>1;
case'base64':
return base64ToBytes(string).length;
default:
if(loweredCase)return utf8ToBytes(string).length;
encoding=(''+encoding).toLowerCase();
loweredCase=true;}

}
}
Buffer.byteLength=byteLength;

function slowToString(encoding,start,end){
var loweredCase=false;








if(start===undefined||start<0){
start=0;
}


if(start>this.length){
return'';
}

if(end===undefined||end>this.length){
end=this.length;
}

if(end<=0){
return'';
}


end>>>=0;
start>>>=0;

if(end<=start){
return'';
}

if(!encoding)encoding='utf8';

while(true){
switch(encoding){
case'hex':
return hexSlice(this,start,end);

case'utf8':
case'utf-8':
return utf8Slice(this,start,end);

case'ascii':
return asciiSlice(this,start,end);

case'latin1':
case'binary':
return latin1Slice(this,start,end);

case'base64':
return base64Slice(this,start,end);

case'ucs2':
case'ucs-2':
case'utf16le':
case'utf-16le':
return utf16leSlice(this,start,end);

default:
if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);
encoding=(encoding+'').toLowerCase();
loweredCase=true;}

}
}







Buffer.prototype._isBuffer=true;

function swap(b,n,m){
var i=b[n];
b[n]=b[m];
b[m]=i;
}

Buffer.prototype.swap16=function swap16(){
var len=this.length;
if(len%2!==0){
throw new RangeError('Buffer size must be a multiple of 16-bits');
}
for(var i=0;i<len;i+=2){
swap(this,i,i+1);
}
return this;
};

Buffer.prototype.swap32=function swap32(){
var len=this.length;
if(len%4!==0){
throw new RangeError('Buffer size must be a multiple of 32-bits');
}
for(var i=0;i<len;i+=4){
swap(this,i,i+3);
swap(this,i+1,i+2);
}
return this;
};

Buffer.prototype.swap64=function swap64(){
var len=this.length;
if(len%8!==0){
throw new RangeError('Buffer size must be a multiple of 64-bits');
}
for(var i=0;i<len;i+=8){
swap(this,i,i+7);
swap(this,i+1,i+6);
swap(this,i+2,i+5);
swap(this,i+3,i+4);
}
return this;
};

Buffer.prototype.toString=function toString(){
var length=this.length;
if(length===0)return'';
if(arguments.length===0)return utf8Slice(this,0,length);
return slowToString.apply(this,arguments);
};

Buffer.prototype.toLocaleString=Buffer.prototype.toString;

Buffer.prototype.equals=function equals(b){
if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');
if(this===b)return true;
return Buffer.compare(this,b)===0;
};

Buffer.prototype.inspect=function inspect(){
var str='';
var max=exports.INSPECT_MAX_BYTES;
if(this.length>0){
str=this.toString('hex',0,max).match(/.{2}/g).join(' ');
if(this.length>max)str+=' ... ';
}
return'<Buffer '+str+'>';
};

Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){
if(!Buffer.isBuffer(target)){
throw new TypeError('Argument must be a Buffer');
}

if(start===undefined){
start=0;
}
if(end===undefined){
end=target?target.length:0;
}
if(thisStart===undefined){
thisStart=0;
}
if(thisEnd===undefined){
thisEnd=this.length;
}

if(start<0||end>target.length||thisStart<0||thisEnd>this.length){
throw new RangeError('out of range index');
}

if(thisStart>=thisEnd&&start>=end){
return 0;
}
if(thisStart>=thisEnd){
return-1;
}
if(start>=end){
return 1;
}

start>>>=0;
end>>>=0;
thisStart>>>=0;
thisEnd>>>=0;

if(this===target)return 0;

var x=thisEnd-thisStart;
var y=end-start;
var len=Math.min(x,y);

var thisCopy=this.slice(thisStart,thisEnd);
var targetCopy=target.slice(start,end);

for(var i=0;i<len;++i){
if(thisCopy[i]!==targetCopy[i]){
x=thisCopy[i];
y=targetCopy[i];
break;
}
}

if(x<y)return-1;
if(y<x)return 1;
return 0;
};










function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){

if(buffer.length===0)return-1;


if(typeof byteOffset==='string'){
encoding=byteOffset;
byteOffset=0;
}else if(byteOffset>0x7fffffff){
byteOffset=0x7fffffff;
}else if(byteOffset<-0x80000000){
byteOffset=-0x80000000;
}
byteOffset=+byteOffset;
if(numberIsNaN(byteOffset)){

byteOffset=dir?0:buffer.length-1;
}


if(byteOffset<0)byteOffset=buffer.length+byteOffset;
if(byteOffset>=buffer.length){
if(dir)return-1;else
byteOffset=buffer.length-1;
}else if(byteOffset<0){
if(dir)byteOffset=0;else
return-1;
}


if(typeof val==='string'){
val=Buffer.from(val,encoding);
}


if(Buffer.isBuffer(val)){

if(val.length===0){
return-1;
}
return arrayIndexOf(buffer,val,byteOffset,encoding,dir);
}else if(typeof val==='number'){
val=val&0xFF;
if(typeof Uint8Array.prototype.indexOf==='function'){
if(dir){
return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);
}else{
return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);
}
}
return arrayIndexOf(buffer,[val],byteOffset,encoding,dir);
}

throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr,val,byteOffset,encoding,dir){
var indexSize=1;
var arrLength=arr.length;
var valLength=val.length;

if(encoding!==undefined){
encoding=String(encoding).toLowerCase();
if(encoding==='ucs2'||encoding==='ucs-2'||
encoding==='utf16le'||encoding==='utf-16le'){
if(arr.length<2||val.length<2){
return-1;
}
indexSize=2;
arrLength/=2;
valLength/=2;
byteOffset/=2;
}
}

function read(buf,i){
if(indexSize===1){
return buf[i];
}else{
return buf.readUInt16BE(i*indexSize);
}
}

var i;
if(dir){
var foundIndex=-1;
for(i=byteOffset;i<arrLength;i++){
if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){
if(foundIndex===-1)foundIndex=i;
if(i-foundIndex+1===valLength)return foundIndex*indexSize;
}else{
if(foundIndex!==-1)i-=i-foundIndex;
foundIndex=-1;
}
}
}else{
if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;
for(i=byteOffset;i>=0;i--){
var found=true;
for(var j=0;j<valLength;j++){
if(read(arr,i+j)!==read(val,j)){
found=false;
break;
}
}
if(found)return i;
}
}

return-1;
}

Buffer.prototype.includes=function includes(val,byteOffset,encoding){
return this.indexOf(val,byteOffset,encoding)!==-1;
};

Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){
return bidirectionalIndexOf(this,val,byteOffset,encoding,true);
};

Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){
return bidirectionalIndexOf(this,val,byteOffset,encoding,false);
};

function hexWrite(buf,string,offset,length){
offset=Number(offset)||0;
var remaining=buf.length-offset;
if(!length){
length=remaining;
}else{
length=Number(length);
if(length>remaining){
length=remaining;
}
}

var strLen=string.length;

if(length>strLen/2){
length=strLen/2;
}
for(var i=0;i<length;++i){
var parsed=parseInt(string.substr(i*2,2),16);
if(numberIsNaN(parsed))return i;
buf[offset+i]=parsed;
}
return i;
}

function utf8Write(buf,string,offset,length){
return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);
}

function asciiWrite(buf,string,offset,length){
return blitBuffer(asciiToBytes(string),buf,offset,length);
}

function latin1Write(buf,string,offset,length){
return asciiWrite(buf,string,offset,length);
}

function base64Write(buf,string,offset,length){
return blitBuffer(base64ToBytes(string),buf,offset,length);
}

function ucs2Write(buf,string,offset,length){
return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);
}

Buffer.prototype.write=function write(string,offset,length,encoding){

if(offset===undefined){
encoding='utf8';
length=this.length;
offset=0;

}else if(length===undefined&&typeof offset==='string'){
encoding=offset;
length=this.length;
offset=0;

}else if(isFinite(offset)){
offset=offset>>>0;
if(isFinite(length)){
length=length>>>0;
if(encoding===undefined)encoding='utf8';
}else{
encoding=length;
length=undefined;
}
}else{
throw new Error(
'Buffer.write(string, encoding, offset[, length]) is no longer supported');

}

var remaining=this.length-offset;
if(length===undefined||length>remaining)length=remaining;

if(string.length>0&&(length<0||offset<0)||offset>this.length){
throw new RangeError('Attempt to write outside buffer bounds');
}

if(!encoding)encoding='utf8';

var loweredCase=false;
for(;;){
switch(encoding){
case'hex':
return hexWrite(this,string,offset,length);

case'utf8':
case'utf-8':
return utf8Write(this,string,offset,length);

case'ascii':
return asciiWrite(this,string,offset,length);

case'latin1':
case'binary':
return latin1Write(this,string,offset,length);

case'base64':

return base64Write(this,string,offset,length);

case'ucs2':
case'ucs-2':
case'utf16le':
case'utf-16le':
return ucs2Write(this,string,offset,length);

default:
if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);
encoding=(''+encoding).toLowerCase();
loweredCase=true;}

}
};

Buffer.prototype.toJSON=function toJSON(){
return{
type:'Buffer',
data:Array.prototype.slice.call(this._arr||this,0)};

};

function base64Slice(buf,start,end){
if(start===0&&end===buf.length){
return base64.fromByteArray(buf);
}else{
return base64.fromByteArray(buf.slice(start,end));
}
}

function utf8Slice(buf,start,end){
end=Math.min(buf.length,end);
var res=[];

var i=start;
while(i<end){
var firstByte=buf[i];
var codePoint=null;
var bytesPerSequence=firstByte>0xEF?4:
firstByte>0xDF?3:
firstByte>0xBF?2:
1;

if(i+bytesPerSequence<=end){
var secondByte,thirdByte,fourthByte,tempCodePoint;

switch(bytesPerSequence){
case 1:
if(firstByte<0x80){
codePoint=firstByte;
}
break;
case 2:
secondByte=buf[i+1];
if((secondByte&0xC0)===0x80){
tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;
if(tempCodePoint>0x7F){
codePoint=tempCodePoint;
}
}
break;
case 3:
secondByte=buf[i+1];
thirdByte=buf[i+2];
if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){
tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;
if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){
codePoint=tempCodePoint;
}
}
break;
case 4:
secondByte=buf[i+1];
thirdByte=buf[i+2];
fourthByte=buf[i+3];
if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){
tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;
if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){
codePoint=tempCodePoint;
}
}}

}

if(codePoint===null){


codePoint=0xFFFD;
bytesPerSequence=1;
}else if(codePoint>0xFFFF){

codePoint-=0x10000;
res.push(codePoint>>>10&0x3FF|0xD800);
codePoint=0xDC00|codePoint&0x3FF;
}

res.push(codePoint);
i+=bytesPerSequence;
}

return decodeCodePointsArray(res);
}




var MAX_ARGUMENTS_LENGTH=0x1000;

function decodeCodePointsArray(codePoints){
var len=codePoints.length;
if(len<=MAX_ARGUMENTS_LENGTH){
return String.fromCharCode.apply(String,codePoints);
}


var res='';
var i=0;
while(i<len){
res+=String.fromCharCode.apply(
String,
codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));

}
return res;
}

function asciiSlice(buf,start,end){
var ret='';
end=Math.min(buf.length,end);

for(var i=start;i<end;++i){
ret+=String.fromCharCode(buf[i]&0x7F);
}
return ret;
}

function latin1Slice(buf,start,end){
var ret='';
end=Math.min(buf.length,end);

for(var i=start;i<end;++i){
ret+=String.fromCharCode(buf[i]);
}
return ret;
}

function hexSlice(buf,start,end){
var len=buf.length;

if(!start||start<0)start=0;
if(!end||end<0||end>len)end=len;

var out='';
for(var i=start;i<end;++i){
out+=toHex(buf[i]);
}
return out;
}

function utf16leSlice(buf,start,end){
var bytes=buf.slice(start,end);
var res='';
for(var i=0;i<bytes.length;i+=2){
res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);
}
return res;
}

Buffer.prototype.slice=function slice(start,end){
var len=this.length;
start=~~start;
end=end===undefined?len:~~end;

if(start<0){
start+=len;
if(start<0)start=0;
}else if(start>len){
start=len;
}

if(end<0){
end+=len;
if(end<0)end=0;
}else if(end>len){
end=len;
}

if(end<start)end=start;

var newBuf=this.subarray(start,end);

newBuf.__proto__=Buffer.prototype;
return newBuf;
};




function checkOffset(offset,ext,length){
if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');
if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){
offset=offset>>>0;
byteLength=byteLength>>>0;
if(!noAssert)checkOffset(offset,byteLength,this.length);

var val=this[offset];
var mul=1;
var i=0;
while(++i<byteLength&&(mul*=0x100)){
val+=this[offset+i]*mul;
}

return val;
};

Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){
offset=offset>>>0;
byteLength=byteLength>>>0;
if(!noAssert){
checkOffset(offset,byteLength,this.length);
}

var val=this[offset+--byteLength];
var mul=1;
while(byteLength>0&&(mul*=0x100)){
val+=this[offset+--byteLength]*mul;
}

return val;
};

Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,1,this.length);
return this[offset];
};

Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,2,this.length);
return this[offset]|this[offset+1]<<8;
};

Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,2,this.length);
return this[offset]<<8|this[offset+1];
};

Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,4,this.length);

return(this[offset]|
this[offset+1]<<8|
this[offset+2]<<16)+
this[offset+3]*0x1000000;
};

Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,4,this.length);

return this[offset]*0x1000000+(
this[offset+1]<<16|
this[offset+2]<<8|
this[offset+3]);
};

Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){
offset=offset>>>0;
byteLength=byteLength>>>0;
if(!noAssert)checkOffset(offset,byteLength,this.length);

var val=this[offset];
var mul=1;
var i=0;
while(++i<byteLength&&(mul*=0x100)){
val+=this[offset+i]*mul;
}
mul*=0x80;

if(val>=mul)val-=Math.pow(2,8*byteLength);

return val;
};

Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){
offset=offset>>>0;
byteLength=byteLength>>>0;
if(!noAssert)checkOffset(offset,byteLength,this.length);

var i=byteLength;
var mul=1;
var val=this[offset+--i];
while(i>0&&(mul*=0x100)){
val+=this[offset+--i]*mul;
}
mul*=0x80;

if(val>=mul)val-=Math.pow(2,8*byteLength);

return val;
};

Buffer.prototype.readInt8=function readInt8(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,1,this.length);
if(!(this[offset]&0x80))return this[offset];
return(0xff-this[offset]+1)*-1;
};

Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,2,this.length);
var val=this[offset]|this[offset+1]<<8;
return val&0x8000?val|0xFFFF0000:val;
};

Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,2,this.length);
var val=this[offset+1]|this[offset]<<8;
return val&0x8000?val|0xFFFF0000:val;
};

Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,4,this.length);

return this[offset]|
this[offset+1]<<8|
this[offset+2]<<16|
this[offset+3]<<24;
};

Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,4,this.length);

return this[offset]<<24|
this[offset+1]<<16|
this[offset+2]<<8|
this[offset+3];
};

Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,4,this.length);
return ieee754.read(this,offset,true,23,4);
};

Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,4,this.length);
return ieee754.read(this,offset,false,23,4);
};

Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,8,this.length);
return ieee754.read(this,offset,true,52,8);
};

Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){
offset=offset>>>0;
if(!noAssert)checkOffset(offset,8,this.length);
return ieee754.read(this,offset,false,52,8);
};

function checkInt(buf,value,offset,ext,max,min){
if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');
if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');
if(offset+ext>buf.length)throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){
value=+value;
offset=offset>>>0;
byteLength=byteLength>>>0;
if(!noAssert){
var maxBytes=Math.pow(2,8*byteLength)-1;
checkInt(this,value,offset,byteLength,maxBytes,0);
}

var mul=1;
var i=0;
this[offset]=value&0xFF;
while(++i<byteLength&&(mul*=0x100)){
this[offset+i]=value/mul&0xFF;
}

return offset+byteLength;
};

Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){
value=+value;
offset=offset>>>0;
byteLength=byteLength>>>0;
if(!noAssert){
var maxBytes=Math.pow(2,8*byteLength)-1;
checkInt(this,value,offset,byteLength,maxBytes,0);
}

var i=byteLength-1;
var mul=1;
this[offset+i]=value&0xFF;
while(--i>=0&&(mul*=0x100)){
this[offset+i]=value/mul&0xFF;
}

return offset+byteLength;
};

Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,1,0xff,0);
this[offset]=value&0xff;
return offset+1;
};

Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,2,0xffff,0);
this[offset]=value&0xff;
this[offset+1]=value>>>8;
return offset+2;
};

Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,2,0xffff,0);
this[offset]=value>>>8;
this[offset+1]=value&0xff;
return offset+2;
};

Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);
this[offset+3]=value>>>24;
this[offset+2]=value>>>16;
this[offset+1]=value>>>8;
this[offset]=value&0xff;
return offset+4;
};

Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);
this[offset]=value>>>24;
this[offset+1]=value>>>16;
this[offset+2]=value>>>8;
this[offset+3]=value&0xff;
return offset+4;
};

Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert){
var limit=Math.pow(2,8*byteLength-1);

checkInt(this,value,offset,byteLength,limit-1,-limit);
}

var i=0;
var mul=1;
var sub=0;
this[offset]=value&0xFF;
while(++i<byteLength&&(mul*=0x100)){
if(value<0&&sub===0&&this[offset+i-1]!==0){
sub=1;
}
this[offset+i]=(value/mul>>0)-sub&0xFF;
}

return offset+byteLength;
};

Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert){
var limit=Math.pow(2,8*byteLength-1);

checkInt(this,value,offset,byteLength,limit-1,-limit);
}

var i=byteLength-1;
var mul=1;
var sub=0;
this[offset+i]=value&0xFF;
while(--i>=0&&(mul*=0x100)){
if(value<0&&sub===0&&this[offset+i+1]!==0){
sub=1;
}
this[offset+i]=(value/mul>>0)-sub&0xFF;
}

return offset+byteLength;
};

Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);
if(value<0)value=0xff+value+1;
this[offset]=value&0xff;
return offset+1;
};

Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);
this[offset]=value&0xff;
this[offset+1]=value>>>8;
return offset+2;
};

Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);
this[offset]=value>>>8;
this[offset+1]=value&0xff;
return offset+2;
};

Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);
this[offset]=value&0xff;
this[offset+1]=value>>>8;
this[offset+2]=value>>>16;
this[offset+3]=value>>>24;
return offset+4;
};

Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);
if(value<0)value=0xffffffff+value+1;
this[offset]=value>>>24;
this[offset+1]=value>>>16;
this[offset+2]=value>>>8;
this[offset+3]=value&0xff;
return offset+4;
};

function checkIEEE754(buf,value,offset,ext,max,min){
if(offset+ext>buf.length)throw new RangeError('Index out of range');
if(offset<0)throw new RangeError('Index out of range');
}

function writeFloat(buf,value,offset,littleEndian,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert){
checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);
}
ieee754.write(buf,value,offset,littleEndian,23,4);
return offset+4;
}

Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){
return writeFloat(this,value,offset,true,noAssert);
};

Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){
return writeFloat(this,value,offset,false,noAssert);
};

function writeDouble(buf,value,offset,littleEndian,noAssert){
value=+value;
offset=offset>>>0;
if(!noAssert){
checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);
}
ieee754.write(buf,value,offset,littleEndian,52,8);
return offset+8;
}

Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){
return writeDouble(this,value,offset,true,noAssert);
};

Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){
return writeDouble(this,value,offset,false,noAssert);
};


Buffer.prototype.copy=function copy(target,targetStart,start,end){
if(!Buffer.isBuffer(target))throw new TypeError('argument should be a Buffer');
if(!start)start=0;
if(!end&&end!==0)end=this.length;
if(targetStart>=target.length)targetStart=target.length;
if(!targetStart)targetStart=0;
if(end>0&&end<start)end=start;


if(end===start)return 0;
if(target.length===0||this.length===0)return 0;


if(targetStart<0){
throw new RangeError('targetStart out of bounds');
}
if(start<0||start>=this.length)throw new RangeError('Index out of range');
if(end<0)throw new RangeError('sourceEnd out of bounds');


if(end>this.length)end=this.length;
if(target.length-targetStart<end-start){
end=target.length-targetStart+start;
}

var len=end-start;

if(this===target&&typeof Uint8Array.prototype.copyWithin==='function'){

this.copyWithin(targetStart,start,end);
}else if(this===target&&start<targetStart&&targetStart<end){

for(var i=len-1;i>=0;--i){
target[i+targetStart]=this[i+start];
}
}else{
Uint8Array.prototype.set.call(
target,
this.subarray(start,end),
targetStart);

}

return len;
};





Buffer.prototype.fill=function fill(val,start,end,encoding){

if(typeof val==='string'){
if(typeof start==='string'){
encoding=start;
start=0;
end=this.length;
}else if(typeof end==='string'){
encoding=end;
end=this.length;
}
if(encoding!==undefined&&typeof encoding!=='string'){
throw new TypeError('encoding must be a string');
}
if(typeof encoding==='string'&&!Buffer.isEncoding(encoding)){
throw new TypeError('Unknown encoding: '+encoding);
}
if(val.length===1){
var code=val.charCodeAt(0);
if(encoding==='utf8'&&code<128||
encoding==='latin1'){

val=code;
}
}
}else if(typeof val==='number'){
val=val&255;
}


if(start<0||this.length<start||this.length<end){
throw new RangeError('Out of range index');
}

if(end<=start){
return this;
}

start=start>>>0;
end=end===undefined?this.length:end>>>0;

if(!val)val=0;

var i;
if(typeof val==='number'){
for(i=start;i<end;++i){
this[i]=val;
}
}else{
var bytes=Buffer.isBuffer(val)?
val:
new Buffer(val,encoding);
var len=bytes.length;
if(len===0){
throw new TypeError('The value "'+val+
'" is invalid for argument "value"');
}
for(i=0;i<end-start;++i){
this[i+start]=bytes[i%len];
}
}

return this;
};




var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;

function base64clean(str){

str=str.split('=')[0];

str=str.trim().replace(INVALID_BASE64_RE,'');

if(str.length<2)return'';

while(str.length%4!==0){
str=str+'=';
}
return str;
}

function toHex(n){
if(n<16)return'0'+n.toString(16);
return n.toString(16);
}

function utf8ToBytes(string,units){
units=units||Infinity;
var codePoint;
var length=string.length;
var leadSurrogate=null;
var bytes=[];

for(var i=0;i<length;++i){
codePoint=string.charCodeAt(i);


if(codePoint>0xD7FF&&codePoint<0xE000){

if(!leadSurrogate){

if(codePoint>0xDBFF){

if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);
continue;
}else if(i+1===length){

if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);
continue;
}


leadSurrogate=codePoint;

continue;
}


if(codePoint<0xDC00){
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);
leadSurrogate=codePoint;
continue;
}


codePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;
}else if(leadSurrogate){

if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);
}

leadSurrogate=null;


if(codePoint<0x80){
if((units-=1)<0)break;
bytes.push(codePoint);
}else if(codePoint<0x800){
if((units-=2)<0)break;
bytes.push(
codePoint>>0x6|0xC0,
codePoint&0x3F|0x80);

}else if(codePoint<0x10000){
if((units-=3)<0)break;
bytes.push(
codePoint>>0xC|0xE0,
codePoint>>0x6&0x3F|0x80,
codePoint&0x3F|0x80);

}else if(codePoint<0x110000){
if((units-=4)<0)break;
bytes.push(
codePoint>>0x12|0xF0,
codePoint>>0xC&0x3F|0x80,
codePoint>>0x6&0x3F|0x80,
codePoint&0x3F|0x80);

}else{
throw new Error('Invalid code point');
}
}

return bytes;
}

function asciiToBytes(str){
var byteArray=[];
for(var i=0;i<str.length;++i){

byteArray.push(str.charCodeAt(i)&0xFF);
}
return byteArray;
}

function utf16leToBytes(str,units){
var c,hi,lo;
var byteArray=[];
for(var i=0;i<str.length;++i){
if((units-=2)<0)break;

c=str.charCodeAt(i);
hi=c>>8;
lo=c%256;
byteArray.push(lo);
byteArray.push(hi);
}

return byteArray;
}

function base64ToBytes(str){
return base64.toByteArray(base64clean(str));
}

function blitBuffer(src,dst,offset,length){
for(var i=0;i<length;++i){
if(i+offset>=dst.length||i>=src.length)break;
dst[i+offset]=src[i];
}
return i;
}



function isArrayBuffer(obj){
return obj instanceof ArrayBuffer||
obj!=null&&obj.constructor!=null&&obj.constructor.name==='ArrayBuffer'&&
typeof obj.byteLength==='number';
}

function numberIsNaN(obj){
return obj!==obj;
}

},{"base64-js":103,"ieee754":112}],110:[function(require,module,exports){
(function(Buffer){
























function isArray(arg){
if(Array.isArray){
return Array.isArray(arg);
}
return objectToString(arg)==='[object Array]';
}
exports.isArray=isArray;

function isBoolean(arg){
return typeof arg==='boolean';
}
exports.isBoolean=isBoolean;

function isNull(arg){
return arg===null;
}
exports.isNull=isNull;

function isNullOrUndefined(arg){
return arg==null;
}
exports.isNullOrUndefined=isNullOrUndefined;

function isNumber(arg){
return typeof arg==='number';
}
exports.isNumber=isNumber;

function isString(arg){
return typeof arg==='string';
}
exports.isString=isString;

function isSymbol(arg){
return typeof arg==='symbol';
}
exports.isSymbol=isSymbol;

function isUndefined(arg){
return arg===void 0;
}
exports.isUndefined=isUndefined;

function isRegExp(re){
return objectToString(re)==='[object RegExp]';
}
exports.isRegExp=isRegExp;

function isObject(arg){
return typeof arg==='object'&&arg!==null;
}
exports.isObject=isObject;

function isDate(d){
return objectToString(d)==='[object Date]';
}
exports.isDate=isDate;

function isError(e){
return objectToString(e)==='[object Error]'||e instanceof Error;
}
exports.isError=isError;

function isFunction(arg){
return typeof arg==='function';
}
exports.isFunction=isFunction;

function isPrimitive(arg){
return arg===null||
typeof arg==='boolean'||
typeof arg==='number'||
typeof arg==='string'||
typeof arg==='symbol'||
typeof arg==='undefined';
}
exports.isPrimitive=isPrimitive;

exports.isBuffer=Buffer.isBuffer;

function objectToString(o){
return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")});
},{"../../is-buffer/index.js":114}],111:[function(require,module,exports){





















var objectCreate=Object.create||objectCreatePolyfill;
var objectKeys=Object.keys||objectKeysPolyfill;
var bind=Function.prototype.bind||functionBindPolyfill;

function EventEmitter(){
if(!this._events||!Object.prototype.hasOwnProperty.call(this,'_events')){
this._events=objectCreate(null);
this._eventsCount=0;
}

this._maxListeners=this._maxListeners||undefined;
}
module.exports=EventEmitter;


EventEmitter.EventEmitter=EventEmitter;

EventEmitter.prototype._events=undefined;
EventEmitter.prototype._maxListeners=undefined;



var defaultMaxListeners=10;

var hasDefineProperty;
try{
var o={};
if(Object.defineProperty)Object.defineProperty(o,'x',{value:0});
hasDefineProperty=o.x===0;
}catch(err){hasDefineProperty=false;}
if(hasDefineProperty){
Object.defineProperty(EventEmitter,'defaultMaxListeners',{
enumerable:true,
get:function(){
return defaultMaxListeners;
},
set:function(arg){


if(typeof arg!=='number'||arg<0||arg!==arg)
throw new TypeError('"defaultMaxListeners" must be a positive number');
defaultMaxListeners=arg;
}});

}else{
EventEmitter.defaultMaxListeners=defaultMaxListeners;
}



EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){
if(typeof n!=='number'||n<0||isNaN(n))
throw new TypeError('"n" argument must be a positive number');
this._maxListeners=n;
return this;
};

function $getMaxListeners(that){
if(that._maxListeners===undefined)
return EventEmitter.defaultMaxListeners;
return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners=function getMaxListeners(){
return $getMaxListeners(this);
};






function emitNone(handler,isFn,self){
if(isFn)
handler.call(self);else
{
var len=handler.length;
var listeners=arrayClone(handler,len);
for(var i=0;i<len;++i)
listeners[i].call(self);
}
}
function emitOne(handler,isFn,self,arg1){
if(isFn)
handler.call(self,arg1);else
{
var len=handler.length;
var listeners=arrayClone(handler,len);
for(var i=0;i<len;++i)
listeners[i].call(self,arg1);
}
}
function emitTwo(handler,isFn,self,arg1,arg2){
if(isFn)
handler.call(self,arg1,arg2);else
{
var len=handler.length;
var listeners=arrayClone(handler,len);
for(var i=0;i<len;++i)
listeners[i].call(self,arg1,arg2);
}
}
function emitThree(handler,isFn,self,arg1,arg2,arg3){
if(isFn)
handler.call(self,arg1,arg2,arg3);else
{
var len=handler.length;
var listeners=arrayClone(handler,len);
for(var i=0;i<len;++i)
listeners[i].call(self,arg1,arg2,arg3);
}
}

function emitMany(handler,isFn,self,args){
if(isFn)
handler.apply(self,args);else
{
var len=handler.length;
var listeners=arrayClone(handler,len);
for(var i=0;i<len;++i)
listeners[i].apply(self,args);
}
}

EventEmitter.prototype.emit=function emit(type){
var er,handler,len,args,i,events;
var doError=type==='error';

events=this._events;
if(events)
doError=doError&&events.error==null;else
if(!doError)
return false;


if(doError){
if(arguments.length>1)
er=arguments[1];
if(er instanceof Error){
throw er;
}else{

var err=new Error('Unhandled "error" event. ('+er+')');
err.context=er;
throw err;
}
return false;
}

handler=events[type];

if(!handler)
return false;

var isFn=typeof handler==='function';
len=arguments.length;
switch(len){

case 1:
emitNone(handler,isFn,this);
break;
case 2:
emitOne(handler,isFn,this,arguments[1]);
break;
case 3:
emitTwo(handler,isFn,this,arguments[1],arguments[2]);
break;
case 4:
emitThree(handler,isFn,this,arguments[1],arguments[2],arguments[3]);
break;

default:
args=new Array(len-1);
for(i=1;i<len;i++)
args[i-1]=arguments[i];
emitMany(handler,isFn,this,args);}


return true;
};

function _addListener(target,type,listener,prepend){
var m;
var events;
var existing;

if(typeof listener!=='function')
throw new TypeError('"listener" argument must be a function');

events=target._events;
if(!events){
events=target._events=objectCreate(null);
target._eventsCount=0;
}else{


if(events.newListener){
target.emit('newListener',type,
listener.listener?listener.listener:listener);



events=target._events;
}
existing=events[type];
}

if(!existing){

existing=events[type]=listener;
++target._eventsCount;
}else{
if(typeof existing==='function'){

existing=events[type]=
prepend?[listener,existing]:[existing,listener];
}else{

if(prepend){
existing.unshift(listener);
}else{
existing.push(listener);
}
}


if(!existing.warned){
m=$getMaxListeners(target);
if(m&&m>0&&existing.length>m){
existing.warned=true;
var w=new Error('Possible EventEmitter memory leak detected. '+
existing.length+' "'+String(type)+'" listeners '+
'added. Use emitter.setMaxListeners() to '+
'increase limit.');
w.name='MaxListenersExceededWarning';
w.emitter=target;
w.type=type;
w.count=existing.length;
if(typeof console==='object'&&console.warn){
console.warn('%s: %s',w.name,w.message);
}
}
}
}

return target;
}

EventEmitter.prototype.addListener=function addListener(type,listener){
return _addListener(this,type,listener,false);
};

EventEmitter.prototype.on=EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener=
function prependListener(type,listener){
return _addListener(this,type,listener,true);
};

function onceWrapper(){
if(!this.fired){
this.target.removeListener(this.type,this.wrapFn);
this.fired=true;
switch(arguments.length){
case 0:
return this.listener.call(this.target);
case 1:
return this.listener.call(this.target,arguments[0]);
case 2:
return this.listener.call(this.target,arguments[0],arguments[1]);
case 3:
return this.listener.call(this.target,arguments[0],arguments[1],
arguments[2]);
default:
var args=new Array(arguments.length);
for(var i=0;i<args.length;++i)
args[i]=arguments[i];
this.listener.apply(this.target,args);}

}
}

function _onceWrap(target,type,listener){
var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};
var wrapped=bind.call(onceWrapper,state);
wrapped.listener=listener;
state.wrapFn=wrapped;
return wrapped;
}

EventEmitter.prototype.once=function once(type,listener){
if(typeof listener!=='function')
throw new TypeError('"listener" argument must be a function');
this.on(type,_onceWrap(this,type,listener));
return this;
};

EventEmitter.prototype.prependOnceListener=
function prependOnceListener(type,listener){
if(typeof listener!=='function')
throw new TypeError('"listener" argument must be a function');
this.prependListener(type,_onceWrap(this,type,listener));
return this;
};


EventEmitter.prototype.removeListener=
function removeListener(type,listener){
var list,events,position,i,originalListener;

if(typeof listener!=='function')
throw new TypeError('"listener" argument must be a function');

events=this._events;
if(!events)
return this;

list=events[type];
if(!list)
return this;

if(list===listener||list.listener===listener){
if(--this._eventsCount===0)
this._events=objectCreate(null);else
{
delete events[type];
if(events.removeListener)
this.emit('removeListener',type,list.listener||listener);
}
}else if(typeof list!=='function'){
position=-1;

for(i=list.length-1;i>=0;i--){
if(list[i]===listener||list[i].listener===listener){
originalListener=list[i].listener;
position=i;
break;
}
}

if(position<0)
return this;

if(position===0)
list.shift();else

spliceOne(list,position);

if(list.length===1)
events[type]=list[0];

if(events.removeListener)
this.emit('removeListener',type,originalListener||listener);
}

return this;
};

EventEmitter.prototype.removeAllListeners=
function removeAllListeners(type){
var listeners,events,i;

events=this._events;
if(!events)
return this;


if(!events.removeListener){
if(arguments.length===0){
this._events=objectCreate(null);
this._eventsCount=0;
}else if(events[type]){
if(--this._eventsCount===0)
this._events=objectCreate(null);else

delete events[type];
}
return this;
}


if(arguments.length===0){
var keys=objectKeys(events);
var key;
for(i=0;i<keys.length;++i){
key=keys[i];
if(key==='removeListener')continue;
this.removeAllListeners(key);
}
this.removeAllListeners('removeListener');
this._events=objectCreate(null);
this._eventsCount=0;
return this;
}

listeners=events[type];

if(typeof listeners==='function'){
this.removeListener(type,listeners);
}else if(listeners){

for(i=listeners.length-1;i>=0;i--){
this.removeListener(type,listeners[i]);
}
}

return this;
};

EventEmitter.prototype.listeners=function listeners(type){
var evlistener;
var ret;
var events=this._events;

if(!events)
ret=[];else
{
evlistener=events[type];
if(!evlistener)
ret=[];else
if(typeof evlistener==='function')
ret=[evlistener.listener||evlistener];else

ret=unwrapListeners(evlistener);
}

return ret;
};

EventEmitter.listenerCount=function(emitter,type){
if(typeof emitter.listenerCount==='function'){
return emitter.listenerCount(type);
}else{
return listenerCount.call(emitter,type);
}
};

EventEmitter.prototype.listenerCount=listenerCount;
function listenerCount(type){
var events=this._events;

if(events){
var evlistener=events[type];

if(typeof evlistener==='function'){
return 1;
}else if(evlistener){
return evlistener.length;
}
}

return 0;
}

EventEmitter.prototype.eventNames=function eventNames(){
return this._eventsCount>0?Reflect.ownKeys(this._events):[];
};


function spliceOne(list,index){
for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1)
list[i]=list[k];
list.pop();
}

function arrayClone(arr,n){
var copy=new Array(n);
for(var i=0;i<n;++i)
copy[i]=arr[i];
return copy;
}

function unwrapListeners(arr){
var ret=new Array(arr.length);
for(var i=0;i<ret.length;++i){
ret[i]=arr[i].listener||arr[i];
}
return ret;
}

function objectCreatePolyfill(proto){
var F=function(){};
F.prototype=proto;
return new F();
}
function objectKeysPolyfill(obj){
var keys=[];
for(var k in obj)if(Object.prototype.hasOwnProperty.call(obj,k)){
keys.push(k);
}
return k;
}
function functionBindPolyfill(context){
var fn=this;
return function(){
return fn.apply(context,arguments);
};
}

},{}],112:[function(require,module,exports){
exports.read=function(buffer,offset,isLE,mLen,nBytes){
var e,m;
var eLen=nBytes*8-mLen-1;
var eMax=(1<<eLen)-1;
var eBias=eMax>>1;
var nBits=-7;
var i=isLE?nBytes-1:0;
var d=isLE?-1:1;
var s=buffer[offset+i];

i+=d;

e=s&(1<<-nBits)-1;
s>>=-nBits;
nBits+=eLen;
for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}

m=e&(1<<-nBits)-1;
e>>=-nBits;
nBits+=mLen;
for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}

if(e===0){
e=1-eBias;
}else if(e===eMax){
return m?NaN:(s?-1:1)*Infinity;
}else{
m=m+Math.pow(2,mLen);
e=e-eBias;
}
return(s?-1:1)*m*Math.pow(2,e-mLen);
};

exports.write=function(buffer,value,offset,isLE,mLen,nBytes){
var e,m,c;
var eLen=nBytes*8-mLen-1;
var eMax=(1<<eLen)-1;
var eBias=eMax>>1;
var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;
var i=isLE?0:nBytes-1;
var d=isLE?1:-1;
var s=value<0||value===0&&1/value<0?1:0;

value=Math.abs(value);

if(isNaN(value)||value===Infinity){
m=isNaN(value)?1:0;
e=eMax;
}else{
e=Math.floor(Math.log(value)/Math.LN2);
if(value*(c=Math.pow(2,-e))<1){
e--;
c*=2;
}
if(e+eBias>=1){
value+=rt/c;
}else{
value+=rt*Math.pow(2,1-eBias);
}
if(value*c>=2){
e++;
c/=2;
}

if(e+eBias>=eMax){
m=0;
e=eMax;
}else if(e+eBias>=1){
m=(value*c-1)*Math.pow(2,mLen);
e=e+eBias;
}else{
m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);
e=0;
}
}

for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}

e=e<<mLen|m;
eLen+=mLen;
for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}

buffer[offset+i-d]|=s*128;
};

},{}],113:[function(require,module,exports){
if(typeof Object.create==='function'){

module.exports=function inherits(ctor,superCtor){
ctor.super_=superCtor;
ctor.prototype=Object.create(superCtor.prototype,{
constructor:{
value:ctor,
enumerable:false,
writable:true,
configurable:true}});


};
}else{

module.exports=function inherits(ctor,superCtor){
ctor.super_=superCtor;
var TempCtor=function(){};
TempCtor.prototype=superCtor.prototype;
ctor.prototype=new TempCtor();
ctor.prototype.constructor=ctor;
};
}

},{}],114:[function(require,module,exports){









module.exports=function(obj){
return obj!=null&&(isBuffer(obj)||isSlowBuffer(obj)||!!obj._isBuffer);
};

function isBuffer(obj){
return!!obj.constructor&&typeof obj.constructor.isBuffer==='function'&&obj.constructor.isBuffer(obj);
}


function isSlowBuffer(obj){
return typeof obj.readFloatLE==='function'&&typeof obj.slice==='function'&&isBuffer(obj.slice(0,0));
}

},{}],115:[function(require,module,exports){
var toString={}.toString;

module.exports=Array.isArray||function(arr){
return toString.call(arr)=='[object Array]';
};

},{}],116:[function(require,module,exports){
'use strict';


var TYPED_OK=typeof Uint8Array!=='undefined'&&
typeof Uint16Array!=='undefined'&&
typeof Int32Array!=='undefined';

function _has(obj,key){
return Object.prototype.hasOwnProperty.call(obj,key);
}

exports.assign=function(obj){
var sources=Array.prototype.slice.call(arguments,1);
while(sources.length){
var source=sources.shift();
if(!source){continue;}

if(typeof source!=='object'){
throw new TypeError(source+'must be non-object');
}

for(var p in source){
if(_has(source,p)){
obj[p]=source[p];
}
}
}

return obj;
};



exports.shrinkBuf=function(buf,size){
if(buf.length===size){return buf;}
if(buf.subarray){return buf.subarray(0,size);}
buf.length=size;
return buf;
};


var fnTyped={
arraySet:function(dest,src,src_offs,len,dest_offs){
if(src.subarray&&dest.subarray){
dest.set(src.subarray(src_offs,src_offs+len),dest_offs);
return;
}

for(var i=0;i<len;i++){
dest[dest_offs+i]=src[src_offs+i];
}
},

flattenChunks:function(chunks){
var i,l,len,pos,chunk,result;


len=0;
for(i=0,l=chunks.length;i<l;i++){
len+=chunks[i].length;
}


result=new Uint8Array(len);
pos=0;
for(i=0,l=chunks.length;i<l;i++){
chunk=chunks[i];
result.set(chunk,pos);
pos+=chunk.length;
}

return result;
}};


var fnUntyped={
arraySet:function(dest,src,src_offs,len,dest_offs){
for(var i=0;i<len;i++){
dest[dest_offs+i]=src[src_offs+i];
}
},

flattenChunks:function(chunks){
return[].concat.apply([],chunks);
}};





exports.setTyped=function(on){
if(on){
exports.Buf8=Uint8Array;
exports.Buf16=Uint16Array;
exports.Buf32=Int32Array;
exports.assign(exports,fnTyped);
}else{
exports.Buf8=Array;
exports.Buf16=Array;
exports.Buf32=Array;
exports.assign(exports,fnUntyped);
}
};

exports.setTyped(TYPED_OK);

},{}],117:[function(require,module,exports){
'use strict';
























function adler32(adler,buf,len,pos){
var s1=adler&0xffff|0,
s2=adler>>>16&0xffff|0,
n=0;

while(len!==0){



n=len>2000?2000:len;
len-=n;

do{
s1=s1+buf[pos++]|0;
s2=s2+s1|0;
}while(--n);

s1%=65521;
s2%=65521;
}

return s1|s2<<16|0;
}


module.exports=adler32;

},{}],118:[function(require,module,exports){
'use strict';




















module.exports={


Z_NO_FLUSH:0,
Z_PARTIAL_FLUSH:1,
Z_SYNC_FLUSH:2,
Z_FULL_FLUSH:3,
Z_FINISH:4,
Z_BLOCK:5,
Z_TREES:6,




Z_OK:0,
Z_STREAM_END:1,
Z_NEED_DICT:2,
Z_ERRNO:-1,
Z_STREAM_ERROR:-2,
Z_DATA_ERROR:-3,

Z_BUF_ERROR:-5,



Z_NO_COMPRESSION:0,
Z_BEST_SPEED:1,
Z_BEST_COMPRESSION:9,
Z_DEFAULT_COMPRESSION:-1,


Z_FILTERED:1,
Z_HUFFMAN_ONLY:2,
Z_RLE:3,
Z_FIXED:4,
Z_DEFAULT_STRATEGY:0,


Z_BINARY:0,
Z_TEXT:1,

Z_UNKNOWN:2,


Z_DEFLATED:8};



},{}],119:[function(require,module,exports){
'use strict';

























function makeTable(){
var c,table=[];

for(var n=0;n<256;n++){
c=n;
for(var k=0;k<8;k++){
c=c&1?0xEDB88320^c>>>1:c>>>1;
}
table[n]=c;
}

return table;
}


var crcTable=makeTable();


function crc32(crc,buf,len,pos){
var t=crcTable,
end=pos+len;

crc^=-1;

for(var i=pos;i<end;i++){
crc=crc>>>8^t[(crc^buf[i])&0xFF];
}

return crc^-1;
}


module.exports=crc32;

},{}],120:[function(require,module,exports){
'use strict';




















var utils=require('../utils/common');
var trees=require('./trees');
var adler32=require('./adler32');
var crc32=require('./crc32');
var msg=require('./messages');






var Z_NO_FLUSH=0;
var Z_PARTIAL_FLUSH=1;

var Z_FULL_FLUSH=3;
var Z_FINISH=4;
var Z_BLOCK=5;






var Z_OK=0;
var Z_STREAM_END=1;


var Z_STREAM_ERROR=-2;
var Z_DATA_ERROR=-3;

var Z_BUF_ERROR=-5;







var Z_DEFAULT_COMPRESSION=-1;


var Z_FILTERED=1;
var Z_HUFFMAN_ONLY=2;
var Z_RLE=3;
var Z_FIXED=4;
var Z_DEFAULT_STRATEGY=0;





var Z_UNKNOWN=2;



var Z_DEFLATED=8;




var MAX_MEM_LEVEL=9;

var MAX_WBITS=15;

var DEF_MEM_LEVEL=8;


var LENGTH_CODES=29;

var LITERALS=256;

var L_CODES=LITERALS+1+LENGTH_CODES;

var D_CODES=30;

var BL_CODES=19;

var HEAP_SIZE=2*L_CODES+1;

var MAX_BITS=15;


var MIN_MATCH=3;
var MAX_MATCH=258;
var MIN_LOOKAHEAD=MAX_MATCH+MIN_MATCH+1;

var PRESET_DICT=0x20;

var INIT_STATE=42;
var EXTRA_STATE=69;
var NAME_STATE=73;
var COMMENT_STATE=91;
var HCRC_STATE=103;
var BUSY_STATE=113;
var FINISH_STATE=666;

var BS_NEED_MORE=1;
var BS_BLOCK_DONE=2;
var BS_FINISH_STARTED=3;
var BS_FINISH_DONE=4;

var OS_CODE=0x03;

function err(strm,errorCode){
strm.msg=msg[errorCode];
return errorCode;
}

function rank(f){
return(f<<1)-(f>4?9:0);
}

function zero(buf){var len=buf.length;while(--len>=0){buf[len]=0;}}








function flush_pending(strm){
var s=strm.state;


var len=s.pending;
if(len>strm.avail_out){
len=strm.avail_out;
}
if(len===0){return;}

utils.arraySet(strm.output,s.pending_buf,s.pending_out,len,strm.next_out);
strm.next_out+=len;
s.pending_out+=len;
strm.total_out+=len;
strm.avail_out-=len;
s.pending-=len;
if(s.pending===0){
s.pending_out=0;
}
}


function flush_block_only(s,last){
trees._tr_flush_block(s,s.block_start>=0?s.block_start:-1,s.strstart-s.block_start,last);
s.block_start=s.strstart;
flush_pending(s.strm);
}


function put_byte(s,b){
s.pending_buf[s.pending++]=b;
}







function putShortMSB(s,b){


s.pending_buf[s.pending++]=b>>>8&0xff;
s.pending_buf[s.pending++]=b&0xff;
}









function read_buf(strm,buf,start,size){
var len=strm.avail_in;

if(len>size){len=size;}
if(len===0){return 0;}

strm.avail_in-=len;


utils.arraySet(buf,strm.input,strm.next_in,len,start);
if(strm.state.wrap===1){
strm.adler=adler32(strm.adler,buf,len,start);
}else

if(strm.state.wrap===2){
strm.adler=crc32(strm.adler,buf,len,start);
}

strm.next_in+=len;
strm.total_in+=len;

return len;
}











function longest_match(s,cur_match){
var chain_length=s.max_chain_length;
var scan=s.strstart;
var match;
var len;
var best_len=s.prev_length;
var nice_match=s.nice_match;
var limit=s.strstart>s.w_size-MIN_LOOKAHEAD?
s.strstart-(s.w_size-MIN_LOOKAHEAD):0;

var _win=s.window;

var wmask=s.w_mask;
var prev=s.prev;





var strend=s.strstart+MAX_MATCH;
var scan_end1=_win[scan+best_len-1];
var scan_end=_win[scan+best_len];







if(s.prev_length>=s.good_match){
chain_length>>=2;
}



if(nice_match>s.lookahead){nice_match=s.lookahead;}



do{

match=cur_match;










if(_win[match+best_len]!==scan_end||
_win[match+best_len-1]!==scan_end1||
_win[match]!==_win[scan]||
_win[++match]!==_win[scan+1]){
continue;
}







scan+=2;
match++;





do{

}while(_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&
_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&
_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&
_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&
scan<strend);



len=MAX_MATCH-(strend-scan);
scan=strend-MAX_MATCH;

if(len>best_len){
s.match_start=cur_match;
best_len=len;
if(len>=nice_match){
break;
}
scan_end1=_win[scan+best_len-1];
scan_end=_win[scan+best_len];
}
}while((cur_match=prev[cur_match&wmask])>limit&&--chain_length!==0);

if(best_len<=s.lookahead){
return best_len;
}
return s.lookahead;
}












function fill_window(s){
var _w_size=s.w_size;
var p,n,m,more,str;



do{
more=s.window_size-s.lookahead-s.strstart;



















if(s.strstart>=_w_size+(_w_size-MIN_LOOKAHEAD)){

utils.arraySet(s.window,s.window,_w_size,_w_size,0);
s.match_start-=_w_size;
s.strstart-=_w_size;

s.block_start-=_w_size;








n=s.hash_size;
p=n;
do{
m=s.head[--p];
s.head[p]=m>=_w_size?m-_w_size:0;
}while(--n);

n=_w_size;
p=n;
do{
m=s.prev[--p];
s.prev[p]=m>=_w_size?m-_w_size:0;



}while(--n);

more+=_w_size;
}
if(s.strm.avail_in===0){
break;
}













n=read_buf(s.strm,s.window,s.strstart+s.lookahead,more);
s.lookahead+=n;


if(s.lookahead+s.insert>=MIN_MATCH){
str=s.strstart-s.insert;
s.ins_h=s.window[str];


s.ins_h=(s.ins_h<<s.hash_shift^s.window[str+1])&s.hash_mask;



while(s.insert){

s.ins_h=(s.ins_h<<s.hash_shift^s.window[str+MIN_MATCH-1])&s.hash_mask;

s.prev[str&s.w_mask]=s.head[s.ins_h];
s.head[s.ins_h]=str;
str++;
s.insert--;
if(s.lookahead+s.insert<MIN_MATCH){
break;
}
}
}




}while(s.lookahead<MIN_LOOKAHEAD&&s.strm.avail_in!==0);





































}










function deflate_stored(s,flush){



var max_block_size=0xffff;

if(max_block_size>s.pending_buf_size-5){
max_block_size=s.pending_buf_size-5;
}


for(;;){

if(s.lookahead<=1){








fill_window(s);
if(s.lookahead===0&&flush===Z_NO_FLUSH){
return BS_NEED_MORE;
}

if(s.lookahead===0){
break;
}

}



s.strstart+=s.lookahead;
s.lookahead=0;


var max_start=s.block_start+max_block_size;

if(s.strstart===0||s.strstart>=max_start){

s.lookahead=s.strstart-max_start;
s.strstart=max_start;

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}



}



if(s.strstart-s.block_start>=s.w_size-MIN_LOOKAHEAD){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
}

s.insert=0;

if(flush===Z_FINISH){

flush_block_only(s,true);
if(s.strm.avail_out===0){
return BS_FINISH_STARTED;
}

return BS_FINISH_DONE;
}

if(s.strstart>s.block_start){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}

return BS_NEED_MORE;
}








function deflate_fast(s,flush){
var hash_head;
var bflush;

for(;;){





if(s.lookahead<MIN_LOOKAHEAD){
fill_window(s);
if(s.lookahead<MIN_LOOKAHEAD&&flush===Z_NO_FLUSH){
return BS_NEED_MORE;
}
if(s.lookahead===0){
break;
}
}




hash_head=0;
if(s.lookahead>=MIN_MATCH){

s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;
hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];
s.head[s.ins_h]=s.strstart;

}




if(hash_head!==0&&s.strstart-hash_head<=s.w_size-MIN_LOOKAHEAD){




s.match_length=longest_match(s,hash_head);

}
if(s.match_length>=MIN_MATCH){




bflush=trees._tr_tally(s,s.strstart-s.match_start,s.match_length-MIN_MATCH);

s.lookahead-=s.match_length;




if(s.match_length<=s.max_lazy_match&&s.lookahead>=MIN_MATCH){
s.match_length--;
do{
s.strstart++;

s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;
hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];
s.head[s.ins_h]=s.strstart;




}while(--s.match_length!==0);
s.strstart++;
}else
{
s.strstart+=s.match_length;
s.match_length=0;
s.ins_h=s.window[s.strstart];

s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+1])&s.hash_mask;







}
}else{



bflush=trees._tr_tally(s,0,s.window[s.strstart]);

s.lookahead--;
s.strstart++;
}
if(bflush){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
}
s.insert=s.strstart<MIN_MATCH-1?s.strstart:MIN_MATCH-1;
if(flush===Z_FINISH){

flush_block_only(s,true);
if(s.strm.avail_out===0){
return BS_FINISH_STARTED;
}

return BS_FINISH_DONE;
}
if(s.last_lit){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
return BS_BLOCK_DONE;
}






function deflate_slow(s,flush){
var hash_head;
var bflush;

var max_insert;


for(;;){





if(s.lookahead<MIN_LOOKAHEAD){
fill_window(s);
if(s.lookahead<MIN_LOOKAHEAD&&flush===Z_NO_FLUSH){
return BS_NEED_MORE;
}
if(s.lookahead===0){break;}
}




hash_head=0;
if(s.lookahead>=MIN_MATCH){

s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;
hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];
s.head[s.ins_h]=s.strstart;

}



s.prev_length=s.match_length;
s.prev_match=s.match_start;
s.match_length=MIN_MATCH-1;

if(hash_head!==0&&s.prev_length<s.max_lazy_match&&
s.strstart-hash_head<=s.w_size-MIN_LOOKAHEAD){




s.match_length=longest_match(s,hash_head);


if(s.match_length<=5&&(
s.strategy===Z_FILTERED||s.match_length===MIN_MATCH&&s.strstart-s.match_start>4096)){




s.match_length=MIN_MATCH-1;
}
}



if(s.prev_length>=MIN_MATCH&&s.match_length<=s.prev_length){
max_insert=s.strstart+s.lookahead-MIN_MATCH;






bflush=trees._tr_tally(s,s.strstart-1-s.prev_match,s.prev_length-MIN_MATCH);





s.lookahead-=s.prev_length-1;
s.prev_length-=2;
do{
if(++s.strstart<=max_insert){

s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;
hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];
s.head[s.ins_h]=s.strstart;

}
}while(--s.prev_length!==0);
s.match_available=0;
s.match_length=MIN_MATCH-1;
s.strstart++;

if(bflush){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}

}else if(s.match_available){






bflush=trees._tr_tally(s,0,s.window[s.strstart-1]);

if(bflush){

flush_block_only(s,false);

}
s.strstart++;
s.lookahead--;
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}
}else{



s.match_available=1;
s.strstart++;
s.lookahead--;
}
}

if(s.match_available){


bflush=trees._tr_tally(s,0,s.window[s.strstart-1]);

s.match_available=0;
}
s.insert=s.strstart<MIN_MATCH-1?s.strstart:MIN_MATCH-1;
if(flush===Z_FINISH){

flush_block_only(s,true);
if(s.strm.avail_out===0){
return BS_FINISH_STARTED;
}

return BS_FINISH_DONE;
}
if(s.last_lit){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}

return BS_BLOCK_DONE;
}







function deflate_rle(s,flush){
var bflush;
var prev;
var scan,strend;

var _win=s.window;

for(;;){




if(s.lookahead<=MAX_MATCH){
fill_window(s);
if(s.lookahead<=MAX_MATCH&&flush===Z_NO_FLUSH){
return BS_NEED_MORE;
}
if(s.lookahead===0){break;}
}


s.match_length=0;
if(s.lookahead>=MIN_MATCH&&s.strstart>0){
scan=s.strstart-1;
prev=_win[scan];
if(prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]){
strend=s.strstart+MAX_MATCH;
do{

}while(prev===_win[++scan]&&prev===_win[++scan]&&
prev===_win[++scan]&&prev===_win[++scan]&&
prev===_win[++scan]&&prev===_win[++scan]&&
prev===_win[++scan]&&prev===_win[++scan]&&
scan<strend);
s.match_length=MAX_MATCH-(strend-scan);
if(s.match_length>s.lookahead){
s.match_length=s.lookahead;
}
}

}


if(s.match_length>=MIN_MATCH){



bflush=trees._tr_tally(s,1,s.match_length-MIN_MATCH);

s.lookahead-=s.match_length;
s.strstart+=s.match_length;
s.match_length=0;
}else{



bflush=trees._tr_tally(s,0,s.window[s.strstart]);

s.lookahead--;
s.strstart++;
}
if(bflush){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
}
s.insert=0;
if(flush===Z_FINISH){

flush_block_only(s,true);
if(s.strm.avail_out===0){
return BS_FINISH_STARTED;
}

return BS_FINISH_DONE;
}
if(s.last_lit){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
return BS_BLOCK_DONE;
}





function deflate_huff(s,flush){
var bflush;

for(;;){

if(s.lookahead===0){
fill_window(s);
if(s.lookahead===0){
if(flush===Z_NO_FLUSH){
return BS_NEED_MORE;
}
break;
}
}


s.match_length=0;


bflush=trees._tr_tally(s,0,s.window[s.strstart]);
s.lookahead--;
s.strstart++;
if(bflush){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
}
s.insert=0;
if(flush===Z_FINISH){

flush_block_only(s,true);
if(s.strm.avail_out===0){
return BS_FINISH_STARTED;
}

return BS_FINISH_DONE;
}
if(s.last_lit){

flush_block_only(s,false);
if(s.strm.avail_out===0){
return BS_NEED_MORE;
}

}
return BS_BLOCK_DONE;
}






function Config(good_length,max_lazy,nice_length,max_chain,func){
this.good_length=good_length;
this.max_lazy=max_lazy;
this.nice_length=nice_length;
this.max_chain=max_chain;
this.func=func;
}

var configuration_table;

configuration_table=[

new Config(0,0,0,0,deflate_stored),
new Config(4,4,8,4,deflate_fast),
new Config(4,5,16,8,deflate_fast),
new Config(4,6,32,32,deflate_fast),

new Config(4,4,16,16,deflate_slow),
new Config(8,16,32,32,deflate_slow),
new Config(8,16,128,128,deflate_slow),
new Config(8,32,128,256,deflate_slow),
new Config(32,128,258,1024,deflate_slow),
new Config(32,258,258,4096,deflate_slow)];






function lm_init(s){
s.window_size=2*s.w_size;


zero(s.head);



s.max_lazy_match=configuration_table[s.level].max_lazy;
s.good_match=configuration_table[s.level].good_length;
s.nice_match=configuration_table[s.level].nice_length;
s.max_chain_length=configuration_table[s.level].max_chain;

s.strstart=0;
s.block_start=0;
s.lookahead=0;
s.insert=0;
s.match_length=s.prev_length=MIN_MATCH-1;
s.match_available=0;
s.ins_h=0;
}


function DeflateState(){
this.strm=null;
this.status=0;
this.pending_buf=null;
this.pending_buf_size=0;
this.pending_out=0;
this.pending=0;
this.wrap=0;
this.gzhead=null;
this.gzindex=0;
this.method=Z_DEFLATED;
this.last_flush=-1;

this.w_size=0;
this.w_bits=0;
this.w_mask=0;

this.window=null;







this.window_size=0;




this.prev=null;





this.head=null;

this.ins_h=0;
this.hash_size=0;
this.hash_bits=0;
this.hash_mask=0;

this.hash_shift=0;






this.block_start=0;




this.match_length=0;
this.prev_match=0;
this.match_available=0;
this.strstart=0;
this.match_start=0;
this.lookahead=0;

this.prev_length=0;




this.max_chain_length=0;





this.max_lazy_match=0;











this.level=0;
this.strategy=0;

this.good_match=0;


this.nice_match=0;











this.dyn_ltree=new utils.Buf16(HEAP_SIZE*2);
this.dyn_dtree=new utils.Buf16((2*D_CODES+1)*2);
this.bl_tree=new utils.Buf16((2*BL_CODES+1)*2);
zero(this.dyn_ltree);
zero(this.dyn_dtree);
zero(this.bl_tree);

this.l_desc=null;
this.d_desc=null;
this.bl_desc=null;


this.bl_count=new utils.Buf16(MAX_BITS+1);



this.heap=new utils.Buf16(2*L_CODES+1);
zero(this.heap);

this.heap_len=0;
this.heap_max=0;




this.depth=new utils.Buf16(2*L_CODES+1);
zero(this.depth);



this.l_buf=0;

this.lit_bufsize=0;



















this.last_lit=0;

this.d_buf=0;





this.opt_len=0;
this.static_len=0;
this.matches=0;
this.insert=0;


this.bi_buf=0;



this.bi_valid=0;












}


function deflateResetKeep(strm){
var s;

if(!strm||!strm.state){
return err(strm,Z_STREAM_ERROR);
}

strm.total_in=strm.total_out=0;
strm.data_type=Z_UNKNOWN;

s=strm.state;
s.pending=0;
s.pending_out=0;

if(s.wrap<0){
s.wrap=-s.wrap;

}
s.status=s.wrap?INIT_STATE:BUSY_STATE;
strm.adler=s.wrap===2?
0:

1;
s.last_flush=Z_NO_FLUSH;
trees._tr_init(s);
return Z_OK;
}


function deflateReset(strm){
var ret=deflateResetKeep(strm);
if(ret===Z_OK){
lm_init(strm.state);
}
return ret;
}


function deflateSetHeader(strm,head){
if(!strm||!strm.state){return Z_STREAM_ERROR;}
if(strm.state.wrap!==2){return Z_STREAM_ERROR;}
strm.state.gzhead=head;
return Z_OK;
}


function deflateInit2(strm,level,method,windowBits,memLevel,strategy){
if(!strm){
return Z_STREAM_ERROR;
}
var wrap=1;

if(level===Z_DEFAULT_COMPRESSION){
level=6;
}

if(windowBits<0){
wrap=0;
windowBits=-windowBits;
}else

if(windowBits>15){
wrap=2;
windowBits-=16;
}


if(memLevel<1||memLevel>MAX_MEM_LEVEL||method!==Z_DEFLATED||
windowBits<8||windowBits>15||level<0||level>9||
strategy<0||strategy>Z_FIXED){
return err(strm,Z_STREAM_ERROR);
}


if(windowBits===8){
windowBits=9;
}


var s=new DeflateState();

strm.state=s;
s.strm=strm;

s.wrap=wrap;
s.gzhead=null;
s.w_bits=windowBits;
s.w_size=1<<s.w_bits;
s.w_mask=s.w_size-1;

s.hash_bits=memLevel+7;
s.hash_size=1<<s.hash_bits;
s.hash_mask=s.hash_size-1;
s.hash_shift=~~((s.hash_bits+MIN_MATCH-1)/MIN_MATCH);

s.window=new utils.Buf8(s.w_size*2);
s.head=new utils.Buf16(s.hash_size);
s.prev=new utils.Buf16(s.w_size);




s.lit_bufsize=1<<memLevel+6;

s.pending_buf_size=s.lit_bufsize*4;



s.pending_buf=new utils.Buf8(s.pending_buf_size);



s.d_buf=1*s.lit_bufsize;


s.l_buf=(1+2)*s.lit_bufsize;

s.level=level;
s.strategy=strategy;
s.method=method;

return deflateReset(strm);
}

function deflateInit(strm,level){
return deflateInit2(strm,level,Z_DEFLATED,MAX_WBITS,DEF_MEM_LEVEL,Z_DEFAULT_STRATEGY);
}


function deflate(strm,flush){
var old_flush,s;
var beg,val;

if(!strm||!strm.state||
flush>Z_BLOCK||flush<0){
return strm?err(strm,Z_STREAM_ERROR):Z_STREAM_ERROR;
}

s=strm.state;

if(!strm.output||
!strm.input&&strm.avail_in!==0||
s.status===FINISH_STATE&&flush!==Z_FINISH){
return err(strm,strm.avail_out===0?Z_BUF_ERROR:Z_STREAM_ERROR);
}

s.strm=strm;
old_flush=s.last_flush;
s.last_flush=flush;


if(s.status===INIT_STATE){

if(s.wrap===2){
strm.adler=0;
put_byte(s,31);
put_byte(s,139);
put_byte(s,8);
if(!s.gzhead){
put_byte(s,0);
put_byte(s,0);
put_byte(s,0);
put_byte(s,0);
put_byte(s,0);
put_byte(s,s.level===9?2:
s.strategy>=Z_HUFFMAN_ONLY||s.level<2?
4:0);
put_byte(s,OS_CODE);
s.status=BUSY_STATE;
}else
{
put_byte(s,(s.gzhead.text?1:0)+(
s.gzhead.hcrc?2:0)+(
!s.gzhead.extra?0:4)+(
!s.gzhead.name?0:8)+(
!s.gzhead.comment?0:16));

put_byte(s,s.gzhead.time&0xff);
put_byte(s,s.gzhead.time>>8&0xff);
put_byte(s,s.gzhead.time>>16&0xff);
put_byte(s,s.gzhead.time>>24&0xff);
put_byte(s,s.level===9?2:
s.strategy>=Z_HUFFMAN_ONLY||s.level<2?
4:0);
put_byte(s,s.gzhead.os&0xff);
if(s.gzhead.extra&&s.gzhead.extra.length){
put_byte(s,s.gzhead.extra.length&0xff);
put_byte(s,s.gzhead.extra.length>>8&0xff);
}
if(s.gzhead.hcrc){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending,0);
}
s.gzindex=0;
s.status=EXTRA_STATE;
}
}else

{
var header=Z_DEFLATED+(s.w_bits-8<<4)<<8;
var level_flags=-1;

if(s.strategy>=Z_HUFFMAN_ONLY||s.level<2){
level_flags=0;
}else if(s.level<6){
level_flags=1;
}else if(s.level===6){
level_flags=2;
}else{
level_flags=3;
}
header|=level_flags<<6;
if(s.strstart!==0){header|=PRESET_DICT;}
header+=31-header%31;

s.status=BUSY_STATE;
putShortMSB(s,header);


if(s.strstart!==0){
putShortMSB(s,strm.adler>>>16);
putShortMSB(s,strm.adler&0xffff);
}
strm.adler=1;
}
}


if(s.status===EXTRA_STATE){
if(s.gzhead.extra){
beg=s.pending;

while(s.gzindex<(s.gzhead.extra.length&0xffff)){
if(s.pending===s.pending_buf_size){
if(s.gzhead.hcrc&&s.pending>beg){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);
}
flush_pending(strm);
beg=s.pending;
if(s.pending===s.pending_buf_size){
break;
}
}
put_byte(s,s.gzhead.extra[s.gzindex]&0xff);
s.gzindex++;
}
if(s.gzhead.hcrc&&s.pending>beg){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);
}
if(s.gzindex===s.gzhead.extra.length){
s.gzindex=0;
s.status=NAME_STATE;
}
}else
{
s.status=NAME_STATE;
}
}
if(s.status===NAME_STATE){
if(s.gzhead.name){
beg=s.pending;


do{
if(s.pending===s.pending_buf_size){
if(s.gzhead.hcrc&&s.pending>beg){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);
}
flush_pending(strm);
beg=s.pending;
if(s.pending===s.pending_buf_size){
val=1;
break;
}
}

if(s.gzindex<s.gzhead.name.length){
val=s.gzhead.name.charCodeAt(s.gzindex++)&0xff;
}else{
val=0;
}
put_byte(s,val);
}while(val!==0);

if(s.gzhead.hcrc&&s.pending>beg){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);
}
if(val===0){
s.gzindex=0;
s.status=COMMENT_STATE;
}
}else
{
s.status=COMMENT_STATE;
}
}
if(s.status===COMMENT_STATE){
if(s.gzhead.comment){
beg=s.pending;


do{
if(s.pending===s.pending_buf_size){
if(s.gzhead.hcrc&&s.pending>beg){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);
}
flush_pending(strm);
beg=s.pending;
if(s.pending===s.pending_buf_size){
val=1;
break;
}
}

if(s.gzindex<s.gzhead.comment.length){
val=s.gzhead.comment.charCodeAt(s.gzindex++)&0xff;
}else{
val=0;
}
put_byte(s,val);
}while(val!==0);

if(s.gzhead.hcrc&&s.pending>beg){
strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);
}
if(val===0){
s.status=HCRC_STATE;
}
}else
{
s.status=HCRC_STATE;
}
}
if(s.status===HCRC_STATE){
if(s.gzhead.hcrc){
if(s.pending+2>s.pending_buf_size){
flush_pending(strm);
}
if(s.pending+2<=s.pending_buf_size){
put_byte(s,strm.adler&0xff);
put_byte(s,strm.adler>>8&0xff);
strm.adler=0;
s.status=BUSY_STATE;
}
}else
{
s.status=BUSY_STATE;
}
}



if(s.pending!==0){
flush_pending(strm);
if(strm.avail_out===0){






s.last_flush=-1;
return Z_OK;
}





}else if(strm.avail_in===0&&rank(flush)<=rank(old_flush)&&
flush!==Z_FINISH){
return err(strm,Z_BUF_ERROR);
}


if(s.status===FINISH_STATE&&strm.avail_in!==0){
return err(strm,Z_BUF_ERROR);
}



if(strm.avail_in!==0||s.lookahead!==0||
flush!==Z_NO_FLUSH&&s.status!==FINISH_STATE){
var bstate=s.strategy===Z_HUFFMAN_ONLY?deflate_huff(s,flush):
s.strategy===Z_RLE?deflate_rle(s,flush):
configuration_table[s.level].func(s,flush);

if(bstate===BS_FINISH_STARTED||bstate===BS_FINISH_DONE){
s.status=FINISH_STATE;
}
if(bstate===BS_NEED_MORE||bstate===BS_FINISH_STARTED){
if(strm.avail_out===0){
s.last_flush=-1;

}
return Z_OK;







}
if(bstate===BS_BLOCK_DONE){
if(flush===Z_PARTIAL_FLUSH){
trees._tr_align(s);
}else
if(flush!==Z_BLOCK){

trees._tr_stored_block(s,0,0,false);



if(flush===Z_FULL_FLUSH){

zero(s.head);

if(s.lookahead===0){
s.strstart=0;
s.block_start=0;
s.insert=0;
}
}
}
flush_pending(strm);
if(strm.avail_out===0){
s.last_flush=-1;
return Z_OK;
}
}
}



if(flush!==Z_FINISH){return Z_OK;}
if(s.wrap<=0){return Z_STREAM_END;}


if(s.wrap===2){
put_byte(s,strm.adler&0xff);
put_byte(s,strm.adler>>8&0xff);
put_byte(s,strm.adler>>16&0xff);
put_byte(s,strm.adler>>24&0xff);
put_byte(s,strm.total_in&0xff);
put_byte(s,strm.total_in>>8&0xff);
put_byte(s,strm.total_in>>16&0xff);
put_byte(s,strm.total_in>>24&0xff);
}else

{
putShortMSB(s,strm.adler>>>16);
putShortMSB(s,strm.adler&0xffff);
}

flush_pending(strm);



if(s.wrap>0){s.wrap=-s.wrap;}

return s.pending!==0?Z_OK:Z_STREAM_END;
}

function deflateEnd(strm){
var status;

if(!strm||!strm.state){
return Z_STREAM_ERROR;
}

status=strm.state.status;
if(status!==INIT_STATE&&
status!==EXTRA_STATE&&
status!==NAME_STATE&&
status!==COMMENT_STATE&&
status!==HCRC_STATE&&
status!==BUSY_STATE&&
status!==FINISH_STATE)
{
return err(strm,Z_STREAM_ERROR);
}

strm.state=null;

return status===BUSY_STATE?err(strm,Z_DATA_ERROR):Z_OK;
}






function deflateSetDictionary(strm,dictionary){
var dictLength=dictionary.length;

var s;
var str,n;
var wrap;
var avail;
var next;
var input;
var tmpDict;

if(!strm||!strm.state){
return Z_STREAM_ERROR;
}

s=strm.state;
wrap=s.wrap;

if(wrap===2||wrap===1&&s.status!==INIT_STATE||s.lookahead){
return Z_STREAM_ERROR;
}


if(wrap===1){

strm.adler=adler32(strm.adler,dictionary,dictLength,0);
}

s.wrap=0;


if(dictLength>=s.w_size){
if(wrap===0){

zero(s.head);
s.strstart=0;
s.block_start=0;
s.insert=0;
}


tmpDict=new utils.Buf8(s.w_size);
utils.arraySet(tmpDict,dictionary,dictLength-s.w_size,s.w_size,0);
dictionary=tmpDict;
dictLength=s.w_size;
}

avail=strm.avail_in;
next=strm.next_in;
input=strm.input;
strm.avail_in=dictLength;
strm.next_in=0;
strm.input=dictionary;
fill_window(s);
while(s.lookahead>=MIN_MATCH){
str=s.strstart;
n=s.lookahead-(MIN_MATCH-1);
do{

s.ins_h=(s.ins_h<<s.hash_shift^s.window[str+MIN_MATCH-1])&s.hash_mask;

s.prev[str&s.w_mask]=s.head[s.ins_h];

s.head[s.ins_h]=str;
str++;
}while(--n);
s.strstart=str;
s.lookahead=MIN_MATCH-1;
fill_window(s);
}
s.strstart+=s.lookahead;
s.block_start=s.strstart;
s.insert=s.lookahead;
s.lookahead=0;
s.match_length=s.prev_length=MIN_MATCH-1;
s.match_available=0;
strm.next_in=next;
strm.input=input;
strm.avail_in=avail;
s.wrap=wrap;
return Z_OK;
}


exports.deflateInit=deflateInit;
exports.deflateInit2=deflateInit2;
exports.deflateReset=deflateReset;
exports.deflateResetKeep=deflateResetKeep;
exports.deflateSetHeader=deflateSetHeader;
exports.deflate=deflate;
exports.deflateEnd=deflateEnd;
exports.deflateSetDictionary=deflateSetDictionary;
exports.deflateInfo='pako deflate (from Nodeca project)';










},{"../utils/common":116,"./adler32":117,"./crc32":119,"./messages":121,"./trees":122}],121:[function(require,module,exports){
'use strict';




















module.exports={
2:'need dictionary',
1:'stream end',
0:'',
'-1':'file error',
'-2':'stream error',
'-3':'data error',
'-4':'insufficient memory',
'-5':'buffer error',
'-6':'incompatible version'};


},{}],122:[function(require,module,exports){
'use strict';




















var utils=require('../utils/common');








var Z_FIXED=4;



var Z_BINARY=0;
var Z_TEXT=1;

var Z_UNKNOWN=2;




function zero(buf){var len=buf.length;while(--len>=0){buf[len]=0;}}



var STORED_BLOCK=0;
var STATIC_TREES=1;
var DYN_TREES=2;


var MIN_MATCH=3;
var MAX_MATCH=258;







var LENGTH_CODES=29;


var LITERALS=256;


var L_CODES=LITERALS+1+LENGTH_CODES;


var D_CODES=30;


var BL_CODES=19;


var HEAP_SIZE=2*L_CODES+1;


var MAX_BITS=15;


var Buf_size=16;







var MAX_BL_BITS=7;


var END_BLOCK=256;


var REP_3_6=16;


var REPZ_3_10=17;


var REPZ_11_138=18;



var extra_lbits=
[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits=
[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits=
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order=
[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];












var DIST_CODE_LEN=512;


var static_ltree=new Array((L_CODES+2)*2);
zero(static_ltree);






var static_dtree=new Array(D_CODES*2);
zero(static_dtree);




var _dist_code=new Array(DIST_CODE_LEN);
zero(_dist_code);





var _length_code=new Array(MAX_MATCH-MIN_MATCH+1);
zero(_length_code);


var base_length=new Array(LENGTH_CODES);
zero(base_length);


var base_dist=new Array(D_CODES);
zero(base_dist);



function StaticTreeDesc(static_tree,extra_bits,extra_base,elems,max_length){

this.static_tree=static_tree;
this.extra_bits=extra_bits;
this.extra_base=extra_base;
this.elems=elems;
this.max_length=max_length;


this.has_stree=static_tree&&static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree,stat_desc){
this.dyn_tree=dyn_tree;
this.max_code=0;
this.stat_desc=stat_desc;
}



function d_code(dist){
return dist<256?_dist_code[dist]:_dist_code[256+(dist>>>7)];
}






function put_short(s,w){


s.pending_buf[s.pending++]=w&0xff;
s.pending_buf[s.pending++]=w>>>8&0xff;
}






function send_bits(s,value,length){
if(s.bi_valid>Buf_size-length){
s.bi_buf|=value<<s.bi_valid&0xffff;
put_short(s,s.bi_buf);
s.bi_buf=value>>Buf_size-s.bi_valid;
s.bi_valid+=length-Buf_size;
}else{
s.bi_buf|=value<<s.bi_valid&0xffff;
s.bi_valid+=length;
}
}


function send_code(s,c,tree){
send_bits(s,tree[c*2],tree[c*2+1]);
}







function bi_reverse(code,len){
var res=0;
do{
res|=code&1;
code>>>=1;
res<<=1;
}while(--len>0);
return res>>>1;
}





function bi_flush(s){
if(s.bi_valid===16){
put_short(s,s.bi_buf);
s.bi_buf=0;
s.bi_valid=0;

}else if(s.bi_valid>=8){
s.pending_buf[s.pending++]=s.bi_buf&0xff;
s.bi_buf>>=8;
s.bi_valid-=8;
}
}












function gen_bitlen(s,desc)


{
var tree=desc.dyn_tree;
var max_code=desc.max_code;
var stree=desc.stat_desc.static_tree;
var has_stree=desc.stat_desc.has_stree;
var extra=desc.stat_desc.extra_bits;
var base=desc.stat_desc.extra_base;
var max_length=desc.stat_desc.max_length;
var h;
var n,m;
var bits;
var xbits;
var f;
var overflow=0;

for(bits=0;bits<=MAX_BITS;bits++){
s.bl_count[bits]=0;
}




tree[s.heap[s.heap_max]*2+1]=0;

for(h=s.heap_max+1;h<HEAP_SIZE;h++){
n=s.heap[h];
bits=tree[tree[n*2+1]*2+1]+1;
if(bits>max_length){
bits=max_length;
overflow++;
}
tree[n*2+1]=bits;


if(n>max_code){continue;}

s.bl_count[bits]++;
xbits=0;
if(n>=base){
xbits=extra[n-base];
}
f=tree[n*2];
s.opt_len+=f*(bits+xbits);
if(has_stree){
s.static_len+=f*(stree[n*2+1]+xbits);
}
}
if(overflow===0){return;}





do{
bits=max_length-1;
while(s.bl_count[bits]===0){bits--;}
s.bl_count[bits]--;
s.bl_count[bits+1]+=2;
s.bl_count[max_length]--;



overflow-=2;
}while(overflow>0);






for(bits=max_length;bits!==0;bits--){
n=s.bl_count[bits];
while(n!==0){
m=s.heap[--h];
if(m>max_code){continue;}
if(tree[m*2+1]!==bits){

s.opt_len+=(bits-tree[m*2+1])*tree[m*2];
tree[m*2+1]=bits;
}
n--;
}
}
}










function gen_codes(tree,max_code,bl_count)



{
var next_code=new Array(MAX_BITS+1);
var code=0;
var bits;
var n;




for(bits=1;bits<=MAX_BITS;bits++){
next_code[bits]=code=code+bl_count[bits-1]<<1;
}







for(n=0;n<=max_code;n++){
var len=tree[n*2+1];
if(len===0){continue;}

tree[n*2]=bi_reverse(next_code[len]++,len);



}
}





function tr_static_init(){
var n;
var bits;
var length;
var code;
var dist;
var bl_count=new Array(MAX_BITS+1);















length=0;
for(code=0;code<LENGTH_CODES-1;code++){
base_length[code]=length;
for(n=0;n<1<<extra_lbits[code];n++){
_length_code[length++]=code;
}
}





_length_code[length-1]=code;


dist=0;
for(code=0;code<16;code++){
base_dist[code]=dist;
for(n=0;n<1<<extra_dbits[code];n++){
_dist_code[dist++]=code;
}
}

dist>>=7;
for(;code<D_CODES;code++){
base_dist[code]=dist<<7;
for(n=0;n<1<<extra_dbits[code]-7;n++){
_dist_code[256+dist++]=code;
}
}



for(bits=0;bits<=MAX_BITS;bits++){
bl_count[bits]=0;
}

n=0;
while(n<=143){
static_ltree[n*2+1]=8;
n++;
bl_count[8]++;
}
while(n<=255){
static_ltree[n*2+1]=9;
n++;
bl_count[9]++;
}
while(n<=279){
static_ltree[n*2+1]=7;
n++;
bl_count[7]++;
}
while(n<=287){
static_ltree[n*2+1]=8;
n++;
bl_count[8]++;
}




gen_codes(static_ltree,L_CODES+1,bl_count);


for(n=0;n<D_CODES;n++){
static_dtree[n*2+1]=5;
static_dtree[n*2]=bi_reverse(n,5);
}


static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,LITERALS+1,L_CODES,MAX_BITS);
static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,D_CODES,MAX_BITS);
static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,BL_CODES,MAX_BL_BITS);


}





function init_block(s){
var n;


for(n=0;n<L_CODES;n++){s.dyn_ltree[n*2]=0;}
for(n=0;n<D_CODES;n++){s.dyn_dtree[n*2]=0;}
for(n=0;n<BL_CODES;n++){s.bl_tree[n*2]=0;}

s.dyn_ltree[END_BLOCK*2]=1;
s.opt_len=s.static_len=0;
s.last_lit=s.matches=0;
}





function bi_windup(s)
{
if(s.bi_valid>8){
put_short(s,s.bi_buf);
}else if(s.bi_valid>0){

s.pending_buf[s.pending++]=s.bi_buf;
}
s.bi_buf=0;
s.bi_valid=0;
}





function copy_block(s,buf,len,header)




{
bi_windup(s);

if(header){
put_short(s,len);
put_short(s,~len);
}



utils.arraySet(s.pending_buf,s.window,buf,len,s.pending);
s.pending+=len;
}





function smaller(tree,n,m,depth){
var _n2=n*2;
var _m2=m*2;
return tree[_n2]<tree[_m2]||
tree[_n2]===tree[_m2]&&depth[n]<=depth[m];
}







function pqdownheap(s,tree,k)



{
var v=s.heap[k];
var j=k<<1;
while(j<=s.heap_len){

if(j<s.heap_len&&
smaller(tree,s.heap[j+1],s.heap[j],s.depth)){
j++;
}

if(smaller(tree,v,s.heap[j],s.depth)){break;}


s.heap[k]=s.heap[j];
k=j;


j<<=1;
}
s.heap[k]=v;
}








function compress_block(s,ltree,dtree)



{
var dist;
var lc;
var lx=0;
var code;
var extra;

if(s.last_lit!==0){
do{
dist=s.pending_buf[s.d_buf+lx*2]<<8|s.pending_buf[s.d_buf+lx*2+1];
lc=s.pending_buf[s.l_buf+lx];
lx++;

if(dist===0){
send_code(s,lc,ltree);

}else{

code=_length_code[lc];
send_code(s,code+LITERALS+1,ltree);
extra=extra_lbits[code];
if(extra!==0){
lc-=base_length[code];
send_bits(s,lc,extra);
}
dist--;
code=d_code(dist);


send_code(s,code,dtree);
extra=extra_dbits[code];
if(extra!==0){
dist-=base_dist[code];
send_bits(s,dist,extra);
}
}





}while(lx<s.last_lit);
}

send_code(s,END_BLOCK,ltree);
}










function build_tree(s,desc)


{
var tree=desc.dyn_tree;
var stree=desc.stat_desc.static_tree;
var has_stree=desc.stat_desc.has_stree;
var elems=desc.stat_desc.elems;
var n,m;
var max_code=-1;
var node;





s.heap_len=0;
s.heap_max=HEAP_SIZE;

for(n=0;n<elems;n++){
if(tree[n*2]!==0){
s.heap[++s.heap_len]=max_code=n;
s.depth[n]=0;

}else{
tree[n*2+1]=0;
}
}






while(s.heap_len<2){
node=s.heap[++s.heap_len]=max_code<2?++max_code:0;
tree[node*2]=1;
s.depth[node]=0;
s.opt_len--;

if(has_stree){
s.static_len-=stree[node*2+1];
}

}
desc.max_code=max_code;




for(n=s.heap_len>>1;n>=1;n--){pqdownheap(s,tree,n);}




node=elems;
do{


n=s.heap[1];
s.heap[1]=s.heap[s.heap_len--];
pqdownheap(s,tree,1);


m=s.heap[1];

s.heap[--s.heap_max]=n;
s.heap[--s.heap_max]=m;


tree[node*2]=tree[n*2]+tree[m*2];
s.depth[node]=(s.depth[n]>=s.depth[m]?s.depth[n]:s.depth[m])+1;
tree[n*2+1]=tree[m*2+1]=node;


s.heap[1]=node++;
pqdownheap(s,tree,1);

}while(s.heap_len>=2);

s.heap[--s.heap_max]=s.heap[1];




gen_bitlen(s,desc);


gen_codes(tree,max_code,s.bl_count);
}






function scan_tree(s,tree,max_code)



{
var n;
var prevlen=-1;
var curlen;

var nextlen=tree[0*2+1];

var count=0;
var max_count=7;
var min_count=4;

if(nextlen===0){
max_count=138;
min_count=3;
}
tree[(max_code+1)*2+1]=0xffff;

for(n=0;n<=max_code;n++){
curlen=nextlen;
nextlen=tree[(n+1)*2+1];

if(++count<max_count&&curlen===nextlen){
continue;

}else if(count<min_count){
s.bl_tree[curlen*2]+=count;

}else if(curlen!==0){

if(curlen!==prevlen){s.bl_tree[curlen*2]++;}
s.bl_tree[REP_3_6*2]++;

}else if(count<=10){
s.bl_tree[REPZ_3_10*2]++;

}else{
s.bl_tree[REPZ_11_138*2]++;
}

count=0;
prevlen=curlen;

if(nextlen===0){
max_count=138;
min_count=3;

}else if(curlen===nextlen){
max_count=6;
min_count=3;

}else{
max_count=7;
min_count=4;
}
}
}






function send_tree(s,tree,max_code)



{
var n;
var prevlen=-1;
var curlen;

var nextlen=tree[0*2+1];

var count=0;
var max_count=7;
var min_count=4;


if(nextlen===0){
max_count=138;
min_count=3;
}

for(n=0;n<=max_code;n++){
curlen=nextlen;
nextlen=tree[(n+1)*2+1];

if(++count<max_count&&curlen===nextlen){
continue;

}else if(count<min_count){
do{send_code(s,curlen,s.bl_tree);}while(--count!==0);

}else if(curlen!==0){
if(curlen!==prevlen){
send_code(s,curlen,s.bl_tree);
count--;
}

send_code(s,REP_3_6,s.bl_tree);
send_bits(s,count-3,2);

}else if(count<=10){
send_code(s,REPZ_3_10,s.bl_tree);
send_bits(s,count-3,3);

}else{
send_code(s,REPZ_11_138,s.bl_tree);
send_bits(s,count-11,7);
}

count=0;
prevlen=curlen;
if(nextlen===0){
max_count=138;
min_count=3;

}else if(curlen===nextlen){
max_count=6;
min_count=3;

}else{
max_count=7;
min_count=4;
}
}
}






function build_bl_tree(s){
var max_blindex;


scan_tree(s,s.dyn_ltree,s.l_desc.max_code);
scan_tree(s,s.dyn_dtree,s.d_desc.max_code);


build_tree(s,s.bl_desc);








for(max_blindex=BL_CODES-1;max_blindex>=3;max_blindex--){
if(s.bl_tree[bl_order[max_blindex]*2+1]!==0){
break;
}
}

s.opt_len+=3*(max_blindex+1)+5+5+4;



return max_blindex;
}







function send_all_trees(s,lcodes,dcodes,blcodes)


{
var rank;





send_bits(s,lcodes-257,5);
send_bits(s,dcodes-1,5);
send_bits(s,blcodes-4,4);
for(rank=0;rank<blcodes;rank++){

send_bits(s,s.bl_tree[bl_order[rank]*2+1],3);
}


send_tree(s,s.dyn_ltree,lcodes-1);


send_tree(s,s.dyn_dtree,dcodes-1);

}















function detect_data_type(s){




var black_mask=0xf3ffc07f;
var n;


for(n=0;n<=31;n++,black_mask>>>=1){
if(black_mask&1&&s.dyn_ltree[n*2]!==0){
return Z_BINARY;
}
}


if(s.dyn_ltree[9*2]!==0||s.dyn_ltree[10*2]!==0||
s.dyn_ltree[13*2]!==0){
return Z_TEXT;
}
for(n=32;n<LITERALS;n++){
if(s.dyn_ltree[n*2]!==0){
return Z_TEXT;
}
}




return Z_BINARY;
}


var static_init_done=false;




function _tr_init(s)
{

if(!static_init_done){
tr_static_init();
static_init_done=true;
}

s.l_desc=new TreeDesc(s.dyn_ltree,static_l_desc);
s.d_desc=new TreeDesc(s.dyn_dtree,static_d_desc);
s.bl_desc=new TreeDesc(s.bl_tree,static_bl_desc);

s.bi_buf=0;
s.bi_valid=0;


init_block(s);
}





function _tr_stored_block(s,buf,stored_len,last)




{
send_bits(s,(STORED_BLOCK<<1)+(last?1:0),3);
copy_block(s,buf,stored_len,true);
}






function _tr_align(s){
send_bits(s,STATIC_TREES<<1,3);
send_code(s,END_BLOCK,static_ltree);
bi_flush(s);
}






function _tr_flush_block(s,buf,stored_len,last)




{
var opt_lenb,static_lenb;
var max_blindex=0;


if(s.level>0){


if(s.strm.data_type===Z_UNKNOWN){
s.strm.data_type=detect_data_type(s);
}


build_tree(s,s.l_desc);



build_tree(s,s.d_desc);









max_blindex=build_bl_tree(s);


opt_lenb=s.opt_len+3+7>>>3;
static_lenb=s.static_len+3+7>>>3;





if(static_lenb<=opt_lenb){opt_lenb=static_lenb;}

}else{

opt_lenb=static_lenb=stored_len+5;
}

if(stored_len+4<=opt_lenb&&buf!==-1){








_tr_stored_block(s,buf,stored_len,last);

}else if(s.strategy===Z_FIXED||static_lenb===opt_lenb){

send_bits(s,(STATIC_TREES<<1)+(last?1:0),3);
compress_block(s,static_ltree,static_dtree);

}else{
send_bits(s,(DYN_TREES<<1)+(last?1:0),3);
send_all_trees(s,s.l_desc.max_code+1,s.d_desc.max_code+1,max_blindex+1);
compress_block(s,s.dyn_ltree,s.dyn_dtree);
}




init_block(s);

if(last){
bi_windup(s);
}


}





function _tr_tally(s,dist,lc)



{


s.pending_buf[s.d_buf+s.last_lit*2]=dist>>>8&0xff;
s.pending_buf[s.d_buf+s.last_lit*2+1]=dist&0xff;

s.pending_buf[s.l_buf+s.last_lit]=lc&0xff;
s.last_lit++;

if(dist===0){

s.dyn_ltree[lc*2]++;
}else{
s.matches++;

dist--;




s.dyn_ltree[(_length_code[lc]+LITERALS+1)*2]++;
s.dyn_dtree[d_code(dist)*2]++;
}
























return s.last_lit===s.lit_bufsize-1;




}

exports._tr_init=_tr_init;
exports._tr_stored_block=_tr_stored_block;
exports._tr_flush_block=_tr_flush_block;
exports._tr_tally=_tr_tally;
exports._tr_align=_tr_align;

},{"../utils/common":116}],123:[function(require,module,exports){
'use strict';




















function ZStream(){

this.input=null;
this.next_in=0;

this.avail_in=0;

this.total_in=0;

this.output=null;
this.next_out=0;

this.avail_out=0;

this.total_out=0;

this.msg='';

this.state=null;

this.data_type=2;

this.adler=0;
}

module.exports=ZStream;

},{}],124:[function(require,module,exports){
(function(process){

























function normalizeArray(parts,allowAboveRoot){

var up=0;
for(var i=parts.length-1;i>=0;i--){
var last=parts[i];
if(last==='.'){
parts.splice(i,1);
}else if(last==='..'){
parts.splice(i,1);
up++;
}else if(up){
parts.splice(i,1);
up--;
}
}


if(allowAboveRoot){
for(;up--;up){
parts.unshift('..');
}
}

return parts;
}



var splitPathRe=
/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath=function(filename){
return splitPathRe.exec(filename).slice(1);
};



exports.resolve=function(){
var resolvedPath='',
resolvedAbsolute=false;

for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){
var path=i>=0?arguments[i]:process.cwd();


if(typeof path!=='string'){
throw new TypeError('Arguments to path.resolve must be strings');
}else if(!path){
continue;
}

resolvedPath=path+'/'+resolvedPath;
resolvedAbsolute=path.charAt(0)==='/';
}





resolvedPath=normalizeArray(filter(resolvedPath.split('/'),function(p){
return!!p;
}),!resolvedAbsolute).join('/');

return(resolvedAbsolute?'/':'')+resolvedPath||'.';
};



exports.normalize=function(path){
var isAbsolute=exports.isAbsolute(path),
trailingSlash=substr(path,-1)==='/';


path=normalizeArray(filter(path.split('/'),function(p){
return!!p;
}),!isAbsolute).join('/');

if(!path&&!isAbsolute){
path='.';
}
if(path&&trailingSlash){
path+='/';
}

return(isAbsolute?'/':'')+path;
};


exports.isAbsolute=function(path){
return path.charAt(0)==='/';
};


exports.join=function(){
var paths=Array.prototype.slice.call(arguments,0);
return exports.normalize(filter(paths,function(p,index){
if(typeof p!=='string'){
throw new TypeError('Arguments to path.join must be strings');
}
return p;
}).join('/'));
};




exports.relative=function(from,to){
from=exports.resolve(from).substr(1);
to=exports.resolve(to).substr(1);

function trim(arr){
var start=0;
for(;start<arr.length;start++){
if(arr[start]!=='')break;
}

var end=arr.length-1;
for(;end>=0;end--){
if(arr[end]!=='')break;
}

if(start>end)return[];
return arr.slice(start,end-start+1);
}

var fromParts=trim(from.split('/'));
var toParts=trim(to.split('/'));

var length=Math.min(fromParts.length,toParts.length);
var samePartsLength=length;
for(var i=0;i<length;i++){
if(fromParts[i]!==toParts[i]){
samePartsLength=i;
break;
}
}

var outputParts=[];
for(var i=samePartsLength;i<fromParts.length;i++){
outputParts.push('..');
}

outputParts=outputParts.concat(toParts.slice(samePartsLength));

return outputParts.join('/');
};

exports.sep='/';
exports.delimiter=':';

exports.dirname=function(path){
var result=splitPath(path),
root=result[0],
dir=result[1];

if(!root&&!dir){

return'.';
}

if(dir){

dir=dir.substr(0,dir.length-1);
}

return root+dir;
};


exports.basename=function(path,ext){
var f=splitPath(path)[2];

if(ext&&f.substr(-1*ext.length)===ext){
f=f.substr(0,f.length-ext.length);
}
return f;
};


exports.extname=function(path){
return splitPath(path)[3];
};

function filter(xs,f){
if(xs.filter)return xs.filter(f);
var res=[];
for(var i=0;i<xs.length;i++){
if(f(xs[i],i,xs))res.push(xs[i]);
}
return res;
}


var substr='ab'.substr(-1)==='b'?
function(str,start,len){return str.substr(start,len);}:
function(str,start,len){
if(start<0)start=str.length+start;
return str.substr(start,len);
};


}).call(this,require('_process'));
},{"_process":126}],125:[function(require,module,exports){
(function(process){
'use strict';

if(!process.version||
process.version.indexOf('v0.')===0||
process.version.indexOf('v1.')===0&&process.version.indexOf('v1.8.')!==0){
module.exports=nextTick;
}else{
module.exports=process.nextTick;
}

function nextTick(fn,arg1,arg2,arg3){
if(typeof fn!=='function'){
throw new TypeError('"callback" argument must be a function');
}
var len=arguments.length;
var args,i;
switch(len){
case 0:
case 1:
return process.nextTick(fn);
case 2:
return process.nextTick(function afterTickOne(){
fn.call(null,arg1);
});
case 3:
return process.nextTick(function afterTickTwo(){
fn.call(null,arg1,arg2);
});
case 4:
return process.nextTick(function afterTickThree(){
fn.call(null,arg1,arg2,arg3);
});
default:
args=new Array(len-1);
i=0;
while(i<args.length){
args[i++]=arguments[i];
}
return process.nextTick(function afterTick(){
fn.apply(null,args);
});}

}

}).call(this,require('_process'));
},{"_process":126}],126:[function(require,module,exports){

var process=module.exports={};






var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout(){
throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout(){
throw new Error('clearTimeout has not been defined');
}
(function(){
try{
if(typeof setTimeout==='function'){
cachedSetTimeout=setTimeout;
}else{
cachedSetTimeout=defaultSetTimout;
}
}catch(e){
cachedSetTimeout=defaultSetTimout;
}
try{
if(typeof clearTimeout==='function'){
cachedClearTimeout=clearTimeout;
}else{
cachedClearTimeout=defaultClearTimeout;
}
}catch(e){
cachedClearTimeout=defaultClearTimeout;
}
})();
function runTimeout(fun){
if(cachedSetTimeout===setTimeout){

return setTimeout(fun,0);
}

if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){
cachedSetTimeout=setTimeout;
return setTimeout(fun,0);
}
try{

return cachedSetTimeout(fun,0);
}catch(e){
try{

return cachedSetTimeout.call(null,fun,0);
}catch(e){

return cachedSetTimeout.call(this,fun,0);
}
}


}
function runClearTimeout(marker){
if(cachedClearTimeout===clearTimeout){

return clearTimeout(marker);
}

if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){
cachedClearTimeout=clearTimeout;
return clearTimeout(marker);
}
try{

return cachedClearTimeout(marker);
}catch(e){
try{

return cachedClearTimeout.call(null,marker);
}catch(e){


return cachedClearTimeout.call(this,marker);
}
}



}
var queue=[];
var draining=false;
var currentQueue;
var queueIndex=-1;

function cleanUpNextTick(){
if(!draining||!currentQueue){
return;
}
draining=false;
if(currentQueue.length){
queue=currentQueue.concat(queue);
}else{
queueIndex=-1;
}
if(queue.length){
drainQueue();
}
}

function drainQueue(){
if(draining){
return;
}
var timeout=runTimeout(cleanUpNextTick);
draining=true;

var len=queue.length;
while(len){
currentQueue=queue;
queue=[];
while(++queueIndex<len){
if(currentQueue){
currentQueue[queueIndex].run();
}
}
queueIndex=-1;
len=queue.length;
}
currentQueue=null;
draining=false;
runClearTimeout(timeout);
}

process.nextTick=function(fun){
var args=new Array(arguments.length-1);
if(arguments.length>1){
for(var i=1;i<arguments.length;i++){
args[i-1]=arguments[i];
}
}
queue.push(new Item(fun,args));
if(queue.length===1&&!draining){
runTimeout(drainQueue);
}
};


function Item(fun,array){
this.fun=fun;
this.array=array;
}
Item.prototype.run=function(){
this.fun.apply(null,this.array);
};
process.title='browser';
process.browser=true;
process.env={};
process.argv=[];
process.version='';
process.versions={};

function noop(){}

process.on=noop;
process.addListener=noop;
process.once=noop;
process.off=noop;
process.removeListener=noop;
process.removeAllListeners=noop;
process.emit=noop;
process.prependListener=noop;
process.prependOnceListener=noop;

process.listeners=function(name){return[];};

process.binding=function(name){
throw new Error('process.binding is not supported');
};

process.cwd=function(){return'/';};
process.chdir=function(dir){
throw new Error('process.chdir is not supported');
};
process.umask=function(){return 0;};

},{}],127:[function(require,module,exports){





















'use strict';




function hasOwnProperty(obj,prop){
return Object.prototype.hasOwnProperty.call(obj,prop);
}

module.exports=function(qs,sep,eq,options){
sep=sep||'&';
eq=eq||'=';
var obj={};

if(typeof qs!=='string'||qs.length===0){
return obj;
}

var regexp=/\+/g;
qs=qs.split(sep);

var maxKeys=1000;
if(options&&typeof options.maxKeys==='number'){
maxKeys=options.maxKeys;
}

var len=qs.length;

if(maxKeys>0&&len>maxKeys){
len=maxKeys;
}

for(var i=0;i<len;++i){
var x=qs[i].replace(regexp,'%20'),
idx=x.indexOf(eq),
kstr,vstr,k,v;

if(idx>=0){
kstr=x.substr(0,idx);
vstr=x.substr(idx+1);
}else{
kstr=x;
vstr='';
}

k=decodeURIComponent(kstr);
v=decodeURIComponent(vstr);

if(!hasOwnProperty(obj,k)){
obj[k]=v;
}else if(isArray(obj[k])){
obj[k].push(v);
}else{
obj[k]=[obj[k],v];
}
}

return obj;
};

var isArray=Array.isArray||function(xs){
return Object.prototype.toString.call(xs)==='[object Array]';
};

},{}],128:[function(require,module,exports){





















'use strict';

var stringifyPrimitive=function(v){
switch(typeof v){
case'string':
return v;

case'boolean':
return v?'true':'false';

case'number':
return isFinite(v)?v:'';

default:
return'';}

};

module.exports=function(obj,sep,eq,name){
sep=sep||'&';
eq=eq||'=';
if(obj===null){
obj=undefined;
}

if(typeof obj==='object'){
return map(objectKeys(obj),function(k){
var ks=encodeURIComponent(stringifyPrimitive(k))+eq;
if(isArray(obj[k])){
return map(obj[k],function(v){
return ks+encodeURIComponent(stringifyPrimitive(v));
}).join(sep);
}else{
return ks+encodeURIComponent(stringifyPrimitive(obj[k]));
}
}).join(sep);

}

if(!name)return'';
return encodeURIComponent(stringifyPrimitive(name))+eq+
encodeURIComponent(stringifyPrimitive(obj));
};

var isArray=Array.isArray||function(xs){
return Object.prototype.toString.call(xs)==='[object Array]';
};

function map(xs,f){
if(xs.map)return xs.map(f);
var res=[];
for(var i=0;i<xs.length;i++){
res.push(f(xs[i],i));
}
return res;
}

var objectKeys=Object.keys||function(obj){
var res=[];
for(var key in obj){
if(Object.prototype.hasOwnProperty.call(obj,key))res.push(key);
}
return res;
};

},{}],129:[function(require,module,exports){
'use strict';

exports.decode=exports.parse=require('./decode');
exports.encode=exports.stringify=require('./encode');

},{"./decode":127,"./encode":128}],130:[function(require,module,exports){
module.exports=require("./lib/_stream_duplex.js");

},{"./lib/_stream_duplex.js":131}],131:[function(require,module,exports){





'use strict';



var objectKeys=Object.keys||function(obj){
var keys=[];
for(var key in obj){
keys.push(key);
}return keys;
};


module.exports=Duplex;


var processNextTick=require('process-nextick-args');



var util=require('core-util-is');
util.inherits=require('inherits');


var Readable=require('./_stream_readable');
var Writable=require('./_stream_writable');

util.inherits(Duplex,Readable);

var keys=objectKeys(Writable.prototype);
for(var v=0;v<keys.length;v++){
var method=keys[v];
if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];
}

function Duplex(options){
if(!(this instanceof Duplex))return new Duplex(options);

Readable.call(this,options);
Writable.call(this,options);

if(options&&options.readable===false)this.readable=false;

if(options&&options.writable===false)this.writable=false;

this.allowHalfOpen=true;
if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;

this.once('end',onend);
}


function onend(){


if(this.allowHalfOpen||this._writableState.ended)return;



processNextTick(onEndNT,this);
}

function onEndNT(self){
self.end();
}

function forEach(xs,f){
for(var i=0,l=xs.length;i<l;i++){
f(xs[i],i);
}
}
},{"./_stream_readable":133,"./_stream_writable":135,"core-util-is":110,"inherits":113,"process-nextick-args":125}],132:[function(require,module,exports){




'use strict';

module.exports=PassThrough;

var Transform=require('./_stream_transform');


var util=require('core-util-is');
util.inherits=require('inherits');


util.inherits(PassThrough,Transform);

function PassThrough(options){
if(!(this instanceof PassThrough))return new PassThrough(options);

Transform.call(this,options);
}

PassThrough.prototype._transform=function(chunk,encoding,cb){
cb(null,chunk);
};
},{"./_stream_transform":134,"core-util-is":110,"inherits":113}],133:[function(require,module,exports){
(function(process){
'use strict';

module.exports=Readable;


var processNextTick=require('process-nextick-args');



var isArray=require('isarray');



var Duplex;


Readable.ReadableState=ReadableState;


var EE=require('events').EventEmitter;

var EElistenerCount=function(emitter,type){
return emitter.listeners(type).length;
};



var Stream;
(function(){
try{
Stream=require('st'+'ream');
}catch(_){}finally{
if(!Stream)Stream=require('events').EventEmitter;
}
})();


var Buffer=require('buffer').Buffer;

var bufferShim=require('buffer-shims');



var util=require('core-util-is');
util.inherits=require('inherits');



var debugUtil=require('util');
var debug=void 0;
if(debugUtil&&debugUtil.debuglog){
debug=debugUtil.debuglog('stream');
}else{
debug=function(){};
}


var BufferList=require('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable,Stream);

function prependListener(emitter,event,fn){


if(typeof emitter.prependListener==='function'){
return emitter.prependListener(event,fn);
}else{




if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]];
}
}

function ReadableState(options,stream){
Duplex=Duplex||require('./_stream_duplex');

options=options||{};



this.objectMode=!!options.objectMode;

if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;



var hwm=options.highWaterMark;
var defaultHwm=this.objectMode?16:16*1024;
this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;


this.highWaterMark=~~this.highWaterMark;




this.buffer=new BufferList();
this.length=0;
this.pipes=null;
this.pipesCount=0;
this.flowing=null;
this.ended=false;
this.endEmitted=false;
this.reading=false;





this.sync=true;



this.needReadable=false;
this.emittedReadable=false;
this.readableListening=false;
this.resumeScheduled=false;




this.defaultEncoding=options.defaultEncoding||'utf8';



this.ranOut=false;


this.awaitDrain=0;


this.readingMore=false;

this.decoder=null;
this.encoding=null;
if(options.encoding){
if(!StringDecoder)StringDecoder=require('string_decoder/').StringDecoder;
this.decoder=new StringDecoder(options.encoding);
this.encoding=options.encoding;
}
}

function Readable(options){
Duplex=Duplex||require('./_stream_duplex');

if(!(this instanceof Readable))return new Readable(options);

this._readableState=new ReadableState(options,this);


this.readable=true;

if(options&&typeof options.read==='function')this._read=options.read;

Stream.call(this);
}





Readable.prototype.push=function(chunk,encoding){
var state=this._readableState;

if(!state.objectMode&&typeof chunk==='string'){
encoding=encoding||state.defaultEncoding;
if(encoding!==state.encoding){
chunk=bufferShim.from(chunk,encoding);
encoding='';
}
}

return readableAddChunk(this,state,chunk,encoding,false);
};


Readable.prototype.unshift=function(chunk){
var state=this._readableState;
return readableAddChunk(this,state,chunk,'',true);
};

Readable.prototype.isPaused=function(){
return this._readableState.flowing===false;
};

function readableAddChunk(stream,state,chunk,encoding,addToFront){
var er=chunkInvalid(state,chunk);
if(er){
stream.emit('error',er);
}else if(chunk===null){
state.reading=false;
onEofChunk(stream,state);
}else if(state.objectMode||chunk&&chunk.length>0){
if(state.ended&&!addToFront){
var e=new Error('stream.push() after EOF');
stream.emit('error',e);
}else if(state.endEmitted&&addToFront){
var _e=new Error('stream.unshift() after end event');
stream.emit('error',_e);
}else{
var skipAdd;
if(state.decoder&&!addToFront&&!encoding){
chunk=state.decoder.write(chunk);
skipAdd=!state.objectMode&&chunk.length===0;
}

if(!addToFront)state.reading=false;



if(!skipAdd){

if(state.flowing&&state.length===0&&!state.sync){
stream.emit('data',chunk);
stream.read(0);
}else{

state.length+=state.objectMode?1:chunk.length;
if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);

if(state.needReadable)emitReadable(stream);
}
}

maybeReadMore(stream,state);
}
}else if(!addToFront){
state.reading=false;
}

return needMoreData(state);
}








function needMoreData(state){
return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);
}


Readable.prototype.setEncoding=function(enc){
if(!StringDecoder)StringDecoder=require('string_decoder/').StringDecoder;
this._readableState.decoder=new StringDecoder(enc);
this._readableState.encoding=enc;
return this;
};


var MAX_HWM=0x800000;
function computeNewHighWaterMark(n){
if(n>=MAX_HWM){
n=MAX_HWM;
}else{


n--;
n|=n>>>1;
n|=n>>>2;
n|=n>>>4;
n|=n>>>8;
n|=n>>>16;
n++;
}
return n;
}



function howMuchToRead(n,state){
if(n<=0||state.length===0&&state.ended)return 0;
if(state.objectMode)return 1;
if(n!==n){

if(state.flowing&&state.length)return state.buffer.head.data.length;else return state.length;
}

if(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);
if(n<=state.length)return n;

if(!state.ended){
state.needReadable=true;
return 0;
}
return state.length;
}


Readable.prototype.read=function(n){
debug('read',n);
n=parseInt(n,10);
var state=this._readableState;
var nOrig=n;

if(n!==0)state.emittedReadable=false;




if(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){
debug('read: emitReadable',state.length,state.ended);
if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);
return null;
}

n=howMuchToRead(n,state);


if(n===0&&state.ended){
if(state.length===0)endReadable(this);
return null;
}
























var doRead=state.needReadable;
debug('need readable',doRead);


if(state.length===0||state.length-n<state.highWaterMark){
doRead=true;
debug('length less than watermark',doRead);
}



if(state.ended||state.reading){
doRead=false;
debug('reading or ended',doRead);
}else if(doRead){
debug('do read');
state.reading=true;
state.sync=true;

if(state.length===0)state.needReadable=true;

this._read(state.highWaterMark);
state.sync=false;


if(!state.reading)n=howMuchToRead(nOrig,state);
}

var ret;
if(n>0)ret=fromList(n,state);else ret=null;

if(ret===null){
state.needReadable=true;
n=0;
}else{
state.length-=n;
}

if(state.length===0){


if(!state.ended)state.needReadable=true;


if(nOrig!==n&&state.ended)endReadable(this);
}

if(ret!==null)this.emit('data',ret);

return ret;
};

function chunkInvalid(state,chunk){
var er=null;
if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==null&&chunk!==undefined&&!state.objectMode){
er=new TypeError('Invalid non-string/buffer chunk');
}
return er;
}

function onEofChunk(stream,state){
if(state.ended)return;
if(state.decoder){
var chunk=state.decoder.end();
if(chunk&&chunk.length){
state.buffer.push(chunk);
state.length+=state.objectMode?1:chunk.length;
}
}
state.ended=true;


emitReadable(stream);
}




function emitReadable(stream){
var state=stream._readableState;
state.needReadable=false;
if(!state.emittedReadable){
debug('emitReadable',state.flowing);
state.emittedReadable=true;
if(state.sync)processNextTick(emitReadable_,stream);else emitReadable_(stream);
}
}

function emitReadable_(stream){
debug('emit readable');
stream.emit('readable');
flow(stream);
}







function maybeReadMore(stream,state){
if(!state.readingMore){
state.readingMore=true;
processNextTick(maybeReadMore_,stream,state);
}
}

function maybeReadMore_(stream,state){
var len=state.length;
while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){
debug('maybeReadMore read 0');
stream.read(0);
if(len===state.length)

break;else len=state.length;
}
state.readingMore=false;
}





Readable.prototype._read=function(n){
this.emit('error',new Error('_read() is not implemented'));
};

Readable.prototype.pipe=function(dest,pipeOpts){
var src=this;
var state=this._readableState;

switch(state.pipesCount){
case 0:
state.pipes=dest;
break;
case 1:
state.pipes=[state.pipes,dest];
break;
default:
state.pipes.push(dest);
break;}

state.pipesCount+=1;
debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);

var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;

var endFn=doEnd?onend:cleanup;
if(state.endEmitted)processNextTick(endFn);else src.once('end',endFn);

dest.on('unpipe',onunpipe);
function onunpipe(readable){
debug('onunpipe');
if(readable===src){
cleanup();
}
}

function onend(){
debug('onend');
dest.end();
}





var ondrain=pipeOnDrain(src);
dest.on('drain',ondrain);

var cleanedUp=false;
function cleanup(){
debug('cleanup');

dest.removeListener('close',onclose);
dest.removeListener('finish',onfinish);
dest.removeListener('drain',ondrain);
dest.removeListener('error',onerror);
dest.removeListener('unpipe',onunpipe);
src.removeListener('end',onend);
src.removeListener('end',cleanup);
src.removeListener('data',ondata);

cleanedUp=true;






if(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();
}





var increasedAwaitDrain=false;
src.on('data',ondata);
function ondata(chunk){
debug('ondata');
increasedAwaitDrain=false;
var ret=dest.write(chunk);
if(false===ret&&!increasedAwaitDrain){




if((state.pipesCount===1&&state.pipes===dest||state.pipesCount>1&&indexOf(state.pipes,dest)!==-1)&&!cleanedUp){
debug('false write response, pause',src._readableState.awaitDrain);
src._readableState.awaitDrain++;
increasedAwaitDrain=true;
}
src.pause();
}
}



function onerror(er){
debug('onerror',er);
unpipe();
dest.removeListener('error',onerror);
if(EElistenerCount(dest,'error')===0)dest.emit('error',er);
}


prependListener(dest,'error',onerror);


function onclose(){
dest.removeListener('finish',onfinish);
unpipe();
}
dest.once('close',onclose);
function onfinish(){
debug('onfinish');
dest.removeListener('close',onclose);
unpipe();
}
dest.once('finish',onfinish);

function unpipe(){
debug('unpipe');
src.unpipe(dest);
}


dest.emit('pipe',src);


if(!state.flowing){
debug('pipe resume');
src.resume();
}

return dest;
};

function pipeOnDrain(src){
return function(){
var state=src._readableState;
debug('pipeOnDrain',state.awaitDrain);
if(state.awaitDrain)state.awaitDrain--;
if(state.awaitDrain===0&&EElistenerCount(src,'data')){
state.flowing=true;
flow(src);
}
};
}

Readable.prototype.unpipe=function(dest){
var state=this._readableState;


if(state.pipesCount===0)return this;


if(state.pipesCount===1){

if(dest&&dest!==state.pipes)return this;

if(!dest)dest=state.pipes;


state.pipes=null;
state.pipesCount=0;
state.flowing=false;
if(dest)dest.emit('unpipe',this);
return this;
}



if(!dest){

var dests=state.pipes;
var len=state.pipesCount;
state.pipes=null;
state.pipesCount=0;
state.flowing=false;

for(var i=0;i<len;i++){
dests[i].emit('unpipe',this);
}return this;
}


var index=indexOf(state.pipes,dest);
if(index===-1)return this;

state.pipes.splice(index,1);
state.pipesCount-=1;
if(state.pipesCount===1)state.pipes=state.pipes[0];

dest.emit('unpipe',this);

return this;
};



Readable.prototype.on=function(ev,fn){
var res=Stream.prototype.on.call(this,ev,fn);

if(ev==='data'){

if(this._readableState.flowing!==false)this.resume();
}else if(ev==='readable'){
var state=this._readableState;
if(!state.endEmitted&&!state.readableListening){
state.readableListening=state.needReadable=true;
state.emittedReadable=false;
if(!state.reading){
processNextTick(nReadingNextTick,this);
}else if(state.length){
emitReadable(this,state);
}
}
}

return res;
};
Readable.prototype.addListener=Readable.prototype.on;

function nReadingNextTick(self){
debug('readable nexttick read 0');
self.read(0);
}



Readable.prototype.resume=function(){
var state=this._readableState;
if(!state.flowing){
debug('resume');
state.flowing=true;
resume(this,state);
}
return this;
};

function resume(stream,state){
if(!state.resumeScheduled){
state.resumeScheduled=true;
processNextTick(resume_,stream,state);
}
}

function resume_(stream,state){
if(!state.reading){
debug('resume read 0');
stream.read(0);
}

state.resumeScheduled=false;
state.awaitDrain=0;
stream.emit('resume');
flow(stream);
if(state.flowing&&!state.reading)stream.read(0);
}

Readable.prototype.pause=function(){
debug('call pause flowing=%j',this._readableState.flowing);
if(false!==this._readableState.flowing){
debug('pause');
this._readableState.flowing=false;
this.emit('pause');
}
return this;
};

function flow(stream){
var state=stream._readableState;
debug('flow',state.flowing);
while(state.flowing&&stream.read()!==null){}
}




Readable.prototype.wrap=function(stream){
var state=this._readableState;
var paused=false;

var self=this;
stream.on('end',function(){
debug('wrapped end');
if(state.decoder&&!state.ended){
var chunk=state.decoder.end();
if(chunk&&chunk.length)self.push(chunk);
}

self.push(null);
});

stream.on('data',function(chunk){
debug('wrapped data');
if(state.decoder)chunk=state.decoder.write(chunk);


if(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;

var ret=self.push(chunk);
if(!ret){
paused=true;
stream.pause();
}
});



for(var i in stream){
if(this[i]===undefined&&typeof stream[i]==='function'){
this[i]=function(method){
return function(){
return stream[method].apply(stream,arguments);
};
}(i);
}
}


var events=['error','close','destroy','pause','resume'];
forEach(events,function(ev){
stream.on(ev,self.emit.bind(self,ev));
});



self._read=function(n){
debug('wrapped _read',n);
if(paused){
paused=false;
stream.resume();
}
};

return self;
};


Readable._fromList=fromList;





function fromList(n,state){

if(state.length===0)return null;

var ret;
if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){

if(state.decoder)ret=state.buffer.join('');else if(state.buffer.length===1)ret=state.buffer.head.data;else ret=state.buffer.concat(state.length);
state.buffer.clear();
}else{

ret=fromListPartial(n,state.buffer,state.decoder);
}

return ret;
}




function fromListPartial(n,list,hasStrings){
var ret;
if(n<list.head.data.length){

ret=list.head.data.slice(0,n);
list.head.data=list.head.data.slice(n);
}else if(n===list.head.data.length){

ret=list.shift();
}else{

ret=hasStrings?copyFromBufferString(n,list):copyFromBuffer(n,list);
}
return ret;
}





function copyFromBufferString(n,list){
var p=list.head;
var c=1;
var ret=p.data;
n-=ret.length;
while(p=p.next){
var str=p.data;
var nb=n>str.length?str.length:n;
if(nb===str.length)ret+=str;else ret+=str.slice(0,n);
n-=nb;
if(n===0){
if(nb===str.length){
++c;
if(p.next)list.head=p.next;else list.head=list.tail=null;
}else{
list.head=p;
p.data=str.slice(nb);
}
break;
}
++c;
}
list.length-=c;
return ret;
}




function copyFromBuffer(n,list){
var ret=bufferShim.allocUnsafe(n);
var p=list.head;
var c=1;
p.data.copy(ret);
n-=p.data.length;
while(p=p.next){
var buf=p.data;
var nb=n>buf.length?buf.length:n;
buf.copy(ret,ret.length-n,0,nb);
n-=nb;
if(n===0){
if(nb===buf.length){
++c;
if(p.next)list.head=p.next;else list.head=list.tail=null;
}else{
list.head=p;
p.data=buf.slice(nb);
}
break;
}
++c;
}
list.length-=c;
return ret;
}

function endReadable(stream){
var state=stream._readableState;



if(state.length>0)throw new Error('"endReadable()" called on non-empty stream');

if(!state.endEmitted){
state.ended=true;
processNextTick(endReadableNT,state,stream);
}
}

function endReadableNT(state,stream){

if(!state.endEmitted&&state.length===0){
state.endEmitted=true;
stream.readable=false;
stream.emit('end');
}
}

function forEach(xs,f){
for(var i=0,l=xs.length;i<l;i++){
f(xs[i],i);
}
}

function indexOf(xs,x){
for(var i=0,l=xs.length;i<l;i++){
if(xs[i]===x)return i;
}
return-1;
}
}).call(this,require('_process'));
},{"./_stream_duplex":131,"./internal/streams/BufferList":136,"_process":126,"buffer":109,"buffer-shims":108,"core-util-is":110,"events":111,"inherits":113,"isarray":115,"process-nextick-args":125,"string_decoder/":142,"util":104}],134:[function(require,module,exports){










































'use strict';

module.exports=Transform;

var Duplex=require('./_stream_duplex');


var util=require('core-util-is');
util.inherits=require('inherits');


util.inherits(Transform,Duplex);

function TransformState(stream){
this.afterTransform=function(er,data){
return afterTransform(stream,er,data);
};

this.needTransform=false;
this.transforming=false;
this.writecb=null;
this.writechunk=null;
this.writeencoding=null;
}

function afterTransform(stream,er,data){
var ts=stream._transformState;
ts.transforming=false;

var cb=ts.writecb;

if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));

ts.writechunk=null;
ts.writecb=null;

if(data!==null&&data!==undefined)stream.push(data);

cb(er);

var rs=stream._readableState;
rs.reading=false;
if(rs.needReadable||rs.length<rs.highWaterMark){
stream._read(rs.highWaterMark);
}
}

function Transform(options){
if(!(this instanceof Transform))return new Transform(options);

Duplex.call(this,options);

this._transformState=new TransformState(this);

var stream=this;


this._readableState.needReadable=true;




this._readableState.sync=false;

if(options){
if(typeof options.transform==='function')this._transform=options.transform;

if(typeof options.flush==='function')this._flush=options.flush;
}


this.once('prefinish',function(){
if(typeof this._flush==='function')this._flush(function(er,data){
done(stream,er,data);
});else done(stream);
});
}

Transform.prototype.push=function(chunk,encoding){
this._transformState.needTransform=false;
return Duplex.prototype.push.call(this,chunk,encoding);
};











Transform.prototype._transform=function(chunk,encoding,cb){
throw new Error('_transform() is not implemented');
};

Transform.prototype._write=function(chunk,encoding,cb){
var ts=this._transformState;
ts.writecb=cb;
ts.writechunk=chunk;
ts.writeencoding=encoding;
if(!ts.transforming){
var rs=this._readableState;
if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);
}
};




Transform.prototype._read=function(n){
var ts=this._transformState;

if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){
ts.transforming=true;
this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);
}else{


ts.needTransform=true;
}
};

function done(stream,er,data){
if(er)return stream.emit('error',er);

if(data!==null&&data!==undefined)stream.push(data);



var ws=stream._writableState;
var ts=stream._transformState;

if(ws.length)throw new Error('Calling transform done when ws.length != 0');

if(ts.transforming)throw new Error('Calling transform done when still transforming');

return stream.push(null);
}
},{"./_stream_duplex":131,"core-util-is":110,"inherits":113}],135:[function(require,module,exports){
(function(process){




'use strict';

module.exports=Writable;


var processNextTick=require('process-nextick-args');



var asyncWrite=!process.browser&&['v0.10','v0.9.'].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick;



var Duplex;


Writable.WritableState=WritableState;


var util=require('core-util-is');
util.inherits=require('inherits');



var internalUtil={
deprecate:require('util-deprecate')};




var Stream;
(function(){
try{
Stream=require('st'+'ream');
}catch(_){}finally{
if(!Stream)Stream=require('events').EventEmitter;
}
})();


var Buffer=require('buffer').Buffer;

var bufferShim=require('buffer-shims');


util.inherits(Writable,Stream);

function nop(){}

function WriteReq(chunk,encoding,cb){
this.chunk=chunk;
this.encoding=encoding;
this.callback=cb;
this.next=null;
}

function WritableState(options,stream){
Duplex=Duplex||require('./_stream_duplex');

options=options||{};



this.objectMode=!!options.objectMode;

if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;




var hwm=options.highWaterMark;
var defaultHwm=this.objectMode?16:16*1024;
this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;


this.highWaterMark=~~this.highWaterMark;


this.needDrain=false;

this.ending=false;

this.ended=false;

this.finished=false;




var noDecode=options.decodeStrings===false;
this.decodeStrings=!noDecode;




this.defaultEncoding=options.defaultEncoding||'utf8';




this.length=0;


this.writing=false;


this.corked=0;





this.sync=true;




this.bufferProcessing=false;


this.onwrite=function(er){
onwrite(stream,er);
};


this.writecb=null;


this.writelen=0;

this.bufferedRequest=null;
this.lastBufferedRequest=null;



this.pendingcb=0;



this.prefinished=false;


this.errorEmitted=false;


this.bufferedRequestCount=0;



this.corkedRequestsFree=new CorkedRequest(this);
}

WritableState.prototype.getBuffer=function getBuffer(){
var current=this.bufferedRequest;
var out=[];
while(current){
out.push(current);
current=current.next;
}
return out;
};

(function(){
try{
Object.defineProperty(WritableState.prototype,'buffer',{
get:internalUtil.deprecate(function(){
return this.getBuffer();
},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.')});

}catch(_){}
})();



var realHasInstance;
if(typeof Symbol==='function'&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]==='function'){
realHasInstance=Function.prototype[Symbol.hasInstance];
Object.defineProperty(Writable,Symbol.hasInstance,{
value:function(object){
if(realHasInstance.call(this,object))return true;

return object&&object._writableState instanceof WritableState;
}});

}else{
realHasInstance=function(object){
return object instanceof this;
};
}

function Writable(options){
Duplex=Duplex||require('./_stream_duplex');








if(!realHasInstance.call(Writable,this)&&!(this instanceof Duplex)){
return new Writable(options);
}

this._writableState=new WritableState(options,this);


this.writable=true;

if(options){
if(typeof options.write==='function')this._write=options.write;

if(typeof options.writev==='function')this._writev=options.writev;
}

Stream.call(this);
}


Writable.prototype.pipe=function(){
this.emit('error',new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream,cb){
var er=new Error('write after end');

stream.emit('error',er);
processNextTick(cb,er);
}






function validChunk(stream,state,chunk,cb){
var valid=true;
var er=false;



if(chunk===null){
er=new TypeError('May not write null values to stream');
}else if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==undefined&&!state.objectMode){
er=new TypeError('Invalid non-string/buffer chunk');
}
if(er){
stream.emit('error',er);
processNextTick(cb,er);
valid=false;
}
return valid;
}

Writable.prototype.write=function(chunk,encoding,cb){
var state=this._writableState;
var ret=false;

if(typeof encoding==='function'){
cb=encoding;
encoding=null;
}

if(Buffer.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;

if(typeof cb!=='function')cb=nop;

if(state.ended)writeAfterEnd(this,cb);else if(validChunk(this,state,chunk,cb)){
state.pendingcb++;
ret=writeOrBuffer(this,state,chunk,encoding,cb);
}

return ret;
};

Writable.prototype.cork=function(){
var state=this._writableState;

state.corked++;
};

Writable.prototype.uncork=function(){
var state=this._writableState;

if(state.corked){
state.corked--;

if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state);
}
};

Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){

if(typeof encoding==='string')encoding=encoding.toLowerCase();
if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new TypeError('Unknown encoding: '+encoding);
this._writableState.defaultEncoding=encoding;
return this;
};

function decodeChunk(state,chunk,encoding){
if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){
chunk=bufferShim.from(chunk,encoding);
}
return chunk;
}




function writeOrBuffer(stream,state,chunk,encoding,cb){
chunk=decodeChunk(state,chunk,encoding);

if(Buffer.isBuffer(chunk))encoding='buffer';
var len=state.objectMode?1:chunk.length;

state.length+=len;

var ret=state.length<state.highWaterMark;

if(!ret)state.needDrain=true;

if(state.writing||state.corked){
var last=state.lastBufferedRequest;
state.lastBufferedRequest=new WriteReq(chunk,encoding,cb);
if(last){
last.next=state.lastBufferedRequest;
}else{
state.bufferedRequest=state.lastBufferedRequest;
}
state.bufferedRequestCount+=1;
}else{
doWrite(stream,state,false,len,chunk,encoding,cb);
}

return ret;
}

function doWrite(stream,state,writev,len,chunk,encoding,cb){
state.writelen=len;
state.writecb=cb;
state.writing=true;
state.sync=true;
if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);
state.sync=false;
}

function onwriteError(stream,state,sync,er,cb){
--state.pendingcb;
if(sync)processNextTick(cb,er);else cb(er);

stream._writableState.errorEmitted=true;
stream.emit('error',er);
}

function onwriteStateUpdate(state){
state.writing=false;
state.writecb=null;
state.length-=state.writelen;
state.writelen=0;
}

function onwrite(stream,er){
var state=stream._writableState;
var sync=state.sync;
var cb=state.writecb;

onwriteStateUpdate(state);

if(er)onwriteError(stream,state,sync,er,cb);else{

var finished=needFinish(state);

if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){
clearBuffer(stream,state);
}

if(sync){

asyncWrite(afterWrite,stream,state,finished,cb);

}else{
afterWrite(stream,state,finished,cb);
}
}
}

function afterWrite(stream,state,finished,cb){
if(!finished)onwriteDrain(stream,state);
state.pendingcb--;
cb();
finishMaybe(stream,state);
}




function onwriteDrain(stream,state){
if(state.length===0&&state.needDrain){
state.needDrain=false;
stream.emit('drain');
}
}


function clearBuffer(stream,state){
state.bufferProcessing=true;
var entry=state.bufferedRequest;

if(stream._writev&&entry&&entry.next){

var l=state.bufferedRequestCount;
var buffer=new Array(l);
var holder=state.corkedRequestsFree;
holder.entry=entry;

var count=0;
while(entry){
buffer[count]=entry;
entry=entry.next;
count+=1;
}

doWrite(stream,state,true,state.length,buffer,'',holder.finish);



state.pendingcb++;
state.lastBufferedRequest=null;
if(holder.next){
state.corkedRequestsFree=holder.next;
holder.next=null;
}else{
state.corkedRequestsFree=new CorkedRequest(state);
}
}else{

while(entry){
var chunk=entry.chunk;
var encoding=entry.encoding;
var cb=entry.callback;
var len=state.objectMode?1:chunk.length;

doWrite(stream,state,false,len,chunk,encoding,cb);
entry=entry.next;




if(state.writing){
break;
}
}

if(entry===null)state.lastBufferedRequest=null;
}

state.bufferedRequestCount=0;
state.bufferedRequest=entry;
state.bufferProcessing=false;
}

Writable.prototype._write=function(chunk,encoding,cb){
cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev=null;

Writable.prototype.end=function(chunk,encoding,cb){
var state=this._writableState;

if(typeof chunk==='function'){
cb=chunk;
chunk=null;
encoding=null;
}else if(typeof encoding==='function'){
cb=encoding;
encoding=null;
}

if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);


if(state.corked){
state.corked=1;
this.uncork();
}


if(!state.ending&&!state.finished)endWritable(this,state,cb);
};

function needFinish(state){
return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;
}

function prefinish(stream,state){
if(!state.prefinished){
state.prefinished=true;
stream.emit('prefinish');
}
}

function finishMaybe(stream,state){
var need=needFinish(state);
if(need){
if(state.pendingcb===0){
prefinish(stream,state);
state.finished=true;
stream.emit('finish');
}else{
prefinish(stream,state);
}
}
return need;
}

function endWritable(stream,state,cb){
state.ending=true;
finishMaybe(stream,state);
if(cb){
if(state.finished)processNextTick(cb);else stream.once('finish',cb);
}
state.ended=true;
stream.writable=false;
}



function CorkedRequest(state){
var _this=this;

this.next=null;
this.entry=null;

this.finish=function(err){
var entry=_this.entry;
_this.entry=null;
while(entry){
var cb=entry.callback;
state.pendingcb--;
cb(err);
entry=entry.next;
}
if(state.corkedRequestsFree){
state.corkedRequestsFree.next=_this;
}else{
state.corkedRequestsFree=_this;
}
};
}
}).call(this,require('_process'));
},{"./_stream_duplex":131,"_process":126,"buffer":109,"buffer-shims":108,"core-util-is":110,"events":111,"inherits":113,"process-nextick-args":125,"util-deprecate":143}],136:[function(require,module,exports){
'use strict';

var Buffer=require('buffer').Buffer;

var bufferShim=require('buffer-shims');


module.exports=BufferList;

function BufferList(){
this.head=null;
this.tail=null;
this.length=0;
}

BufferList.prototype.push=function(v){
var entry={data:v,next:null};
if(this.length>0)this.tail.next=entry;else this.head=entry;
this.tail=entry;
++this.length;
};

BufferList.prototype.unshift=function(v){
var entry={data:v,next:this.head};
if(this.length===0)this.tail=entry;
this.head=entry;
++this.length;
};

BufferList.prototype.shift=function(){
if(this.length===0)return;
var ret=this.head.data;
if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;
--this.length;
return ret;
};

BufferList.prototype.clear=function(){
this.head=this.tail=null;
this.length=0;
};

BufferList.prototype.join=function(s){
if(this.length===0)return'';
var p=this.head;
var ret=''+p.data;
while(p=p.next){
ret+=s+p.data;
}return ret;
};

BufferList.prototype.concat=function(n){
if(this.length===0)return bufferShim.alloc(0);
if(this.length===1)return this.head.data;
var ret=bufferShim.allocUnsafe(n>>>0);
var p=this.head;
var i=0;
while(p){
p.data.copy(ret,i);
i+=p.data.length;
p=p.next;
}
return ret;
};
},{"buffer":109,"buffer-shims":108}],137:[function(require,module,exports){
module.exports=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_passthrough.js":132}],138:[function(require,module,exports){
(function(process){
var Stream=function(){
try{
return require('st'+'ream');
}catch(_){}
}();
exports=module.exports=require('./lib/_stream_readable.js');
exports.Stream=Stream||exports;
exports.Readable=exports;
exports.Writable=require('./lib/_stream_writable.js');
exports.Duplex=require('./lib/_stream_duplex.js');
exports.Transform=require('./lib/_stream_transform.js');
exports.PassThrough=require('./lib/_stream_passthrough.js');

if(!process.browser&&process.env.READABLE_STREAM==='disable'&&Stream){
module.exports=Stream;
}

}).call(this,require('_process'));
},{"./lib/_stream_duplex.js":131,"./lib/_stream_passthrough.js":132,"./lib/_stream_readable.js":133,"./lib/_stream_transform.js":134,"./lib/_stream_writable.js":135,"_process":126}],139:[function(require,module,exports){
module.exports=require("./lib/_stream_transform.js");

},{"./lib/_stream_transform.js":134}],140:[function(require,module,exports){
module.exports=require("./lib/_stream_writable.js");

},{"./lib/_stream_writable.js":135}],141:[function(require,module,exports){





















module.exports=Stream;

var EE=require('events').EventEmitter;
var inherits=require('inherits');

inherits(Stream,EE);
Stream.Readable=require('readable-stream/readable.js');
Stream.Writable=require('readable-stream/writable.js');
Stream.Duplex=require('readable-stream/duplex.js');
Stream.Transform=require('readable-stream/transform.js');
Stream.PassThrough=require('readable-stream/passthrough.js');


Stream.Stream=Stream;






function Stream(){
EE.call(this);
}

Stream.prototype.pipe=function(dest,options){
var source=this;

function ondata(chunk){
if(dest.writable){
if(false===dest.write(chunk)&&source.pause){
source.pause();
}
}
}

source.on('data',ondata);

function ondrain(){
if(source.readable&&source.resume){
source.resume();
}
}

dest.on('drain',ondrain);



if(!dest._isStdio&&(!options||options.end!==false)){
source.on('end',onend);
source.on('close',onclose);
}

var didOnEnd=false;
function onend(){
if(didOnEnd)return;
didOnEnd=true;

dest.end();
}


function onclose(){
if(didOnEnd)return;
didOnEnd=true;

if(typeof dest.destroy==='function')dest.destroy();
}


function onerror(er){
cleanup();
if(EE.listenerCount(this,'error')===0){
throw er;
}
}

source.on('error',onerror);
dest.on('error',onerror);


function cleanup(){
source.removeListener('data',ondata);
dest.removeListener('drain',ondrain);

source.removeListener('end',onend);
source.removeListener('close',onclose);

source.removeListener('error',onerror);
dest.removeListener('error',onerror);

source.removeListener('end',cleanup);
source.removeListener('close',cleanup);

dest.removeListener('close',cleanup);
}

source.on('end',cleanup);
source.on('close',cleanup);

dest.on('close',cleanup);

dest.emit('pipe',source);


return dest;
};

},{"events":111,"inherits":113,"readable-stream/duplex.js":130,"readable-stream/passthrough.js":137,"readable-stream/readable.js":138,"readable-stream/transform.js":139,"readable-stream/writable.js":140}],142:[function(require,module,exports){





















var Buffer=require('buffer').Buffer;

var isBufferEncoding=Buffer.isEncoding||
function(encoding){
switch(encoding&&encoding.toLowerCase()){
case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;
default:return false;}

};


function assertEncoding(encoding){
if(encoding&&!isBufferEncoding(encoding)){
throw new Error('Unknown encoding: '+encoding);
}
}









var StringDecoder=exports.StringDecoder=function(encoding){
this.encoding=(encoding||'utf8').toLowerCase().replace(/[-_]/,'');
assertEncoding(encoding);
switch(this.encoding){
case'utf8':

this.surrogateSize=3;
break;
case'ucs2':
case'utf16le':

this.surrogateSize=2;
this.detectIncompleteChar=utf16DetectIncompleteChar;
break;
case'base64':

this.surrogateSize=3;
this.detectIncompleteChar=base64DetectIncompleteChar;
break;
default:
this.write=passThroughWrite;
return;}




this.charBuffer=new Buffer(6);

this.charReceived=0;

this.charLength=0;
};











StringDecoder.prototype.write=function(buffer){
var charStr='';

while(this.charLength){

var available=buffer.length>=this.charLength-this.charReceived?
this.charLength-this.charReceived:
buffer.length;


buffer.copy(this.charBuffer,this.charReceived,0,available);
this.charReceived+=available;

if(this.charReceived<this.charLength){

return'';
}


buffer=buffer.slice(available,buffer.length);


charStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);


var charCode=charStr.charCodeAt(charStr.length-1);
if(charCode>=0xD800&&charCode<=0xDBFF){
this.charLength+=this.surrogateSize;
charStr='';
continue;
}
this.charReceived=this.charLength=0;


if(buffer.length===0){
return charStr;
}
break;
}


this.detectIncompleteChar(buffer);

var end=buffer.length;
if(this.charLength){

buffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);
end-=this.charReceived;
}

charStr+=buffer.toString(this.encoding,0,end);

var end=charStr.length-1;
var charCode=charStr.charCodeAt(end);

if(charCode>=0xD800&&charCode<=0xDBFF){
var size=this.surrogateSize;
this.charLength+=size;
this.charReceived+=size;
this.charBuffer.copy(this.charBuffer,size,0,size);
buffer.copy(this.charBuffer,0,0,size);
return charStr.substring(0,end);
}


return charStr;
};





StringDecoder.prototype.detectIncompleteChar=function(buffer){

var i=buffer.length>=3?3:buffer.length;



for(;i>0;i--){
var c=buffer[buffer.length-i];




if(i==1&&c>>5==0x06){
this.charLength=2;
break;
}


if(i<=2&&c>>4==0x0E){
this.charLength=3;
break;
}


if(i<=3&&c>>3==0x1E){
this.charLength=4;
break;
}
}
this.charReceived=i;
};

StringDecoder.prototype.end=function(buffer){
var res='';
if(buffer&&buffer.length)
res=this.write(buffer);

if(this.charReceived){
var cr=this.charReceived;
var buf=this.charBuffer;
var enc=this.encoding;
res+=buf.slice(0,cr).toString(enc);
}

return res;
};

function passThroughWrite(buffer){
return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer){
this.charReceived=buffer.length%2;
this.charLength=this.charReceived?2:0;
}

function base64DetectIncompleteChar(buffer){
this.charReceived=buffer.length%3;
this.charLength=this.charReceived?3:0;
}

},{"buffer":109}],143:[function(require,module,exports){
(function(global){





module.exports=deprecate;



















function deprecate(fn,msg){
if(config('noDeprecation')){
return fn;
}

var warned=false;
function deprecated(){
if(!warned){
if(config('throwDeprecation')){
throw new Error(msg);
}else if(config('traceDeprecation')){
console.trace(msg);
}else{
console.warn(msg);
}
warned=true;
}
return fn.apply(this,arguments);
}

return deprecated;
}









function config(name){

try{
if(!global.localStorage)return false;
}catch(_){
return false;
}
var val=global.localStorage[name];
if(null==val)return false;
return String(val).toLowerCase()==='true';
}

}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{}],144:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments);
},{"dup":113}],145:[function(require,module,exports){
module.exports=function isBuffer(arg){
return arg&&typeof arg==='object'&&
typeof arg.copy==='function'&&
typeof arg.fill==='function'&&
typeof arg.readUInt8==='function';
};
},{}],146:[function(require,module,exports){
(function(process,global){





















var formatRegExp=/%[sdj%]/g;
exports.format=function(f){
if(!isString(f)){
var objects=[];
for(var i=0;i<arguments.length;i++){
objects.push(inspect(arguments[i]));
}
return objects.join(' ');
}

var i=1;
var args=arguments;
var len=args.length;
var str=String(f).replace(formatRegExp,function(x){
if(x==='%%')return'%';
if(i>=len)return x;
switch(x){
case'%s':return String(args[i++]);
case'%d':return Number(args[i++]);
case'%j':
try{
return JSON.stringify(args[i++]);
}catch(_){
return'[Circular]';
}
default:
return x;}

});
for(var x=args[i];i<len;x=args[++i]){
if(isNull(x)||!isObject(x)){
str+=' '+x;
}else{
str+=' '+inspect(x);
}
}
return str;
};





exports.deprecate=function(fn,msg){

if(isUndefined(global.process)){
return function(){
return exports.deprecate(fn,msg).apply(this,arguments);
};
}

if(process.noDeprecation===true){
return fn;
}

var warned=false;
function deprecated(){
if(!warned){
if(process.throwDeprecation){
throw new Error(msg);
}else if(process.traceDeprecation){
console.trace(msg);
}else{
console.error(msg);
}
warned=true;
}
return fn.apply(this,arguments);
}

return deprecated;
};


var debugs={};
var debugEnviron;
exports.debuglog=function(set){
if(isUndefined(debugEnviron))
debugEnviron=process.env.NODE_DEBUG||'';
set=set.toUpperCase();
if(!debugs[set]){
if(new RegExp('\\b'+set+'\\b','i').test(debugEnviron)){
var pid=process.pid;
debugs[set]=function(){
var msg=exports.format.apply(exports,arguments);
console.error('%s %d: %s',set,pid,msg);
};
}else{
debugs[set]=function(){};
}
}
return debugs[set];
};










function inspect(obj,opts){

var ctx={
seen:[],
stylize:stylizeNoColor};


if(arguments.length>=3)ctx.depth=arguments[2];
if(arguments.length>=4)ctx.colors=arguments[3];
if(isBoolean(opts)){

ctx.showHidden=opts;
}else if(opts){

exports._extend(ctx,opts);
}

if(isUndefined(ctx.showHidden))ctx.showHidden=false;
if(isUndefined(ctx.depth))ctx.depth=2;
if(isUndefined(ctx.colors))ctx.colors=false;
if(isUndefined(ctx.customInspect))ctx.customInspect=true;
if(ctx.colors)ctx.stylize=stylizeWithColor;
return formatValue(ctx,obj,ctx.depth);
}
exports.inspect=inspect;



inspect.colors={
'bold':[1,22],
'italic':[3,23],
'underline':[4,24],
'inverse':[7,27],
'white':[37,39],
'grey':[90,39],
'black':[30,39],
'blue':[34,39],
'cyan':[36,39],
'green':[32,39],
'magenta':[35,39],
'red':[31,39],
'yellow':[33,39]};



inspect.styles={
'special':'cyan',
'number':'yellow',
'boolean':'yellow',
'undefined':'grey',
'null':'bold',
'string':'green',
'date':'magenta',

'regexp':'red'};



function stylizeWithColor(str,styleType){
var style=inspect.styles[styleType];

if(style){
return'\u001b['+inspect.colors[style][0]+'m'+str+
'\u001b['+inspect.colors[style][1]+'m';
}else{
return str;
}
}


function stylizeNoColor(str,styleType){
return str;
}


function arrayToHash(array){
var hash={};

array.forEach(function(val,idx){
hash[val]=true;
});

return hash;
}


function formatValue(ctx,value,recurseTimes){


if(ctx.customInspect&&
value&&
isFunction(value.inspect)&&

value.inspect!==exports.inspect&&

!(value.constructor&&value.constructor.prototype===value)){
var ret=value.inspect(recurseTimes,ctx);
if(!isString(ret)){
ret=formatValue(ctx,ret,recurseTimes);
}
return ret;
}


var primitive=formatPrimitive(ctx,value);
if(primitive){
return primitive;
}


var keys=Object.keys(value);
var visibleKeys=arrayToHash(keys);

if(ctx.showHidden){
keys=Object.getOwnPropertyNames(value);
}



if(isError(value)&&(
keys.indexOf('message')>=0||keys.indexOf('description')>=0)){
return formatError(value);
}


if(keys.length===0){
if(isFunction(value)){
var name=value.name?': '+value.name:'';
return ctx.stylize('[Function'+name+']','special');
}
if(isRegExp(value)){
return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');
}
if(isDate(value)){
return ctx.stylize(Date.prototype.toString.call(value),'date');
}
if(isError(value)){
return formatError(value);
}
}

var base='',array=false,braces=['{','}'];


if(isArray(value)){
array=true;
braces=['[',']'];
}


if(isFunction(value)){
var n=value.name?': '+value.name:'';
base=' [Function'+n+']';
}


if(isRegExp(value)){
base=' '+RegExp.prototype.toString.call(value);
}


if(isDate(value)){
base=' '+Date.prototype.toUTCString.call(value);
}


if(isError(value)){
base=' '+formatError(value);
}

if(keys.length===0&&(!array||value.length==0)){
return braces[0]+base+braces[1];
}

if(recurseTimes<0){
if(isRegExp(value)){
return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');
}else{
return ctx.stylize('[Object]','special');
}
}

ctx.seen.push(value);

var output;
if(array){
output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);
}else{
output=keys.map(function(key){
return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);
});
}

ctx.seen.pop();

return reduceToSingleString(output,base,braces);
}


function formatPrimitive(ctx,value){
if(isUndefined(value))
return ctx.stylize('undefined','undefined');
if(isString(value)){
var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').
replace(/'/g,"\\'").
replace(/\\"/g,'"')+'\'';
return ctx.stylize(simple,'string');
}
if(isNumber(value))
return ctx.stylize(''+value,'number');
if(isBoolean(value))
return ctx.stylize(''+value,'boolean');

if(isNull(value))
return ctx.stylize('null','null');
}


function formatError(value){
return'['+Error.prototype.toString.call(value)+']';
}


function formatArray(ctx,value,recurseTimes,visibleKeys,keys){
var output=[];
for(var i=0,l=value.length;i<l;++i){
if(hasOwnProperty(value,String(i))){
output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,
String(i),true));
}else{
output.push('');
}
}
keys.forEach(function(key){
if(!key.match(/^\d+$/)){
output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,
key,true));
}
});
return output;
}


function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){
var name,str,desc;
desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};
if(desc.get){
if(desc.set){
str=ctx.stylize('[Getter/Setter]','special');
}else{
str=ctx.stylize('[Getter]','special');
}
}else{
if(desc.set){
str=ctx.stylize('[Setter]','special');
}
}
if(!hasOwnProperty(visibleKeys,key)){
name='['+key+']';
}
if(!str){
if(ctx.seen.indexOf(desc.value)<0){
if(isNull(recurseTimes)){
str=formatValue(ctx,desc.value,null);
}else{
str=formatValue(ctx,desc.value,recurseTimes-1);
}
if(str.indexOf('\n')>-1){
if(array){
str=str.split('\n').map(function(line){
return'  '+line;
}).join('\n').substr(2);
}else{
str='\n'+str.split('\n').map(function(line){
return'   '+line;
}).join('\n');
}
}
}else{
str=ctx.stylize('[Circular]','special');
}
}
if(isUndefined(name)){
if(array&&key.match(/^\d+$/)){
return str;
}
name=JSON.stringify(''+key);
if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){
name=name.substr(1,name.length-2);
name=ctx.stylize(name,'name');
}else{
name=name.replace(/'/g,"\\'").
replace(/\\"/g,'"').
replace(/(^"|"$)/g,"'");
name=ctx.stylize(name,'string');
}
}

return name+': '+str;
}


function reduceToSingleString(output,base,braces){
var numLinesEst=0;
var length=output.reduce(function(prev,cur){
numLinesEst++;
if(cur.indexOf('\n')>=0)numLinesEst++;
return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+1;
},0);

if(length>60){
return braces[0]+(
base===''?'':base+'\n ')+
' '+
output.join(',\n  ')+
' '+
braces[1];
}

return braces[0]+base+' '+output.join(', ')+' '+braces[1];
}




function isArray(ar){
return Array.isArray(ar);
}
exports.isArray=isArray;

function isBoolean(arg){
return typeof arg==='boolean';
}
exports.isBoolean=isBoolean;

function isNull(arg){
return arg===null;
}
exports.isNull=isNull;

function isNullOrUndefined(arg){
return arg==null;
}
exports.isNullOrUndefined=isNullOrUndefined;

function isNumber(arg){
return typeof arg==='number';
}
exports.isNumber=isNumber;

function isString(arg){
return typeof arg==='string';
}
exports.isString=isString;

function isSymbol(arg){
return typeof arg==='symbol';
}
exports.isSymbol=isSymbol;

function isUndefined(arg){
return arg===void 0;
}
exports.isUndefined=isUndefined;

function isRegExp(re){
return isObject(re)&&objectToString(re)==='[object RegExp]';
}
exports.isRegExp=isRegExp;

function isObject(arg){
return typeof arg==='object'&&arg!==null;
}
exports.isObject=isObject;

function isDate(d){
return isObject(d)&&objectToString(d)==='[object Date]';
}
exports.isDate=isDate;

function isError(e){
return isObject(e)&&(
objectToString(e)==='[object Error]'||e instanceof Error);
}
exports.isError=isError;

function isFunction(arg){
return typeof arg==='function';
}
exports.isFunction=isFunction;

function isPrimitive(arg){
return arg===null||
typeof arg==='boolean'||
typeof arg==='number'||
typeof arg==='string'||
typeof arg==='symbol'||
typeof arg==='undefined';
}
exports.isPrimitive=isPrimitive;

exports.isBuffer=require('./support/isBuffer');

function objectToString(o){
return Object.prototype.toString.call(o);
}


function pad(n){
return n<10?'0'+n.toString(10):n.toString(10);
}


var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep',
'Oct','Nov','Dec'];


function timestamp(){
var d=new Date();
var time=[pad(d.getHours()),
pad(d.getMinutes()),
pad(d.getSeconds())].join(':');
return[d.getDate(),months[d.getMonth()],time].join(' ');
}



exports.log=function(){
console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));
};















exports.inherits=require('inherits');

exports._extend=function(origin,add){

if(!add||!isObject(add))return origin;

var keys=Object.keys(add);
var i=keys.length;
while(i--){
origin[keys[i]]=add[keys[i]];
}
return origin;
};

function hasOwnProperty(obj,prop){
return Object.prototype.hasOwnProperty.call(obj,prop);
}

}).call(this,require('_process'),typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{"./support/isBuffer":145,"_process":126,"inherits":144}],147:[function(require,module,exports){
(function(process){





'use strict';

const debug=require('debug');
const marky=require('marky');

const EventEmitter=require('events').EventEmitter;
const isWindows=process.platform==='win32';


const isBrowser=process.browser;

const colors={
red:isBrowser?'crimson':1,
yellow:isBrowser?'gold':3,
cyan:isBrowser?'darkturquoise':6,
green:isBrowser?'forestgreen':2,
blue:isBrowser?'steelblue':4,
magenta:isBrowser?'palevioletred':5};



debug.colors=[colors.cyan,colors.green,colors.blue,colors.magenta];

class Emitter extends EventEmitter{






issueStatus(title,argsArray){
if(title==='status'||title==='statusEnd'){
this.emit(title,[title,...argsArray]);
}
}







issueWarning(title,argsArray){
this.emit('warning',[title,...argsArray]);
}}


const loggersByTitle={};
const loggingBufferColumns=25;

class Log{
static _logToStdErr(title,argsArray){
const log=Log.loggerfn(title);
log(...argsArray);
}

static loggerfn(title){
let log=loggersByTitle[title];
if(!log){
log=debug(title);
loggersByTitle[title]=log;

if(title.endsWith('error')){
log.color=colors.red;
}else if(title.endsWith('warn')){
log.color=colors.yellow;
}
}
return log;
}

static setLevel(level){
switch(level){
case'silent':
debug.enable('-*');
break;
case'verbose':
debug.enable('*');
break;
case'error':
debug.enable('-*, *:error');
break;
default:
debug.enable('*, -*:verbose');}

}







static formatProtocol(prefix,data,level){
const columns=!process||process.browser?Infinity:process.stdout.columns;
const method=data.method||'?????';
const maxLength=columns-method.length-prefix.length-loggingBufferColumns;

const snippet=data.params&&method!=='IO.read'?
JSON.stringify(data.params).substr(0,maxLength):'';
Log._logToStdErr(`${prefix}:${level||''}`,[method,snippet]);
}

static time({msg,id,args=[]},level='log'){
marky.mark(id);
Log[level]('status',msg,...args);
}

static timeEnd({msg,id,args=[]},level='verbose'){
Log[level]('statusEnd',msg,...args);
marky.stop(id);
}

static log(title,...args){
Log.events.issueStatus(title,args);
return Log._logToStdErr(title,args);
}

static warn(title,...args){
Log.events.issueWarning(title,args);
return Log._logToStdErr(`${title}:warn`,args);
}

static error(title,...args){
return Log._logToStdErr(`${title}:error`,args);
}

static verbose(title,...args){
Log.events.issueStatus(title,args);
return Log._logToStdErr(`${title}:verbose`,args);
}






static greenify(str){
return`${Log.green}${str}${Log.reset}`;
}






static redify(str){
return`${Log.red}${str}${Log.reset}`;
}

static get green(){
return'\x1B[32m';
}

static get red(){
return'\x1B[31m';
}

static get yellow(){
return'\x1b[33m';
}

static get purple(){
return'\x1b[95m';
}

static get reset(){
return'\x1B[0m';
}

static get bold(){
return'\x1b[1m';
}

static get dim(){
return'\x1b[2m';
}

static get tick(){
return isWindows?'\u221A':'✓';
}

static get cross(){
return isWindows?'\u00D7':'✘';
}

static get whiteSmallSquare(){
return isWindows?'\u0387':'▫';
}

static get heavyHorizontal(){
return isWindows?'\u2500':'━';
}

static get heavyVertical(){
return isWindows?'\u2502 ':'┃ ';
}

static get heavyUpAndRight(){
return isWindows?'\u2514':'┗';
}

static get heavyVerticalAndRight(){
return isWindows?'\u251C':'┣';
}

static get heavyDownAndHorizontal(){
return isWindows?'\u252C':'┳';
}

static get doubleLightHorizontal(){
return'──';
}}


Log.events=new Emitter();
Log.takeTimeEntries=_=>{
const entries=marky.getEntries();
marky.clear();
return entries;
};

module.exports=Log;

}).call(this,require('_process'));
},{"_process":126,"debug":148,"events":111,"marky":150}],148:[function(require,module,exports){
(function(process){






exports=module.exports=require('./debug');
exports.log=log;
exports.formatArgs=formatArgs;
exports.save=save;
exports.load=load;
exports.useColors=useColors;
exports.storage='undefined'!=typeof chrome&&
'undefined'!=typeof chrome.storage?
chrome.storage.local:
localstorage();





exports.colors=[
'lightseagreen',
'forestgreen',
'goldenrod',
'dodgerblue',
'darkorchid',
'crimson'];










function useColors(){



if(typeof window!=='undefined'&&window.process&&window.process.type==='renderer'){
return true;
}



return typeof document!=='undefined'&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||

typeof window!=='undefined'&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||


typeof navigator!=='undefined'&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||

typeof navigator!=='undefined'&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}





exports.formatters.j=function(v){
try{
return JSON.stringify(v);
}catch(err){
return'[UnexpectedJSONParseError]: '+err.message;
}
};








function formatArgs(args){
var useColors=this.useColors;

args[0]=(useColors?'%c':'')+
this.namespace+(
useColors?' %c':' ')+
args[0]+(
useColors?'%c ':' ')+
'+'+exports.humanize(this.diff);

if(!useColors)return;

var c='color: '+this.color;
args.splice(1,0,c,'color: inherit');




var index=0;
var lastC=0;
args[0].replace(/%[a-zA-Z%]/g,function(match){
if('%%'===match)return;
index++;
if('%c'===match){


lastC=index;
}
});

args.splice(lastC,0,c);
}








function log(){


return'object'===typeof console&&
console.log&&
Function.prototype.apply.call(console.log,console,arguments);
}








function save(namespaces){
try{
if(null==namespaces){
exports.storage.removeItem('debug');
}else{
exports.storage.debug=namespaces;
}
}catch(e){}
}








function load(){
var r;
try{
r=exports.storage.debug;
}catch(e){}


if(!r&&typeof process!=='undefined'&&'env'in process){
r=process.env.DEBUG;
}

return r;
}





exports.enable(load());












function localstorage(){
try{
return window.localStorage;
}catch(e){}
}

}).call(this,require('_process'));
},{"./debug":149,"_process":126}],149:[function(require,module,exports){








exports=module.exports=createDebug.debug=createDebug['default']=createDebug;
exports.coerce=coerce;
exports.disable=disable;
exports.enable=enable;
exports.enabled=enabled;
exports.humanize=require('ms');





exports.names=[];
exports.skips=[];







exports.formatters={};





var prevTime;








function selectColor(namespace){
var hash=0,i;

for(i in namespace){
hash=(hash<<5)-hash+namespace.charCodeAt(i);
hash|=0;
}

return exports.colors[Math.abs(hash)%exports.colors.length];
}









function createDebug(namespace){

function debug(){

if(!debug.enabled)return;

var self=debug;


var curr=+new Date();
var ms=curr-(prevTime||curr);
self.diff=ms;
self.prev=prevTime;
self.curr=curr;
prevTime=curr;


var args=new Array(arguments.length);
for(var i=0;i<args.length;i++){
args[i]=arguments[i];
}

args[0]=exports.coerce(args[0]);

if('string'!==typeof args[0]){

args.unshift('%O');
}


var index=0;
args[0]=args[0].replace(/%([a-zA-Z%])/g,function(match,format){

if(match==='%%')return match;
index++;
var formatter=exports.formatters[format];
if('function'===typeof formatter){
var val=args[index];
match=formatter.call(self,val);


args.splice(index,1);
index--;
}
return match;
});


exports.formatArgs.call(self,args);

var logFn=debug.log||exports.log||console.log.bind(console);
logFn.apply(self,args);
}

debug.namespace=namespace;
debug.enabled=exports.enabled(namespace);
debug.useColors=exports.useColors();
debug.color=selectColor(namespace);


if('function'===typeof exports.init){
exports.init(debug);
}

return debug;
}









function enable(namespaces){
exports.save(namespaces);

exports.names=[];
exports.skips=[];

var split=(typeof namespaces==='string'?namespaces:'').split(/[\s,]+/);
var len=split.length;

for(var i=0;i<len;i++){
if(!split[i])continue;
namespaces=split[i].replace(/\*/g,'.*?');
if(namespaces[0]==='-'){
exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));
}else{
exports.names.push(new RegExp('^'+namespaces+'$'));
}
}
}







function disable(){
exports.enable('');
}









function enabled(name){
var i,len;
for(i=0,len=exports.skips.length;i<len;i++){
if(exports.skips[i].test(name)){
return false;
}
}
for(i=0,len=exports.names.length;i<len;i++){
if(exports.names[i].test(name)){
return true;
}
}
return false;
}









function coerce(val){
if(val instanceof Error)return val.stack||val.message;
return val;
}

},{"ms":151}],150:[function(require,module,exports){
'use strict';

Object.defineProperty(exports,'__esModule',{value:true});


var perf=typeof performance!=='undefined'&&performance;

var now=perf&&perf.now?function(){return perf.now();}:function(){return Date.now();};

function throwIfEmpty(name){
if(!name){
throw new Error('name must be non-empty');
}
}


function insertSorted(arr,item){
var low=0;
var high=arr.length;
var mid;
while(low<high){
mid=low+high>>>1;
if(arr[mid].startTime<item.startTime){
low=mid+1;
}else{
high=mid;
}
}
arr.splice(low,0,item);
}

if(perf&&perf.mark){
exports.mark=function(name){
throwIfEmpty(name);
perf.mark("start "+name);
};
exports.stop=function(name){
throwIfEmpty(name);
perf.mark("end "+name);
perf.measure(name,"start "+name,"end "+name);
var entries=perf.getEntriesByName(name);
return entries[entries.length-1];
};
exports.getEntries=function(){return perf.getEntriesByType('measure');};
exports.clear=function(){
perf.clearMarks();
perf.clearMeasures();
};
}else{
var marks={};
var entries=[];
exports.mark=function(name){
throwIfEmpty(name);
var startTime=now();
marks['$'+name]=startTime;
};
exports.stop=function(name){
throwIfEmpty(name);
var endTime=now();
var startTime=marks['$'+name];
if(!startTime){
throw new Error("no known mark: "+name);
}
var entry={
startTime:startTime,
name:name,
duration:endTime-startTime,
entryType:'measure'};




insertSorted(entries,entry);
return entry;
};
exports.getEntries=function(){return entries;};
exports.clear=function(){entries=[];};
}

},{}],151:[function(require,module,exports){




var s=1000;
var m=s*60;
var h=m*60;
var d=h*24;
var y=d*365.25;















module.exports=function(val,options){
options=options||{};
var type=typeof val;
if(type==='string'&&val.length>0){
return parse(val);
}else if(type==='number'&&isNaN(val)===false){
return options.long?fmtLong(val):fmtShort(val);
}
throw new Error(
'val is not a non-empty string or a valid number. val='+
JSON.stringify(val));

};









function parse(str){
str=String(str);
if(str.length>100){
return;
}
var match=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
str);

if(!match){
return;
}
var n=parseFloat(match[1]);
var type=(match[2]||'ms').toLowerCase();
switch(type){
case'years':
case'year':
case'yrs':
case'yr':
case'y':
return n*y;
case'days':
case'day':
case'd':
return n*d;
case'hours':
case'hour':
case'hrs':
case'hr':
case'h':
return n*h;
case'minutes':
case'minute':
case'mins':
case'min':
case'm':
return n*m;
case'seconds':
case'second':
case'secs':
case'sec':
case's':
return n*s;
case'milliseconds':
case'millisecond':
case'msecs':
case'msec':
case'ms':
return n;
default:
return undefined;}

}









function fmtShort(ms){
if(ms>=d){
return Math.round(ms/d)+'d';
}
if(ms>=h){
return Math.round(ms/h)+'h';
}
if(ms>=m){
return Math.round(ms/m)+'m';
}
if(ms>=s){
return Math.round(ms/s)+'s';
}
return ms+'ms';
}









function fmtLong(ms){
return plural(ms,d,'day')||
plural(ms,h,'hour')||
plural(ms,m,'minute')||
plural(ms,s,'second')||
ms+' ms';
}





function plural(ms,n,name){
if(ms<n){
return;
}
if(ms<n*1.5){
return Math.floor(ms/n)+' '+name;
}
return Math.ceil(ms/n)+' '+name+'s';
}

},{}],152:[function(require,module,exports){


var langs=[
"aa",
"ab",
"ae",
"af",
"ak",
"am",
"an",
"ar",
"as",
"av",
"ay",
"az",
"ba",
"be",
"bg",
"bh",
"bi",
"bm",
"bn",
"bo",
"br",
"bs",
"ca",
"ce",
"ch",
"co",
"cr",
"cs",
"cu",
"cv",
"cy",
"da",
"de",
"dv",
"dz",
"ee",
"el",
"en",
"eo",
"es",
"et",
"eu",
"fa",
"ff",
"fi",
"fj",
"fo",
"fr",
"fy",
"ga",
"gd",
"gl",
"gn",
"gu",
"gv",
"ha",
"he",
"hi",
"ho",
"hr",
"ht",
"hu",
"hy",
"hz",
"ia",
"id",
"ie",
"ig",
"ii",
"ik",
"in",
"io",
"is",
"it",
"iu",
"iw",
"ja",
"ji",
"jv",
"jw",
"ka",
"kg",
"ki",
"kj",
"kk",
"kl",
"km",
"kn",
"ko",
"kr",
"ks",
"ku",
"kv",
"kw",
"ky",
"la",
"lb",
"lg",
"li",
"ln",
"lo",
"lt",
"lu",
"lv",
"mg",
"mh",
"mi",
"mk",
"ml",
"mn",
"mo",
"mr",
"ms",
"mt",
"my",
"na",
"nb",
"nd",
"ne",
"ng",
"nl",
"nn",
"no",
"nr",
"nv",
"ny",
"oc",
"oj",
"om",
"or",
"os",
"pa",
"pi",
"pl",
"ps",
"pt",
"qu",
"rm",
"rn",
"ro",
"ru",
"rw",
"sa",
"sc",
"sd",
"se",
"sg",
"sh",
"si",
"sk",
"sl",
"sm",
"sn",
"so",
"sq",
"sr",
"ss",
"st",
"su",
"sv",
"sw",
"ta",
"te",
"tg",
"th",
"ti",
"tk",
"tl",
"tn",
"to",
"tr",
"ts",
"tt",
"tw",
"ty",
"ug",
"uk",
"ur",
"uz",
"ve",
"vi",
"vo",
"wa",
"wo",
"xh",
"yi",
"yo",
"za",
"zh",
"zu",
"aaa",
"aab",
"aac",
"aad",
"aae",
"aaf",
"aag",
"aah",
"aai",
"aak",
"aal",
"aam",
"aan",
"aao",
"aap",
"aaq",
"aas",
"aat",
"aau",
"aav",
"aaw",
"aax",
"aaz",
"aba",
"abb",
"abc",
"abd",
"abe",
"abf",
"abg",
"abh",
"abi",
"abj",
"abl",
"abm",
"abn",
"abo",
"abp",
"abq",
"abr",
"abs",
"abt",
"abu",
"abv",
"abw",
"abx",
"aby",
"abz",
"aca",
"acb",
"acd",
"ace",
"acf",
"ach",
"aci",
"ack",
"acl",
"acm",
"acn",
"acp",
"acq",
"acr",
"acs",
"act",
"acu",
"acv",
"acw",
"acx",
"acy",
"acz",
"ada",
"adb",
"add",
"ade",
"adf",
"adg",
"adh",
"adi",
"adj",
"adl",
"adn",
"ado",
"adp",
"adq",
"adr",
"ads",
"adt",
"adu",
"adw",
"adx",
"ady",
"adz",
"aea",
"aeb",
"aec",
"aed",
"aee",
"aek",
"ael",
"aem",
"aen",
"aeq",
"aer",
"aes",
"aeu",
"aew",
"aey",
"aez",
"afa",
"afb",
"afd",
"afe",
"afg",
"afh",
"afi",
"afk",
"afn",
"afo",
"afp",
"afs",
"aft",
"afu",
"afz",
"aga",
"agb",
"agc",
"agd",
"age",
"agf",
"agg",
"agh",
"agi",
"agj",
"agk",
"agl",
"agm",
"agn",
"ago",
"agp",
"agq",
"agr",
"ags",
"agt",
"agu",
"agv",
"agw",
"agx",
"agy",
"agz",
"aha",
"ahb",
"ahg",
"ahh",
"ahi",
"ahk",
"ahl",
"ahm",
"ahn",
"aho",
"ahp",
"ahr",
"ahs",
"aht",
"aia",
"aib",
"aic",
"aid",
"aie",
"aif",
"aig",
"aih",
"aii",
"aij",
"aik",
"ail",
"aim",
"ain",
"aio",
"aip",
"aiq",
"air",
"ais",
"ait",
"aiw",
"aix",
"aiy",
"aja",
"ajg",
"aji",
"ajn",
"ajp",
"ajt",
"aju",
"ajw",
"ajz",
"akb",
"akc",
"akd",
"ake",
"akf",
"akg",
"akh",
"aki",
"akj",
"akk",
"akl",
"akm",
"ako",
"akp",
"akq",
"akr",
"aks",
"akt",
"aku",
"akv",
"akw",
"akx",
"aky",
"akz",
"ala",
"alc",
"ald",
"ale",
"alf",
"alg",
"alh",
"ali",
"alj",
"alk",
"all",
"alm",
"aln",
"alo",
"alp",
"alq",
"alr",
"als",
"alt",
"alu",
"alv",
"alw",
"alx",
"aly",
"alz",
"ama",
"amb",
"amc",
"ame",
"amf",
"amg",
"ami",
"amj",
"amk",
"aml",
"amm",
"amn",
"amo",
"amp",
"amq",
"amr",
"ams",
"amt",
"amu",
"amv",
"amw",
"amx",
"amy",
"amz",
"ana",
"anb",
"anc",
"and",
"ane",
"anf",
"ang",
"anh",
"ani",
"anj",
"ank",
"anl",
"anm",
"ann",
"ano",
"anp",
"anq",
"anr",
"ans",
"ant",
"anu",
"anv",
"anw",
"anx",
"any",
"anz",
"aoa",
"aob",
"aoc",
"aod",
"aoe",
"aof",
"aog",
"aoh",
"aoi",
"aoj",
"aok",
"aol",
"aom",
"aon",
"aor",
"aos",
"aot",
"aou",
"aox",
"aoz",
"apa",
"apb",
"apc",
"apd",
"ape",
"apf",
"apg",
"aph",
"api",
"apj",
"apk",
"apl",
"apm",
"apn",
"apo",
"app",
"apq",
"apr",
"aps",
"apt",
"apu",
"apv",
"apw",
"apx",
"apy",
"apz",
"aqa",
"aqc",
"aqd",
"aqg",
"aql",
"aqm",
"aqn",
"aqp",
"aqr",
"aqt",
"aqz",
"arb",
"arc",
"ard",
"are",
"arh",
"ari",
"arj",
"ark",
"arl",
"arn",
"aro",
"arp",
"arq",
"arr",
"ars",
"art",
"aru",
"arv",
"arw",
"arx",
"ary",
"arz",
"asa",
"asb",
"asc",
"asd",
"ase",
"asf",
"asg",
"ash",
"asi",
"asj",
"ask",
"asl",
"asn",
"aso",
"asp",
"asq",
"asr",
"ass",
"ast",
"asu",
"asv",
"asw",
"asx",
"asy",
"asz",
"ata",
"atb",
"atc",
"atd",
"ate",
"atg",
"ath",
"ati",
"atj",
"atk",
"atl",
"atm",
"atn",
"ato",
"atp",
"atq",
"atr",
"ats",
"att",
"atu",
"atv",
"atw",
"atx",
"aty",
"atz",
"aua",
"aub",
"auc",
"aud",
"aue",
"auf",
"aug",
"auh",
"aui",
"auj",
"auk",
"aul",
"aum",
"aun",
"auo",
"aup",
"auq",
"aur",
"aus",
"aut",
"auu",
"auw",
"aux",
"auy",
"auz",
"avb",
"avd",
"avi",
"avk",
"avl",
"avm",
"avn",
"avo",
"avs",
"avt",
"avu",
"avv",
"awa",
"awb",
"awc",
"awd",
"awe",
"awg",
"awh",
"awi",
"awk",
"awm",
"awn",
"awo",
"awr",
"aws",
"awt",
"awu",
"awv",
"aww",
"awx",
"awy",
"axb",
"axe",
"axg",
"axk",
"axl",
"axm",
"axx",
"aya",
"ayb",
"ayc",
"ayd",
"aye",
"ayg",
"ayh",
"ayi",
"ayk",
"ayl",
"ayn",
"ayo",
"ayp",
"ayq",
"ayr",
"ays",
"ayt",
"ayu",
"ayx",
"ayy",
"ayz",
"aza",
"azb",
"azc",
"azd",
"azg",
"azj",
"azm",
"azn",
"azo",
"azt",
"azz",
"baa",
"bab",
"bac",
"bad",
"bae",
"baf",
"bag",
"bah",
"bai",
"baj",
"bal",
"ban",
"bao",
"bap",
"bar",
"bas",
"bat",
"bau",
"bav",
"baw",
"bax",
"bay",
"baz",
"bba",
"bbb",
"bbc",
"bbd",
"bbe",
"bbf",
"bbg",
"bbh",
"bbi",
"bbj",
"bbk",
"bbl",
"bbm",
"bbn",
"bbo",
"bbp",
"bbq",
"bbr",
"bbs",
"bbt",
"bbu",
"bbv",
"bbw",
"bbx",
"bby",
"bbz",
"bca",
"bcb",
"bcc",
"bcd",
"bce",
"bcf",
"bcg",
"bch",
"bci",
"bcj",
"bck",
"bcl",
"bcm",
"bcn",
"bco",
"bcp",
"bcq",
"bcr",
"bcs",
"bct",
"bcu",
"bcv",
"bcw",
"bcy",
"bcz",
"bda",
"bdb",
"bdc",
"bdd",
"bde",
"bdf",
"bdg",
"bdh",
"bdi",
"bdj",
"bdk",
"bdl",
"bdm",
"bdn",
"bdo",
"bdp",
"bdq",
"bdr",
"bds",
"bdt",
"bdu",
"bdv",
"bdw",
"bdx",
"bdy",
"bdz",
"bea",
"beb",
"bec",
"bed",
"bee",
"bef",
"beg",
"beh",
"bei",
"bej",
"bek",
"bem",
"beo",
"bep",
"beq",
"ber",
"bes",
"bet",
"beu",
"bev",
"bew",
"bex",
"bey",
"bez",
"bfa",
"bfb",
"bfc",
"bfd",
"bfe",
"bff",
"bfg",
"bfh",
"bfi",
"bfj",
"bfk",
"bfl",
"bfm",
"bfn",
"bfo",
"bfp",
"bfq",
"bfr",
"bfs",
"bft",
"bfu",
"bfw",
"bfx",
"bfy",
"bfz",
"bga",
"bgb",
"bgc",
"bgd",
"bge",
"bgf",
"bgg",
"bgi",
"bgj",
"bgk",
"bgl",
"bgm",
"bgn",
"bgo",
"bgp",
"bgq",
"bgr",
"bgs",
"bgt",
"bgu",
"bgv",
"bgw",
"bgx",
"bgy",
"bgz",
"bha",
"bhb",
"bhc",
"bhd",
"bhe",
"bhf",
"bhg",
"bhh",
"bhi",
"bhj",
"bhk",
"bhl",
"bhm",
"bhn",
"bho",
"bhp",
"bhq",
"bhr",
"bhs",
"bht",
"bhu",
"bhv",
"bhw",
"bhx",
"bhy",
"bhz",
"bia",
"bib",
"bic",
"bid",
"bie",
"bif",
"big",
"bij",
"bik",
"bil",
"bim",
"bin",
"bio",
"bip",
"biq",
"bir",
"bit",
"biu",
"biv",
"biw",
"bix",
"biy",
"biz",
"bja",
"bjb",
"bjc",
"bjd",
"bje",
"bjf",
"bjg",
"bjh",
"bji",
"bjj",
"bjk",
"bjl",
"bjm",
"bjn",
"bjo",
"bjp",
"bjq",
"bjr",
"bjs",
"bjt",
"bju",
"bjv",
"bjw",
"bjx",
"bjy",
"bjz",
"bka",
"bkb",
"bkc",
"bkd",
"bkf",
"bkg",
"bkh",
"bki",
"bkj",
"bkk",
"bkl",
"bkm",
"bkn",
"bko",
"bkp",
"bkq",
"bkr",
"bks",
"bkt",
"bku",
"bkv",
"bkw",
"bkx",
"bky",
"bkz",
"bla",
"blb",
"blc",
"bld",
"ble",
"blf",
"blg",
"blh",
"bli",
"blj",
"blk",
"bll",
"blm",
"bln",
"blo",
"blp",
"blq",
"blr",
"bls",
"blt",
"blv",
"blw",
"blx",
"bly",
"blz",
"bma",
"bmb",
"bmc",
"bmd",
"bme",
"bmf",
"bmg",
"bmh",
"bmi",
"bmj",
"bmk",
"bml",
"bmm",
"bmn",
"bmo",
"bmp",
"bmq",
"bmr",
"bms",
"bmt",
"bmu",
"bmv",
"bmw",
"bmx",
"bmy",
"bmz",
"bna",
"bnb",
"bnc",
"bnd",
"bne",
"bnf",
"bng",
"bni",
"bnj",
"bnk",
"bnl",
"bnm",
"bnn",
"bno",
"bnp",
"bnq",
"bnr",
"bns",
"bnt",
"bnu",
"bnv",
"bnw",
"bnx",
"bny",
"bnz",
"boa",
"bob",
"boe",
"bof",
"bog",
"boh",
"boi",
"boj",
"bok",
"bol",
"bom",
"bon",
"boo",
"bop",
"boq",
"bor",
"bot",
"bou",
"bov",
"bow",
"box",
"boy",
"boz",
"bpa",
"bpb",
"bpd",
"bpg",
"bph",
"bpi",
"bpj",
"bpk",
"bpl",
"bpm",
"bpn",
"bpo",
"bpp",
"bpq",
"bpr",
"bps",
"bpt",
"bpu",
"bpv",
"bpw",
"bpx",
"bpy",
"bpz",
"bqa",
"bqb",
"bqc",
"bqd",
"bqf",
"bqg",
"bqh",
"bqi",
"bqj",
"bqk",
"bql",
"bqm",
"bqn",
"bqo",
"bqp",
"bqq",
"bqr",
"bqs",
"bqt",
"bqu",
"bqv",
"bqw",
"bqx",
"bqy",
"bqz",
"bra",
"brb",
"brc",
"brd",
"brf",
"brg",
"brh",
"bri",
"brj",
"brk",
"brl",
"brm",
"brn",
"bro",
"brp",
"brq",
"brr",
"brs",
"brt",
"bru",
"brv",
"brw",
"brx",
"bry",
"brz",
"bsa",
"bsb",
"bsc",
"bse",
"bsf",
"bsg",
"bsh",
"bsi",
"bsj",
"bsk",
"bsl",
"bsm",
"bsn",
"bso",
"bsp",
"bsq",
"bsr",
"bss",
"bst",
"bsu",
"bsv",
"bsw",
"bsx",
"bsy",
"bta",
"btb",
"btc",
"btd",
"bte",
"btf",
"btg",
"bth",
"bti",
"btj",
"btk",
"btl",
"btm",
"btn",
"bto",
"btp",
"btq",
"btr",
"bts",
"btt",
"btu",
"btv",
"btw",
"btx",
"bty",
"btz",
"bua",
"bub",
"buc",
"bud",
"bue",
"buf",
"bug",
"buh",
"bui",
"buj",
"buk",
"bum",
"bun",
"buo",
"bup",
"buq",
"bus",
"but",
"buu",
"buv",
"buw",
"bux",
"buy",
"buz",
"bva",
"bvb",
"bvc",
"bvd",
"bve",
"bvf",
"bvg",
"bvh",
"bvi",
"bvj",
"bvk",
"bvl",
"bvm",
"bvn",
"bvo",
"bvp",
"bvq",
"bvr",
"bvt",
"bvu",
"bvv",
"bvw",
"bvx",
"bvy",
"bvz",
"bwa",
"bwb",
"bwc",
"bwd",
"bwe",
"bwf",
"bwg",
"bwh",
"bwi",
"bwj",
"bwk",
"bwl",
"bwm",
"bwn",
"bwo",
"bwp",
"bwq",
"bwr",
"bws",
"bwt",
"bwu",
"bww",
"bwx",
"bwy",
"bwz",
"bxa",
"bxb",
"bxc",
"bxd",
"bxe",
"bxf",
"bxg",
"bxh",
"bxi",
"bxj",
"bxk",
"bxl",
"bxm",
"bxn",
"bxo",
"bxp",
"bxq",
"bxr",
"bxs",
"bxu",
"bxv",
"bxw",
"bxx",
"bxz",
"bya",
"byb",
"byc",
"byd",
"bye",
"byf",
"byg",
"byh",
"byi",
"byj",
"byk",
"byl",
"bym",
"byn",
"byo",
"byp",
"byq",
"byr",
"bys",
"byt",
"byv",
"byw",
"byx",
"byy",
"byz",
"bza",
"bzb",
"bzc",
"bzd",
"bze",
"bzf",
"bzg",
"bzh",
"bzi",
"bzj",
"bzk",
"bzl",
"bzm",
"bzn",
"bzo",
"bzp",
"bzq",
"bzr",
"bzs",
"bzt",
"bzu",
"bzv",
"bzw",
"bzx",
"bzy",
"bzz",
"caa",
"cab",
"cac",
"cad",
"cae",
"caf",
"cag",
"cah",
"cai",
"caj",
"cak",
"cal",
"cam",
"can",
"cao",
"cap",
"caq",
"car",
"cas",
"cau",
"cav",
"caw",
"cax",
"cay",
"caz",
"cba",
"cbb",
"cbc",
"cbd",
"cbe",
"cbg",
"cbh",
"cbi",
"cbj",
"cbk",
"cbl",
"cbn",
"cbo",
"cbq",
"cbr",
"cbs",
"cbt",
"cbu",
"cbv",
"cbw",
"cby",
"cca",
"ccc",
"ccd",
"cce",
"ccg",
"cch",
"ccj",
"ccl",
"ccm",
"ccn",
"cco",
"ccp",
"ccq",
"ccr",
"ccs",
"cda",
"cdc",
"cdd",
"cde",
"cdf",
"cdg",
"cdh",
"cdi",
"cdj",
"cdm",
"cdn",
"cdo",
"cdr",
"cds",
"cdy",
"cdz",
"cea",
"ceb",
"ceg",
"cek",
"cel",
"cen",
"cet",
"cfa",
"cfd",
"cfg",
"cfm",
"cga",
"cgc",
"cgg",
"cgk",
"chb",
"chc",
"chd",
"chf",
"chg",
"chh",
"chj",
"chk",
"chl",
"chm",
"chn",
"cho",
"chp",
"chq",
"chr",
"cht",
"chw",
"chx",
"chy",
"chz",
"cia",
"cib",
"cic",
"cid",
"cie",
"cih",
"cik",
"cim",
"cin",
"cip",
"cir",
"ciw",
"ciy",
"cja",
"cje",
"cjh",
"cji",
"cjk",
"cjm",
"cjn",
"cjo",
"cjp",
"cjr",
"cjs",
"cjv",
"cjy",
"cka",
"ckb",
"ckh",
"ckl",
"ckn",
"cko",
"ckq",
"ckr",
"cks",
"ckt",
"cku",
"ckv",
"ckx",
"cky",
"ckz",
"cla",
"clc",
"cld",
"cle",
"clh",
"cli",
"clj",
"clk",
"cll",
"clm",
"clo",
"clt",
"clu",
"clw",
"cly",
"cma",
"cmc",
"cme",
"cmg",
"cmi",
"cmk",
"cml",
"cmm",
"cmn",
"cmo",
"cmr",
"cms",
"cmt",
"cna",
"cnb",
"cnc",
"cng",
"cnh",
"cni",
"cnk",
"cnl",
"cno",
"cns",
"cnt",
"cnu",
"cnw",
"cnx",
"coa",
"cob",
"coc",
"cod",
"coe",
"cof",
"cog",
"coh",
"coj",
"cok",
"col",
"com",
"con",
"coo",
"cop",
"coq",
"cot",
"cou",
"cov",
"cow",
"cox",
"coy",
"coz",
"cpa",
"cpb",
"cpc",
"cpe",
"cpf",
"cpg",
"cpi",
"cpn",
"cpo",
"cpp",
"cps",
"cpu",
"cpx",
"cpy",
"cqd",
"cqu",
"cra",
"crb",
"crc",
"crd",
"crf",
"crg",
"crh",
"cri",
"crj",
"crk",
"crl",
"crm",
"crn",
"cro",
"crp",
"crq",
"crr",
"crs",
"crt",
"crv",
"crw",
"crx",
"cry",
"crz",
"csa",
"csb",
"csc",
"csd",
"cse",
"csf",
"csg",
"csh",
"csi",
"csj",
"csk",
"csl",
"csm",
"csn",
"cso",
"csq",
"csr",
"css",
"cst",
"csu",
"csv",
"csw",
"csy",
"csz",
"cta",
"ctc",
"ctd",
"cte",
"ctg",
"cth",
"ctl",
"ctm",
"ctn",
"cto",
"ctp",
"cts",
"ctt",
"ctu",
"ctz",
"cua",
"cub",
"cuc",
"cug",
"cuh",
"cui",
"cuj",
"cuk",
"cul",
"cum",
"cuo",
"cup",
"cuq",
"cur",
"cus",
"cut",
"cuu",
"cuv",
"cuw",
"cux",
"cvg",
"cvn",
"cwa",
"cwb",
"cwd",
"cwe",
"cwg",
"cwt",
"cya",
"cyb",
"cyo",
"czh",
"czk",
"czn",
"czo",
"czt",
"daa",
"dac",
"dad",
"dae",
"daf",
"dag",
"dah",
"dai",
"daj",
"dak",
"dal",
"dam",
"dao",
"dap",
"daq",
"dar",
"das",
"dau",
"dav",
"daw",
"dax",
"day",
"daz",
"dba",
"dbb",
"dbd",
"dbe",
"dbf",
"dbg",
"dbi",
"dbj",
"dbl",
"dbm",
"dbn",
"dbo",
"dbp",
"dbq",
"dbr",
"dbt",
"dbu",
"dbv",
"dbw",
"dby",
"dcc",
"dcr",
"dda",
"ddd",
"dde",
"ddg",
"ddi",
"ddj",
"ddn",
"ddo",
"ddr",
"dds",
"ddw",
"dec",
"ded",
"dee",
"def",
"deg",
"deh",
"dei",
"dek",
"del",
"dem",
"den",
"dep",
"deq",
"der",
"des",
"dev",
"dez",
"dga",
"dgb",
"dgc",
"dgd",
"dge",
"dgg",
"dgh",
"dgi",
"dgk",
"dgl",
"dgn",
"dgo",
"dgr",
"dgs",
"dgt",
"dgu",
"dgw",
"dgx",
"dgz",
"dha",
"dhd",
"dhg",
"dhi",
"dhl",
"dhm",
"dhn",
"dho",
"dhr",
"dhs",
"dhu",
"dhv",
"dhw",
"dhx",
"dia",
"dib",
"dic",
"did",
"dif",
"dig",
"dih",
"dii",
"dij",
"dik",
"dil",
"dim",
"din",
"dio",
"dip",
"diq",
"dir",
"dis",
"dit",
"diu",
"diw",
"dix",
"diy",
"diz",
"dja",
"djb",
"djc",
"djd",
"dje",
"djf",
"dji",
"djj",
"djk",
"djl",
"djm",
"djn",
"djo",
"djr",
"dju",
"djw",
"dka",
"dkk",
"dkl",
"dkr",
"dks",
"dkx",
"dlg",
"dlk",
"dlm",
"dln",
"dma",
"dmb",
"dmc",
"dmd",
"dme",
"dmg",
"dmk",
"dml",
"dmm",
"dmn",
"dmo",
"dmr",
"dms",
"dmu",
"dmv",
"dmw",
"dmx",
"dmy",
"dna",
"dnd",
"dne",
"dng",
"dni",
"dnj",
"dnk",
"dnn",
"dnr",
"dnt",
"dnu",
"dnv",
"dnw",
"dny",
"doa",
"dob",
"doc",
"doe",
"dof",
"doh",
"doi",
"dok",
"dol",
"don",
"doo",
"dop",
"doq",
"dor",
"dos",
"dot",
"dov",
"dow",
"dox",
"doy",
"doz",
"dpp",
"dra",
"drb",
"drc",
"drd",
"dre",
"drg",
"drh",
"dri",
"drl",
"drn",
"dro",
"drq",
"drr",
"drs",
"drt",
"dru",
"drw",
"dry",
"dsb",
"dse",
"dsh",
"dsi",
"dsl",
"dsn",
"dso",
"dsq",
"dta",
"dtb",
"dtd",
"dth",
"dti",
"dtk",
"dtm",
"dtn",
"dto",
"dtp",
"dtr",
"dts",
"dtt",
"dtu",
"dty",
"dua",
"dub",
"duc",
"dud",
"due",
"duf",
"dug",
"duh",
"dui",
"duj",
"duk",
"dul",
"dum",
"dun",
"duo",
"dup",
"duq",
"dur",
"dus",
"duu",
"duv",
"duw",
"dux",
"duy",
"duz",
"dva",
"dwa",
"dwl",
"dwr",
"dws",
"dwu",
"dww",
"dwy",
"dya",
"dyb",
"dyd",
"dyg",
"dyi",
"dym",
"dyn",
"dyo",
"dyu",
"dyy",
"dza",
"dzd",
"dze",
"dzg",
"dzl",
"dzn",
"eaa",
"ebg",
"ebk",
"ebo",
"ebr",
"ebu",
"ecr",
"ecs",
"ecy",
"eee",
"efa",
"efe",
"efi",
"ega",
"egl",
"ego",
"egx",
"egy",
"ehu",
"eip",
"eit",
"eiv",
"eja",
"eka",
"ekc",
"eke",
"ekg",
"eki",
"ekk",
"ekl",
"ekm",
"eko",
"ekp",
"ekr",
"eky",
"ele",
"elh",
"eli",
"elk",
"elm",
"elo",
"elp",
"elu",
"elx",
"ema",
"emb",
"eme",
"emg",
"emi",
"emk",
"emm",
"emn",
"emo",
"emp",
"ems",
"emu",
"emw",
"emx",
"emy",
"ena",
"enb",
"enc",
"end",
"enf",
"enh",
"enl",
"enm",
"enn",
"eno",
"enq",
"enr",
"enu",
"env",
"enw",
"enx",
"eot",
"epi",
"era",
"erg",
"erh",
"eri",
"erk",
"ero",
"err",
"ers",
"ert",
"erw",
"ese",
"esg",
"esh",
"esi",
"esk",
"esl",
"esm",
"esn",
"eso",
"esq",
"ess",
"esu",
"esx",
"esy",
"etb",
"etc",
"eth",
"etn",
"eto",
"etr",
"ets",
"ett",
"etu",
"etx",
"etz",
"euq",
"eve",
"evh",
"evn",
"ewo",
"ext",
"eya",
"eyo",
"eza",
"eze",
"faa",
"fab",
"fad",
"faf",
"fag",
"fah",
"fai",
"faj",
"fak",
"fal",
"fam",
"fan",
"fap",
"far",
"fat",
"fau",
"fax",
"fay",
"faz",
"fbl",
"fcs",
"fer",
"ffi",
"ffm",
"fgr",
"fia",
"fie",
"fil",
"fip",
"fir",
"fit",
"fiu",
"fiw",
"fkk",
"fkv",
"fla",
"flh",
"fli",
"fll",
"fln",
"flr",
"fly",
"fmp",
"fmu",
"fnb",
"fng",
"fni",
"fod",
"foi",
"fom",
"fon",
"for",
"fos",
"fox",
"fpe",
"fqs",
"frc",
"frd",
"frk",
"frm",
"fro",
"frp",
"frq",
"frr",
"frs",
"frt",
"fse",
"fsl",
"fss",
"fub",
"fuc",
"fud",
"fue",
"fuf",
"fuh",
"fui",
"fuj",
"fum",
"fun",
"fuq",
"fur",
"fut",
"fuu",
"fuv",
"fuy",
"fvr",
"fwa",
"fwe",
"gaa",
"gab",
"gac",
"gad",
"gae",
"gaf",
"gag",
"gah",
"gai",
"gaj",
"gak",
"gal",
"gam",
"gan",
"gao",
"gap",
"gaq",
"gar",
"gas",
"gat",
"gau",
"gav",
"gaw",
"gax",
"gay",
"gaz",
"gba",
"gbb",
"gbc",
"gbd",
"gbe",
"gbf",
"gbg",
"gbh",
"gbi",
"gbj",
"gbk",
"gbl",
"gbm",
"gbn",
"gbo",
"gbp",
"gbq",
"gbr",
"gbs",
"gbu",
"gbv",
"gbw",
"gbx",
"gby",
"gbz",
"gcc",
"gcd",
"gce",
"gcf",
"gcl",
"gcn",
"gcr",
"gct",
"gda",
"gdb",
"gdc",
"gdd",
"gde",
"gdf",
"gdg",
"gdh",
"gdi",
"gdj",
"gdk",
"gdl",
"gdm",
"gdn",
"gdo",
"gdq",
"gdr",
"gds",
"gdt",
"gdu",
"gdx",
"gea",
"geb",
"gec",
"ged",
"geg",
"geh",
"gei",
"gej",
"gek",
"gel",
"gem",
"geq",
"ges",
"gev",
"gew",
"gex",
"gey",
"gez",
"gfk",
"gft",
"gfx",
"gga",
"ggb",
"ggd",
"gge",
"ggg",
"ggk",
"ggl",
"ggn",
"ggo",
"ggr",
"ggt",
"ggu",
"ggw",
"gha",
"ghc",
"ghe",
"ghh",
"ghk",
"ghl",
"ghn",
"gho",
"ghr",
"ghs",
"ght",
"gia",
"gib",
"gic",
"gid",
"gie",
"gig",
"gih",
"gil",
"gim",
"gin",
"gio",
"gip",
"giq",
"gir",
"gis",
"git",
"giu",
"giw",
"gix",
"giy",
"giz",
"gji",
"gjk",
"gjm",
"gjn",
"gjr",
"gju",
"gka",
"gke",
"gkn",
"gko",
"gkp",
"gku",
"glc",
"gld",
"glh",
"gli",
"glj",
"glk",
"gll",
"glo",
"glr",
"glu",
"glw",
"gly",
"gma",
"gmb",
"gmd",
"gme",
"gmg",
"gmh",
"gml",
"gmm",
"gmn",
"gmq",
"gmu",
"gmv",
"gmw",
"gmx",
"gmy",
"gmz",
"gna",
"gnb",
"gnc",
"gnd",
"gne",
"gng",
"gnh",
"gni",
"gnk",
"gnl",
"gnm",
"gnn",
"gno",
"gnq",
"gnr",
"gnt",
"gnu",
"gnw",
"gnz",
"goa",
"gob",
"goc",
"god",
"goe",
"gof",
"gog",
"goh",
"goi",
"goj",
"gok",
"gol",
"gom",
"gon",
"goo",
"gop",
"goq",
"gor",
"gos",
"got",
"gou",
"gow",
"gox",
"goy",
"goz",
"gpa",
"gpe",
"gpn",
"gqa",
"gqi",
"gqn",
"gqr",
"gqu",
"gra",
"grb",
"grc",
"grd",
"grg",
"grh",
"gri",
"grj",
"grk",
"grm",
"gro",
"grq",
"grr",
"grs",
"grt",
"gru",
"grv",
"grw",
"grx",
"gry",
"grz",
"gse",
"gsg",
"gsl",
"gsm",
"gsn",
"gso",
"gsp",
"gss",
"gsw",
"gta",
"gti",
"gtu",
"gua",
"gub",
"guc",
"gud",
"gue",
"guf",
"gug",
"guh",
"gui",
"guk",
"gul",
"gum",
"gun",
"guo",
"gup",
"guq",
"gur",
"gus",
"gut",
"guu",
"guv",
"guw",
"gux",
"guz",
"gva",
"gvc",
"gve",
"gvf",
"gvj",
"gvl",
"gvm",
"gvn",
"gvo",
"gvp",
"gvr",
"gvs",
"gvy",
"gwa",
"gwb",
"gwc",
"gwd",
"gwe",
"gwf",
"gwg",
"gwi",
"gwj",
"gwm",
"gwn",
"gwr",
"gwt",
"gwu",
"gww",
"gwx",
"gxx",
"gya",
"gyb",
"gyd",
"gye",
"gyf",
"gyg",
"gyi",
"gyl",
"gym",
"gyn",
"gyr",
"gyy",
"gza",
"gzi",
"gzn",
"haa",
"hab",
"hac",
"had",
"hae",
"haf",
"hag",
"hah",
"hai",
"haj",
"hak",
"hal",
"ham",
"han",
"hao",
"hap",
"haq",
"har",
"has",
"hav",
"haw",
"hax",
"hay",
"haz",
"hba",
"hbb",
"hbn",
"hbo",
"hbu",
"hca",
"hch",
"hdn",
"hds",
"hdy",
"hea",
"hed",
"heg",
"heh",
"hei",
"hem",
"hgm",
"hgw",
"hhi",
"hhr",
"hhy",
"hia",
"hib",
"hid",
"hif",
"hig",
"hih",
"hii",
"hij",
"hik",
"hil",
"him",
"hio",
"hir",
"hit",
"hiw",
"hix",
"hji",
"hka",
"hke",
"hkk",
"hks",
"hla",
"hlb",
"hld",
"hle",
"hlt",
"hlu",
"hma",
"hmb",
"hmc",
"hmd",
"hme",
"hmf",
"hmg",
"hmh",
"hmi",
"hmj",
"hmk",
"hml",
"hmm",
"hmn",
"hmp",
"hmq",
"hmr",
"hms",
"hmt",
"hmu",
"hmv",
"hmw",
"hmx",
"hmy",
"hmz",
"hna",
"hnd",
"hne",
"hnh",
"hni",
"hnj",
"hnn",
"hno",
"hns",
"hnu",
"hoa",
"hob",
"hoc",
"hod",
"hoe",
"hoh",
"hoi",
"hoj",
"hok",
"hol",
"hom",
"hoo",
"hop",
"hor",
"hos",
"hot",
"hov",
"how",
"hoy",
"hoz",
"hpo",
"hps",
"hra",
"hrc",
"hre",
"hrk",
"hrm",
"hro",
"hrp",
"hrr",
"hrt",
"hru",
"hrw",
"hrx",
"hrz",
"hsb",
"hsh",
"hsl",
"hsn",
"hss",
"hti",
"hto",
"hts",
"htu",
"htx",
"hub",
"huc",
"hud",
"hue",
"huf",
"hug",
"huh",
"hui",
"huj",
"huk",
"hul",
"hum",
"huo",
"hup",
"huq",
"hur",
"hus",
"hut",
"huu",
"huv",
"huw",
"hux",
"huy",
"huz",
"hvc",
"hve",
"hvk",
"hvn",
"hvv",
"hwa",
"hwc",
"hwo",
"hya",
"hyx",
"iai",
"ian",
"iap",
"iar",
"iba",
"ibb",
"ibd",
"ibe",
"ibg",
"ibh",
"ibi",
"ibl",
"ibm",
"ibn",
"ibr",
"ibu",
"iby",
"ica",
"ich",
"icl",
"icr",
"ida",
"idb",
"idc",
"idd",
"ide",
"idi",
"idr",
"ids",
"idt",
"idu",
"ifa",
"ifb",
"ife",
"iff",
"ifk",
"ifm",
"ifu",
"ify",
"igb",
"ige",
"igg",
"igl",
"igm",
"ign",
"igo",
"igs",
"igw",
"ihb",
"ihi",
"ihp",
"ihw",
"iin",
"iir",
"ijc",
"ije",
"ijj",
"ijn",
"ijo",
"ijs",
"ike",
"iki",
"ikk",
"ikl",
"iko",
"ikp",
"ikr",
"iks",
"ikt",
"ikv",
"ikw",
"ikx",
"ikz",
"ila",
"ilb",
"ilg",
"ili",
"ilk",
"ill",
"ilm",
"ilo",
"ilp",
"ils",
"ilu",
"ilv",
"ilw",
"ima",
"ime",
"imi",
"iml",
"imn",
"imo",
"imr",
"ims",
"imy",
"inb",
"inc",
"ine",
"ing",
"inh",
"inj",
"inl",
"inm",
"inn",
"ino",
"inp",
"ins",
"int",
"inz",
"ior",
"iou",
"iow",
"ipi",
"ipo",
"iqu",
"iqw",
"ira",
"ire",
"irh",
"iri",
"irk",
"irn",
"iro",
"irr",
"iru",
"irx",
"iry",
"isa",
"isc",
"isd",
"ise",
"isg",
"ish",
"isi",
"isk",
"ism",
"isn",
"iso",
"isr",
"ist",
"isu",
"itb",
"itc",
"itd",
"ite",
"iti",
"itk",
"itl",
"itm",
"ito",
"itr",
"its",
"itt",
"itv",
"itw",
"itx",
"ity",
"itz",
"ium",
"ivb",
"ivv",
"iwk",
"iwm",
"iwo",
"iws",
"ixc",
"ixl",
"iya",
"iyo",
"iyx",
"izh",
"izi",
"izr",
"izz",
"jaa",
"jab",
"jac",
"jad",
"jae",
"jaf",
"jah",
"jaj",
"jak",
"jal",
"jam",
"jan",
"jao",
"jaq",
"jar",
"jas",
"jat",
"jau",
"jax",
"jay",
"jaz",
"jbe",
"jbi",
"jbj",
"jbk",
"jbn",
"jbo",
"jbr",
"jbt",
"jbu",
"jbw",
"jcs",
"jct",
"jda",
"jdg",
"jdt",
"jeb",
"jee",
"jeg",
"jeh",
"jei",
"jek",
"jel",
"jen",
"jer",
"jet",
"jeu",
"jgb",
"jge",
"jgk",
"jgo",
"jhi",
"jhs",
"jia",
"jib",
"jic",
"jid",
"jie",
"jig",
"jih",
"jii",
"jil",
"jim",
"jio",
"jiq",
"jit",
"jiu",
"jiv",
"jiy",
"jje",
"jjr",
"jka",
"jkm",
"jko",
"jkp",
"jkr",
"jku",
"jle",
"jls",
"jma",
"jmb",
"jmc",
"jmd",
"jmi",
"jml",
"jmn",
"jmr",
"jms",
"jmw",
"jmx",
"jna",
"jnd",
"jng",
"jni",
"jnj",
"jnl",
"jns",
"job",
"jod",
"jog",
"jor",
"jos",
"jow",
"jpa",
"jpr",
"jpx",
"jqr",
"jra",
"jrb",
"jrr",
"jrt",
"jru",
"jsl",
"jua",
"jub",
"juc",
"jud",
"juh",
"jui",
"juk",
"jul",
"jum",
"jun",
"juo",
"jup",
"jur",
"jus",
"jut",
"juu",
"juw",
"juy",
"jvd",
"jvn",
"jwi",
"jya",
"jye",
"jyy",
"kaa",
"kab",
"kac",
"kad",
"kae",
"kaf",
"kag",
"kah",
"kai",
"kaj",
"kak",
"kam",
"kao",
"kap",
"kaq",
"kar",
"kav",
"kaw",
"kax",
"kay",
"kba",
"kbb",
"kbc",
"kbd",
"kbe",
"kbf",
"kbg",
"kbh",
"kbi",
"kbj",
"kbk",
"kbl",
"kbm",
"kbn",
"kbo",
"kbp",
"kbq",
"kbr",
"kbs",
"kbt",
"kbu",
"kbv",
"kbw",
"kbx",
"kby",
"kbz",
"kca",
"kcb",
"kcc",
"kcd",
"kce",
"kcf",
"kcg",
"kch",
"kci",
"kcj",
"kck",
"kcl",
"kcm",
"kcn",
"kco",
"kcp",
"kcq",
"kcr",
"kcs",
"kct",
"kcu",
"kcv",
"kcw",
"kcx",
"kcy",
"kcz",
"kda",
"kdc",
"kdd",
"kde",
"kdf",
"kdg",
"kdh",
"kdi",
"kdj",
"kdk",
"kdl",
"kdm",
"kdn",
"kdo",
"kdp",
"kdq",
"kdr",
"kdt",
"kdu",
"kdv",
"kdw",
"kdx",
"kdy",
"kdz",
"kea",
"keb",
"kec",
"ked",
"kee",
"kef",
"keg",
"keh",
"kei",
"kej",
"kek",
"kel",
"kem",
"ken",
"keo",
"kep",
"keq",
"ker",
"kes",
"ket",
"keu",
"kev",
"kew",
"kex",
"key",
"kez",
"kfa",
"kfb",
"kfc",
"kfd",
"kfe",
"kff",
"kfg",
"kfh",
"kfi",
"kfj",
"kfk",
"kfl",
"kfm",
"kfn",
"kfo",
"kfp",
"kfq",
"kfr",
"kfs",
"kft",
"kfu",
"kfv",
"kfw",
"kfx",
"kfy",
"kfz",
"kga",
"kgb",
"kgc",
"kgd",
"kge",
"kgf",
"kgg",
"kgh",
"kgi",
"kgj",
"kgk",
"kgl",
"kgm",
"kgn",
"kgo",
"kgp",
"kgq",
"kgr",
"kgs",
"kgt",
"kgu",
"kgv",
"kgw",
"kgx",
"kgy",
"kha",
"khb",
"khc",
"khd",
"khe",
"khf",
"khg",
"khh",
"khi",
"khj",
"khk",
"khl",
"khn",
"kho",
"khp",
"khq",
"khr",
"khs",
"kht",
"khu",
"khv",
"khw",
"khx",
"khy",
"khz",
"kia",
"kib",
"kic",
"kid",
"kie",
"kif",
"kig",
"kih",
"kii",
"kij",
"kil",
"kim",
"kio",
"kip",
"kiq",
"kis",
"kit",
"kiu",
"kiv",
"kiw",
"kix",
"kiy",
"kiz",
"kja",
"kjb",
"kjc",
"kjd",
"kje",
"kjf",
"kjg",
"kjh",
"kji",
"kjj",
"kjk",
"kjl",
"kjm",
"kjn",
"kjo",
"kjp",
"kjq",
"kjr",
"kjs",
"kjt",
"kju",
"kjv",
"kjx",
"kjy",
"kjz",
"kka",
"kkb",
"kkc",
"kkd",
"kke",
"kkf",
"kkg",
"kkh",
"kki",
"kkj",
"kkk",
"kkl",
"kkm",
"kkn",
"kko",
"kkp",
"kkq",
"kkr",
"kks",
"kkt",
"kku",
"kkv",
"kkw",
"kkx",
"kky",
"kkz",
"kla",
"klb",
"klc",
"kld",
"kle",
"klf",
"klg",
"klh",
"kli",
"klj",
"klk",
"kll",
"klm",
"kln",
"klo",
"klp",
"klq",
"klr",
"kls",
"klt",
"klu",
"klv",
"klw",
"klx",
"kly",
"klz",
"kma",
"kmb",
"kmc",
"kmd",
"kme",
"kmf",
"kmg",
"kmh",
"kmi",
"kmj",
"kmk",
"kml",
"kmm",
"kmn",
"kmo",
"kmp",
"kmq",
"kmr",
"kms",
"kmt",
"kmu",
"kmv",
"kmw",
"kmx",
"kmy",
"kmz",
"kna",
"knb",
"knc",
"knd",
"kne",
"knf",
"kng",
"kni",
"knj",
"knk",
"knl",
"knm",
"knn",
"kno",
"knp",
"knq",
"knr",
"kns",
"knt",
"knu",
"knv",
"knw",
"knx",
"kny",
"knz",
"koa",
"koc",
"kod",
"koe",
"kof",
"kog",
"koh",
"koi",
"koj",
"kok",
"kol",
"koo",
"kop",
"koq",
"kos",
"kot",
"kou",
"kov",
"kow",
"kox",
"koy",
"koz",
"kpa",
"kpb",
"kpc",
"kpd",
"kpe",
"kpf",
"kpg",
"kph",
"kpi",
"kpj",
"kpk",
"kpl",
"kpm",
"kpn",
"kpo",
"kpp",
"kpq",
"kpr",
"kps",
"kpt",
"kpu",
"kpv",
"kpw",
"kpx",
"kpy",
"kpz",
"kqa",
"kqb",
"kqc",
"kqd",
"kqe",
"kqf",
"kqg",
"kqh",
"kqi",
"kqj",
"kqk",
"kql",
"kqm",
"kqn",
"kqo",
"kqp",
"kqq",
"kqr",
"kqs",
"kqt",
"kqu",
"kqv",
"kqw",
"kqx",
"kqy",
"kqz",
"kra",
"krb",
"krc",
"krd",
"kre",
"krf",
"krh",
"kri",
"krj",
"krk",
"krl",
"krm",
"krn",
"kro",
"krp",
"krr",
"krs",
"krt",
"kru",
"krv",
"krw",
"krx",
"kry",
"krz",
"ksa",
"ksb",
"ksc",
"ksd",
"kse",
"ksf",
"ksg",
"ksh",
"ksi",
"ksj",
"ksk",
"ksl",
"ksm",
"ksn",
"kso",
"ksp",
"ksq",
"ksr",
"kss",
"kst",
"ksu",
"ksv",
"ksw",
"ksx",
"ksy",
"ksz",
"kta",
"ktb",
"ktc",
"ktd",
"kte",
"ktf",
"ktg",
"kth",
"kti",
"ktj",
"ktk",
"ktl",
"ktm",
"ktn",
"kto",
"ktp",
"ktq",
"ktr",
"kts",
"ktt",
"ktu",
"ktv",
"ktw",
"ktx",
"kty",
"ktz",
"kub",
"kuc",
"kud",
"kue",
"kuf",
"kug",
"kuh",
"kui",
"kuj",
"kuk",
"kul",
"kum",
"kun",
"kuo",
"kup",
"kuq",
"kus",
"kut",
"kuu",
"kuv",
"kuw",
"kux",
"kuy",
"kuz",
"kva",
"kvb",
"kvc",
"kvd",
"kve",
"kvf",
"kvg",
"kvh",
"kvi",
"kvj",
"kvk",
"kvl",
"kvm",
"kvn",
"kvo",
"kvp",
"kvq",
"kvr",
"kvs",
"kvt",
"kvu",
"kvv",
"kvw",
"kvx",
"kvy",
"kvz",
"kwa",
"kwb",
"kwc",
"kwd",
"kwe",
"kwf",
"kwg",
"kwh",
"kwi",
"kwj",
"kwk",
"kwl",
"kwm",
"kwn",
"kwo",
"kwp",
"kwq",
"kwr",
"kws",
"kwt",
"kwu",
"kwv",
"kww",
"kwx",
"kwy",
"kwz",
"kxa",
"kxb",
"kxc",
"kxd",
"kxe",
"kxf",
"kxh",
"kxi",
"kxj",
"kxk",
"kxl",
"kxm",
"kxn",
"kxo",
"kxp",
"kxq",
"kxr",
"kxs",
"kxt",
"kxu",
"kxv",
"kxw",
"kxx",
"kxy",
"kxz",
"kya",
"kyb",
"kyc",
"kyd",
"kye",
"kyf",
"kyg",
"kyh",
"kyi",
"kyj",
"kyk",
"kyl",
"kym",
"kyn",
"kyo",
"kyp",
"kyq",
"kyr",
"kys",
"kyt",
"kyu",
"kyv",
"kyw",
"kyx",
"kyy",
"kyz",
"kza",
"kzb",
"kzc",
"kzd",
"kze",
"kzf",
"kzg",
"kzh",
"kzi",
"kzj",
"kzk",
"kzl",
"kzm",
"kzn",
"kzo",
"kzp",
"kzq",
"kzr",
"kzs",
"kzt",
"kzu",
"kzv",
"kzw",
"kzx",
"kzy",
"kzz",
"laa",
"lab",
"lac",
"lad",
"lae",
"laf",
"lag",
"lah",
"lai",
"laj",
"lak",
"lal",
"lam",
"lan",
"lap",
"laq",
"lar",
"las",
"lau",
"law",
"lax",
"lay",
"laz",
"lba",
"lbb",
"lbc",
"lbe",
"lbf",
"lbg",
"lbi",
"lbj",
"lbk",
"lbl",
"lbm",
"lbn",
"lbo",
"lbq",
"lbr",
"lbs",
"lbt",
"lbu",
"lbv",
"lbw",
"lbx",
"lby",
"lbz",
"lcc",
"lcd",
"lce",
"lcf",
"lch",
"lcl",
"lcm",
"lcp",
"lcq",
"lcs",
"lda",
"ldb",
"ldd",
"ldg",
"ldh",
"ldi",
"ldj",
"ldk",
"ldl",
"ldm",
"ldn",
"ldo",
"ldp",
"ldq",
"lea",
"leb",
"lec",
"led",
"lee",
"lef",
"leg",
"leh",
"lei",
"lej",
"lek",
"lel",
"lem",
"len",
"leo",
"lep",
"leq",
"ler",
"les",
"let",
"leu",
"lev",
"lew",
"lex",
"ley",
"lez",
"lfa",
"lfn",
"lga",
"lgb",
"lgg",
"lgh",
"lgi",
"lgk",
"lgl",
"lgm",
"lgn",
"lgq",
"lgr",
"lgt",
"lgu",
"lgz",
"lha",
"lhh",
"lhi",
"lhl",
"lhm",
"lhn",
"lhp",
"lhs",
"lht",
"lhu",
"lia",
"lib",
"lic",
"lid",
"lie",
"lif",
"lig",
"lih",
"lii",
"lij",
"lik",
"lil",
"lio",
"lip",
"liq",
"lir",
"lis",
"liu",
"liv",
"liw",
"lix",
"liy",
"liz",
"lja",
"lje",
"lji",
"ljl",
"ljp",
"ljw",
"ljx",
"lka",
"lkb",
"lkc",
"lkd",
"lke",
"lkh",
"lki",
"lkj",
"lkl",
"lkm",
"lkn",
"lko",
"lkr",
"lks",
"lkt",
"lku",
"lky",
"lla",
"llb",
"llc",
"lld",
"lle",
"llf",
"llg",
"llh",
"lli",
"llj",
"llk",
"lll",
"llm",
"lln",
"llo",
"llp",
"llq",
"lls",
"llu",
"llx",
"lma",
"lmb",
"lmc",
"lmd",
"lme",
"lmf",
"lmg",
"lmh",
"lmi",
"lmj",
"lmk",
"lml",
"lmm",
"lmn",
"lmo",
"lmp",
"lmq",
"lmr",
"lmu",
"lmv",
"lmw",
"lmx",
"lmy",
"lmz",
"lna",
"lnb",
"lnd",
"lng",
"lnh",
"lni",
"lnj",
"lnl",
"lnm",
"lnn",
"lno",
"lns",
"lnu",
"lnw",
"lnz",
"loa",
"lob",
"loc",
"loe",
"lof",
"log",
"loh",
"loi",
"loj",
"lok",
"lol",
"lom",
"lon",
"loo",
"lop",
"loq",
"lor",
"los",
"lot",
"lou",
"lov",
"low",
"lox",
"loy",
"loz",
"lpa",
"lpe",
"lpn",
"lpo",
"lpx",
"lra",
"lrc",
"lre",
"lrg",
"lri",
"lrk",
"lrl",
"lrm",
"lrn",
"lro",
"lrr",
"lrt",
"lrv",
"lrz",
"lsa",
"lsd",
"lse",
"lsg",
"lsh",
"lsi",
"lsl",
"lsm",
"lso",
"lsp",
"lsr",
"lss",
"lst",
"lsy",
"ltc",
"ltg",
"lth",
"lti",
"ltn",
"lto",
"lts",
"ltu",
"lua",
"luc",
"lud",
"lue",
"luf",
"lui",
"luj",
"luk",
"lul",
"lum",
"lun",
"luo",
"lup",
"luq",
"lur",
"lus",
"lut",
"luu",
"luv",
"luw",
"luy",
"luz",
"lva",
"lvk",
"lvs",
"lvu",
"lwa",
"lwe",
"lwg",
"lwh",
"lwl",
"lwm",
"lwo",
"lwt",
"lwu",
"lww",
"lya",
"lyg",
"lyn",
"lzh",
"lzl",
"lzn",
"lzz",
"maa",
"mab",
"mad",
"mae",
"maf",
"mag",
"mai",
"maj",
"mak",
"mam",
"man",
"map",
"maq",
"mas",
"mat",
"mau",
"mav",
"maw",
"max",
"maz",
"mba",
"mbb",
"mbc",
"mbd",
"mbe",
"mbf",
"mbh",
"mbi",
"mbj",
"mbk",
"mbl",
"mbm",
"mbn",
"mbo",
"mbp",
"mbq",
"mbr",
"mbs",
"mbt",
"mbu",
"mbv",
"mbw",
"mbx",
"mby",
"mbz",
"mca",
"mcb",
"mcc",
"mcd",
"mce",
"mcf",
"mcg",
"mch",
"mci",
"mcj",
"mck",
"mcl",
"mcm",
"mcn",
"mco",
"mcp",
"mcq",
"mcr",
"mcs",
"mct",
"mcu",
"mcv",
"mcw",
"mcx",
"mcy",
"mcz",
"mda",
"mdb",
"mdc",
"mdd",
"mde",
"mdf",
"mdg",
"mdh",
"mdi",
"mdj",
"mdk",
"mdl",
"mdm",
"mdn",
"mdp",
"mdq",
"mdr",
"mds",
"mdt",
"mdu",
"mdv",
"mdw",
"mdx",
"mdy",
"mdz",
"mea",
"meb",
"mec",
"med",
"mee",
"mef",
"meg",
"meh",
"mei",
"mej",
"mek",
"mel",
"mem",
"men",
"meo",
"mep",
"meq",
"mer",
"mes",
"met",
"meu",
"mev",
"mew",
"mey",
"mez",
"mfa",
"mfb",
"mfc",
"mfd",
"mfe",
"mff",
"mfg",
"mfh",
"mfi",
"mfj",
"mfk",
"mfl",
"mfm",
"mfn",
"mfo",
"mfp",
"mfq",
"mfr",
"mfs",
"mft",
"mfu",
"mfv",
"mfw",
"mfx",
"mfy",
"mfz",
"mga",
"mgb",
"mgc",
"mgd",
"mge",
"mgf",
"mgg",
"mgh",
"mgi",
"mgj",
"mgk",
"mgl",
"mgm",
"mgn",
"mgo",
"mgp",
"mgq",
"mgr",
"mgs",
"mgt",
"mgu",
"mgv",
"mgw",
"mgx",
"mgy",
"mgz",
"mha",
"mhb",
"mhc",
"mhd",
"mhe",
"mhf",
"mhg",
"mhh",
"mhi",
"mhj",
"mhk",
"mhl",
"mhm",
"mhn",
"mho",
"mhp",
"mhq",
"mhr",
"mhs",
"mht",
"mhu",
"mhw",
"mhx",
"mhy",
"mhz",
"mia",
"mib",
"mic",
"mid",
"mie",
"mif",
"mig",
"mih",
"mii",
"mij",
"mik",
"mil",
"mim",
"min",
"mio",
"mip",
"miq",
"mir",
"mis",
"mit",
"miu",
"miw",
"mix",
"miy",
"miz",
"mja",
"mjb",
"mjc",
"mjd",
"mje",
"mjg",
"mjh",
"mji",
"mjj",
"mjk",
"mjl",
"mjm",
"mjn",
"mjo",
"mjp",
"mjq",
"mjr",
"mjs",
"mjt",
"mju",
"mjv",
"mjw",
"mjx",
"mjy",
"mjz",
"mka",
"mkb",
"mkc",
"mke",
"mkf",
"mkg",
"mkh",
"mki",
"mkj",
"mkk",
"mkl",
"mkm",
"mkn",
"mko",
"mkp",
"mkq",
"mkr",
"mks",
"mkt",
"mku",
"mkv",
"mkw",
"mkx",
"mky",
"mkz",
"mla",
"mlb",
"mlc",
"mld",
"mle",
"mlf",
"mlh",
"mli",
"mlj",
"mlk",
"mll",
"mlm",
"mln",
"mlo",
"mlp",
"mlq",
"mlr",
"mls",
"mlu",
"mlv",
"mlw",
"mlx",
"mlz",
"mma",
"mmb",
"mmc",
"mmd",
"mme",
"mmf",
"mmg",
"mmh",
"mmi",
"mmj",
"mmk",
"mml",
"mmm",
"mmn",
"mmo",
"mmp",
"mmq",
"mmr",
"mmt",
"mmu",
"mmv",
"mmw",
"mmx",
"mmy",
"mmz",
"mna",
"mnb",
"mnc",
"mnd",
"mne",
"mnf",
"mng",
"mnh",
"mni",
"mnj",
"mnk",
"mnl",
"mnm",
"mnn",
"mno",
"mnp",
"mnq",
"mnr",
"mns",
"mnt",
"mnu",
"mnv",
"mnw",
"mnx",
"mny",
"mnz",
"moa",
"moc",
"mod",
"moe",
"mof",
"mog",
"moh",
"moi",
"moj",
"mok",
"mom",
"moo",
"mop",
"moq",
"mor",
"mos",
"mot",
"mou",
"mov",
"mow",
"mox",
"moy",
"moz",
"mpa",
"mpb",
"mpc",
"mpd",
"mpe",
"mpg",
"mph",
"mpi",
"mpj",
"mpk",
"mpl",
"mpm",
"mpn",
"mpo",
"mpp",
"mpq",
"mpr",
"mps",
"mpt",
"mpu",
"mpv",
"mpw",
"mpx",
"mpy",
"mpz",
"mqa",
"mqb",
"mqc",
"mqe",
"mqf",
"mqg",
"mqh",
"mqi",
"mqj",
"mqk",
"mql",
"mqm",
"mqn",
"mqo",
"mqp",
"mqq",
"mqr",
"mqs",
"mqt",
"mqu",
"mqv",
"mqw",
"mqx",
"mqy",
"mqz",
"mra",
"mrb",
"mrc",
"mrd",
"mre",
"mrf",
"mrg",
"mrh",
"mrj",
"mrk",
"mrl",
"mrm",
"mrn",
"mro",
"mrp",
"mrq",
"mrr",
"mrs",
"mrt",
"mru",
"mrv",
"mrw",
"mrx",
"mry",
"mrz",
"msb",
"msc",
"msd",
"mse",
"msf",
"msg",
"msh",
"msi",
"msj",
"msk",
"msl",
"msm",
"msn",
"mso",
"msp",
"msq",
"msr",
"mss",
"mst",
"msu",
"msv",
"msw",
"msx",
"msy",
"msz",
"mta",
"mtb",
"mtc",
"mtd",
"mte",
"mtf",
"mtg",
"mth",
"mti",
"mtj",
"mtk",
"mtl",
"mtm",
"mtn",
"mto",
"mtp",
"mtq",
"mtr",
"mts",
"mtt",
"mtu",
"mtv",
"mtw",
"mtx",
"mty",
"mua",
"mub",
"muc",
"mud",
"mue",
"mug",
"muh",
"mui",
"muj",
"muk",
"mul",
"mum",
"mun",
"muo",
"mup",
"muq",
"mur",
"mus",
"mut",
"muu",
"muv",
"mux",
"muy",
"muz",
"mva",
"mvb",
"mvd",
"mve",
"mvf",
"mvg",
"mvh",
"mvi",
"mvk",
"mvl",
"mvm",
"mvn",
"mvo",
"mvp",
"mvq",
"mvr",
"mvs",
"mvt",
"mvu",
"mvv",
"mvw",
"mvx",
"mvy",
"mvz",
"mwa",
"mwb",
"mwc",
"mwd",
"mwe",
"mwf",
"mwg",
"mwh",
"mwi",
"mwj",
"mwk",
"mwl",
"mwm",
"mwn",
"mwo",
"mwp",
"mwq",
"mwr",
"mws",
"mwt",
"mwu",
"mwv",
"mww",
"mwx",
"mwy",
"mwz",
"mxa",
"mxb",
"mxc",
"mxd",
"mxe",
"mxf",
"mxg",
"mxh",
"mxi",
"mxj",
"mxk",
"mxl",
"mxm",
"mxn",
"mxo",
"mxp",
"mxq",
"mxr",
"mxs",
"mxt",
"mxu",
"mxv",
"mxw",
"mxx",
"mxy",
"mxz",
"myb",
"myc",
"myd",
"mye",
"myf",
"myg",
"myh",
"myi",
"myj",
"myk",
"myl",
"mym",
"myn",
"myo",
"myp",
"myq",
"myr",
"mys",
"myt",
"myu",
"myv",
"myw",
"myx",
"myy",
"myz",
"mza",
"mzb",
"mzc",
"mzd",
"mze",
"mzg",
"mzh",
"mzi",
"mzj",
"mzk",
"mzl",
"mzm",
"mzn",
"mzo",
"mzp",
"mzq",
"mzr",
"mzs",
"mzt",
"mzu",
"mzv",
"mzw",
"mzx",
"mzy",
"mzz",
"naa",
"nab",
"nac",
"nad",
"nae",
"naf",
"nag",
"nah",
"nai",
"naj",
"nak",
"nal",
"nam",
"nan",
"nao",
"nap",
"naq",
"nar",
"nas",
"nat",
"naw",
"nax",
"nay",
"naz",
"nba",
"nbb",
"nbc",
"nbd",
"nbe",
"nbf",
"nbg",
"nbh",
"nbi",
"nbj",
"nbk",
"nbm",
"nbn",
"nbo",
"nbp",
"nbq",
"nbr",
"nbs",
"nbt",
"nbu",
"nbv",
"nbw",
"nbx",
"nby",
"nca",
"ncb",
"ncc",
"ncd",
"nce",
"ncf",
"ncg",
"nch",
"nci",
"ncj",
"nck",
"ncl",
"ncm",
"ncn",
"nco",
"ncp",
"ncq",
"ncr",
"ncs",
"nct",
"ncu",
"ncx",
"ncz",
"nda",
"ndb",
"ndc",
"ndd",
"ndf",
"ndg",
"ndh",
"ndi",
"ndj",
"ndk",
"ndl",
"ndm",
"ndn",
"ndp",
"ndq",
"ndr",
"nds",
"ndt",
"ndu",
"ndv",
"ndw",
"ndx",
"ndy",
"ndz",
"nea",
"neb",
"nec",
"ned",
"nee",
"nef",
"neg",
"neh",
"nei",
"nej",
"nek",
"nem",
"nen",
"neo",
"neq",
"ner",
"nes",
"net",
"neu",
"nev",
"new",
"nex",
"ney",
"nez",
"nfa",
"nfd",
"nfl",
"nfr",
"nfu",
"nga",
"ngb",
"ngc",
"ngd",
"nge",
"ngf",
"ngg",
"ngh",
"ngi",
"ngj",
"ngk",
"ngl",
"ngm",
"ngn",
"ngo",
"ngp",
"ngq",
"ngr",
"ngs",
"ngt",
"ngu",
"ngv",
"ngw",
"ngx",
"ngy",
"ngz",
"nha",
"nhb",
"nhc",
"nhd",
"nhe",
"nhf",
"nhg",
"nhh",
"nhi",
"nhk",
"nhm",
"nhn",
"nho",
"nhp",
"nhq",
"nhr",
"nht",
"nhu",
"nhv",
"nhw",
"nhx",
"nhy",
"nhz",
"nia",
"nib",
"nic",
"nid",
"nie",
"nif",
"nig",
"nih",
"nii",
"nij",
"nik",
"nil",
"nim",
"nin",
"nio",
"niq",
"nir",
"nis",
"nit",
"niu",
"niv",
"niw",
"nix",
"niy",
"niz",
"nja",
"njb",
"njd",
"njh",
"nji",
"njj",
"njl",
"njm",
"njn",
"njo",
"njr",
"njs",
"njt",
"nju",
"njx",
"njy",
"njz",
"nka",
"nkb",
"nkc",
"nkd",
"nke",
"nkf",
"nkg",
"nkh",
"nki",
"nkj",
"nkk",
"nkm",
"nkn",
"nko",
"nkp",
"nkq",
"nkr",
"nks",
"nkt",
"nku",
"nkv",
"nkw",
"nkx",
"nkz",
"nla",
"nlc",
"nle",
"nlg",
"nli",
"nlj",
"nlk",
"nll",
"nln",
"nlo",
"nlq",
"nlr",
"nlu",
"nlv",
"nlw",
"nlx",
"nly",
"nlz",
"nma",
"nmb",
"nmc",
"nmd",
"nme",
"nmf",
"nmg",
"nmh",
"nmi",
"nmj",
"nmk",
"nml",
"nmm",
"nmn",
"nmo",
"nmp",
"nmq",
"nmr",
"nms",
"nmt",
"nmu",
"nmv",
"nmw",
"nmx",
"nmy",
"nmz",
"nna",
"nnb",
"nnc",
"nnd",
"nne",
"nnf",
"nng",
"nnh",
"nni",
"nnj",
"nnk",
"nnl",
"nnm",
"nnn",
"nnp",
"nnq",
"nnr",
"nns",
"nnt",
"nnu",
"nnv",
"nnw",
"nnx",
"nny",
"nnz",
"noa",
"noc",
"nod",
"noe",
"nof",
"nog",
"noh",
"noi",
"noj",
"nok",
"nol",
"nom",
"non",
"noo",
"nop",
"noq",
"nos",
"not",
"nou",
"nov",
"now",
"noy",
"noz",
"npa",
"npb",
"npg",
"nph",
"npi",
"npl",
"npn",
"npo",
"nps",
"npu",
"npx",
"npy",
"nqg",
"nqk",
"nql",
"nqm",
"nqn",
"nqo",
"nqq",
"nqy",
"nra",
"nrb",
"nrc",
"nre",
"nrf",
"nrg",
"nri",
"nrk",
"nrl",
"nrm",
"nrn",
"nrp",
"nrr",
"nrt",
"nru",
"nrx",
"nrz",
"nsa",
"nsc",
"nsd",
"nse",
"nsf",
"nsg",
"nsh",
"nsi",
"nsk",
"nsl",
"nsm",
"nsn",
"nso",
"nsp",
"nsq",
"nsr",
"nss",
"nst",
"nsu",
"nsv",
"nsw",
"nsx",
"nsy",
"nsz",
"ntd",
"nte",
"ntg",
"nti",
"ntj",
"ntk",
"ntm",
"nto",
"ntp",
"ntr",
"nts",
"ntu",
"ntw",
"ntx",
"nty",
"ntz",
"nua",
"nub",
"nuc",
"nud",
"nue",
"nuf",
"nug",
"nuh",
"nui",
"nuj",
"nuk",
"nul",
"num",
"nun",
"nuo",
"nup",
"nuq",
"nur",
"nus",
"nut",
"nuu",
"nuv",
"nuw",
"nux",
"nuy",
"nuz",
"nvh",
"nvm",
"nvo",
"nwa",
"nwb",
"nwc",
"nwe",
"nwg",
"nwi",
"nwm",
"nwo",
"nwr",
"nwx",
"nwy",
"nxa",
"nxd",
"nxe",
"nxg",
"nxi",
"nxk",
"nxl",
"nxm",
"nxn",
"nxo",
"nxq",
"nxr",
"nxu",
"nxx",
"nyb",
"nyc",
"nyd",
"nye",
"nyf",
"nyg",
"nyh",
"nyi",
"nyj",
"nyk",
"nyl",
"nym",
"nyn",
"nyo",
"nyp",
"nyq",
"nyr",
"nys",
"nyt",
"nyu",
"nyv",
"nyw",
"nyx",
"nyy",
"nza",
"nzb",
"nzi",
"nzk",
"nzm",
"nzs",
"nzu",
"nzy",
"nzz",
"oaa",
"oac",
"oar",
"oav",
"obi",
"obk",
"obl",
"obm",
"obo",
"obr",
"obt",
"obu",
"oca",
"och",
"oco",
"ocu",
"oda",
"odk",
"odt",
"odu",
"ofo",
"ofs",
"ofu",
"ogb",
"ogc",
"oge",
"ogg",
"ogo",
"ogu",
"oht",
"ohu",
"oia",
"oin",
"ojb",
"ojc",
"ojg",
"ojp",
"ojs",
"ojv",
"ojw",
"oka",
"okb",
"okd",
"oke",
"okg",
"okh",
"oki",
"okj",
"okk",
"okl",
"okm",
"okn",
"oko",
"okr",
"oks",
"oku",
"okv",
"okx",
"ola",
"old",
"ole",
"olk",
"olm",
"olo",
"olr",
"olt",
"olu",
"oma",
"omb",
"omc",
"ome",
"omg",
"omi",
"omk",
"oml",
"omn",
"omo",
"omp",
"omq",
"omr",
"omt",
"omu",
"omv",
"omw",
"omx",
"ona",
"onb",
"one",
"ong",
"oni",
"onj",
"onk",
"onn",
"ono",
"onp",
"onr",
"ons",
"ont",
"onu",
"onw",
"onx",
"ood",
"oog",
"oon",
"oor",
"oos",
"opa",
"opk",
"opm",
"opo",
"opt",
"opy",
"ora",
"orc",
"ore",
"org",
"orh",
"orn",
"oro",
"orr",
"ors",
"ort",
"oru",
"orv",
"orw",
"orx",
"ory",
"orz",
"osa",
"osc",
"osi",
"oso",
"osp",
"ost",
"osu",
"osx",
"ota",
"otb",
"otd",
"ote",
"oti",
"otk",
"otl",
"otm",
"otn",
"oto",
"otq",
"otr",
"ots",
"ott",
"otu",
"otw",
"otx",
"oty",
"otz",
"oua",
"oub",
"oue",
"oui",
"oum",
"oun",
"ovd",
"owi",
"owl",
"oyb",
"oyd",
"oym",
"oyy",
"ozm",
"paa",
"pab",
"pac",
"pad",
"pae",
"paf",
"pag",
"pah",
"pai",
"pak",
"pal",
"pam",
"pao",
"pap",
"paq",
"par",
"pas",
"pat",
"pau",
"pav",
"paw",
"pax",
"pay",
"paz",
"pbb",
"pbc",
"pbe",
"pbf",
"pbg",
"pbh",
"pbi",
"pbl",
"pbn",
"pbo",
"pbp",
"pbr",
"pbs",
"pbt",
"pbu",
"pbv",
"pby",
"pbz",
"pca",
"pcb",
"pcc",
"pcd",
"pce",
"pcf",
"pcg",
"pch",
"pci",
"pcj",
"pck",
"pcl",
"pcm",
"pcn",
"pcp",
"pcr",
"pcw",
"pda",
"pdc",
"pdi",
"pdn",
"pdo",
"pdt",
"pdu",
"pea",
"peb",
"ped",
"pee",
"pef",
"peg",
"peh",
"pei",
"pej",
"pek",
"pel",
"pem",
"peo",
"pep",
"peq",
"pes",
"pev",
"pex",
"pey",
"pez",
"pfa",
"pfe",
"pfl",
"pga",
"pgd",
"pgg",
"pgi",
"pgk",
"pgl",
"pgn",
"pgs",
"pgu",
"pgy",
"pgz",
"pha",
"phd",
"phg",
"phh",
"phi",
"phk",
"phl",
"phm",
"phn",
"pho",
"phq",
"phr",
"pht",
"phu",
"phv",
"phw",
"pia",
"pib",
"pic",
"pid",
"pie",
"pif",
"pig",
"pih",
"pii",
"pij",
"pil",
"pim",
"pin",
"pio",
"pip",
"pir",
"pis",
"pit",
"piu",
"piv",
"piw",
"pix",
"piy",
"piz",
"pjt",
"pka",
"pkb",
"pkc",
"pkg",
"pkh",
"pkn",
"pko",
"pkp",
"pkr",
"pks",
"pkt",
"pku",
"pla",
"plb",
"plc",
"pld",
"ple",
"plf",
"plg",
"plh",
"plj",
"plk",
"pll",
"pln",
"plo",
"plp",
"plq",
"plr",
"pls",
"plt",
"plu",
"plv",
"plw",
"ply",
"plz",
"pma",
"pmb",
"pmc",
"pmd",
"pme",
"pmf",
"pmh",
"pmi",
"pmj",
"pmk",
"pml",
"pmm",
"pmn",
"pmo",
"pmq",
"pmr",
"pms",
"pmt",
"pmu",
"pmw",
"pmx",
"pmy",
"pmz",
"pna",
"pnb",
"pnc",
"pne",
"png",
"pnh",
"pni",
"pnj",
"pnk",
"pnl",
"pnm",
"pnn",
"pno",
"pnp",
"pnq",
"pnr",
"pns",
"pnt",
"pnu",
"pnv",
"pnw",
"pnx",
"pny",
"pnz",
"poc",
"pod",
"poe",
"pof",
"pog",
"poh",
"poi",
"pok",
"pom",
"pon",
"poo",
"pop",
"poq",
"pos",
"pot",
"pov",
"pow",
"pox",
"poy",
"poz",
"ppa",
"ppe",
"ppi",
"ppk",
"ppl",
"ppm",
"ppn",
"ppo",
"ppp",
"ppq",
"ppr",
"pps",
"ppt",
"ppu",
"pqa",
"pqe",
"pqm",
"pqw",
"pra",
"prb",
"prc",
"prd",
"pre",
"prf",
"prg",
"prh",
"pri",
"prk",
"prl",
"prm",
"prn",
"pro",
"prp",
"prq",
"prr",
"prs",
"prt",
"pru",
"prw",
"prx",
"pry",
"prz",
"psa",
"psc",
"psd",
"pse",
"psg",
"psh",
"psi",
"psl",
"psm",
"psn",
"pso",
"psp",
"psq",
"psr",
"pss",
"pst",
"psu",
"psw",
"psy",
"pta",
"pth",
"pti",
"ptn",
"pto",
"ptp",
"ptq",
"ptr",
"ptt",
"ptu",
"ptv",
"ptw",
"pty",
"pua",
"pub",
"puc",
"pud",
"pue",
"puf",
"pug",
"pui",
"puj",
"puk",
"pum",
"puo",
"pup",
"puq",
"pur",
"put",
"puu",
"puw",
"pux",
"puy",
"puz",
"pwa",
"pwb",
"pwg",
"pwi",
"pwm",
"pwn",
"pwo",
"pwr",
"pww",
"pxm",
"pye",
"pym",
"pyn",
"pys",
"pyu",
"pyx",
"pyy",
"pzn",
"qaa..qtz",
"qua",
"qub",
"quc",
"qud",
"quf",
"qug",
"quh",
"qui",
"quk",
"qul",
"qum",
"qun",
"qup",
"quq",
"qur",
"qus",
"quv",
"quw",
"qux",
"quy",
"quz",
"qva",
"qvc",
"qve",
"qvh",
"qvi",
"qvj",
"qvl",
"qvm",
"qvn",
"qvo",
"qvp",
"qvs",
"qvw",
"qvy",
"qvz",
"qwa",
"qwc",
"qwe",
"qwh",
"qwm",
"qws",
"qwt",
"qxa",
"qxc",
"qxh",
"qxl",
"qxn",
"qxo",
"qxp",
"qxq",
"qxr",
"qxs",
"qxt",
"qxu",
"qxw",
"qya",
"qyp",
"raa",
"rab",
"rac",
"rad",
"raf",
"rag",
"rah",
"rai",
"raj",
"rak",
"ral",
"ram",
"ran",
"rao",
"rap",
"raq",
"rar",
"ras",
"rat",
"rau",
"rav",
"raw",
"rax",
"ray",
"raz",
"rbb",
"rbk",
"rbl",
"rbp",
"rcf",
"rdb",
"rea",
"reb",
"ree",
"reg",
"rei",
"rej",
"rel",
"rem",
"ren",
"rer",
"res",
"ret",
"rey",
"rga",
"rge",
"rgk",
"rgn",
"rgr",
"rgs",
"rgu",
"rhg",
"rhp",
"ria",
"rie",
"rif",
"ril",
"rim",
"rin",
"rir",
"rit",
"riu",
"rjg",
"rji",
"rjs",
"rka",
"rkb",
"rkh",
"rki",
"rkm",
"rkt",
"rkw",
"rma",
"rmb",
"rmc",
"rmd",
"rme",
"rmf",
"rmg",
"rmh",
"rmi",
"rmk",
"rml",
"rmm",
"rmn",
"rmo",
"rmp",
"rmq",
"rmr",
"rms",
"rmt",
"rmu",
"rmv",
"rmw",
"rmx",
"rmy",
"rmz",
"rna",
"rnd",
"rng",
"rnl",
"rnn",
"rnp",
"rnr",
"rnw",
"roa",
"rob",
"roc",
"rod",
"roe",
"rof",
"rog",
"rol",
"rom",
"roo",
"rop",
"ror",
"rou",
"row",
"rpn",
"rpt",
"rri",
"rro",
"rrt",
"rsb",
"rsi",
"rsl",
"rsm",
"rtc",
"rth",
"rtm",
"rts",
"rtw",
"rub",
"ruc",
"rue",
"ruf",
"rug",
"ruh",
"rui",
"ruk",
"ruo",
"rup",
"ruq",
"rut",
"ruu",
"ruy",
"ruz",
"rwa",
"rwk",
"rwm",
"rwo",
"rwr",
"rxd",
"rxw",
"ryn",
"rys",
"ryu",
"rzh",
"saa",
"sab",
"sac",
"sad",
"sae",
"saf",
"sah",
"sai",
"saj",
"sak",
"sal",
"sam",
"sao",
"sap",
"saq",
"sar",
"sas",
"sat",
"sau",
"sav",
"saw",
"sax",
"say",
"saz",
"sba",
"sbb",
"sbc",
"sbd",
"sbe",
"sbf",
"sbg",
"sbh",
"sbi",
"sbj",
"sbk",
"sbl",
"sbm",
"sbn",
"sbo",
"sbp",
"sbq",
"sbr",
"sbs",
"sbt",
"sbu",
"sbv",
"sbw",
"sbx",
"sby",
"sbz",
"sca",
"scb",
"sce",
"scf",
"scg",
"sch",
"sci",
"sck",
"scl",
"scn",
"sco",
"scp",
"scq",
"scs",
"sct",
"scu",
"scv",
"scw",
"scx",
"sda",
"sdb",
"sdc",
"sde",
"sdf",
"sdg",
"sdh",
"sdj",
"sdk",
"sdl",
"sdm",
"sdn",
"sdo",
"sdp",
"sdr",
"sds",
"sdt",
"sdu",
"sdv",
"sdx",
"sdz",
"sea",
"seb",
"sec",
"sed",
"see",
"sef",
"seg",
"seh",
"sei",
"sej",
"sek",
"sel",
"sem",
"sen",
"seo",
"sep",
"seq",
"ser",
"ses",
"set",
"seu",
"sev",
"sew",
"sey",
"sez",
"sfb",
"sfe",
"sfm",
"sfs",
"sfw",
"sga",
"sgb",
"sgc",
"sgd",
"sge",
"sgg",
"sgh",
"sgi",
"sgj",
"sgk",
"sgl",
"sgm",
"sgn",
"sgo",
"sgp",
"sgr",
"sgs",
"sgt",
"sgu",
"sgw",
"sgx",
"sgy",
"sgz",
"sha",
"shb",
"shc",
"shd",
"she",
"shg",
"shh",
"shi",
"shj",
"shk",
"shl",
"shm",
"shn",
"sho",
"shp",
"shq",
"shr",
"shs",
"sht",
"shu",
"shv",
"shw",
"shx",
"shy",
"shz",
"sia",
"sib",
"sid",
"sie",
"sif",
"sig",
"sih",
"sii",
"sij",
"sik",
"sil",
"sim",
"sio",
"sip",
"siq",
"sir",
"sis",
"sit",
"siu",
"siv",
"siw",
"six",
"siy",
"siz",
"sja",
"sjb",
"sjd",
"sje",
"sjg",
"sjk",
"sjl",
"sjm",
"sjn",
"sjo",
"sjp",
"sjr",
"sjs",
"sjt",
"sju",
"sjw",
"ska",
"skb",
"skc",
"skd",
"ske",
"skf",
"skg",
"skh",
"ski",
"skj",
"skk",
"skm",
"skn",
"sko",
"skp",
"skq",
"skr",
"sks",
"skt",
"sku",
"skv",
"skw",
"skx",
"sky",
"skz",
"sla",
"slc",
"sld",
"sle",
"slf",
"slg",
"slh",
"sli",
"slj",
"sll",
"slm",
"sln",
"slp",
"slq",
"slr",
"sls",
"slt",
"slu",
"slw",
"slx",
"sly",
"slz",
"sma",
"smb",
"smc",
"smd",
"smf",
"smg",
"smh",
"smi",
"smj",
"smk",
"sml",
"smm",
"smn",
"smp",
"smq",
"smr",
"sms",
"smt",
"smu",
"smv",
"smw",
"smx",
"smy",
"smz",
"snb",
"snc",
"sne",
"snf",
"sng",
"snh",
"sni",
"snj",
"snk",
"snl",
"snm",
"snn",
"sno",
"snp",
"snq",
"snr",
"sns",
"snu",
"snv",
"snw",
"snx",
"sny",
"snz",
"soa",
"sob",
"soc",
"sod",
"soe",
"sog",
"soh",
"soi",
"soj",
"sok",
"sol",
"son",
"soo",
"sop",
"soq",
"sor",
"sos",
"sou",
"sov",
"sow",
"sox",
"soy",
"soz",
"spb",
"spc",
"spd",
"spe",
"spg",
"spi",
"spk",
"spl",
"spm",
"spn",
"spo",
"spp",
"spq",
"spr",
"sps",
"spt",
"spu",
"spv",
"spx",
"spy",
"sqa",
"sqh",
"sqj",
"sqk",
"sqm",
"sqn",
"sqo",
"sqq",
"sqr",
"sqs",
"sqt",
"squ",
"sra",
"srb",
"src",
"sre",
"srf",
"srg",
"srh",
"sri",
"srk",
"srl",
"srm",
"srn",
"sro",
"srq",
"srr",
"srs",
"srt",
"sru",
"srv",
"srw",
"srx",
"sry",
"srz",
"ssa",
"ssb",
"ssc",
"ssd",
"sse",
"ssf",
"ssg",
"ssh",
"ssi",
"ssj",
"ssk",
"ssl",
"ssm",
"ssn",
"sso",
"ssp",
"ssq",
"ssr",
"sss",
"sst",
"ssu",
"ssv",
"ssx",
"ssy",
"ssz",
"sta",
"stb",
"std",
"ste",
"stf",
"stg",
"sth",
"sti",
"stj",
"stk",
"stl",
"stm",
"stn",
"sto",
"stp",
"stq",
"str",
"sts",
"stt",
"stu",
"stv",
"stw",
"sty",
"sua",
"sub",
"suc",
"sue",
"sug",
"sui",
"suj",
"suk",
"sul",
"sum",
"suq",
"sur",
"sus",
"sut",
"suv",
"suw",
"sux",
"suy",
"suz",
"sva",
"svb",
"svc",
"sve",
"svk",
"svm",
"svr",
"svs",
"svx",
"swb",
"swc",
"swf",
"swg",
"swh",
"swi",
"swj",
"swk",
"swl",
"swm",
"swn",
"swo",
"swp",
"swq",
"swr",
"sws",
"swt",
"swu",
"swv",
"sww",
"swx",
"swy",
"sxb",
"sxc",
"sxe",
"sxg",
"sxk",
"sxl",
"sxm",
"sxn",
"sxo",
"sxr",
"sxs",
"sxu",
"sxw",
"sya",
"syb",
"syc",
"syd",
"syi",
"syk",
"syl",
"sym",
"syn",
"syo",
"syr",
"sys",
"syw",
"syx",
"syy",
"sza",
"szb",
"szc",
"szd",
"sze",
"szg",
"szl",
"szn",
"szp",
"szs",
"szv",
"szw",
"taa",
"tab",
"tac",
"tad",
"tae",
"taf",
"tag",
"tai",
"taj",
"tak",
"tal",
"tan",
"tao",
"tap",
"taq",
"tar",
"tas",
"tau",
"tav",
"taw",
"tax",
"tay",
"taz",
"tba",
"tbb",
"tbc",
"tbd",
"tbe",
"tbf",
"tbg",
"tbh",
"tbi",
"tbj",
"tbk",
"tbl",
"tbm",
"tbn",
"tbo",
"tbp",
"tbq",
"tbr",
"tbs",
"tbt",
"tbu",
"tbv",
"tbw",
"tbx",
"tby",
"tbz",
"tca",
"tcb",
"tcc",
"tcd",
"tce",
"tcf",
"tcg",
"tch",
"tci",
"tck",
"tcl",
"tcm",
"tcn",
"tco",
"tcp",
"tcq",
"tcs",
"tct",
"tcu",
"tcw",
"tcx",
"tcy",
"tcz",
"tda",
"tdb",
"tdc",
"tdd",
"tde",
"tdf",
"tdg",
"tdh",
"tdi",
"tdj",
"tdk",
"tdl",
"tdm",
"tdn",
"tdo",
"tdq",
"tdr",
"tds",
"tdt",
"tdu",
"tdv",
"tdx",
"tdy",
"tea",
"teb",
"tec",
"ted",
"tee",
"tef",
"teg",
"teh",
"tei",
"tek",
"tem",
"ten",
"teo",
"tep",
"teq",
"ter",
"tes",
"tet",
"teu",
"tev",
"tew",
"tex",
"tey",
"tfi",
"tfn",
"tfo",
"tfr",
"tft",
"tga",
"tgb",
"tgc",
"tgd",
"tge",
"tgf",
"tgg",
"tgh",
"tgi",
"tgj",
"tgn",
"tgo",
"tgp",
"tgq",
"tgr",
"tgs",
"tgt",
"tgu",
"tgv",
"tgw",
"tgx",
"tgy",
"tgz",
"thc",
"thd",
"the",
"thf",
"thh",
"thi",
"thk",
"thl",
"thm",
"thn",
"thp",
"thq",
"thr",
"ths",
"tht",
"thu",
"thv",
"thw",
"thx",
"thy",
"thz",
"tia",
"tic",
"tid",
"tie",
"tif",
"tig",
"tih",
"tii",
"tij",
"tik",
"til",
"tim",
"tin",
"tio",
"tip",
"tiq",
"tis",
"tit",
"tiu",
"tiv",
"tiw",
"tix",
"tiy",
"tiz",
"tja",
"tjg",
"tji",
"tjl",
"tjm",
"tjn",
"tjo",
"tjs",
"tju",
"tjw",
"tka",
"tkb",
"tkd",
"tke",
"tkf",
"tkg",
"tkk",
"tkl",
"tkm",
"tkn",
"tkp",
"tkq",
"tkr",
"tks",
"tkt",
"tku",
"tkv",
"tkw",
"tkx",
"tkz",
"tla",
"tlb",
"tlc",
"tld",
"tlf",
"tlg",
"tlh",
"tli",
"tlj",
"tlk",
"tll",
"tlm",
"tln",
"tlo",
"tlp",
"tlq",
"tlr",
"tls",
"tlt",
"tlu",
"tlv",
"tlw",
"tlx",
"tly",
"tma",
"tmb",
"tmc",
"tmd",
"tme",
"tmf",
"tmg",
"tmh",
"tmi",
"tmj",
"tmk",
"tml",
"tmm",
"tmn",
"tmo",
"tmp",
"tmq",
"tmr",
"tms",
"tmt",
"tmu",
"tmv",
"tmw",
"tmy",
"tmz",
"tna",
"tnb",
"tnc",
"tnd",
"tne",
"tnf",
"tng",
"tnh",
"tni",
"tnk",
"tnl",
"tnm",
"tnn",
"tno",
"tnp",
"tnq",
"tnr",
"tns",
"tnt",
"tnu",
"tnv",
"tnw",
"tnx",
"tny",
"tnz",
"tob",
"toc",
"tod",
"toe",
"tof",
"tog",
"toh",
"toi",
"toj",
"tol",
"tom",
"too",
"top",
"toq",
"tor",
"tos",
"tou",
"tov",
"tow",
"tox",
"toy",
"toz",
"tpa",
"tpc",
"tpe",
"tpf",
"tpg",
"tpi",
"tpj",
"tpk",
"tpl",
"tpm",
"tpn",
"tpo",
"tpp",
"tpq",
"tpr",
"tpt",
"tpu",
"tpv",
"tpw",
"tpx",
"tpy",
"tpz",
"tqb",
"tql",
"tqm",
"tqn",
"tqo",
"tqp",
"tqq",
"tqr",
"tqt",
"tqu",
"tqw",
"tra",
"trb",
"trc",
"trd",
"tre",
"trf",
"trg",
"trh",
"tri",
"trj",
"trk",
"trl",
"trm",
"trn",
"tro",
"trp",
"trq",
"trr",
"trs",
"trt",
"tru",
"trv",
"trw",
"trx",
"try",
"trz",
"tsa",
"tsb",
"tsc",
"tsd",
"tse",
"tsf",
"tsg",
"tsh",
"tsi",
"tsj",
"tsk",
"tsl",
"tsm",
"tsp",
"tsq",
"tsr",
"tss",
"tst",
"tsu",
"tsv",
"tsw",
"tsx",
"tsy",
"tsz",
"tta",
"ttb",
"ttc",
"ttd",
"tte",
"ttf",
"ttg",
"tth",
"tti",
"ttj",
"ttk",
"ttl",
"ttm",
"ttn",
"tto",
"ttp",
"ttq",
"ttr",
"tts",
"ttt",
"ttu",
"ttv",
"ttw",
"tty",
"ttz",
"tua",
"tub",
"tuc",
"tud",
"tue",
"tuf",
"tug",
"tuh",
"tui",
"tuj",
"tul",
"tum",
"tun",
"tuo",
"tup",
"tuq",
"tus",
"tut",
"tuu",
"tuv",
"tuw",
"tux",
"tuy",
"tuz",
"tva",
"tvd",
"tve",
"tvk",
"tvl",
"tvm",
"tvn",
"tvo",
"tvs",
"tvt",
"tvu",
"tvw",
"tvy",
"twa",
"twb",
"twc",
"twd",
"twe",
"twf",
"twg",
"twh",
"twl",
"twm",
"twn",
"two",
"twp",
"twq",
"twr",
"twt",
"twu",
"tww",
"twx",
"twy",
"txa",
"txb",
"txc",
"txe",
"txg",
"txh",
"txi",
"txj",
"txm",
"txn",
"txo",
"txq",
"txr",
"txs",
"txt",
"txu",
"txx",
"txy",
"tya",
"tye",
"tyh",
"tyi",
"tyj",
"tyl",
"tyn",
"typ",
"tyr",
"tys",
"tyt",
"tyu",
"tyv",
"tyx",
"tyz",
"tza",
"tzh",
"tzj",
"tzl",
"tzm",
"tzn",
"tzo",
"tzx",
"uam",
"uan",
"uar",
"uba",
"ubi",
"ubl",
"ubr",
"ubu",
"uby",
"uda",
"ude",
"udg",
"udi",
"udj",
"udl",
"udm",
"udu",
"ues",
"ufi",
"uga",
"ugb",
"uge",
"ugn",
"ugo",
"ugy",
"uha",
"uhn",
"uis",
"uiv",
"uji",
"uka",
"ukg",
"ukh",
"ukk",
"ukl",
"ukp",
"ukq",
"uks",
"uku",
"ukw",
"uky",
"ula",
"ulb",
"ulc",
"ule",
"ulf",
"uli",
"ulk",
"ull",
"ulm",
"uln",
"ulu",
"ulw",
"uma",
"umb",
"umc",
"umd",
"umg",
"umi",
"umm",
"umn",
"umo",
"ump",
"umr",
"ums",
"umu",
"una",
"und",
"une",
"ung",
"unk",
"unm",
"unn",
"unp",
"unr",
"unu",
"unx",
"unz",
"uok",
"upi",
"upv",
"ura",
"urb",
"urc",
"ure",
"urf",
"urg",
"urh",
"uri",
"urj",
"urk",
"url",
"urm",
"urn",
"uro",
"urp",
"urr",
"urt",
"uru",
"urv",
"urw",
"urx",
"ury",
"urz",
"usa",
"ush",
"usi",
"usk",
"usp",
"usu",
"uta",
"ute",
"utp",
"utr",
"utu",
"uum",
"uun",
"uur",
"uuu",
"uve",
"uvh",
"uvl",
"uwa",
"uya",
"uzn",
"uzs",
"vaa",
"vae",
"vaf",
"vag",
"vah",
"vai",
"vaj",
"val",
"vam",
"van",
"vao",
"vap",
"var",
"vas",
"vau",
"vav",
"vay",
"vbb",
"vbk",
"vec",
"ved",
"vel",
"vem",
"veo",
"vep",
"ver",
"vgr",
"vgt",
"vic",
"vid",
"vif",
"vig",
"vil",
"vin",
"vis",
"vit",
"viv",
"vka",
"vki",
"vkj",
"vkk",
"vkl",
"vkm",
"vko",
"vkp",
"vkt",
"vku",
"vlp",
"vls",
"vma",
"vmb",
"vmc",
"vmd",
"vme",
"vmf",
"vmg",
"vmh",
"vmi",
"vmj",
"vmk",
"vml",
"vmm",
"vmp",
"vmq",
"vmr",
"vms",
"vmu",
"vmv",
"vmw",
"vmx",
"vmy",
"vmz",
"vnk",
"vnm",
"vnp",
"vor",
"vot",
"vra",
"vro",
"vrs",
"vrt",
"vsi",
"vsl",
"vsv",
"vto",
"vum",
"vun",
"vut",
"vwa",
"waa",
"wab",
"wac",
"wad",
"wae",
"waf",
"wag",
"wah",
"wai",
"waj",
"wak",
"wal",
"wam",
"wan",
"wao",
"wap",
"waq",
"war",
"was",
"wat",
"wau",
"wav",
"waw",
"wax",
"way",
"waz",
"wba",
"wbb",
"wbe",
"wbf",
"wbh",
"wbi",
"wbj",
"wbk",
"wbl",
"wbm",
"wbp",
"wbq",
"wbr",
"wbs",
"wbt",
"wbv",
"wbw",
"wca",
"wci",
"wdd",
"wdg",
"wdj",
"wdk",
"wdu",
"wdy",
"wea",
"wec",
"wed",
"weg",
"weh",
"wei",
"wem",
"wen",
"weo",
"wep",
"wer",
"wes",
"wet",
"weu",
"wew",
"wfg",
"wga",
"wgb",
"wgg",
"wgi",
"wgo",
"wgu",
"wgw",
"wgy",
"wha",
"whg",
"whk",
"whu",
"wib",
"wic",
"wie",
"wif",
"wig",
"wih",
"wii",
"wij",
"wik",
"wil",
"wim",
"win",
"wir",
"wit",
"wiu",
"wiv",
"wiw",
"wiy",
"wja",
"wji",
"wka",
"wkb",
"wkd",
"wkl",
"wku",
"wkw",
"wky",
"wla",
"wlc",
"wle",
"wlg",
"wli",
"wlk",
"wll",
"wlm",
"wlo",
"wlr",
"wls",
"wlu",
"wlv",
"wlw",
"wlx",
"wly",
"wma",
"wmb",
"wmc",
"wmd",
"wme",
"wmh",
"wmi",
"wmm",
"wmn",
"wmo",
"wms",
"wmt",
"wmw",
"wmx",
"wnb",
"wnc",
"wnd",
"wne",
"wng",
"wni",
"wnk",
"wnm",
"wnn",
"wno",
"wnp",
"wnu",
"wnw",
"wny",
"woa",
"wob",
"woc",
"wod",
"woe",
"wof",
"wog",
"woi",
"wok",
"wom",
"won",
"woo",
"wor",
"wos",
"wow",
"woy",
"wpc",
"wra",
"wrb",
"wrd",
"wrg",
"wrh",
"wri",
"wrk",
"wrl",
"wrm",
"wrn",
"wro",
"wrp",
"wrr",
"wrs",
"wru",
"wrv",
"wrw",
"wrx",
"wry",
"wrz",
"wsa",
"wsg",
"wsi",
"wsk",
"wsr",
"wss",
"wsu",
"wsv",
"wtf",
"wth",
"wti",
"wtk",
"wtm",
"wtw",
"wua",
"wub",
"wud",
"wuh",
"wul",
"wum",
"wun",
"wur",
"wut",
"wuu",
"wuv",
"wux",
"wuy",
"wwa",
"wwb",
"wwo",
"wwr",
"www",
"wxa",
"wxw",
"wya",
"wyb",
"wyi",
"wym",
"wyr",
"wyy",
"xaa",
"xab",
"xac",
"xad",
"xae",
"xag",
"xai",
"xaj",
"xak",
"xal",
"xam",
"xan",
"xao",
"xap",
"xaq",
"xar",
"xas",
"xat",
"xau",
"xav",
"xaw",
"xay",
"xba",
"xbb",
"xbc",
"xbd",
"xbe",
"xbg",
"xbi",
"xbj",
"xbm",
"xbn",
"xbo",
"xbp",
"xbr",
"xbw",
"xbx",
"xby",
"xcb",
"xcc",
"xce",
"xcg",
"xch",
"xcl",
"xcm",
"xcn",
"xco",
"xcr",
"xct",
"xcu",
"xcv",
"xcw",
"xcy",
"xda",
"xdc",
"xdk",
"xdm",
"xdo",
"xdy",
"xeb",
"xed",
"xeg",
"xel",
"xem",
"xep",
"xer",
"xes",
"xet",
"xeu",
"xfa",
"xga",
"xgb",
"xgd",
"xgf",
"xgg",
"xgi",
"xgl",
"xgm",
"xgn",
"xgr",
"xgu",
"xgw",
"xha",
"xhc",
"xhd",
"xhe",
"xhr",
"xht",
"xhu",
"xhv",
"xia",
"xib",
"xii",
"xil",
"xin",
"xip",
"xir",
"xis",
"xiv",
"xiy",
"xjb",
"xjt",
"xka",
"xkb",
"xkc",
"xkd",
"xke",
"xkf",
"xkg",
"xkh",
"xki",
"xkj",
"xkk",
"xkl",
"xkn",
"xko",
"xkp",
"xkq",
"xkr",
"xks",
"xkt",
"xku",
"xkv",
"xkw",
"xkx",
"xky",
"xkz",
"xla",
"xlb",
"xlc",
"xld",
"xle",
"xlg",
"xli",
"xln",
"xlo",
"xlp",
"xls",
"xlu",
"xly",
"xma",
"xmb",
"xmc",
"xmd",
"xme",
"xmf",
"xmg",
"xmh",
"xmj",
"xmk",
"xml",
"xmm",
"xmn",
"xmo",
"xmp",
"xmq",
"xmr",
"xms",
"xmt",
"xmu",
"xmv",
"xmw",
"xmx",
"xmy",
"xmz",
"xna",
"xnb",
"xnd",
"xng",
"xnh",
"xni",
"xnk",
"xnn",
"xno",
"xnr",
"xns",
"xnt",
"xnu",
"xny",
"xnz",
"xoc",
"xod",
"xog",
"xoi",
"xok",
"xom",
"xon",
"xoo",
"xop",
"xor",
"xow",
"xpa",
"xpc",
"xpe",
"xpg",
"xpi",
"xpj",
"xpk",
"xpm",
"xpn",
"xpo",
"xpp",
"xpq",
"xpr",
"xps",
"xpt",
"xpu",
"xpy",
"xqa",
"xqt",
"xra",
"xrb",
"xrd",
"xre",
"xrg",
"xri",
"xrm",
"xrn",
"xrq",
"xrr",
"xrt",
"xru",
"xrw",
"xsa",
"xsb",
"xsc",
"xsd",
"xse",
"xsh",
"xsi",
"xsj",
"xsl",
"xsm",
"xsn",
"xso",
"xsp",
"xsq",
"xsr",
"xss",
"xsu",
"xsv",
"xsy",
"xta",
"xtb",
"xtc",
"xtd",
"xte",
"xtg",
"xth",
"xti",
"xtj",
"xtl",
"xtm",
"xtn",
"xto",
"xtp",
"xtq",
"xtr",
"xts",
"xtt",
"xtu",
"xtv",
"xtw",
"xty",
"xtz",
"xua",
"xub",
"xud",
"xug",
"xuj",
"xul",
"xum",
"xun",
"xuo",
"xup",
"xur",
"xut",
"xuu",
"xve",
"xvi",
"xvn",
"xvo",
"xvs",
"xwa",
"xwc",
"xwd",
"xwe",
"xwg",
"xwj",
"xwk",
"xwl",
"xwo",
"xwr",
"xwt",
"xww",
"xxb",
"xxk",
"xxm",
"xxr",
"xxt",
"xya",
"xyb",
"xyj",
"xyk",
"xyl",
"xyt",
"xyy",
"xzh",
"xzm",
"xzp",
"yaa",
"yab",
"yac",
"yad",
"yae",
"yaf",
"yag",
"yah",
"yai",
"yaj",
"yak",
"yal",
"yam",
"yan",
"yao",
"yap",
"yaq",
"yar",
"yas",
"yat",
"yau",
"yav",
"yaw",
"yax",
"yay",
"yaz",
"yba",
"ybb",
"ybd",
"ybe",
"ybh",
"ybi",
"ybj",
"ybk",
"ybl",
"ybm",
"ybn",
"ybo",
"ybx",
"yby",
"ych",
"ycl",
"ycn",
"ycp",
"yda",
"ydd",
"yde",
"ydg",
"ydk",
"yds",
"yea",
"yec",
"yee",
"yei",
"yej",
"yel",
"yen",
"yer",
"yes",
"yet",
"yeu",
"yev",
"yey",
"yga",
"ygi",
"ygl",
"ygm",
"ygp",
"ygr",
"ygs",
"ygu",
"ygw",
"yha",
"yhd",
"yhl",
"yhs",
"yia",
"yif",
"yig",
"yih",
"yii",
"yij",
"yik",
"yil",
"yim",
"yin",
"yip",
"yiq",
"yir",
"yis",
"yit",
"yiu",
"yiv",
"yix",
"yiy",
"yiz",
"yka",
"ykg",
"yki",
"ykk",
"ykl",
"ykm",
"ykn",
"yko",
"ykr",
"ykt",
"yku",
"yky",
"yla",
"ylb",
"yle",
"ylg",
"yli",
"yll",
"ylm",
"yln",
"ylo",
"ylr",
"ylu",
"yly",
"yma",
"ymb",
"ymc",
"ymd",
"yme",
"ymg",
"ymh",
"ymi",
"ymk",
"yml",
"ymm",
"ymn",
"ymo",
"ymp",
"ymq",
"ymr",
"yms",
"ymt",
"ymx",
"ymz",
"yna",
"ynd",
"yne",
"yng",
"ynh",
"ynk",
"ynl",
"ynn",
"yno",
"ynq",
"yns",
"ynu",
"yob",
"yog",
"yoi",
"yok",
"yol",
"yom",
"yon",
"yos",
"yot",
"yox",
"yoy",
"ypa",
"ypb",
"ypg",
"yph",
"ypk",
"ypm",
"ypn",
"ypo",
"ypp",
"ypz",
"yra",
"yrb",
"yre",
"yri",
"yrk",
"yrl",
"yrm",
"yrn",
"yro",
"yrs",
"yrw",
"yry",
"ysc",
"ysd",
"ysg",
"ysl",
"ysn",
"yso",
"ysp",
"ysr",
"yss",
"ysy",
"yta",
"ytl",
"ytp",
"ytw",
"yty",
"yua",
"yub",
"yuc",
"yud",
"yue",
"yuf",
"yug",
"yui",
"yuj",
"yuk",
"yul",
"yum",
"yun",
"yup",
"yuq",
"yur",
"yut",
"yuu",
"yuw",
"yux",
"yuy",
"yuz",
"yva",
"yvt",
"ywa",
"ywg",
"ywl",
"ywn",
"ywq",
"ywr",
"ywt",
"ywu",
"yww",
"yxa",
"yxg",
"yxl",
"yxm",
"yxu",
"yxy",
"yyr",
"yyu",
"yyz",
"yzg",
"yzk",
"zaa",
"zab",
"zac",
"zad",
"zae",
"zaf",
"zag",
"zah",
"zai",
"zaj",
"zak",
"zal",
"zam",
"zao",
"zap",
"zaq",
"zar",
"zas",
"zat",
"zau",
"zav",
"zaw",
"zax",
"zay",
"zaz",
"zbc",
"zbe",
"zbl",
"zbt",
"zbw",
"zca",
"zch",
"zdj",
"zea",
"zeg",
"zeh",
"zen",
"zga",
"zgb",
"zgh",
"zgm",
"zgn",
"zgr",
"zhb",
"zhd",
"zhi",
"zhn",
"zhw",
"zhx",
"zia",
"zib",
"zik",
"zil",
"zim",
"zin",
"zir",
"ziw",
"ziz",
"zka",
"zkb",
"zkd",
"zkg",
"zkh",
"zkk",
"zkn",
"zko",
"zkp",
"zkr",
"zkt",
"zku",
"zkv",
"zkz",
"zle",
"zlj",
"zlm",
"zln",
"zlq",
"zls",
"zlw",
"zma",
"zmb",
"zmc",
"zmd",
"zme",
"zmf",
"zmg",
"zmh",
"zmi",
"zmj",
"zmk",
"zml",
"zmm",
"zmn",
"zmo",
"zmp",
"zmq",
"zmr",
"zms",
"zmt",
"zmu",
"zmv",
"zmw",
"zmx",
"zmy",
"zmz",
"zna",
"znd",
"zne",
"zng",
"znk",
"zns",
"zoc",
"zoh",
"zom",
"zoo",
"zoq",
"zor",
"zos",
"zpa",
"zpb",
"zpc",
"zpd",
"zpe",
"zpf",
"zpg",
"zph",
"zpi",
"zpj",
"zpk",
"zpl",
"zpm",
"zpn",
"zpo",
"zpp",
"zpq",
"zpr",
"zps",
"zpt",
"zpu",
"zpv",
"zpw",
"zpx",
"zpy",
"zpz",
"zqe",
"zra",
"zrg",
"zrn",
"zro",
"zrp",
"zrs",
"zsa",
"zsk",
"zsl",
"zsm",
"zsr",
"zsu",
"zte",
"ztg",
"ztl",
"ztm",
"ztn",
"ztp",
"ztq",
"zts",
"ztt",
"ztu",
"ztx",
"zty",
"zua",
"zuh",
"zum",
"zun",
"zuy",
"zwa",
"zxx",
"zyb",
"zyg",
"zyj",
"zyn",
"zyp",
"zza",
"zzj"];









axe.utils.validLangs=function(){
'use strict';
return langs;
};

},{}],153:[function(require,module,exports){






SDK.CSSMatchedStyles=class{










constructor(
cssModel,
node,
inlinePayload,
attributesPayload,
matchedPayload,
pseudoPayload,
inheritedPayload,
animationsPayload){
this._cssModel=cssModel;
this._node=node;

this._addedStyles=new Map();

this._matchingSelectors=new Map();
this._keyframes=[];
if(animationsPayload)
this._keyframes=animationsPayload.map(rule=>new SDK.CSSKeyframesRule(cssModel,rule));


this._nodeForStyle=new Map();

this._inheritedStyles=new Set();
this._mainDOMCascade=this._buildMainCascade(inlinePayload,attributesPayload,matchedPayload,inheritedPayload);
this._pseudoDOMCascades=this._buildPseudoCascades(pseudoPayload);


this._styleToDOMCascade=new Map();
for(const domCascade of Array.from(this._pseudoDOMCascades.values()).concat(this._mainDOMCascade)){
for(const style of domCascade.styles())
this._styleToDOMCascade.set(style,domCascade);
}
}








_buildMainCascade(inlinePayload,attributesPayload,matchedPayload,inheritedPayload){

const nodeCascades=[];


const nodeStyles=[];




function addAttributesStyle(){
if(!attributesPayload)
return;
const style=
new SDK.CSSStyleDeclaration(this._cssModel,null,attributesPayload,SDK.CSSStyleDeclaration.Type.Attributes);
this._nodeForStyle.set(style,this._node);
nodeStyles.push(style);
}


if(inlinePayload&&this._node.nodeType()===Node.ELEMENT_NODE){
const style=
new SDK.CSSStyleDeclaration(this._cssModel,null,inlinePayload,SDK.CSSStyleDeclaration.Type.Inline);
this._nodeForStyle.set(style,this._node);
nodeStyles.push(style);
}


let addedAttributesStyle;
for(let i=matchedPayload.length-1;i>=0;--i){
const rule=new SDK.CSSStyleRule(this._cssModel,matchedPayload[i].rule);
if((rule.isInjected()||rule.isUserAgent())&&!addedAttributesStyle){

addedAttributesStyle=true;
addAttributesStyle.call(this);
}
this._nodeForStyle.set(rule.style,this._node);
nodeStyles.push(rule.style);
this._addMatchingSelectors(this._node,rule,matchedPayload[i].matchingSelectors);
}

if(!addedAttributesStyle)
addAttributesStyle.call(this);
nodeCascades.push(new SDK.CSSMatchedStyles.NodeCascade(this,nodeStyles,false));


let parentNode=this._node.parentNode;
for(let i=0;parentNode&&inheritedPayload&&i<inheritedPayload.length;++i){
const inheritedStyles=[];
const entryPayload=inheritedPayload[i];
const inheritedInlineStyle=entryPayload.inlineStyle?
new SDK.CSSStyleDeclaration(
this._cssModel,null,entryPayload.inlineStyle,SDK.CSSStyleDeclaration.Type.Inline):
null;
if(inheritedInlineStyle&&this._containsInherited(inheritedInlineStyle)){
this._nodeForStyle.set(inheritedInlineStyle,parentNode);
inheritedStyles.push(inheritedInlineStyle);
this._inheritedStyles.add(inheritedInlineStyle);
}

const inheritedMatchedCSSRules=entryPayload.matchedCSSRules||[];
for(let j=inheritedMatchedCSSRules.length-1;j>=0;--j){
const inheritedRule=new SDK.CSSStyleRule(this._cssModel,inheritedMatchedCSSRules[j].rule);
this._addMatchingSelectors(parentNode,inheritedRule,inheritedMatchedCSSRules[j].matchingSelectors);
if(!this._containsInherited(inheritedRule.style))
continue;
this._nodeForStyle.set(inheritedRule.style,parentNode);
inheritedStyles.push(inheritedRule.style);
this._inheritedStyles.add(inheritedRule.style);
}
parentNode=parentNode.parentNode;
nodeCascades.push(new SDK.CSSMatchedStyles.NodeCascade(this,inheritedStyles,true));
}

return new SDK.CSSMatchedStyles.DOMInheritanceCascade(nodeCascades);
}





_buildPseudoCascades(pseudoPayload){

const pseudoCascades=new Map();
if(!pseudoPayload)
return pseudoCascades;
for(let i=0;i<pseudoPayload.length;++i){
const entryPayload=pseudoPayload[i];

const pseudoElement=this._node.pseudoElements().get(entryPayload.pseudoType)||null;
const pseudoStyles=[];
const rules=entryPayload.matches||[];
for(let j=rules.length-1;j>=0;--j){
const pseudoRule=new SDK.CSSStyleRule(this._cssModel,rules[j].rule);
pseudoStyles.push(pseudoRule.style);
this._nodeForStyle.set(pseudoRule.style,pseudoElement);
if(pseudoElement)
this._addMatchingSelectors(pseudoElement,pseudoRule,rules[j].matchingSelectors);
}
const nodeCascade=new SDK.CSSMatchedStyles.NodeCascade(this,pseudoStyles,false);
pseudoCascades.set(entryPayload.pseudoType,new SDK.CSSMatchedStyles.DOMInheritanceCascade([nodeCascade]));
}
return pseudoCascades;
}







_addMatchingSelectors(node,rule,matchingSelectorIndices){
for(const matchingSelectorIndex of matchingSelectorIndices){
const selector=rule.selectors[matchingSelectorIndex];
this._setSelectorMatches(node,selector.text,true);
}
}




node(){
return this._node;
}




cssModel(){
return this._cssModel;
}





hasMatchingSelectors(rule){
const matchingSelectors=this.matchingSelectors(rule);
return matchingSelectors.length>0&&this.mediaMatches(rule.style);
}





matchingSelectors(rule){
const node=this.nodeForStyle(rule.style);
if(!node)
return[];
const map=this._matchingSelectors.get(node.id);
if(!map)
return[];
const result=[];
for(let i=0;i<rule.selectors.length;++i){
if(map.get(rule.selectors[i].text))
result.push(i);
}
return result;
}





recomputeMatchingSelectors(rule){
const node=this.nodeForStyle(rule.style);
if(!node)
return Promise.resolve();
const promises=[];
for(const selector of rule.selectors)
promises.push(querySelector.call(this,node,selector.text));
return Promise.all(promises);






async function querySelector(node,selectorText){
const ownerDocument=node.ownerDocument||null;


const map=this._matchingSelectors.get(node.id);
if(map&&map.has(selectorText)||!ownerDocument)
return;

const matchingNodeIds=await this._node.domModel().querySelectorAll(ownerDocument.id,selectorText);

if(matchingNodeIds)
this._setSelectorMatches(node,selectorText,matchingNodeIds.indexOf(node.id)!==-1);
}
}






addNewRule(rule,node){
this._addedStyles.set(rule.style,node);
return this.recomputeMatchingSelectors(rule);
}






_setSelectorMatches(node,selectorText,value){
let map=this._matchingSelectors.get(node.id);
if(!map){
map=new Map();
this._matchingSelectors.set(node.id,map);
}
map.set(selectorText,value);
}





mediaMatches(style){
const media=style.parentRule?style.parentRule.media:[];
for(let i=0;media&&i<media.length;++i){
if(!media[i].active())
return false;
}
return true;
}




nodeStyles(){
return this._mainDOMCascade.styles();
}




keyframes(){
return this._keyframes;
}





pseudoStyles(pseudoType){
const domCascade=this._pseudoDOMCascades.get(pseudoType);
return domCascade?domCascade.styles():[];
}




pseudoTypes(){
return new Set(this._pseudoDOMCascades.keys());
}





_containsInherited(style){
const properties=style.allProperties();
for(let i=0;i<properties.length;++i){
const property=properties[i];

if(property.activeInStyle()&&SDK.cssMetadata().isPropertyInherited(property.name))
return true;
}
return false;
}





nodeForStyle(style){
return this._addedStyles.get(style)||this._nodeForStyle.get(style)||null;
}





availableCSSVariables(style){
const domCascade=this._styleToDOMCascade.get(style)||null;
return domCascade?domCascade.availableCSSVariables(style):[];
}






computeCSSVariable(style,variableName){
const domCascade=this._styleToDOMCascade.get(style)||null;
return domCascade?domCascade.computeCSSVariable(style,variableName):null;
}






computeValue(style,value){
const domCascade=this._styleToDOMCascade.get(style)||null;
return domCascade?domCascade.computeValue(style,value):null;
}





isInherited(style){
return this._inheritedStyles.has(style);
}





propertyState(property){
const domCascade=this._styleToDOMCascade.get(property.ownerStyle);
return domCascade?domCascade.propertyState(property):null;
}

resetActiveProperties(){
this._mainDOMCascade.reset();
for(const domCascade of this._pseudoDOMCascades.values())
domCascade.reset();
}};


SDK.CSSMatchedStyles.NodeCascade=class{





constructor(matchedStyles,styles,isInherited){
this._matchedStyles=matchedStyles;
this._styles=styles;
this._isInherited=isInherited;

this._propertiesState=new Map();

this._activeProperties=new Map();
}

_computeActiveProperties(){
this._propertiesState.clear();
this._activeProperties.clear();

for(const style of this._styles){
const rule=style.parentRule;

if(rule&&!(rule instanceof SDK.CSSStyleRule))
continue;
if(rule&&!this._matchedStyles.hasMatchingSelectors(rule))
continue;

for(const property of style.allProperties()){

if(this._isInherited&&!SDK.cssMetadata().isPropertyInherited(property.name))
continue;

if(!property.activeInStyle()){
this._propertiesState.set(property,SDK.CSSMatchedStyles.PropertyState.Overloaded);
continue;
}

const canonicalName=SDK.cssMetadata().canonicalPropertyName(property.name);
const activeProperty=this._activeProperties.get(canonicalName);
if(activeProperty&&(activeProperty.important||!property.important)){
this._propertiesState.set(property,SDK.CSSMatchedStyles.PropertyState.Overloaded);
continue;
}

if(activeProperty)
this._propertiesState.set(activeProperty,SDK.CSSMatchedStyles.PropertyState.Overloaded);
this._propertiesState.set(property,SDK.CSSMatchedStyles.PropertyState.Active);
this._activeProperties.set(canonicalName,property);
}
}
}};


SDK.CSSMatchedStyles.DOMInheritanceCascade=class{



constructor(nodeCascades){
this._nodeCascades=nodeCascades;

this._propertiesState=new Map();

this._availableCSSVariables=new Map();

this._computedCSSVariables=new Map();
this._initialized=false;


this._styleToNodeCascade=new Map();
for(const nodeCascade of nodeCascades){
for(const style of nodeCascade._styles)
this._styleToNodeCascade.set(style,nodeCascade);
}
}





availableCSSVariables(style){
const nodeCascade=this._styleToNodeCascade.get(style);
if(!nodeCascade)
return[];
this._ensureInitialized();
return Array.from(this._availableCSSVariables.get(nodeCascade).keys());
}






computeCSSVariable(style,variableName){
const nodeCascade=this._styleToNodeCascade.get(style);
if(!nodeCascade)
return null;
this._ensureInitialized();
const availableCSSVariables=this._availableCSSVariables.get(nodeCascade);
const computedCSSVariables=this._computedCSSVariables.get(nodeCascade);
return this._innerComputeCSSVariable(availableCSSVariables,computedCSSVariables,variableName);
}






computeValue(style,value){
const nodeCascade=this._styleToNodeCascade.get(style);
if(!nodeCascade)
return null;
this._ensureInitialized();
const availableCSSVariables=this._availableCSSVariables.get(nodeCascade);
const computedCSSVariables=this._computedCSSVariables.get(nodeCascade);
return this._innerComputeValue(availableCSSVariables,computedCSSVariables,value);
}







_innerComputeCSSVariable(availableCSSVariables,computedCSSVariables,variableName){
if(!availableCSSVariables.has(variableName))
return null;
if(computedCSSVariables.has(variableName))
return computedCSSVariables.get(variableName);

computedCSSVariables.set(variableName,null);
const definedValue=availableCSSVariables.get(variableName);
const computedValue=this._innerComputeValue(availableCSSVariables,computedCSSVariables,definedValue);
computedCSSVariables.set(variableName,computedValue);
return computedValue;
}







_innerComputeValue(availableCSSVariables,computedCSSVariables,value){
const results=TextUtils.TextUtils.splitStringByRegexes(value,[SDK.CSSMetadata.VariableRegex]);
const tokens=[];
for(const result of results){
if(result.regexIndex===-1){
tokens.push(result.value);
continue;
}

const regexMatch=result.value.match(/^var\((--[a-zA-Z0-9-_]+)[,]?\s*(.*)\)$/);
if(!regexMatch)
return null;
const cssVariable=regexMatch[1];
const computedValue=this._innerComputeCSSVariable(availableCSSVariables,computedCSSVariables,cssVariable);
if(computedValue===null&&!regexMatch[2])
return null;
if(computedValue===null)
tokens.push(regexMatch[2]);else

tokens.push(computedValue);
}
return tokens.map(token=>token.trim()).join(' ');
}




styles(){
return Array.from(this._styleToNodeCascade.keys());
}





propertyState(property){
this._ensureInitialized();
return this._propertiesState.get(property)||null;
}

reset(){
this._initialized=false;
this._propertiesState.clear();
this._availableCSSVariables.clear();
this._computedCSSVariables.clear();
}

_ensureInitialized(){
if(this._initialized)
return;
this._initialized=true;

const activeProperties=new Map();
for(const nodeCascade of this._nodeCascades){
nodeCascade._computeActiveProperties();
for(const entry of nodeCascade._propertiesState.entries()){
const property=entry[0];
const state=entry[1];
if(state===SDK.CSSMatchedStyles.PropertyState.Overloaded){
this._propertiesState.set(property,SDK.CSSMatchedStyles.PropertyState.Overloaded);
continue;
}
const canonicalName=SDK.cssMetadata().canonicalPropertyName(property.name);
if(activeProperties.has(canonicalName)){
this._propertiesState.set(property,SDK.CSSMatchedStyles.PropertyState.Overloaded);
continue;
}
activeProperties.set(canonicalName,property);
this._propertiesState.set(property,SDK.CSSMatchedStyles.PropertyState.Active);
}
}

for(const entry of activeProperties.entries()){
const canonicalName=entry[0];
const shorthandProperty=entry[1];
const shorthandStyle=shorthandProperty.ownerStyle;
const longhands=shorthandStyle.longhandProperties(shorthandProperty.name);
if(!longhands.length)
continue;
let hasActiveLonghands=false;
for(const longhand of longhands){
const longhandCanonicalName=SDK.cssMetadata().canonicalPropertyName(longhand.name);
const longhandActiveProperty=activeProperties.get(longhandCanonicalName);
if(!longhandActiveProperty)
continue;
if(longhandActiveProperty.ownerStyle===shorthandStyle){
hasActiveLonghands=true;
break;
}
}
if(hasActiveLonghands)
continue;
activeProperties.delete(canonicalName);
this._propertiesState.set(shorthandProperty,SDK.CSSMatchedStyles.PropertyState.Overloaded);
}


const accumulatedCSSVariables=new Map();
for(let i=this._nodeCascades.length-1;i>=0;--i){
const nodeCascade=this._nodeCascades[i];
for(const entry of nodeCascade._activeProperties.entries()){
const propertyName=entry[0];
const property=entry[1];
if(propertyName.startsWith('--'))
accumulatedCSSVariables.set(propertyName,property.value);
}
this._availableCSSVariables.set(nodeCascade,new Map(accumulatedCSSVariables));
this._computedCSSVariables.set(nodeCascade,new Map());
}
}};



SDK.CSSMatchedStyles.PropertyState={
Active:'Active',
Overloaded:'Overloaded'};


},{}],154:[function(require,module,exports){






SDK.CSSMediaQuery=class{



constructor(payload){
this._active=payload.active;
this._expressions=[];
for(let j=0;j<payload.expressions.length;++j)
this._expressions.push(SDK.CSSMediaQueryExpression.parsePayload(payload.expressions[j]));
}





static parsePayload(payload){
return new SDK.CSSMediaQuery(payload);
}




active(){
return this._active;
}




expressions(){
return this._expressions;
}};






SDK.CSSMediaQueryExpression=class{



constructor(payload){
this._value=payload.value;
this._unit=payload.unit;
this._feature=payload.feature;
this._valueRange=payload.valueRange?TextUtils.TextRange.fromObject(payload.valueRange):null;
this._computedLength=payload.computedLength||null;
}





static parsePayload(payload){
return new SDK.CSSMediaQueryExpression(payload);
}




value(){
return this._value;
}




unit(){
return this._unit;
}




feature(){
return this._feature;
}




valueRange(){
return this._valueRange;
}




computedLength(){
return this._computedLength;
}};






SDK.CSSMedia=class{




constructor(cssModel,payload){
this._cssModel=cssModel;
this._reinitialize(payload);
}






static parsePayload(cssModel,payload){
return new SDK.CSSMedia(cssModel,payload);
}






static parseMediaArrayPayload(cssModel,payload){
const result=[];
for(let i=0;i<payload.length;++i)
result.push(SDK.CSSMedia.parsePayload(cssModel,payload[i]));
return result;
}




_reinitialize(payload){
this.text=payload.text;
this.source=payload.source;
this.sourceURL=payload.sourceURL||'';
this.range=payload.range?TextUtils.TextRange.fromObject(payload.range):null;
this.styleSheetId=payload.styleSheetId;
this.mediaList=null;
if(payload.mediaList){
this.mediaList=[];
for(let i=0;i<payload.mediaList.length;++i)
this.mediaList.push(SDK.CSSMediaQuery.parsePayload(payload.mediaList[i]));
}
}




rebase(edit){
if(this.styleSheetId!==edit.styleSheetId||!this.range)
return;
if(edit.oldRange.equal(this.range))
this._reinitialize(edit.payload);else

this.range=this.range.rebaseAfterTextEdit(edit.oldRange,edit.newRange);
}





equal(other){
if(!this.styleSheetId||!this.range||!other.range)
return false;
return this.styleSheetId===other.styleSheetId&&this.range.equal(other.range);
}




active(){
if(!this.mediaList)
return true;
for(let i=0;i<this.mediaList.length;++i){
if(this.mediaList[i].active())
return true;
}
return false;
}




lineNumberInSource(){
if(!this.range)
return undefined;
const header=this.header();
if(!header)
return undefined;
return header.lineNumberInSource(this.range.startLine);
}




columnNumberInSource(){
if(!this.range)
return undefined;
const header=this.header();
if(!header)
return undefined;
return header.columnNumberInSource(this.range.startLine,this.range.startColumn);
}




header(){
return this.styleSheetId?this._cssModel.styleSheetHeaderForId(this.styleSheetId):null;
}




rawLocation(){
const header=this.header();
if(!header||this.lineNumberInSource()===undefined)
return null;
const lineNumber=Number(this.lineNumberInSource());
return new SDK.CSSLocation(header,lineNumber,this.columnNumberInSource());
}};


SDK.CSSMedia.Source={
LINKED_SHEET:'linkedSheet',
INLINE_SHEET:'inlineSheet',
MEDIA_RULE:'mediaRule',
IMPORT_RULE:'importRule'};


},{}],155:[function(require,module,exports){



































SDK.CSSMetadata=class{



constructor(properties){
this._values=[];

this._longhands=new Map();

this._shorthands=new Map();

this._inherited=new Set();

this._svgProperties=new Set();
for(let i=0;i<properties.length;++i){
const property=properties[i];
const propertyName=property.name;
if(!CSS.supports(propertyName,'initial'))
continue;
this._values.push(propertyName);

if(property.inherited)
this._inherited.add(propertyName);
if(property.svg)
this._svgProperties.add(propertyName);

const longhands=properties[i].longhands;
if(longhands){
this._longhands.set(propertyName,longhands);
for(let j=0;j<longhands.length;++j){
const longhandName=longhands[j];
let shorthands=this._shorthands.get(longhandName);
if(!shorthands){
shorthands=[];
this._shorthands.set(longhandName,shorthands);
}
shorthands.push(propertyName);
}
}
}
this._values.sort();
this._valuesSet=new Set(this._values);
}




allProperties(){
return this._values;
}





isSVGProperty(name){
name=name.toLowerCase();
return this._svgProperties.has(name);
}





longhands(shorthand){
return this._longhands.get(shorthand)||null;
}





shorthands(longhand){
return this._shorthands.get(longhand)||null;
}





isColorAwareProperty(propertyName){
return!!SDK.CSSMetadata._colorAwareProperties.has(propertyName.toLowerCase())||
this.isCustomProperty(propertyName.toLowerCase());
}





isLengthProperty(propertyName){
propertyName=propertyName.toLowerCase();
if(propertyName==='line-height')
return false;
return SDK.CSSMetadata._distanceProperties.has(propertyName)||propertyName.startsWith('margin')||
propertyName.startsWith('padding')||propertyName.indexOf('width')!==-1||
propertyName.indexOf('height')!==-1;
}





isBezierAwareProperty(propertyName){
propertyName=propertyName.toLowerCase();
return!!SDK.CSSMetadata._bezierAwareProperties.has(propertyName)||this.isCustomProperty(propertyName);
}





isCustomProperty(propertyName){
return propertyName.startsWith('--');
}





canonicalPropertyName(name){
name=name.toLowerCase();
if(!name||name.length<9||name.charAt(0)!=='-')
return name;
const match=name.match(/(?:-webkit-)(.+)/);
if(!match||!this._valuesSet.has(match[1]))
return name;
return match[1];
}





isCSSPropertyName(propertyName){
propertyName=propertyName.toLowerCase();
if(propertyName.startsWith('-moz-')||propertyName.startsWith('-o-')||propertyName.startsWith('-webkit-')||
propertyName.startsWith('-ms-'))
return true;
return this._valuesSet.has(propertyName);
}





isPropertyInherited(propertyName){
propertyName=propertyName.toLowerCase();
return propertyName.startsWith('--')||this._inherited.has(this.canonicalPropertyName(propertyName))||
this._inherited.has(propertyName);
}





propertyValues(propertyName){
const acceptedKeywords=['inherit','initial','unset'];
propertyName=propertyName.toLowerCase();
const unprefixedName=propertyName.replace(/^-webkit-/,'');
const entry=SDK.CSSMetadata._propertyDataMap[propertyName]||SDK.CSSMetadata._propertyDataMap[unprefixedName];
if(entry&&entry.values)
acceptedKeywords.pushAll(entry.values);
const commonKeywords=['auto','none'];
for(const commonKeyword of commonKeywords){
if(CSS.supports(propertyName,commonKeyword))
acceptedKeywords.push(commonKeyword);
}
if(this.isColorAwareProperty(propertyName)){
acceptedKeywords.push('currentColor');
for(const color in Common.Color.Nicknames)
acceptedKeywords.push(color);
}
return acceptedKeywords.sort();
}





propertyUsageWeight(property){
return SDK.CSSMetadata.Weight[property]||SDK.CSSMetadata.Weight[this.canonicalPropertyName(property)]||0;
}};


SDK.CSSMetadata.VariableRegex=/(var\(--.*?\))/g;
SDK.CSSMetadata.URLRegex=/url\(\s*('.+?'|".+?"|[^)]+)\s*\)/g;




SDK.cssMetadata=function(){
if(!SDK.CSSMetadata._instance)
SDK.CSSMetadata._instance=new SDK.CSSMetadata(SDK.CSSMetadata._generatedProperties||[]);
return SDK.CSSMetadata._instance;
};

SDK.CSSMetadata._distanceProperties=new Set([
'background-position','border-spacing','bottom','font-size','height','left','letter-spacing','max-height',
'max-width','min-height','min-width','right','text-indent','top','width','word-spacing','grid-row-gap',
'grid-column-gap','row-gap']);


SDK.CSSMetadata._bezierAwareProperties=new Set([
'animation','animation-timing-function','transition','transition-timing-function','-webkit-animation',
'-webkit-animation-timing-function','-webkit-transition','-webkit-transition-timing-function']);


SDK.CSSMetadata._colorAwareProperties=new Set([
'backdrop-filter',
'background',
'background-color',
'background-image',
'border',
'border-color',
'border-image',
'border-image-source',
'border-bottom',
'border-bottom-color',
'border-left',
'border-left-color',
'border-right',
'border-right-color',
'border-top',
'border-top-color',
'box-shadow',
'caret-color',
'color',
'column-rule',
'column-rule-color',
'fill',
'list-style',
'list-style-image',
'outline',
'outline-color',
'stroke',
'text-decoration-color',
'text-shadow',
'-webkit-border-after',
'-webkit-border-after-color',
'-webkit-border-before',
'-webkit-border-before-color',
'-webkit-border-end',
'-webkit-border-end-color',
'-webkit-border-start',
'-webkit-border-start-color',
'-webkit-box-reflect',
'-webkit-box-shadow',
'-webkit-column-rule-color',
'-webkit-filter',
'-webkit-mask',
'-webkit-mask-box-image',
'-webkit-mask-box-image-source',
'-webkit-mask-image',
'-webkit-tap-highlight-color',
'-webkit-text-decoration-color',
'-webkit-text-emphasis',
'-webkit-text-emphasis-color',
'-webkit-text-fill-color',
'-webkit-text-stroke',
'-webkit-text-stroke-color']);


SDK.CSSMetadata._propertyDataMap={
'table-layout':{values:['fixed']},
'visibility':{values:['hidden','visible','collapse']},
'background-repeat':{values:['repeat','repeat-x','repeat-y','no-repeat','space','round']},
'content':{values:['normal','close-quote','no-close-quote','no-open-quote','open-quote']},
'clear':{values:['left','right','both']},
'overflow-x':{values:['hidden','visible','overlay','scroll','-webkit-paged-x','-webkit-paged-y']},
'stroke-linejoin':{values:['round','miter','bevel']},
'baseline-shift':{values:['baseline','sub','super']},
'border-bottom-width':{values:['medium','thick','thin']},
'margin-top-collapse':{values:['collapse','separate','discard']},
'max-height':{values:['min-content','max-content','-webkit-fill-available','fit-content']},
'box-orient':{
values:['horizontal','vertical','inline-axis','block-axis']},

'font-stretch':{
values:[
'normal','ultra-condensed','extra-condensed','condensed','semi-condensed','semi-expanded','expanded',
'extra-expanded','ultra-expanded']},


'border-left-width':{values:['medium','thick','thin']},
'box-shadow':{values:['inset']},
'-webkit-writing-mode':{values:['horizontal-tb','vertical-rl','vertical-lr']},
'writing-mode':
{values:['lr','rl','tb','lr-tb','rl-tb','tb-rl','horizontal-tb','vertical-rl','vertical-lr']},
'border-collapse':{values:['collapse','separate']},
'page-break-inside':{values:['avoid']},
'border-top-width':{values:['medium','thick','thin']},
'outline-style':{values:['inset','groove','ridge','outset','dotted','dashed','solid','double','hidden']},
'cursor':{
values:[
'copy',
'crosshair',
'default',
'grab',
'grabbing',
'pointer',
'move',
'vertical-text',
'cell',
'context-menu',
'alias',
'progress',
'no-drop',
'not-allowed',
'-webkit-zoom-in',
'-webkit-zoom-out',
'e-resize',
'ne-resize',
'nw-resize',
'n-resize',
'se-resize',
'sw-resize',
's-resize',
'w-resize',
'ew-resize',
'ns-resize',
'nesw-resize',
'nwse-resize',
'col-resize',
'row-resize',
'text',
'wait',
'help',
'all-scroll',
'zoom-in',
'zoom-out',
'-webkit-grab',
'-webkit-grabbing']},


'border-width':{values:['medium','thick','thin']},
'border-style':{values:['hidden','inset','groove','ridge','outset','dotted','dashed','solid','double']},
'size':{values:['a3','a4','a5','b4','b5','landscape','ledger','legal','letter','portrait']},
'background-size':{values:['contain','cover']},
'direction':{values:['ltr','rtl']},
'enable-background':{values:['accumulate','new']},
'float':{values:['left','right']},
'overflow-y':{values:['hidden','visible','overlay','scroll','-webkit-paged-x','-webkit-paged-y']},
'margin-bottom-collapse':{values:['collapse','separate','discard']},
'box-reflect':{values:['left','right','above','below']},
'overflow':{values:['hidden','visible','overlay','scroll','-webkit-paged-x','-webkit-paged-y']},
'overscroll-behavior':{values:['contain']},
'overscroll-behavior-x':{values:['contain']},
'overscroll-behavior-y':{values:['contain']},
'contain':{values:['strict','content','size','layout','style','paint']},
'text-rendering':{values:['optimizeSpeed','optimizeLegibility','geometricPrecision']},
'text-align':{
values:[
'-webkit-auto','start','end','left','right','center','justify','-webkit-left','-webkit-right',
'-webkit-center','-webkit-match-parent']},


'list-style-position':{values:['outside','inside']},
'color-interpolation':{values:['sRGB','linearRGB']},
'background-origin':{values:['border-box','content-box','padding-box']},
'word-wrap':{values:['normal','break-word']},
'font-weight':
{values:['normal','bold','bolder','lighter','100','200','300','400','500','600','700','800','900']},
'margin-before-collapse':{values:['collapse','separate','discard']},
'text-transform':{values:['capitalize','uppercase','lowercase']},
'border-right-style':
{values:['hidden','inset','groove','ridge','outset','dotted','dashed','solid','double']},
'border-left-style':
{values:['hidden','inset','groove','ridge','outset','dotted','dashed','solid','double']},
'-webkit-text-emphasis':{values:['circle','filled','open','dot','double-circle','triangle','sesame']},
'font-style':{values:['italic','oblique','normal']},
'speak':{values:['normal','spell-out','digits','literal-punctuation','no-punctuation']},
'color-rendering':{values:['optimizeSpeed','optimizeQuality']},
'list-style-type':{
values:[
'disc',
'circle',
'square',
'decimal',
'decimal-leading-zero',
'arabic-indic',
'bengali',
'cambodian',
'khmer',
'devanagari',
'gujarati',
'gurmukhi',
'kannada',
'lao',
'malayalam',
'mongolian',
'myanmar',
'oriya',
'persian',
'urdu',
'telugu',
'tibetan',
'thai',
'lower-roman',
'upper-roman',
'lower-greek',
'lower-alpha',
'lower-latin',
'upper-alpha',
'upper-latin',
'ethiopic-halehame',
'ethiopic-halehame-am',
'ethiopic-halehame-ti-er',
'ethiopic-halehame-ti-et',
'cjk-earthly-branch',
'cjk-heavenly-stem',
'hangul-consonant',
'hangul',
'korean-hangul-formal',
'korean-hanja-formal',
'korean-hanja-informal',
'simp-chinese-formal',
'simp-chinese-informal',
'trad-chinese-formal',
'trad-chinese-informal',
'hebrew',
'armenian',
'lower-armenian',
'upper-armenian',
'georgian',
'cjk-ideographic',
'hiragana',
'katakana',
'hiragana-iroha',
'katakana-iroha']},


'text-combine-upright':{values:['all']},
'-webkit-text-combine':{values:['horizontal']},
'text-orientation':{values:['mixed','upright','sideways','sideways-right']},
'outline':{
values:['inset','groove','ridge','outset','dotted','dashed','solid','double','medium','thick','thin']},

'font':{
values:[
'caption',
'icon',
'menu',
'message-box',
'small-caption',
'-webkit-mini-control',
'-webkit-small-control',
'-webkit-control',
'status-bar',
'italic',
'oblique',
'small-caps',
'normal',
'bold',
'bolder',
'lighter',
'100',
'200',
'300',
'400',
'500',
'600',
'700',
'800',
'900',
'xx-small',
'x-small',
'small',
'medium',
'large',
'x-large',
'xx-large',
'-webkit-xxx-large',
'smaller',
'larger',
'serif',
'sans-serif',
'cursive',
'fantasy',
'monospace',
'-webkit-body',
'-webkit-pictograph']},


'dominant-baseline':{
values:[
'middle','central','text-before-edge','text-after-edge','ideographic','alphabetic','hanging',
'mathematical','use-script','no-change','reset-size']},


'display':{
values:[
'inline',
'block',
'flow-root',
'list-item',
'inline-block',
'table',
'inline-table',
'table-row-group',
'table-header-group',
'table-footer-group',
'table-row',
'table-column-group',
'table-column',
'table-cell',
'table-caption',
'-webkit-box',
'-webkit-inline-box',
'flex',
'inline-flex',
'grid',
'inline-grid',
'contents']},


'-webkit-text-emphasis-position':{values:['over','under']},
'image-rendering':{values:['pixelated','-webkit-optimize-contrast','optimizeSpeed','optimizeQuality']},
'alignment-baseline':{
values:[
'baseline','middle','before-edge','after-edge','central','text-before-edge','text-after-edge',
'ideographic','alphabetic','hanging','mathematical']},


'outline-width':{values:['medium','thick','thin']},
'box-align':{values:['baseline','center','stretch','start','end']},
'border-right-width':{values:['medium','thick','thin']},
'border-top-style':{values:['hidden','inset','groove','ridge','outset','dotted','dashed','solid','double']},
'line-height':{values:['normal']},
'text-overflow':{values:['clip','ellipsis']},
'overflow-wrap':{values:['normal','break-word']},
'box-direction':{values:['normal','reverse']},
'margin-after-collapse':{values:['collapse','separate','discard']},
'page-break-before':{values:['left','right','always','avoid']},
'border-image':{values:['repeat','stretch','space','round']},
'text-decoration':
{values:['blink','line-through','overline','underline','wavy','double','solid','dashed','dotted']},
'position':{values:['absolute','fixed','relative','static','sticky']},
'font-family':
{values:['serif','sans-serif','cursive','fantasy','monospace','-webkit-body','-webkit-pictograph']},
'border-bottom-style':
{values:['hidden','inset','groove','ridge','outset','dotted','dashed','solid','double']},
'unicode-bidi':{values:['normal','bidi-override','embed','isolate','isolate-override','plaintext']},
'clip-rule':{values:['nonzero','evenodd']},
'zoom':{values:['normal']},
'max-width':{values:['min-content','max-content','-webkit-fill-available','fit-content']},
'caption-side':{values:['top','bottom']},
'empty-cells':{values:['hide','show']},
'pointer-events':{
values:[
'all','visible','visiblepainted','visiblefill','visiblestroke','painted','fill','stroke','bounding-box']},


'letter-spacing':{values:['normal']},
'background-clip':{values:['border-box','content-box','padding-box']},
'-webkit-font-smoothing':{values:['antialiased','subpixel-antialiased']},
'border':{
values:[
'hidden','inset','groove','ridge','outset','dotted','dashed','solid','double','medium','thick','thin']},


'font-size':{
values:[
'xx-small','x-small','small','medium','large','x-large','xx-large','-webkit-xxx-large','smaller','larger']},


'font-variant':{
values:[
'small-caps',
'normal',
'common-ligatures',
'no-common-ligatures',
'discretionary-ligatures',
'no-discretionary-ligatures',
'historical-ligatures',
'no-historical-ligatures',
'contextual',
'no-contextual',
'all-small-caps',
'petite-caps',
'all-petite-caps',
'unicase',
'titling-caps',
'lining-nums',
'oldstyle-nums',
'proportional-nums',
'tabular-nums',
'diagonal-fractions',
'stacked-fractions',
'ordinal',
'slashed-zero',
'jis78',
'jis83',
'jis90',
'jis04',
'simplified',
'traditional',
'full-width',
'proportional-width',
'ruby']},


'vertical-align':{
values:
['baseline','middle','sub','super','text-top','text-bottom','top','bottom','-webkit-baseline-middle']},

'white-space':{values:['normal','nowrap','pre','pre-line','pre-wrap']},
'page-break-after':{values:['left','right','always','avoid']},
'word-break':{values:['normal','break-all','break-word','keep-all']},
'word-spacing':{values:['normal']},
'-webkit-text-emphasis-style':{values:['circle','filled','open','dot','double-circle','triangle','sesame']},
'transform':{
values:[
'scale','scaleX','scaleY','scale3d','rotate','rotateX','rotateY',
'rotateZ','rotate3d','skew','skewX','skewY','translate','translateX',
'translateY','translateZ','translate3d','matrix','matrix3d','perspective']},


'box-sizing':{values:['content-box','border-box']},
'resize':{values:['both','horizontal','vertical']},
'align-content':{
values:[
'normal','baseline','space-between','space-around','space-evenly','stretch','unsafe','safe','center',
'start','end','flex-start','flex-end','left','right']},


'justify-content':{
values:[
'normal','space-between','space-around','space-evenly','stretch','unsafe','safe','center','start','end',
'flex-start','flex-end','left','right','baseline']},


'place-content':{
values:[
'normal','space-between','space-around','space-evenly','stretch','unsafe','safe','center','start','end',
'flex-start','flex-end','left','right','baseline']},


'align-items':{
values:[
'normal','stretch','baseline','unsafe','safe','center','start','end','self-start','self-end',
'flex-start','flex-end','left','right']},


'justify-items':{
values:[
'normal','stretch','baseline','unsafe','safe','center','start','end','self-start','self-end',
'flex-start','flex-end','left','right','legacy']},


'place-items':{
values:[
'normal','stretch','baseline','unsafe','safe','center','start','end','self-start','self-end',
'flex-start','flex-end','left','right']},


'align-self':{
values:[
'normal','stretch','baseline','unsafe','safe','center','start','end','self-start','self-end',
'flex-start','flex-end','left','right']},


'justify-self':{
values:[
'normal','stretch','baseline','unsafe','safe','center','start','end','self-start','self-end',
'flex-start','flex-end','left','right']},


'place-self':{
values:[
'normal','stretch','baseline','unsafe','safe','center','start','end','self-start','self-end',
'flex-start','flex-end','left','right']},


'flex-direction':{values:['row','row-reverse','column','column-reverse']},
'flex-wrap':{values:['nowrap','wrap','wrap-reverse']},
'perspective-origin':{values:['left','center','right','top','bottom']},
'transform-origin':{values:['left','center','right','top','bottom']},
'transform-style':{values:['flat','preserve-3d']},
'transition-timing-function':{
values:[
'ease','linear','ease-in','ease-out','ease-in-out','step-start','step-end','steps','frames',
'cubic-bezier','step-middle']},


'animation-timing-function':{
values:[
'ease','linear','ease-in','ease-out','ease-in-out','step-start','step-end','steps','frames',
'cubic-bezier','step-middle']},


'animation-direction':{values:['normal','reverse','alternate','alternate-reverse']},
'animation-play-state':{values:['running','paused']},
'animation-fill-mode':{values:['forwards','backwards','both']},
'-webkit-backface-visibility':{values:['visible','hidden']},
'-webkit-box-decoration-break':{values:['slice','clone']},
'-webkit-column-break-after':
{values:['always','avoid','left','right','page','column','avoid-page','avoid-column']},
'-webkit-column-break-before':
{values:['always','avoid','left','right','page','column','avoid-page','avoid-column']},
'-webkit-column-break-inside':{values:['avoid','avoid-page','avoid-column']},
'-webkit-column-span':{values:['all']},
'-webkit-column-gap':{values:['normal']},
'filter':{
values:[
'url','blur','brightness','contrast','drop-shadow','grayscale','hue-rotate','invert','opacity',
'saturate','sepia']},


'line-break':{values:['loose','normal','strict','after-white-space']},
'user-select':{values:['text','all']},
'-webkit-user-modify':{values:['read-only','read-write','read-write-plaintext-only']},
'text-align-last':{values:['start','end','left','right','center','justify']},
'-webkit-text-decoration-line':{values:['underline','overline','line-through','blink']},
'-webkit-text-decoration-style':{values:['solid','double','dotted','dashed','wavy']},
'mix-blend-mode':{
values:[
'normal','multiply','screen','overlay','darken','lighten','color-dodge','color-burn','hard-light',
'soft-light','difference','exclusion','hue','saturation','color','luminosity','unset']},


'background-blend-mode':{
values:[
'normal','multiply','screen','overlay','darken','lighten','color-dodge','color-burn','hard-light',
'soft-light','difference','exclusion','hue','saturation','color','luminosity','unset']},


'grid-template-columns':{values:['min-content','max-content']},
'grid-template-rows':{values:['min-content','max-content']},
'grid-auto-columns':{values:['min-content','max-content']},
'grid-auto-rows':{values:['min-content','max-content']},
'grid-auto-flow':{values:['row','column','dense']},
'row-gap':{values:['normal']},
'animation-iteration-count':{values:['infinite']},
'font-feature-settings':{values:['normal']},
'font-kerning':{values:['normal']},
'font-variant-caps':
{values:['small-caps','all-small-caps','petite-caps','all-petite-caps','unicase','titling-caps','normal']},
'font-variant-east-asian':{
values:[
'jis78','jis83','jis90','jis04','simplified','traditional','full-width','proportional-width','ruby',
'normal']},


'font-variant-ligatures':{
values:[
'common-ligatures','no-common-ligatures','discretionary-ligatures','no-discretionary-ligatures',
'historical-ligatures','no-historical-ligatures','contextual','no-contextual','normal']},


'font-variant-numeric':{
values:[
'lining-nums','oldstyle-nums','proportional-nums','tabular-nums','diagonal-fractions','stacked-fractions',
'ordinal','slashed-zero','normal']},


'font-variation-settings':{values:['normal']},
'backface-visibility':{values:['hidden','visible']},
'background':{
values:[
'repeat','repeat-x','repeat-y','no-repeat','top','bottom','left','right','center','fixed','local',
'scroll','space','round','border-box','content-box','padding-box']},


'background-attachment':{values:['fixed','local','scroll']},
'background-position':{values:['top','bottom','left','right','center']},
'background-position-x':{values:['left','right','center']},
'background-position-y':{values:['top','bottom','center']},
'background-repeat-x':{values:['repeat','no-repeat']},
'background-repeat-y':{values:['repeat','no-repeat']},
'border-bottom':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'border-image-repeat':{values:['repeat','stretch','space','round']},
'border-left':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'border-right':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'border-top':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'break-after':{values:['left','right','avoid','column','avoid-page','page','recto','verso','avoid-column']},
'break-before':
{values:['left','right','avoid','column','avoid-page','page','recto','verso','avoid-column']},
'break-inside':{values:['avoid','avoid-page','avoid-column']},
'buffered-rendering':{values:['static','dynamic']},
'color-interpolation-filters':{values:['srgb','linearrgb']},
'column-fill':{values:['balance']},
'column-gap':{values:['normal']},
'column-rule':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'column-rule-style':
{values:['hidden','inset','groove','outset','ridge','dotted','dashed','solid','double']},
'column-rule-width':{values:['medium','thick','thin']},
'column-span':{values:['all']},
'fill-rule':{values:['nonzero','evenodd']},
'flex-flow':{values:['nowrap','row','row-reverse','column','column-reverse','wrap','wrap-reverse']},
'height':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'hyphens':{values:['manual']},
'inline-size':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'isolation':{values:['isolate']},
'list-style':{
values:[
'outside',
'inside',
'disc',
'circle',
'square',
'decimal',
'decimal-leading-zero',
'arabic-indic',
'bengali',
'cambodian',
'khmer',
'devanagari',
'gujarati',
'gurmukhi',
'kannada',
'lao',
'malayalam',
'mongolian',
'myanmar',
'oriya',
'persian',
'urdu',
'telugu',
'tibetan',
'thai',
'lower-roman',
'upper-roman',
'lower-greek',
'lower-alpha',
'lower-latin',
'upper-alpha',
'upper-latin',
'cjk-earthly-branch',
'cjk-heavenly-stem',
'ethiopic-halehame',
'ethiopic-halehame-am',
'ethiopic-halehame-ti-er',
'ethiopic-halehame-ti-et',
'hangul',
'hangul-consonant',
'korean-hangul-formal',
'korean-hanja-formal',
'korean-hanja-informal',
'hebrew',
'armenian',
'lower-armenian',
'upper-armenian',
'georgian',
'cjk-ideographic',
'simp-chinese-formal',
'simp-chinese-informal',
'trad-chinese-formal',
'trad-chinese-informal',
'hiragana',
'katakana',
'hiragana-iroha',
'katakana-iroha']},


'mask-source-type':{values:['alpha','luminance']},
'mask-type':{values:['alpha','luminance']},
'max-block-size':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'max-inline-size':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'min-block-size':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'min-height':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'min-inline-size':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'min-width':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'object-fit':{values:['contain','cover','fill','scale-down']},
'object-position':{values:['top','bottom','left','right','center']},
'offset-anchor':{values:['top','bottom','left','right','center']},
'offset-position':{values:['top','bottom','left','right','center']},
'offset-rotate':{values:['reverse']},
'overflow-anchor':{values:['visible']},
'paint-order':{values:['normal','fill','stroke','markers']},
'scroll-behavior':{values:['smooth']},
'scroll-customization':{
values:[
'pan-x',
'pan-y',
'pan-left',
'pan-right',
'pan-up',
'pan-down']},


'scroll-snap-align':{values:['start','end','center']},
'scroll-snap-stop':{values:['normal','always']},
'scroll-snap-type':{values:['x','y','block','inline','both','mandatory','proximity']},
'shape-outside':{values:['border-box','content-box','padding-box','margin-box']},
'shape-rendering':{values:['optimizespeed','geometricprecision','crispedges']},
'stroke-linecap':{values:['square','round','butt']},
'text-anchor':{values:['middle','start','end']},
'text-decoration-line':{values:['blink','line-through','overline','underline']},
'text-decoration-style':{values:['dotted','dashed','solid','double','wavy']},
'text-justify':{values:['inter-word','distribute']},
'text-underline-position':{values:['under']},
'touch-action':
{values:['pan-x','pan-y','pan-left','pan-right','pan-up','pan-down','manipulation','pinch-zoom']},
'transform-box':{values:['border-box','fill-box','view-box']},
'vector-effect':{values:['non-scaling-stroke']},
'-webkit-app-region':{values:['drag','no-drag']},
'-webkit-appearance':{
values:[
'checkbox',
'radio',
'push-button',
'square-button',
'button',
'button-bevel',
'inner-spin-button',
'listbox',
'listitem',
'media-enter-fullscreen-button',
'media-exit-fullscreen-button',
'media-mute-button',
'media-play-button',
'media-overlay-play-button',
'media-toggle-closed-captions-button',
'media-slider',
'media-sliderthumb',
'media-volume-slider-container',
'media-volume-slider',
'media-volume-sliderthumb',
'media-controls-background',
'media-controls-fullscreen-background',
'media-current-time-display',
'media-time-remaining-display',
'menulist',
'menulist-button',
'menulist-text',
'menulist-textfield',
'meter',
'progress-bar',
'progress-bar-value',
'slider-horizontal',
'slider-vertical',
'sliderthumb-horizontal',
'sliderthumb-vertical',
'caret',
'searchfield',
'searchfield-cancel-button',
'textfield',
'textarea']},


'-webkit-border-after':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'-webkit-border-after-style':
{values:['hidden','inset','groove','outset','ridge','dotted','dashed','solid','double']},
'-webkit-border-after-width':{values:['medium','thick','thin']},
'-webkit-border-before':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'-webkit-border-before-style':
{values:['hidden','inset','groove','outset','ridge','dotted','dashed','solid','double']},
'-webkit-border-before-width':{values:['medium','thick','thin']},
'-webkit-border-end':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'-webkit-border-end-style':
{values:['hidden','inset','groove','outset','ridge','dotted','dashed','solid','double']},
'-webkit-border-end-width':{values:['medium','thick','thin']},
'-webkit-border-start':{
values:[
'hidden','inset','groove','outset','ridge','dotted','dashed','solid','double','medium','thick','thin']},


'-webkit-border-start-style':
{values:['hidden','inset','groove','outset','ridge','dotted','dashed','solid','double']},
'-webkit-border-start-width':{values:['medium','thick','thin']},
'-webkit-box-pack':{values:['center','justify','start','end']},
'-webkit-logical-height':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'-webkit-logical-width':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'-webkit-margin-collapse':{values:['collapse','separate','discard']},
'-webkit-mask-box-image':{values:['repeat','stretch','space','round']},
'-webkit-mask-box-image-repeat':{values:['repeat','stretch','space','round']},
'-webkit-mask-clip':{values:['text','border','border-box','content','content-box','padding','padding-box']},
'-webkit-mask-composite':{
values:[
'clear','copy','source-over','source-in','source-out','source-atop','destination-over','destination-in',
'destination-out','destination-atop','xor','plus-lighter']},


'-webkit-mask-origin':{values:['border','border-box','content','content-box','padding','padding-box']},
'-webkit-mask-position':{values:['top','bottom','left','right','center']},
'-webkit-mask-position-x':{values:['left','right','center']},
'-webkit-mask-position-y':{values:['top','bottom','center']},
'-webkit-mask-repeat':{values:['repeat','repeat-x','repeat-y','no-repeat','space','round']},
'-webkit-mask-size':{values:['contain','cover']},
'-webkit-max-logical-height':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'-webkit-max-logical-width':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'-webkit-min-logical-height':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'-webkit-min-logical-width':{values:['-webkit-fill-available','min-content','max-content','fit-content']},
'-webkit-perspective-origin-x':{values:['left','right','center']},
'-webkit-perspective-origin-y':{values:['top','bottom','center']},
'-webkit-print-color-adjust':{values:['economy','exact']},
'-webkit-rtl-ordering':{values:['logical','visual']},
'-webkit-ruby-position':{values:['after','before']},
'-webkit-text-decorations-in-effect':{values:['blink','line-through','overline','underline']},
'-webkit-text-security':{values:['disc','circle','square']},
'-webkit-text-stroke':{values:['medium','thick','thin']},
'-webkit-text-stroke-width':{values:['medium','thick','thin']},
'-webkit-transform-origin-x':{values:['left','right','center']},
'-webkit-transform-origin-y':{values:['top','bottom','center']},
'-webkit-user-drag':{values:['element']},
'width':{values:['-webkit-fill-available','min-content','max-content','fit-content']}};



SDK.CSSMetadata.Weight={
'align-content':57,
'align-items':129,
'align-self':55,
'animation':175,
'animation-delay':114,
'animation-direction':113,
'animation-duration':137,
'animation-fill-mode':132,
'animation-iteration-count':124,
'animation-name':139,
'animation-play-state':104,
'animation-timing-function':141,
'backface-visibility':123,
'background':260,
'background-attachment':119,
'background-clip':165,
'background-color':259,
'background-image':246,
'background-origin':107,
'background-position':237,
'background-position-x':108,
'background-position-y':93,
'background-repeat':234,
'background-size':203,
'border':263,
'border-bottom':233,
'border-bottom-color':190,
'border-bottom-left-radius':186,
'border-bottom-right-radius':185,
'border-bottom-style':150,
'border-bottom-width':179,
'border-collapse':209,
'border-color':226,
'border-image':89,
'border-image-outset':50,
'border-image-repeat':49,
'border-image-slice':58,
'border-image-source':32,
'border-image-width':52,
'border-left':221,
'border-left-color':174,
'border-left-style':142,
'border-left-width':172,
'border-radius':224,
'border-right':223,
'border-right-color':182,
'border-right-style':130,
'border-right-width':178,
'border-spacing':198,
'border-style':206,
'border-top':231,
'border-top-color':192,
'border-top-left-radius':187,
'border-top-right-radius':189,
'border-top-style':152,
'border-top-width':180,
'border-width':214,
'bottom':227,
'box-shadow':213,
'box-sizing':216,
'caption-side':96,
'clear':229,
'clip':173,
'clip-rule':5,
'color':256,
'content':219,
'counter-increment':111,
'counter-reset':110,
'cursor':250,
'direction':176,
'display':262,
'empty-cells':99,
'fill':140,
'fill-opacity':82,
'fill-rule':22,
'filter':160,
'flex':133,
'flex-basis':66,
'flex-direction':85,
'flex-flow':94,
'flex-grow':112,
'flex-shrink':61,
'flex-wrap':68,
'float':252,
'font':211,
'font-family':254,
'font-kerning':18,
'font-size':264,
'font-stretch':77,
'font-style':220,
'font-variant':161,
'font-weight':257,
'height':266,
'image-rendering':90,
'justify-content':127,
'left':248,
'letter-spacing':188,
'line-height':244,
'list-style':215,
'list-style-image':145,
'list-style-position':149,
'list-style-type':199,
'margin':267,
'margin-bottom':241,
'margin-left':243,
'margin-right':238,
'margin-top':253,
'mask':20,
'max-height':205,
'max-width':225,
'min-height':217,
'min-width':218,
'object-fit':33,
'opacity':251,
'order':117,
'orphans':146,
'outline':222,
'outline-color':153,
'outline-offset':147,
'outline-style':151,
'outline-width':148,
'overflow':255,
'overflow-wrap':105,
'overflow-x':184,
'overflow-y':196,
'padding':265,
'padding-bottom':230,
'padding-left':235,
'padding-right':232,
'padding-top':240,
'page':8,
'page-break-after':120,
'page-break-before':69,
'page-break-inside':121,
'perspective':92,
'perspective-origin':103,
'pointer-events':183,
'position':261,
'quotes':158,
'resize':168,
'right':245,
'shape-rendering':38,
'size':64,
'speak':118,
'src':170,
'stop-color':42,
'stop-opacity':31,
'stroke':98,
'stroke-dasharray':36,
'stroke-dashoffset':3,
'stroke-linecap':30,
'stroke-linejoin':21,
'stroke-miterlimit':12,
'stroke-opacity':34,
'stroke-width':87,
'table-layout':171,
'tab-size':46,
'text-align':260,
'text-anchor':35,
'text-decoration':247,
'text-indent':207,
'text-overflow':204,
'text-rendering':155,
'text-shadow':208,
'text-transform':202,
'top':258,
'touch-action':80,
'transform':181,
'transform-origin':162,
'transform-style':86,
'transition':193,
'transition-delay':134,
'transition-duration':135,
'transition-property':131,
'transition-timing-function':122,
'unicode-bidi':156,
'unicode-range':136,
'vertical-align':236,
'visibility':242,
'-webkit-appearance':191,
'-webkit-backface-visibility':154,
'-webkit-background-clip':164,
'-webkit-background-origin':40,
'-webkit-background-size':163,
'-webkit-border-end':9,
'-webkit-border-horizontal-spacing':81,
'-webkit-border-image':75,
'-webkit-border-radius':212,
'-webkit-border-start':10,
'-webkit-border-start-color':16,
'-webkit-border-start-width':13,
'-webkit-border-vertical-spacing':43,
'-webkit-box-align':101,
'-webkit-box-direction':51,
'-webkit-box-flex':128,
'-webkit-box-ordinal-group':91,
'-webkit-box-orient':144,
'-webkit-box-pack':106,
'-webkit-box-reflect':39,
'-webkit-box-shadow':210,
'-webkit-column-break-inside':60,
'-webkit-column-count':84,
'-webkit-column-gap':76,
'-webkit-column-rule':25,
'-webkit-column-rule-color':23,
'-webkit-columns':44,
'-webkit-column-span':29,
'-webkit-column-width':47,
'-webkit-filter':159,
'-webkit-font-feature-settings':59,
'-webkit-font-smoothing':177,
'-webkit-highlight':1,
'-webkit-line-break':45,
'-webkit-line-clamp':126,
'-webkit-margin-after':67,
'-webkit-margin-before':70,
'-webkit-margin-collapse':14,
'-webkit-margin-end':65,
'-webkit-margin-start':100,
'-webkit-margin-top-collapse':78,
'-webkit-mask':19,
'-webkit-mask-box-image':72,
'-webkit-mask-image':88,
'-webkit-mask-position':54,
'-webkit-mask-repeat':63,
'-webkit-mask-size':79,
'-webkit-padding-after':15,
'-webkit-padding-before':28,
'-webkit-padding-end':48,
'-webkit-padding-start':73,
'-webkit-print-color-adjust':83,
'-webkit-rtl-ordering':7,
'-webkit-tap-highlight-color':169,
'-webkit-text-emphasis-color':11,
'-webkit-text-fill-color':71,
'-webkit-text-security':17,
'-webkit-text-stroke':56,
'-webkit-text-stroke-color':37,
'-webkit-text-stroke-width':53,
'-webkit-user-drag':95,
'-webkit-user-modify':62,
'-webkit-user-select':194,
'-webkit-writing-mode':4,
'white-space':228,
'widows':115,
'width':268,
'will-change':74,
'word-break':166,
'word-spacing':157,
'word-wrap':197,
'writing-mode':41,
'z-index':239,
'zoom':200};


},{}],156:[function(require,module,exports){






SDK.CSSProperty=class{












constructor(ownerStyle,index,name,value,important,disabled,parsedOk,implicit,text,range){
this.ownerStyle=ownerStyle;
this.index=index;
this.name=name;
this.value=value;
this.important=important;
this.disabled=disabled;
this.parsedOk=parsedOk;
this.implicit=implicit;
this.text=text;
this.range=range?TextUtils.TextRange.fromObject(range):null;
this._active=true;
this._nameRange=null;
this._valueRange=null;
}







static parsePayload(ownerStyle,index,payload){





const result=new SDK.CSSProperty(
ownerStyle,index,payload.name,payload.value,payload.important||false,payload.disabled||false,
'parsedOk'in payload?!!payload.parsedOk:true,!!payload.implicit,payload.text,payload.range);
return result;
}

_ensureRanges(){
if(this._nameRange&&this._valueRange)
return;
const range=this.range;
const text=this.text?new TextUtils.Text(this.text):null;
if(!range||!text)
return;

const nameIndex=text.value().indexOf(this.name);
const valueIndex=text.value().lastIndexOf(this.value);
if(nameIndex===-1||valueIndex===-1||nameIndex>valueIndex)
return;

const nameSourceRange=new TextUtils.SourceRange(nameIndex,this.name.length);
const valueSourceRange=new TextUtils.SourceRange(valueIndex,this.value.length);

this._nameRange=rebase(text.toTextRange(nameSourceRange),range.startLine,range.startColumn);
this._valueRange=rebase(text.toTextRange(valueSourceRange),range.startLine,range.startColumn);







function rebase(oneLineRange,lineOffset,columnOffset){
if(oneLineRange.startLine===0){
oneLineRange.startColumn+=columnOffset;
oneLineRange.endColumn+=columnOffset;
}
oneLineRange.startLine+=lineOffset;
oneLineRange.endLine+=lineOffset;
return oneLineRange;
}
}




nameRange(){
this._ensureRanges();
return this._nameRange;
}




valueRange(){
this._ensureRanges();
return this._valueRange;
}




rebase(edit){
if(this.ownerStyle.styleSheetId!==edit.styleSheetId)
return;
if(this.range)
this.range=this.range.rebaseAfterTextEdit(edit.oldRange,edit.newRange);
}




setActive(active){
this._active=active;
}

get propertyText(){
if(this.text!==undefined)
return this.text;

if(this.name==='')
return'';
return this.name+': '+this.value+(this.important?' !important':'')+';';
}




activeInStyle(){
return this._active;
}







setText(propertyText,majorChange,overwrite){
if(!this.ownerStyle)
return Promise.reject(new Error('No ownerStyle for property'));

if(!this.ownerStyle.styleSheetId)
return Promise.reject(new Error('No owner style id'));

if(!this.range||!this.ownerStyle.range)
return Promise.reject(new Error('Style not editable'));

if(majorChange)
Host.userMetrics.actionTaken(Host.UserMetrics.Action.StyleRuleEdited);

if(overwrite&&propertyText===this.propertyText){
this.ownerStyle.cssModel().domModel().markUndoableState(!majorChange);
return Promise.resolve(true);
}

const range=this.range.relativeTo(this.ownerStyle.range.startLine,this.ownerStyle.range.startColumn);
const indentation=this.ownerStyle.cssText?this._detectIndentation(this.ownerStyle.cssText):
Common.moduleSetting('textEditorIndent').get();
const endIndentation=this.ownerStyle.cssText?indentation.substring(0,this.ownerStyle.range.endColumn):'';
const text=new TextUtils.Text(this.ownerStyle.cssText||'');
const newStyleText=text.replaceRange(range,String.sprintf(';%s;',propertyText));

return self.runtime.extension(TextUtils.TokenizerFactory).
instance().
then(this._formatStyle.bind(this,newStyleText,indentation,endIndentation)).
then(setStyleText.bind(this));






function setStyleText(styleText){
return this.ownerStyle.setText(styleText,majorChange);
}
}








_formatStyle(styleText,indentation,endIndentation,tokenizerFactory){
if(indentation)
indentation='\n'+indentation;
let result='';
let propertyText;
let insideProperty=false;
const tokenize=tokenizerFactory.createTokenizer('text/css');

tokenize('*{'+styleText+'}',processToken);
if(insideProperty)
result+=propertyText;
result=result.substring(2,result.length-1).trimRight();
return result+(indentation?'\n'+endIndentation:'');







function processToken(token,tokenType,column,newColumn){
if(!insideProperty){
const disabledProperty=tokenType&&tokenType.includes('css-comment')&&isDisabledProperty(token);
const isPropertyStart=tokenType&&(
tokenType.includes('css-string')||tokenType.includes('css-meta')||tokenType.includes('css-property')||
tokenType.includes('css-variable-2'));
if(disabledProperty){
result=result.trimRight()+indentation+token;
}else if(isPropertyStart){
insideProperty=true;
propertyText=token;
}else if(token!==';'){
result+=token;
}
return;
}

if(token==='}'||token===';'){
result=result.trimRight()+indentation+propertyText.trim()+';';
insideProperty=false;
if(token==='}')
result+='}';
}else{
propertyText+=token;
}
}





function isDisabledProperty(text){
const colon=text.indexOf(':');
if(colon===-1)
return false;
const propertyName=text.substring(2,colon).trim();
return SDK.cssMetadata().isCSSPropertyName(propertyName);
}
}





_detectIndentation(text){
const lines=text.split('\n');
if(lines.length<2)
return'';
return TextUtils.TextUtils.lineIndent(lines[1]);
}







setValue(newValue,majorChange,overwrite,userCallback){
const text=this.name+': '+newValue+(this.important?' !important':'')+';';
this.setText(text,majorChange,overwrite).then(userCallback);
}





setDisabled(disabled){
if(!this.ownerStyle)
return Promise.resolve(false);
if(disabled===this.disabled)
return Promise.resolve(true);
const propertyText=this.text.trim();
const text=disabled?'/* '+propertyText+' */':this.text.substring(2,propertyText.length-2).trim();
return this.setText(text,true,true);
}};


},{}],157:[function(require,module,exports){






SDK.CSSValue=class{



constructor(payload){
this.text=payload.text;
if(payload.range)
this.range=TextUtils.TextRange.fromObject(payload.range);
}




rebase(edit){
if(!this.range)
return;
this.range=this.range.rebaseAfterTextEdit(edit.oldRange,edit.newRange);
}};





SDK.CSSRule=class{




constructor(cssModel,payload){
this._cssModel=cssModel;
this.styleSheetId=payload.styleSheetId;

if(this.styleSheetId){
const styleSheetHeader=cssModel.styleSheetHeaderForId(this.styleSheetId);
this.sourceURL=styleSheetHeader.sourceURL;
}
this.origin=payload.origin;
this.style=new SDK.CSSStyleDeclaration(this._cssModel,this,payload.style,SDK.CSSStyleDeclaration.Type.Regular);
}




rebase(edit){
if(this.styleSheetId!==edit.styleSheetId)
return;
this.style.rebase(edit);
}




resourceURL(){
if(!this.styleSheetId)
return'';
const styleSheetHeader=this._cssModel.styleSheetHeaderForId(this.styleSheetId);
return styleSheetHeader.resourceURL();
}




isUserAgent(){
return this.origin===Protocol.CSS.StyleSheetOrigin.UserAgent;
}




isInjected(){
return this.origin===Protocol.CSS.StyleSheetOrigin.Injected;
}




isViaInspector(){
return this.origin===Protocol.CSS.StyleSheetOrigin.Inspector;
}




isRegular(){
return this.origin===Protocol.CSS.StyleSheetOrigin.Regular;
}




cssModel(){
return this._cssModel;
}};





SDK.CSSStyleRule=class extends SDK.CSSRule{





constructor(cssModel,payload,wasUsed){
super(cssModel,payload);

this._reinitializeSelectors(payload.selectorList);
this.media=payload.media?SDK.CSSMedia.parseMediaArrayPayload(cssModel,payload.media):[];
this.wasUsed=wasUsed||false;
}






static createDummyRule(cssModel,selectorText){
const dummyPayload={
selectorList:{
selectors:[{text:selectorText}]},

style:{styleSheetId:'0',range:new TextUtils.TextRange(0,0,0,0),shorthandEntries:[],cssProperties:[]}};

return new SDK.CSSStyleRule(cssModel,dummyPayload);
}




_reinitializeSelectors(selectorList){

this.selectors=[];
for(let i=0;i<selectorList.selectors.length;++i)
this.selectors.push(new SDK.CSSValue(selectorList.selectors[i]));
}





setSelectorText(newSelector){
const styleSheetId=this.styleSheetId;
if(!styleSheetId)
throw'No rule stylesheet id';
const range=this.selectorRange();
if(!range)
throw'Rule selector is not editable';
return this._cssModel.setSelectorText(styleSheetId,range,newSelector);
}




selectorText(){
return this.selectors.select('text').join(', ');
}




selectorRange(){
const firstRange=this.selectors[0].range;
if(!firstRange)
return null;
const lastRange=this.selectors.peekLast().range;
return new TextUtils.TextRange(
firstRange.startLine,firstRange.startColumn,lastRange.endLine,lastRange.endColumn);
}





lineNumberInSource(selectorIndex){
const selector=this.selectors[selectorIndex];
if(!selector||!selector.range||!this.styleSheetId)
return 0;
const styleSheetHeader=this._cssModel.styleSheetHeaderForId(this.styleSheetId);
return styleSheetHeader.lineNumberInSource(selector.range.startLine);
}





columnNumberInSource(selectorIndex){
const selector=this.selectors[selectorIndex];
if(!selector||!selector.range||!this.styleSheetId)
return undefined;
const styleSheetHeader=this._cssModel.styleSheetHeaderForId(this.styleSheetId);
console.assert(styleSheetHeader);
return styleSheetHeader.columnNumberInSource(selector.range.startLine,selector.range.startColumn);
}





rebase(edit){
if(this.styleSheetId!==edit.styleSheetId)
return;
if(this.selectorRange().equal(edit.oldRange)){
this._reinitializeSelectors(edit.payload);
}else{
for(let i=0;i<this.selectors.length;++i)
this.selectors[i].rebase(edit);
}
for(const media of this.media)
media.rebase(edit);

super.rebase(edit);
}};






SDK.CSSKeyframesRule=class{




constructor(cssModel,payload){
this._cssModel=cssModel;
this._animationName=new SDK.CSSValue(payload.animationName);
this._keyframes=payload.keyframes.map(keyframeRule=>new SDK.CSSKeyframeRule(cssModel,keyframeRule));
}




name(){
return this._animationName;
}




keyframes(){
return this._keyframes;
}};





SDK.CSSKeyframeRule=class extends SDK.CSSRule{




constructor(cssModel,payload){
super(cssModel,payload);
this._reinitializeKey(payload.keyText);
}




key(){
return this._keyText;
}




_reinitializeKey(payload){
this._keyText=new SDK.CSSValue(payload);
}





rebase(edit){
if(this.styleSheetId!==edit.styleSheetId||!this._keyText.range)
return;
if(edit.oldRange.equal(this._keyText.range))
this._reinitializeKey(edit.payload);else

this._keyText.rebase(edit);

super.rebase(edit);
}





setKeyText(newKeyText){
const styleSheetId=this.styleSheetId;
if(!styleSheetId)
throw'No rule stylesheet id';
const range=this._keyText.range;
if(!range)
throw'Keyframe key is not editable';
return this._cssModel.setKeyframeKey(styleSheetId,range,newKeyText);
}};


},{}],158:[function(require,module,exports){



SDK.CSSStyleDeclaration=class{






constructor(cssModel,parentRule,payload,type){
this._cssModel=cssModel;
this.parentRule=parentRule;

this._allProperties;

this.styleSheetId;

this.range;

this.cssText;

this._shorthandValues;

this._shorthandIsImportant;

this._activePropertyMap;

this._leadingProperties;
this._reinitialize(payload);
this.type=type;
}




rebase(edit){
if(this.styleSheetId!==edit.styleSheetId||!this.range)
return;
if(edit.oldRange.equal(this.range)){
this._reinitialize(edit.payload);
}else{
this.range=this.range.rebaseAfterTextEdit(edit.oldRange,edit.newRange);
for(let i=0;i<this._allProperties.length;++i)
this._allProperties[i].rebase(edit);
}
}




_reinitialize(payload){
this.styleSheetId=payload.styleSheetId;
this.range=payload.range?TextUtils.TextRange.fromObject(payload.range):null;

const shorthandEntries=payload.shorthandEntries;
this._shorthandValues=new Map();
this._shorthandIsImportant=new Set();
for(let i=0;i<shorthandEntries.length;++i){
this._shorthandValues.set(shorthandEntries[i].name,shorthandEntries[i].value);
if(shorthandEntries[i].important)
this._shorthandIsImportant.add(shorthandEntries[i].name);
}

this._allProperties=[];

if(payload.cssText&&this.range){
const cssText=new TextUtils.Text(payload.cssText);
let start={line:this.range.startLine,column:this.range.startColumn};
for(const cssProperty of payload.cssProperties){
const range=cssProperty.range;
if(range){
parseUnusedText.call(this,cssText,start.line,start.column,range.startLine,range.startColumn);
start={line:range.endLine,column:range.endColumn};
}
this._allProperties.push(SDK.CSSProperty.parsePayload(this,this._allProperties.length,cssProperty));
}
parseUnusedText.call(this,cssText,start.line,start.column,this.range.endLine,this.range.endColumn);
}else{
for(const cssProperty of payload.cssProperties)
this._allProperties.push(SDK.CSSProperty.parsePayload(this,this._allProperties.length,cssProperty));
}

this._generateSyntheticPropertiesIfNeeded();
this._computeInactiveProperties();

this._activePropertyMap=new Map();
for(const property of this._allProperties){
if(!property.activeInStyle())
continue;
this._activePropertyMap.set(property.name,property);
}

this.cssText=payload.cssText;
this._leadingProperties=null;









function parseUnusedText(cssText,startLine,startColumn,endLine,endColumn){
const tr=new TextUtils.TextRange(startLine,startColumn,endLine,endColumn);
const missingText=cssText.extract(tr.relativeTo(this.range.startLine,this.range.startColumn));


const lines=missingText.split('\n');
let lineNumber=0;
let inComment=false;
for(const line of lines){
let column=0;
for(const property of line.split(';')){
const strippedProperty=stripComments(property,inComment);
const trimmedProperty=strippedProperty.text.trim();
inComment=strippedProperty.inComment;

if(trimmedProperty){
let name;
let value;
const colonIndex=trimmedProperty.indexOf(':');
if(colonIndex===-1){
name=trimmedProperty;
value='';
}else{
name=trimmedProperty.substring(0,colonIndex).trim();
value=trimmedProperty.substring(colonIndex+1).trim();
}
const range=new TextUtils.TextRange(lineNumber,column,lineNumber,column+property.length);
this._allProperties.push(new SDK.CSSProperty(
this,this._allProperties.length,name,value,false,false,false,false,property,
range.relativeFrom(startLine,startColumn)));
}
column+=property.length+1;
}
lineNumber++;
}
}






function stripComments(text,inComment){
let output='';
for(let i=0;i<text.length;i++){
if(!inComment&&text.substring(i,i+2)==='/*'){
inComment=true;
i++;
}else if(inComment&&text.substring(i,i+2)==='*/'){
inComment=false;
i++;
}else if(!inComment){
output+=text[i];
}
}
return{text:output,inComment};
}
}

_generateSyntheticPropertiesIfNeeded(){
if(this.range)
return;

if(!this._shorthandValues.size)
return;

const propertiesSet=new Set();
for(const property of this._allProperties)
propertiesSet.add(property.name);

const generatedProperties=[];

for(const property of this._allProperties){

const shorthands=SDK.cssMetadata().shorthands(property.name)||[];
for(const shorthand of shorthands){
if(propertiesSet.has(shorthand))
continue;
const shorthandValue=this._shorthandValues.get(shorthand);
if(!shorthandValue)
continue;


const shorthandImportance=!!this._shorthandIsImportant.has(shorthand);
const shorthandProperty=new SDK.CSSProperty(
this,this.allProperties().length,shorthand,shorthandValue,shorthandImportance,false,true,false);
generatedProperties.push(shorthandProperty);
propertiesSet.add(shorthand);
}
}
this._allProperties=this._allProperties.concat(generatedProperties);
}




_computeLeadingProperties(){




function propertyHasRange(property){
return!!property.range;
}

if(this.range)
return this._allProperties.filter(propertyHasRange);

const leadingProperties=[];
for(const property of this._allProperties){
const shorthands=SDK.cssMetadata().shorthands(property.name)||[];
let belongToAnyShorthand=false;
for(const shorthand of shorthands){
if(this._shorthandValues.get(shorthand)){
belongToAnyShorthand=true;
break;
}
}
if(!belongToAnyShorthand)
leadingProperties.push(property);
}

return leadingProperties;
}




leadingProperties(){
if(!this._leadingProperties)
this._leadingProperties=this._computeLeadingProperties();
return this._leadingProperties;
}




target(){
return this._cssModel.target();
}




cssModel(){
return this._cssModel;
}

_computeInactiveProperties(){
const activeProperties={};
for(let i=0;i<this._allProperties.length;++i){
const property=this._allProperties[i];
if(property.disabled||!property.parsedOk){
property.setActive(false);
continue;
}
const canonicalName=SDK.cssMetadata().canonicalPropertyName(property.name);
const activeProperty=activeProperties[canonicalName];
if(!activeProperty){
activeProperties[canonicalName]=property;
}else if(!activeProperty.important||property.important){
activeProperty.setActive(false);
activeProperties[canonicalName]=property;
}else{
property.setActive(false);
}
}
}




allProperties(){
return this._allProperties;
}





getPropertyValue(name){
const property=this._activePropertyMap.get(name);
return property?property.value:'';
}





isPropertyImplicit(name){
const property=this._activePropertyMap.get(name);
return property?property.implicit:false;
}





longhandProperties(name){
const longhands=SDK.cssMetadata().longhands(name);
const result=[];
for(let i=0;longhands&&i<longhands.length;++i){
const property=this._activePropertyMap.get(longhands[i]);
if(property)
result.push(property);
}
return result;
}





propertyAt(index){
return index<this.allProperties().length?this.allProperties()[index]:null;
}




pastLastSourcePropertyIndex(){
for(let i=this.allProperties().length-1;i>=0;--i){
if(this.allProperties()[i].range)
return i+1;
}
return 0;
}





_insertionRange(index){
const property=this.propertyAt(index);
return property&&property.range?property.range.collapseToStart():this.range.collapseToEnd();
}





newBlankProperty(index){
index=typeof index==='undefined'?this.pastLastSourcePropertyIndex():index;
const property=
new SDK.CSSProperty(this,index,'','',false,false,true,false,'',this._insertionRange(index));
return property;
}






setText(text,majorChange){
if(!this.range||!this.styleSheetId)
return Promise.resolve(false);
return this._cssModel.setStyleText(this.styleSheetId,this.range,text,majorChange);
}







insertPropertyAt(index,name,value,userCallback){
this.newBlankProperty(index).setText(name+': '+value+';',false,true).then(userCallback);
}






appendProperty(name,value,userCallback){
this.insertPropertyAt(this.allProperties().length,name,value,userCallback);
}};



SDK.CSSStyleDeclaration.Type={
Regular:'Regular',
Inline:'Inline',
Attributes:'Attributes'};


},{}],159:[function(require,module,exports){







TextUtils.Text=class{



constructor(value){
this._value=value;
}




lineEndings(){
if(!this._lineEndings)
this._lineEndings=this._value.computeLineEndings();
return this._lineEndings;
}




value(){
return this._value;
}




lineCount(){
const lineEndings=this.lineEndings();
return lineEndings.length;
}






offsetFromPosition(lineNumber,columnNumber){
return(lineNumber?this.lineEndings()[lineNumber-1]+1:0)+columnNumber;
}





positionFromOffset(offset){
const lineEndings=this.lineEndings();
const lineNumber=lineEndings.lowerBound(offset);
return{lineNumber:lineNumber,columnNumber:offset-(lineNumber&&lineEndings[lineNumber-1]+1)};
}




lineAt(lineNumber){
const lineEndings=this.lineEndings();
const lineStart=lineNumber>0?lineEndings[lineNumber-1]+1:0;
const lineEnd=lineEndings[lineNumber];
let lineContent=this._value.substring(lineStart,lineEnd);
if(lineContent.length>0&&lineContent.charAt(lineContent.length-1)==='\r')
lineContent=lineContent.substring(0,lineContent.length-1);
return lineContent;
}





toSourceRange(range){
const start=this.offsetFromPosition(range.startLine,range.startColumn);
const end=this.offsetFromPosition(range.endLine,range.endColumn);
return new TextUtils.SourceRange(start,end-start);
}





toTextRange(sourceRange){
const cursor=new TextUtils.TextCursor(this.lineEndings());
const result=TextUtils.TextRange.createFromLocation(0,0);

cursor.resetTo(sourceRange.offset);
result.startLine=cursor.lineNumber();
result.startColumn=cursor.columnNumber();

cursor.advance(sourceRange.offset+sourceRange.length);
result.endLine=cursor.lineNumber();
result.endColumn=cursor.columnNumber();
return result;
}






replaceRange(range,replacement){
const sourceRange=this.toSourceRange(range);
return this._value.substring(0,sourceRange.offset)+replacement+
this._value.substring(sourceRange.offset+sourceRange.length);
}





extract(range){
const sourceRange=this.toSourceRange(range);
return this._value.substr(sourceRange.offset,sourceRange.length);
}};



TextUtils.Text.Position;




TextUtils.TextCursor=class{



constructor(lineEndings){
this._lineEndings=lineEndings;
this._offset=0;
this._lineNumber=0;
this._columnNumber=0;
}




advance(offset){
this._offset=offset;
while(this._lineNumber<this._lineEndings.length&&this._lineEndings[this._lineNumber]<this._offset)
++this._lineNumber;
this._columnNumber=this._lineNumber?this._offset-this._lineEndings[this._lineNumber-1]-1:this._offset;
}




offset(){
return this._offset;
}




resetTo(offset){
this._offset=offset;
this._lineNumber=this._lineEndings.lowerBound(offset);
this._columnNumber=this._lineNumber?this._offset-this._lineEndings[this._lineNumber-1]-1:this._offset;
}




lineNumber(){
return this._lineNumber;
}




columnNumber(){
return this._columnNumber;
}};


},{}],160:[function(require,module,exports){

































TextUtils.TextRange=class{






constructor(startLine,startColumn,endLine,endColumn){
this.startLine=startLine;
this.startColumn=startColumn;
this.endLine=endLine;
this.endColumn=endColumn;
}






static createFromLocation(line,column){
return new TextUtils.TextRange(line,column,line,column);
}





static fromObject(serializedTextRange){
return new TextUtils.TextRange(
serializedTextRange.startLine,serializedTextRange.startColumn,serializedTextRange.endLine,
serializedTextRange.endColumn);
}






static comparator(range1,range2){
return range1.compareTo(range2);
}






static fromEdit(oldRange,newText){
let endLine=oldRange.startLine;
let endColumn=oldRange.startColumn+newText.length;
const lineEndings=newText.computeLineEndings();
if(lineEndings.length>1){
endLine=oldRange.startLine+lineEndings.length-1;
const len=lineEndings.length;
endColumn=lineEndings[len-1]-lineEndings[len-2]-1;
}
return new TextUtils.TextRange(oldRange.startLine,oldRange.startColumn,endLine,endColumn);
}




isEmpty(){
return this.startLine===this.endLine&&this.startColumn===this.endColumn;
}





immediatelyPrecedes(range){
if(!range)
return false;
return this.endLine===range.startLine&&this.endColumn===range.startColumn;
}





immediatelyFollows(range){
if(!range)
return false;
return range.immediatelyPrecedes(this);
}





follows(range){
return range.endLine===this.startLine&&range.endColumn<=this.startColumn||range.endLine<this.startLine;
}




get linesCount(){
return this.endLine-this.startLine;
}




collapseToEnd(){
return new TextUtils.TextRange(this.endLine,this.endColumn,this.endLine,this.endColumn);
}




collapseToStart(){
return new TextUtils.TextRange(this.startLine,this.startColumn,this.startLine,this.startColumn);
}




normalize(){
if(this.startLine>this.endLine||this.startLine===this.endLine&&this.startColumn>this.endColumn)
return new TextUtils.TextRange(this.endLine,this.endColumn,this.startLine,this.startColumn);else

return this.clone();
}




clone(){
return new TextUtils.TextRange(this.startLine,this.startColumn,this.endLine,this.endColumn);
}




serializeToObject(){
const serializedTextRange={};
serializedTextRange.startLine=this.startLine;
serializedTextRange.startColumn=this.startColumn;
serializedTextRange.endLine=this.endLine;
serializedTextRange.endColumn=this.endColumn;
return serializedTextRange;
}





compareTo(other){
if(this.startLine>other.startLine)
return 1;
if(this.startLine<other.startLine)
return-1;
if(this.startColumn>other.startColumn)
return 1;
if(this.startColumn<other.startColumn)
return-1;
return 0;
}






compareToPosition(lineNumber,columnNumber){
if(lineNumber<this.startLine||lineNumber===this.startLine&&columnNumber<this.startColumn)
return-1;
if(lineNumber>this.endLine||lineNumber===this.endLine&&columnNumber>this.endColumn)
return 1;
return 0;
}





equal(other){
return this.startLine===other.startLine&&this.endLine===other.endLine&&
this.startColumn===other.startColumn&&this.endColumn===other.endColumn;
}






relativeTo(line,column){
const relative=this.clone();

if(this.startLine===line)
relative.startColumn-=column;
if(this.endLine===line)
relative.endColumn-=column;

relative.startLine-=line;
relative.endLine-=line;
return relative;
}






relativeFrom(line,column){
const relative=this.clone();

if(this.startLine===0)
relative.startColumn+=column;
if(this.endLine===0)
relative.endColumn+=column;

relative.startLine+=line;
relative.endLine+=line;
return relative;
}






rebaseAfterTextEdit(originalRange,editedRange){
console.assert(originalRange.startLine===editedRange.startLine);
console.assert(originalRange.startColumn===editedRange.startColumn);
const rebase=this.clone();
if(!this.follows(originalRange))
return rebase;
const lineDelta=editedRange.endLine-originalRange.endLine;
const columnDelta=editedRange.endColumn-originalRange.endColumn;
rebase.startLine+=lineDelta;
rebase.endLine+=lineDelta;
if(rebase.startLine===editedRange.endLine)
rebase.startColumn+=columnDelta;
if(rebase.endLine===editedRange.endLine)
rebase.endColumn+=columnDelta;
return rebase;
}





toString(){
return JSON.stringify(this);
}






containsLocation(lineNumber,columnNumber){
if(this.startLine===this.endLine)
return this.startLine===lineNumber&&this.startColumn<=columnNumber&&columnNumber<=this.endColumn;
if(this.startLine===lineNumber)
return this.startColumn<=columnNumber;
if(this.endLine===lineNumber)
return columnNumber<=this.endColumn;
return this.startLine<lineNumber&&lineNumber<this.endLine;
}};






TextUtils.SourceRange=class{




constructor(offset,length){
this.offset=offset;
this.length=length;
}};





TextUtils.SourceEdit=class{





constructor(sourceURL,oldRange,newText){
this.sourceURL=sourceURL;
this.oldRange=oldRange;
this.newText=newText;
}






static comparator(edit1,edit2){
return TextUtils.TextRange.comparator(edit1.oldRange,edit2.oldRange);
}




newRange(){
return TextUtils.TextRange.fromEdit(this.oldRange,this.newText);
}};


},{}],161:[function(require,module,exports){




'use strict';

exports.TYPES={
INTEGER:1,
NUMBER:2,
LENGTH:3,
PERCENT:4,
URL:5,
COLOR:6,
STRING:7,
ANGLE:8,
KEYWORD:9,
NULL_OR_EMPTY_STR:10};




var integerRegEx=/^[\-+]?[0-9]+$/;
var numberRegEx=/^[\-+]?[0-9]*\.[0-9]+$/;
var lengthRegEx=/^(0|[\-+]?[0-9]*\.?[0-9]+(in|cm|em|mm|pt|pc|px|ex|rem|vh|vw))$/;
var percentRegEx=/^[\-+]?[0-9]*\.?[0-9]+%$/;
var urlRegEx=/^url\(\s*([^\)]*)\s*\)$/;
var stringRegEx=/^(\"[^\"]*\"|\'[^\']*\')$/;
var colorRegEx1=/^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])?$/;
var colorRegEx2=/^rgb\(([^\)]*)\)$/;
var colorRegEx3=/^rgba\(([^\)]*)\)$/;
var angleRegEx=/^([\-+]?[0-9]*\.?[0-9]+)(deg|grad|rad)$/;



exports.valueType=function valueType(val){
if(val===''||val===null){
return exports.TYPES.NULL_OR_EMPTY_STR;
}
if(typeof val==='number'){
val=val.toString();
}

if(typeof val!=='string'){
return undefined;
}

if(integerRegEx.test(val)){
return exports.TYPES.INTEGER;
}
if(numberRegEx.test(val)){
return exports.TYPES.NUMBER;
}
if(lengthRegEx.test(val)){
return exports.TYPES.LENGTH;
}
if(percentRegEx.test(val)){
return exports.TYPES.PERCENT;
}
if(urlRegEx.test(val)){
return exports.TYPES.URL;
}
if(stringRegEx.test(val)){
return exports.TYPES.STRING;
}
if(angleRegEx.test(val)){
return exports.TYPES.ANGLE;
}
if(colorRegEx1.test(val)){
return exports.TYPES.COLOR;
}
var res=colorRegEx2.exec(val);
var parts;
if(res!==null){
parts=res[1].split(/\s*,\s*/);
if(parts.length!==3){
return undefined;
}
if(parts.every(percentRegEx.test.bind(percentRegEx))||parts.every(integerRegEx.test.bind(integerRegEx))){
return exports.TYPES.COLOR;
}
return undefined;
}
res=colorRegEx3.exec(val);
if(res!==null){
parts=res[1].split(/\s*,\s*/);
if(parts.length!==4){
return undefined;
}
if(parts.slice(0,3).every(percentRegEx.test.bind(percentRegEx))||parts.every(integerRegEx.test.bind(integerRegEx))){
if(numberRegEx.test(parts[3])){
return exports.TYPES.COLOR;
}
}
return undefined;
}


val=val.toLowerCase();
switch(val){
case'maroon':
case'red':
case'orange':
case'yellow':
case'olive':
case'purple':
case'fuchsia':
case'white':
case'lime':
case'green':
case'navy':
case'blue':
case'aqua':
case'teal':
case'black':
case'silver':
case'gray':

case'activeborder':
case'activecaption':
case'appworkspace':
case'background':
case'buttonface':
case'buttonhighlight':
case'buttonshadow':
case'buttontext':
case'captiontext':
case'graytext':
case'highlight':
case'highlighttext':
case'inactiveborder':
case'inactivecaption':
case'inactivecaptiontext':
case'infobackground':
case'infotext':
case'menu':
case'menutext':
case'scrollbar':
case'threeddarkshadow':
case'threedface':
case'threedhighlight':
case'threedlightshadow':
case'threedshadow':
case'window':
case'windowframe':
case'windowtext':
return exports.TYPES.COLOR;
default:
return exports.TYPES.KEYWORD;}

};

exports.parseInteger=function parseInteger(val){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.INTEGER){
return undefined;
}
return String(parseInt(val,10));
};

exports.parseNumber=function parseNumber(val){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.NUMBER&&type!==exports.TYPES.INTEGER){
return undefined;
}
return String(parseFloat(val));
};

exports.parseLength=function parseLength(val){
if(val===0||val==='0'){
return'0px';
}
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.LENGTH){
return undefined;
}
return val;
};

exports.parsePercent=function parsePercent(val){
if(val===0||val==='0'){
return'0%';
}
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.PERCENT){
return undefined;
}
return val;
};


exports.parseMeasurement=function parseMeasurement(val){
var length=exports.parseLength(val);
if(length!==undefined){
return length;
}
return exports.parsePercent(val);
};

exports.parseUrl=function parseUrl(val){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
var res=urlRegEx.exec(val);

if(!res){
return undefined;
}
var str=res[1];

if((str[0]==='"'||str[0]==="'")&&str[0]!==str[str.length-1]){
return undefined;
}
if(str[0]==='"'||str[0]==="'"){
str=str.substr(1,str.length-2);
}

var i;
for(i=0;i<str.length;i++){
switch(str[i]){
case'(':
case')':
case' ':
case'\t':
case'\n':
case"'":
case'"':
return undefined;
case'\\':
i++;
break;}

}

return'url('+str+')';
};

exports.parseString=function parseString(val){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.STRING){
return undefined;
}
var i;
for(i=1;i<val.length-1;i++){
switch(val[i]){
case val[0]:
return undefined;
case'\\':
i++;
while(i<val.length-1&&/[0-9A-Fa-f]/.test(val[i])){
i++;
}
break;}

}
if(i>=val.length){
return undefined;
}
return val;
};

exports.parseColor=function parseColor(val){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
var red,green,blue,alpha=1;
var parts;
var res=colorRegEx1.exec(val);

if(res){
var hex=val.substr(1);
if(hex.length===3){
hex=hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
}
red=parseInt(hex.substr(0,2),16);
green=parseInt(hex.substr(2,2),16);
blue=parseInt(hex.substr(4,2),16);
return'rgb('+red+', '+green+', '+blue+')';
}

res=colorRegEx2.exec(val);
if(res){
parts=res[1].split(/\s*,\s*/);
if(parts.length!==3){
return undefined;
}
if(parts.every(percentRegEx.test.bind(percentRegEx))){
red=Math.floor(parseFloat(parts[0].slice(0,-1))*255/100);
green=Math.floor(parseFloat(parts[1].slice(0,-1))*255/100);
blue=Math.floor(parseFloat(parts[2].slice(0,-1))*255/100);
}else if(parts.every(integerRegEx.test.bind(integerRegEx))){
red=parseInt(parts[0],10);
green=parseInt(parts[1],10);
blue=parseInt(parts[2],10);
}else{
return undefined;
}
red=Math.min(255,Math.max(0,red));
green=Math.min(255,Math.max(0,green));
blue=Math.min(255,Math.max(0,blue));
return'rgb('+red+', '+green+', '+blue+')';
}

res=colorRegEx3.exec(val);
if(res){
parts=res[1].split(/\s*,\s*/);
if(parts.length!==4){
return undefined;
}
if(parts.slice(0,3).every(percentRegEx.test.bind(percentRegEx))){
red=Math.floor(parseFloat(parts[0].slice(0,-1))*255/100);
green=Math.floor(parseFloat(parts[1].slice(0,-1))*255/100);
blue=Math.floor(parseFloat(parts[2].slice(0,-1))*255/100);
alpha=parseFloat(parts[3]);
}else if(parts.slice(0,3).every(integerRegEx.test.bind(integerRegEx))){
red=parseInt(parts[0],10);
green=parseInt(parts[1],10);
blue=parseInt(parts[2],10);
alpha=parseFloat(parts[3]);
}else{
return undefined;
}
if(isNaN(alpha)){
alpha=1;
}
red=Math.min(255,Math.max(0,red));
green=Math.min(255,Math.max(0,green));
blue=Math.min(255,Math.max(0,blue));
alpha=Math.min(1,Math.max(0,alpha));
if(alpha===1){
return'rgb('+red+', '+green+', '+blue+')';
}
return'rgba('+red+', '+green+', '+blue+', '+alpha+')';
}

if(type===exports.TYPES.COLOR){
return val;
}
return undefined;
};

exports.parseAngle=function parseAngle(val){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.ANGLE){
return undefined;
}
var res=angleRegEx.exec(val);
var flt=parseFloat(res[1]);
if(res[2]==='rad'){
flt*=180/Math.PI;
}else if(res[2]==='grad'){
flt*=360/400;
}

while(flt<0){
flt+=360;
}
while(flt>360){
flt-=360;
}
return flt+'deg';
};

exports.parseKeyword=function parseKeyword(val,valid_keywords){
var type=exports.valueType(val);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
return val;
}
if(type!==exports.TYPES.KEYWORD){
return undefined;
}
val=val.toString().toLowerCase();
var i;
for(i=0;i<valid_keywords.length;i++){
if(valid_keywords[i].toLowerCase()===val){
return valid_keywords[i];
}
}
return undefined;
};


var dashedToCamelCase=function(dashed){
var i;
var camel='';
var nextCap=false;
for(i=0;i<dashed.length;i++){
if(dashed[i]!=='-'){
camel+=nextCap?dashed[i].toUpperCase():dashed[i];
nextCap=false;
}else{
nextCap=true;
}
}
return camel;
};
exports.dashedToCamelCase=dashedToCamelCase;

var is_space=/\s/;
var opening_deliminators=['"','\'','('];
var closing_deliminators=['"','\'',')'];

var getParts=function(str){
var deliminator_stack=[];
var length=str.length;
var i;
var parts=[];
var current_part='';
var opening_index;
var closing_index;
for(i=0;i<length;i++){
opening_index=opening_deliminators.indexOf(str[i]);
closing_index=closing_deliminators.indexOf(str[i]);
if(is_space.test(str[i])){
if(deliminator_stack.length===0){
if(current_part!==''){
parts.push(current_part);
}
current_part='';
}else{
current_part+=str[i];
}
}else{
if(str[i]==='\\'){
i++;
current_part+=str[i];
}else{
current_part+=str[i];
if(closing_index!==-1&&closing_index===deliminator_stack[deliminator_stack.length-1]){
deliminator_stack.pop();
}else if(opening_index!==-1){
deliminator_stack.push(opening_index);
}
}
}
}
if(current_part!==''){
parts.push(current_part);
}
return parts;
};







exports.shorthandParser=function parse(v,shorthand_for){
var obj={};
var type=exports.valueType(v);
if(type===exports.TYPES.NULL_OR_EMPTY_STR){
Object.keys(shorthand_for).forEach(function(property){
obj[property]='';
});
return obj;
}

if(typeof v==='number'){
v=v.toString();
}

if(typeof v!=='string'){
return undefined;
}

if(v.toLowerCase()==='inherit'){
return{};
}
var parts=getParts(v);
var valid=true;
parts.forEach(function(part){
var part_valid=false;
Object.keys(shorthand_for).forEach(function(property){
if(shorthand_for[property].isValid(part)){
part_valid=true;
obj[property]=part;
}
});
valid=valid&&part_valid;
});
if(!valid){
return undefined;
}
return obj;
};

exports.shorthandSetter=function(property,shorthand_for){
return function(v){
var obj=exports.shorthandParser(v,shorthand_for);
if(obj===undefined){
return;
}

Object.keys(obj).forEach(function(subprop){


var camel=dashedToCamelCase(subprop);
this[camel]=obj[subprop];

obj[subprop]=this[camel];
this.removeProperty(subprop);

if(obj[subprop]!==''){
this._values[subprop]=obj[subprop];
}
},this);
Object.keys(shorthand_for).forEach(function(subprop){
if(!obj.hasOwnProperty(subprop)){
this.removeProperty(subprop);
delete this._values[subprop];
}
},this);




this.removeProperty(property);
var calculated=exports.shorthandGetter(property,shorthand_for).call(this);
if(calculated!==''){
this._setProperty(property,calculated);
}
};
};

exports.shorthandGetter=function(property,shorthand_for){
return function(){
if(this._values[property]!==undefined){
return this.getPropertyValue(property);
}
return Object.keys(shorthand_for).map(function(subprop){
return this.getPropertyValue(subprop);
},this).filter(function(value){
return value!=='';
}).join(' ');
};
};






exports.implicitSetter=function(property_before,property_after,isValid,parser){
property_after=property_after||'';
if(property_after!==''){
property_after='-'+property_after;
}
var part_names=["top","right","bottom","left"];

return function(v){
if(typeof v==='number'){
v=v.toString();
}
if(typeof v!=='string'){
return undefined;
}
var parts;
if(v.toLowerCase()==='inherit'||v===''){
parts=[v];
}else{
parts=getParts(v);
}
if(parts.length<1||parts.length>4){
return undefined;
}

if(!parts.every(isValid)){
return undefined;
}

parts=parts.map(function(part){
return parser(part);
});
this._setProperty(property_before+property_after,parts.join(' '));
if(parts.length===1){
parts[1]=parts[0];
}
if(parts.length===2){
parts[2]=parts[0];
}
if(parts.length===3){
parts[3]=parts[1];
}

for(var i=0;i<4;i++){
var property=property_before+"-"+part_names[i]+property_after;
this.removeProperty(property);
if(parts[i]!==''){
this._values[property]=parts[i];
}
}
return v;
};
};







exports.subImplicitSetter=function(prefix,part,isValid,parser){
var property=prefix+'-'+part;
var subparts=[prefix+"-top",prefix+"-right",prefix+"-bottom",prefix+"-left"];

return function(v){
if(typeof v==='number'){
v=v.toString();
}
if(typeof v!=='string'){
return undefined;
}
if(!isValid(v)){
return undefined;
}
v=parser(v);
this._setProperty(property,v);
var parts=[];
for(var i=0;i<4;i++){
if(this._values[subparts[i]]==null||this._values[subparts[i]]===''){
break;
}
parts.push(this._values[subparts[i]]);
}
if(parts.length===4){
for(i=0;i<4;i++){
this.removeProperty(subparts[i]);
this._values[subparts[i]]=parts[i];
}
this._setProperty(prefix,parts.join(" "));
}
return v;
};
};


var camel_to_dashed=/[A-Z]/g;

var first_segment=/^\([^\-]\)-/;

var vendor_prefixes=['o','moz','ms','webkit'];
exports.camelToDashed=function(camel_case){
var match;
var dashed=camel_case.replace(camel_to_dashed,'-$&').toLowerCase();
match=dashed.match(first_segment);
if(match&&vendor_prefixes.indexOf(match[1])!==-1){
dashed='-'+dashed;
}
return dashed;
};

},{}],162:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root,factory){

if(typeof exports==='object'&&typeof module==='object')
module.exports=factory();else
if(typeof define==='function'&&define.amd)
define([],factory);else

if(typeof exports==='object')
exports["esprima"]=factory();else

root["esprima"]=factory();
})(this,function(){
return function(modules){

var installedModules={};


function __webpack_require__(moduleId){



if(installedModules[moduleId])
return installedModules[moduleId].exports;


var module=installedModules[moduleId]={
exports:{},
id:moduleId,
loaded:false};



modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);


module.loaded=true;


return module.exports;
}



__webpack_require__.m=modules;


__webpack_require__.c=installedModules;


__webpack_require__.p="";


return __webpack_require__(0);
}(

[

function(module,exports,__webpack_require__){

"use strict";























Object.defineProperty(exports,"__esModule",{value:true});
var comment_handler_1=__webpack_require__(1);
var jsx_parser_1=__webpack_require__(3);
var parser_1=__webpack_require__(8);
var tokenizer_1=__webpack_require__(15);
function parse(code,options,delegate){
var commentHandler=null;
var proxyDelegate=function(node,metadata){
if(delegate){
delegate(node,metadata);
}
if(commentHandler){
commentHandler.visit(node,metadata);
}
};
var parserDelegate=typeof delegate==='function'?proxyDelegate:null;
var collectComment=false;
if(options){
collectComment=typeof options.comment==='boolean'&&options.comment;
var attachComment=typeof options.attachComment==='boolean'&&options.attachComment;
if(collectComment||attachComment){
commentHandler=new comment_handler_1.CommentHandler();
commentHandler.attach=attachComment;
options.comment=true;
parserDelegate=proxyDelegate;
}
}
var isModule=false;
if(options&&typeof options.sourceType==='string'){
isModule=options.sourceType==='module';
}
var parser;
if(options&&typeof options.jsx==='boolean'&&options.jsx){
parser=new jsx_parser_1.JSXParser(code,options,parserDelegate);
}else
{
parser=new parser_1.Parser(code,options,parserDelegate);
}
var program=isModule?parser.parseModule():parser.parseScript();
var ast=program;
if(collectComment&&commentHandler){
ast.comments=commentHandler.comments;
}
if(parser.config.tokens){
ast.tokens=parser.tokens;
}
if(parser.config.tolerant){
ast.errors=parser.errorHandler.errors;
}
return ast;
}
exports.parse=parse;
function parseModule(code,options,delegate){
var parsingOptions=options||{};
parsingOptions.sourceType='module';
return parse(code,parsingOptions,delegate);
}
exports.parseModule=parseModule;
function parseScript(code,options,delegate){
var parsingOptions=options||{};
parsingOptions.sourceType='script';
return parse(code,parsingOptions,delegate);
}
exports.parseScript=parseScript;
function tokenize(code,options,delegate){
var tokenizer=new tokenizer_1.Tokenizer(code,options);
var tokens;
tokens=[];
try{
while(true){
var token=tokenizer.getNextToken();
if(!token){
break;
}
if(delegate){
token=delegate(token);
}
tokens.push(token);
}
}
catch(e){
tokenizer.errorHandler.tolerate(e);
}
if(tokenizer.errorHandler.tolerant){
tokens.errors=tokenizer.errors();
}
return tokens;
}
exports.tokenize=tokenize;
var syntax_1=__webpack_require__(2);
exports.Syntax=syntax_1.Syntax;

exports.version='4.0.1';


},

function(module,exports,__webpack_require__){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
var syntax_1=__webpack_require__(2);
var CommentHandler=function(){
function CommentHandler(){
this.attach=false;
this.comments=[];
this.stack=[];
this.leading=[];
this.trailing=[];
}
CommentHandler.prototype.insertInnerComments=function(node,metadata){


if(node.type===syntax_1.Syntax.BlockStatement&&node.body.length===0){
var innerComments=[];
for(var i=this.leading.length-1;i>=0;--i){
var entry=this.leading[i];
if(metadata.end.offset>=entry.start){
innerComments.unshift(entry.comment);
this.leading.splice(i,1);
this.trailing.splice(i,1);
}
}
if(innerComments.length){
node.innerComments=innerComments;
}
}
};
CommentHandler.prototype.findTrailingComments=function(metadata){
var trailingComments=[];
if(this.trailing.length>0){
for(var i=this.trailing.length-1;i>=0;--i){
var entry_1=this.trailing[i];
if(entry_1.start>=metadata.end.offset){
trailingComments.unshift(entry_1.comment);
}
}
this.trailing.length=0;
return trailingComments;
}
var entry=this.stack[this.stack.length-1];
if(entry&&entry.node.trailingComments){
var firstComment=entry.node.trailingComments[0];
if(firstComment&&firstComment.range[0]>=metadata.end.offset){
trailingComments=entry.node.trailingComments;
delete entry.node.trailingComments;
}
}
return trailingComments;
};
CommentHandler.prototype.findLeadingComments=function(metadata){
var leadingComments=[];
var target;
while(this.stack.length>0){
var entry=this.stack[this.stack.length-1];
if(entry&&entry.start>=metadata.start.offset){
target=entry.node;
this.stack.pop();
}else
{
break;
}
}
if(target){
var count=target.leadingComments?target.leadingComments.length:0;
for(var i=count-1;i>=0;--i){
var comment=target.leadingComments[i];
if(comment.range[1]<=metadata.start.offset){
leadingComments.unshift(comment);
target.leadingComments.splice(i,1);
}
}
if(target.leadingComments&&target.leadingComments.length===0){
delete target.leadingComments;
}
return leadingComments;
}
for(var i=this.leading.length-1;i>=0;--i){
var entry=this.leading[i];
if(entry.start<=metadata.start.offset){
leadingComments.unshift(entry.comment);
this.leading.splice(i,1);
}
}
return leadingComments;
};
CommentHandler.prototype.visitNode=function(node,metadata){
if(node.type===syntax_1.Syntax.Program&&node.body.length>0){
return;
}
this.insertInnerComments(node,metadata);
var trailingComments=this.findTrailingComments(metadata);
var leadingComments=this.findLeadingComments(metadata);
if(leadingComments.length>0){
node.leadingComments=leadingComments;
}
if(trailingComments.length>0){
node.trailingComments=trailingComments;
}
this.stack.push({
node:node,
start:metadata.start.offset});

};
CommentHandler.prototype.visitComment=function(node,metadata){
var type=node.type[0]==='L'?'Line':'Block';
var comment={
type:type,
value:node.value};

if(node.range){
comment.range=node.range;
}
if(node.loc){
comment.loc=node.loc;
}
this.comments.push(comment);
if(this.attach){
var entry={
comment:{
type:type,
value:node.value,
range:[metadata.start.offset,metadata.end.offset]},

start:metadata.start.offset};

if(node.loc){
entry.comment.loc=node.loc;
}
node.type=type;
this.leading.push(entry);
this.trailing.push(entry);
}
};
CommentHandler.prototype.visit=function(node,metadata){
if(node.type==='LineComment'){
this.visitComment(node,metadata);
}else
if(node.type==='BlockComment'){
this.visitComment(node,metadata);
}else
if(this.attach){
this.visitNode(node,metadata);
}
};
return CommentHandler;
}();
exports.CommentHandler=CommentHandler;


},

function(module,exports){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
exports.Syntax={
AssignmentExpression:'AssignmentExpression',
AssignmentPattern:'AssignmentPattern',
ArrayExpression:'ArrayExpression',
ArrayPattern:'ArrayPattern',
ArrowFunctionExpression:'ArrowFunctionExpression',
AwaitExpression:'AwaitExpression',
BlockStatement:'BlockStatement',
BinaryExpression:'BinaryExpression',
BreakStatement:'BreakStatement',
CallExpression:'CallExpression',
CatchClause:'CatchClause',
ClassBody:'ClassBody',
ClassDeclaration:'ClassDeclaration',
ClassExpression:'ClassExpression',
ConditionalExpression:'ConditionalExpression',
ContinueStatement:'ContinueStatement',
DoWhileStatement:'DoWhileStatement',
DebuggerStatement:'DebuggerStatement',
EmptyStatement:'EmptyStatement',
ExportAllDeclaration:'ExportAllDeclaration',
ExportDefaultDeclaration:'ExportDefaultDeclaration',
ExportNamedDeclaration:'ExportNamedDeclaration',
ExportSpecifier:'ExportSpecifier',
ExpressionStatement:'ExpressionStatement',
ForStatement:'ForStatement',
ForOfStatement:'ForOfStatement',
ForInStatement:'ForInStatement',
FunctionDeclaration:'FunctionDeclaration',
FunctionExpression:'FunctionExpression',
Identifier:'Identifier',
IfStatement:'IfStatement',
ImportDeclaration:'ImportDeclaration',
ImportDefaultSpecifier:'ImportDefaultSpecifier',
ImportNamespaceSpecifier:'ImportNamespaceSpecifier',
ImportSpecifier:'ImportSpecifier',
Literal:'Literal',
LabeledStatement:'LabeledStatement',
LogicalExpression:'LogicalExpression',
MemberExpression:'MemberExpression',
MetaProperty:'MetaProperty',
MethodDefinition:'MethodDefinition',
NewExpression:'NewExpression',
ObjectExpression:'ObjectExpression',
ObjectPattern:'ObjectPattern',
Program:'Program',
Property:'Property',
RestElement:'RestElement',
ReturnStatement:'ReturnStatement',
SequenceExpression:'SequenceExpression',
SpreadElement:'SpreadElement',
Super:'Super',
SwitchCase:'SwitchCase',
SwitchStatement:'SwitchStatement',
TaggedTemplateExpression:'TaggedTemplateExpression',
TemplateElement:'TemplateElement',
TemplateLiteral:'TemplateLiteral',
ThisExpression:'ThisExpression',
ThrowStatement:'ThrowStatement',
TryStatement:'TryStatement',
UnaryExpression:'UnaryExpression',
UpdateExpression:'UpdateExpression',
VariableDeclaration:'VariableDeclaration',
VariableDeclarator:'VariableDeclarator',
WhileStatement:'WhileStatement',
WithStatement:'WithStatement',
YieldExpression:'YieldExpression'};



},

function(module,exports,__webpack_require__){

"use strict";

var __extends=this&&this.__extends||function(){
var extendStatics=Object.setPrototypeOf||
{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||
function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};
return function(d,b){
extendStatics(d,b);
function __(){this.constructor=d;}
d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());
};
}();
Object.defineProperty(exports,"__esModule",{value:true});
var character_1=__webpack_require__(4);
var JSXNode=__webpack_require__(5);
var jsx_syntax_1=__webpack_require__(6);
var Node=__webpack_require__(7);
var parser_1=__webpack_require__(8);
var token_1=__webpack_require__(13);
var xhtml_entities_1=__webpack_require__(14);
token_1.TokenName[100]='JSXIdentifier';
token_1.TokenName[101]='JSXText';

function getQualifiedElementName(elementName){
var qualifiedName;
switch(elementName.type){
case jsx_syntax_1.JSXSyntax.JSXIdentifier:
var id=elementName;
qualifiedName=id.name;
break;
case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
var ns=elementName;
qualifiedName=getQualifiedElementName(ns.namespace)+':'+
getQualifiedElementName(ns.name);
break;
case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
var expr=elementName;
qualifiedName=getQualifiedElementName(expr.object)+'.'+
getQualifiedElementName(expr.property);
break;

default:
break;}

return qualifiedName;
}
var JSXParser=function(_super){
__extends(JSXParser,_super);
function JSXParser(code,options,delegate){
return _super.call(this,code,options,delegate)||this;
}
JSXParser.prototype.parsePrimaryExpression=function(){
return this.match('<')?this.parseJSXRoot():_super.prototype.parsePrimaryExpression.call(this);
};
JSXParser.prototype.startJSX=function(){

this.scanner.index=this.startMarker.index;
this.scanner.lineNumber=this.startMarker.line;
this.scanner.lineStart=this.startMarker.index-this.startMarker.column;
};
JSXParser.prototype.finishJSX=function(){

this.nextToken();
};
JSXParser.prototype.reenterJSX=function(){
this.startJSX();
this.expectJSX('}');

if(this.config.tokens){
this.tokens.pop();
}
};
JSXParser.prototype.createJSXNode=function(){
this.collectComments();
return{
index:this.scanner.index,
line:this.scanner.lineNumber,
column:this.scanner.index-this.scanner.lineStart};

};
JSXParser.prototype.createJSXChildNode=function(){
return{
index:this.scanner.index,
line:this.scanner.lineNumber,
column:this.scanner.index-this.scanner.lineStart};

};
JSXParser.prototype.scanXHTMLEntity=function(quote){
var result='&';
var valid=true;
var terminated=false;
var numeric=false;
var hex=false;
while(!this.scanner.eof()&&valid&&!terminated){
var ch=this.scanner.source[this.scanner.index];
if(ch===quote){
break;
}
terminated=ch===';';
result+=ch;
++this.scanner.index;
if(!terminated){
switch(result.length){
case 2:

numeric=ch==='#';
break;
case 3:
if(numeric){

hex=ch==='x';
valid=hex||character_1.Character.isDecimalDigit(ch.charCodeAt(0));
numeric=numeric&&!hex;
}
break;
default:
valid=valid&&!(numeric&&!character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
valid=valid&&!(hex&&!character_1.Character.isHexDigit(ch.charCodeAt(0)));
break;}

}
}
if(valid&&terminated&&result.length>2){

var str=result.substr(1,result.length-2);
if(numeric&&str.length>1){
result=String.fromCharCode(parseInt(str.substr(1),10));
}else
if(hex&&str.length>2){
result=String.fromCharCode(parseInt('0'+str.substr(1),16));
}else
if(!numeric&&!hex&&xhtml_entities_1.XHTMLEntities[str]){
result=xhtml_entities_1.XHTMLEntities[str];
}
}
return result;
};

JSXParser.prototype.lexJSX=function(){
var cp=this.scanner.source.charCodeAt(this.scanner.index);

if(cp===60||cp===62||cp===47||cp===58||cp===61||cp===123||cp===125){
var value=this.scanner.source[this.scanner.index++];
return{
type:7,
value:value,
lineNumber:this.scanner.lineNumber,
lineStart:this.scanner.lineStart,
start:this.scanner.index-1,
end:this.scanner.index};

}

if(cp===34||cp===39){
var start=this.scanner.index;
var quote=this.scanner.source[this.scanner.index++];
var str='';
while(!this.scanner.eof()){
var ch=this.scanner.source[this.scanner.index++];
if(ch===quote){
break;
}else
if(ch==='&'){
str+=this.scanXHTMLEntity(quote);
}else
{
str+=ch;
}
}
return{
type:8,
value:str,
lineNumber:this.scanner.lineNumber,
lineStart:this.scanner.lineStart,
start:start,
end:this.scanner.index};

}

if(cp===46){
var n1=this.scanner.source.charCodeAt(this.scanner.index+1);
var n2=this.scanner.source.charCodeAt(this.scanner.index+2);
var value=n1===46&&n2===46?'...':'.';
var start=this.scanner.index;
this.scanner.index+=value.length;
return{
type:7,
value:value,
lineNumber:this.scanner.lineNumber,
lineStart:this.scanner.lineStart,
start:start,
end:this.scanner.index};

}

if(cp===96){

return{
type:10,
value:'',
lineNumber:this.scanner.lineNumber,
lineStart:this.scanner.lineStart,
start:this.scanner.index,
end:this.scanner.index};

}

if(character_1.Character.isIdentifierStart(cp)&&cp!==92){
var start=this.scanner.index;
++this.scanner.index;
while(!this.scanner.eof()){
var ch=this.scanner.source.charCodeAt(this.scanner.index);
if(character_1.Character.isIdentifierPart(ch)&&ch!==92){
++this.scanner.index;
}else
if(ch===45){

++this.scanner.index;
}else
{
break;
}
}
var id=this.scanner.source.slice(start,this.scanner.index);
return{
type:100,
value:id,
lineNumber:this.scanner.lineNumber,
lineStart:this.scanner.lineStart,
start:start,
end:this.scanner.index};

}
return this.scanner.lex();
};
JSXParser.prototype.nextJSXToken=function(){
this.collectComments();
this.startMarker.index=this.scanner.index;
this.startMarker.line=this.scanner.lineNumber;
this.startMarker.column=this.scanner.index-this.scanner.lineStart;
var token=this.lexJSX();
this.lastMarker.index=this.scanner.index;
this.lastMarker.line=this.scanner.lineNumber;
this.lastMarker.column=this.scanner.index-this.scanner.lineStart;
if(this.config.tokens){
this.tokens.push(this.convertToken(token));
}
return token;
};
JSXParser.prototype.nextJSXText=function(){
this.startMarker.index=this.scanner.index;
this.startMarker.line=this.scanner.lineNumber;
this.startMarker.column=this.scanner.index-this.scanner.lineStart;
var start=this.scanner.index;
var text='';
while(!this.scanner.eof()){
var ch=this.scanner.source[this.scanner.index];
if(ch==='{'||ch==='<'){
break;
}
++this.scanner.index;
text+=ch;
if(character_1.Character.isLineTerminator(ch.charCodeAt(0))){
++this.scanner.lineNumber;
if(ch==='\r'&&this.scanner.source[this.scanner.index]==='\n'){
++this.scanner.index;
}
this.scanner.lineStart=this.scanner.index;
}
}
this.lastMarker.index=this.scanner.index;
this.lastMarker.line=this.scanner.lineNumber;
this.lastMarker.column=this.scanner.index-this.scanner.lineStart;
var token={
type:101,
value:text,
lineNumber:this.scanner.lineNumber,
lineStart:this.scanner.lineStart,
start:start,
end:this.scanner.index};

if(text.length>0&&this.config.tokens){
this.tokens.push(this.convertToken(token));
}
return token;
};
JSXParser.prototype.peekJSXToken=function(){
var state=this.scanner.saveState();
this.scanner.scanComments();
var next=this.lexJSX();
this.scanner.restoreState(state);
return next;
};


JSXParser.prototype.expectJSX=function(value){
var token=this.nextJSXToken();
if(token.type!==7||token.value!==value){
this.throwUnexpectedToken(token);
}
};

JSXParser.prototype.matchJSX=function(value){
var next=this.peekJSXToken();
return next.type===7&&next.value===value;
};
JSXParser.prototype.parseJSXIdentifier=function(){
var node=this.createJSXNode();
var token=this.nextJSXToken();
if(token.type!==100){
this.throwUnexpectedToken(token);
}
return this.finalize(node,new JSXNode.JSXIdentifier(token.value));
};
JSXParser.prototype.parseJSXElementName=function(){
var node=this.createJSXNode();
var elementName=this.parseJSXIdentifier();
if(this.matchJSX(':')){
var namespace=elementName;
this.expectJSX(':');
var name_1=this.parseJSXIdentifier();
elementName=this.finalize(node,new JSXNode.JSXNamespacedName(namespace,name_1));
}else
if(this.matchJSX('.')){
while(this.matchJSX('.')){
var object=elementName;
this.expectJSX('.');
var property=this.parseJSXIdentifier();
elementName=this.finalize(node,new JSXNode.JSXMemberExpression(object,property));
}
}
return elementName;
};
JSXParser.prototype.parseJSXAttributeName=function(){
var node=this.createJSXNode();
var attributeName;
var identifier=this.parseJSXIdentifier();
if(this.matchJSX(':')){
var namespace=identifier;
this.expectJSX(':');
var name_2=this.parseJSXIdentifier();
attributeName=this.finalize(node,new JSXNode.JSXNamespacedName(namespace,name_2));
}else
{
attributeName=identifier;
}
return attributeName;
};
JSXParser.prototype.parseJSXStringLiteralAttribute=function(){
var node=this.createJSXNode();
var token=this.nextJSXToken();
if(token.type!==8){
this.throwUnexpectedToken(token);
}
var raw=this.getTokenRaw(token);
return this.finalize(node,new Node.Literal(token.value,raw));
};
JSXParser.prototype.parseJSXExpressionAttribute=function(){
var node=this.createJSXNode();
this.expectJSX('{');
this.finishJSX();
if(this.match('}')){
this.tolerateError('JSX attributes must only be assigned a non-empty expression');
}
var expression=this.parseAssignmentExpression();
this.reenterJSX();
return this.finalize(node,new JSXNode.JSXExpressionContainer(expression));
};
JSXParser.prototype.parseJSXAttributeValue=function(){
return this.matchJSX('{')?this.parseJSXExpressionAttribute():
this.matchJSX('<')?this.parseJSXElement():this.parseJSXStringLiteralAttribute();
};
JSXParser.prototype.parseJSXNameValueAttribute=function(){
var node=this.createJSXNode();
var name=this.parseJSXAttributeName();
var value=null;
if(this.matchJSX('=')){
this.expectJSX('=');
value=this.parseJSXAttributeValue();
}
return this.finalize(node,new JSXNode.JSXAttribute(name,value));
};
JSXParser.prototype.parseJSXSpreadAttribute=function(){
var node=this.createJSXNode();
this.expectJSX('{');
this.expectJSX('...');
this.finishJSX();
var argument=this.parseAssignmentExpression();
this.reenterJSX();
return this.finalize(node,new JSXNode.JSXSpreadAttribute(argument));
};
JSXParser.prototype.parseJSXAttributes=function(){
var attributes=[];
while(!this.matchJSX('/')&&!this.matchJSX('>')){
var attribute=this.matchJSX('{')?this.parseJSXSpreadAttribute():
this.parseJSXNameValueAttribute();
attributes.push(attribute);
}
return attributes;
};
JSXParser.prototype.parseJSXOpeningElement=function(){
var node=this.createJSXNode();
this.expectJSX('<');
var name=this.parseJSXElementName();
var attributes=this.parseJSXAttributes();
var selfClosing=this.matchJSX('/');
if(selfClosing){
this.expectJSX('/');
}
this.expectJSX('>');
return this.finalize(node,new JSXNode.JSXOpeningElement(name,selfClosing,attributes));
};
JSXParser.prototype.parseJSXBoundaryElement=function(){
var node=this.createJSXNode();
this.expectJSX('<');
if(this.matchJSX('/')){
this.expectJSX('/');
var name_3=this.parseJSXElementName();
this.expectJSX('>');
return this.finalize(node,new JSXNode.JSXClosingElement(name_3));
}
var name=this.parseJSXElementName();
var attributes=this.parseJSXAttributes();
var selfClosing=this.matchJSX('/');
if(selfClosing){
this.expectJSX('/');
}
this.expectJSX('>');
return this.finalize(node,new JSXNode.JSXOpeningElement(name,selfClosing,attributes));
};
JSXParser.prototype.parseJSXEmptyExpression=function(){
var node=this.createJSXChildNode();
this.collectComments();
this.lastMarker.index=this.scanner.index;
this.lastMarker.line=this.scanner.lineNumber;
this.lastMarker.column=this.scanner.index-this.scanner.lineStart;
return this.finalize(node,new JSXNode.JSXEmptyExpression());
};
JSXParser.prototype.parseJSXExpressionContainer=function(){
var node=this.createJSXNode();
this.expectJSX('{');
var expression;
if(this.matchJSX('}')){
expression=this.parseJSXEmptyExpression();
this.expectJSX('}');
}else
{
this.finishJSX();
expression=this.parseAssignmentExpression();
this.reenterJSX();
}
return this.finalize(node,new JSXNode.JSXExpressionContainer(expression));
};
JSXParser.prototype.parseJSXChildren=function(){
var children=[];
while(!this.scanner.eof()){
var node=this.createJSXChildNode();
var token=this.nextJSXText();
if(token.start<token.end){
var raw=this.getTokenRaw(token);
var child=this.finalize(node,new JSXNode.JSXText(token.value,raw));
children.push(child);
}
if(this.scanner.source[this.scanner.index]==='{'){
var container=this.parseJSXExpressionContainer();
children.push(container);
}else
{
break;
}
}
return children;
};
JSXParser.prototype.parseComplexJSXElement=function(el){
var stack=[];
while(!this.scanner.eof()){
el.children=el.children.concat(this.parseJSXChildren());
var node=this.createJSXChildNode();
var element=this.parseJSXBoundaryElement();
if(element.type===jsx_syntax_1.JSXSyntax.JSXOpeningElement){
var opening=element;
if(opening.selfClosing){
var child=this.finalize(node,new JSXNode.JSXElement(opening,[],null));
el.children.push(child);
}else
{
stack.push(el);
el={node:node,opening:opening,closing:null,children:[]};
}
}
if(element.type===jsx_syntax_1.JSXSyntax.JSXClosingElement){
el.closing=element;
var open_1=getQualifiedElementName(el.opening.name);
var close_1=getQualifiedElementName(el.closing.name);
if(open_1!==close_1){
this.tolerateError('Expected corresponding JSX closing tag for %0',open_1);
}
if(stack.length>0){
var child=this.finalize(el.node,new JSXNode.JSXElement(el.opening,el.children,el.closing));
el=stack[stack.length-1];
el.children.push(child);
stack.pop();
}else
{
break;
}
}
}
return el;
};
JSXParser.prototype.parseJSXElement=function(){
var node=this.createJSXNode();
var opening=this.parseJSXOpeningElement();
var children=[];
var closing=null;
if(!opening.selfClosing){
var el=this.parseComplexJSXElement({node:node,opening:opening,closing:closing,children:children});
children=el.children;
closing=el.closing;
}
return this.finalize(node,new JSXNode.JSXElement(opening,children,closing));
};
JSXParser.prototype.parseJSXRoot=function(){

if(this.config.tokens){
this.tokens.pop();
}
this.startJSX();
var element=this.parseJSXElement();
this.finishJSX();
return element;
};
JSXParser.prototype.isStartOfExpression=function(){
return _super.prototype.isStartOfExpression.call(this)||this.match('<');
};
return JSXParser;
}(parser_1.Parser);
exports.JSXParser=JSXParser;


},

function(module,exports){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});

var Regex={

NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,

NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};

exports.Character={

fromCodePoint:function(cp){
return cp<0x10000?String.fromCharCode(cp):
String.fromCharCode(0xD800+(cp-0x10000>>10))+
String.fromCharCode(0xDC00+(cp-0x10000&1023));
},

isWhiteSpace:function(cp){
return cp===0x20||cp===0x09||cp===0x0B||cp===0x0C||cp===0xA0||
cp>=0x1680&&[0x1680,0x2000,0x2001,0x2002,0x2003,0x2004,0x2005,0x2006,0x2007,0x2008,0x2009,0x200A,0x202F,0x205F,0x3000,0xFEFF].indexOf(cp)>=0;
},

isLineTerminator:function(cp){
return cp===0x0A||cp===0x0D||cp===0x2028||cp===0x2029;
},

isIdentifierStart:function(cp){
return cp===0x24||cp===0x5F||
cp>=0x41&&cp<=0x5A||
cp>=0x61&&cp<=0x7A||
cp===0x5C||
cp>=0x80&&Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));
},
isIdentifierPart:function(cp){
return cp===0x24||cp===0x5F||
cp>=0x41&&cp<=0x5A||
cp>=0x61&&cp<=0x7A||
cp>=0x30&&cp<=0x39||
cp===0x5C||
cp>=0x80&&Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));
},

isDecimalDigit:function(cp){
return cp>=0x30&&cp<=0x39;
},
isHexDigit:function(cp){
return cp>=0x30&&cp<=0x39||
cp>=0x41&&cp<=0x46||
cp>=0x61&&cp<=0x66;
},
isOctalDigit:function(cp){
return cp>=0x30&&cp<=0x37;
}};



},

function(module,exports,__webpack_require__){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
var jsx_syntax_1=__webpack_require__(6);

var JSXClosingElement=function(){
function JSXClosingElement(name){
this.type=jsx_syntax_1.JSXSyntax.JSXClosingElement;
this.name=name;
}
return JSXClosingElement;
}();
exports.JSXClosingElement=JSXClosingElement;
var JSXElement=function(){
function JSXElement(openingElement,children,closingElement){
this.type=jsx_syntax_1.JSXSyntax.JSXElement;
this.openingElement=openingElement;
this.children=children;
this.closingElement=closingElement;
}
return JSXElement;
}();
exports.JSXElement=JSXElement;
var JSXEmptyExpression=function(){
function JSXEmptyExpression(){
this.type=jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
}
return JSXEmptyExpression;
}();
exports.JSXEmptyExpression=JSXEmptyExpression;
var JSXExpressionContainer=function(){
function JSXExpressionContainer(expression){
this.type=jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
this.expression=expression;
}
return JSXExpressionContainer;
}();
exports.JSXExpressionContainer=JSXExpressionContainer;
var JSXIdentifier=function(){
function JSXIdentifier(name){
this.type=jsx_syntax_1.JSXSyntax.JSXIdentifier;
this.name=name;
}
return JSXIdentifier;
}();
exports.JSXIdentifier=JSXIdentifier;
var JSXMemberExpression=function(){
function JSXMemberExpression(object,property){
this.type=jsx_syntax_1.JSXSyntax.JSXMemberExpression;
this.object=object;
this.property=property;
}
return JSXMemberExpression;
}();
exports.JSXMemberExpression=JSXMemberExpression;
var JSXAttribute=function(){
function JSXAttribute(name,value){
this.type=jsx_syntax_1.JSXSyntax.JSXAttribute;
this.name=name;
this.value=value;
}
return JSXAttribute;
}();
exports.JSXAttribute=JSXAttribute;
var JSXNamespacedName=function(){
function JSXNamespacedName(namespace,name){
this.type=jsx_syntax_1.JSXSyntax.JSXNamespacedName;
this.namespace=namespace;
this.name=name;
}
return JSXNamespacedName;
}();
exports.JSXNamespacedName=JSXNamespacedName;
var JSXOpeningElement=function(){
function JSXOpeningElement(name,selfClosing,attributes){
this.type=jsx_syntax_1.JSXSyntax.JSXOpeningElement;
this.name=name;
this.selfClosing=selfClosing;
this.attributes=attributes;
}
return JSXOpeningElement;
}();
exports.JSXOpeningElement=JSXOpeningElement;
var JSXSpreadAttribute=function(){
function JSXSpreadAttribute(argument){
this.type=jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
this.argument=argument;
}
return JSXSpreadAttribute;
}();
exports.JSXSpreadAttribute=JSXSpreadAttribute;
var JSXText=function(){
function JSXText(value,raw){
this.type=jsx_syntax_1.JSXSyntax.JSXText;
this.value=value;
this.raw=raw;
}
return JSXText;
}();
exports.JSXText=JSXText;


},

function(module,exports){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
exports.JSXSyntax={
JSXAttribute:'JSXAttribute',
JSXClosingElement:'JSXClosingElement',
JSXElement:'JSXElement',
JSXEmptyExpression:'JSXEmptyExpression',
JSXExpressionContainer:'JSXExpressionContainer',
JSXIdentifier:'JSXIdentifier',
JSXMemberExpression:'JSXMemberExpression',
JSXNamespacedName:'JSXNamespacedName',
JSXOpeningElement:'JSXOpeningElement',
JSXSpreadAttribute:'JSXSpreadAttribute',
JSXText:'JSXText'};



},

function(module,exports,__webpack_require__){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
var syntax_1=__webpack_require__(2);

var ArrayExpression=function(){
function ArrayExpression(elements){
this.type=syntax_1.Syntax.ArrayExpression;
this.elements=elements;
}
return ArrayExpression;
}();
exports.ArrayExpression=ArrayExpression;
var ArrayPattern=function(){
function ArrayPattern(elements){
this.type=syntax_1.Syntax.ArrayPattern;
this.elements=elements;
}
return ArrayPattern;
}();
exports.ArrayPattern=ArrayPattern;
var ArrowFunctionExpression=function(){
function ArrowFunctionExpression(params,body,expression){
this.type=syntax_1.Syntax.ArrowFunctionExpression;
this.id=null;
this.params=params;
this.body=body;
this.generator=false;
this.expression=expression;
this.async=false;
}
return ArrowFunctionExpression;
}();
exports.ArrowFunctionExpression=ArrowFunctionExpression;
var AssignmentExpression=function(){
function AssignmentExpression(operator,left,right){
this.type=syntax_1.Syntax.AssignmentExpression;
this.operator=operator;
this.left=left;
this.right=right;
}
return AssignmentExpression;
}();
exports.AssignmentExpression=AssignmentExpression;
var AssignmentPattern=function(){
function AssignmentPattern(left,right){
this.type=syntax_1.Syntax.AssignmentPattern;
this.left=left;
this.right=right;
}
return AssignmentPattern;
}();
exports.AssignmentPattern=AssignmentPattern;
var AsyncArrowFunctionExpression=function(){
function AsyncArrowFunctionExpression(params,body,expression){
this.type=syntax_1.Syntax.ArrowFunctionExpression;
this.id=null;
this.params=params;
this.body=body;
this.generator=false;
this.expression=expression;
this.async=true;
}
return AsyncArrowFunctionExpression;
}();
exports.AsyncArrowFunctionExpression=AsyncArrowFunctionExpression;
var AsyncFunctionDeclaration=function(){
function AsyncFunctionDeclaration(id,params,body){
this.type=syntax_1.Syntax.FunctionDeclaration;
this.id=id;
this.params=params;
this.body=body;
this.generator=false;
this.expression=false;
this.async=true;
}
return AsyncFunctionDeclaration;
}();
exports.AsyncFunctionDeclaration=AsyncFunctionDeclaration;
var AsyncFunctionExpression=function(){
function AsyncFunctionExpression(id,params,body){
this.type=syntax_1.Syntax.FunctionExpression;
this.id=id;
this.params=params;
this.body=body;
this.generator=false;
this.expression=false;
this.async=true;
}
return AsyncFunctionExpression;
}();
exports.AsyncFunctionExpression=AsyncFunctionExpression;
var AwaitExpression=function(){
function AwaitExpression(argument){
this.type=syntax_1.Syntax.AwaitExpression;
this.argument=argument;
}
return AwaitExpression;
}();
exports.AwaitExpression=AwaitExpression;
var BinaryExpression=function(){
function BinaryExpression(operator,left,right){
var logical=operator==='||'||operator==='&&';
this.type=logical?syntax_1.Syntax.LogicalExpression:syntax_1.Syntax.BinaryExpression;
this.operator=operator;
this.left=left;
this.right=right;
}
return BinaryExpression;
}();
exports.BinaryExpression=BinaryExpression;
var BlockStatement=function(){
function BlockStatement(body){
this.type=syntax_1.Syntax.BlockStatement;
this.body=body;
}
return BlockStatement;
}();
exports.BlockStatement=BlockStatement;
var BreakStatement=function(){
function BreakStatement(label){
this.type=syntax_1.Syntax.BreakStatement;
this.label=label;
}
return BreakStatement;
}();
exports.BreakStatement=BreakStatement;
var CallExpression=function(){
function CallExpression(callee,args){
this.type=syntax_1.Syntax.CallExpression;
this.callee=callee;
this.arguments=args;
}
return CallExpression;
}();
exports.CallExpression=CallExpression;
var CatchClause=function(){
function CatchClause(param,body){
this.type=syntax_1.Syntax.CatchClause;
this.param=param;
this.body=body;
}
return CatchClause;
}();
exports.CatchClause=CatchClause;
var ClassBody=function(){
function ClassBody(body){
this.type=syntax_1.Syntax.ClassBody;
this.body=body;
}
return ClassBody;
}();
exports.ClassBody=ClassBody;
var ClassDeclaration=function(){
function ClassDeclaration(id,superClass,body){
this.type=syntax_1.Syntax.ClassDeclaration;
this.id=id;
this.superClass=superClass;
this.body=body;
}
return ClassDeclaration;
}();
exports.ClassDeclaration=ClassDeclaration;
var ClassExpression=function(){
function ClassExpression(id,superClass,body){
this.type=syntax_1.Syntax.ClassExpression;
this.id=id;
this.superClass=superClass;
this.body=body;
}
return ClassExpression;
}();
exports.ClassExpression=ClassExpression;
var ComputedMemberExpression=function(){
function ComputedMemberExpression(object,property){
this.type=syntax_1.Syntax.MemberExpression;
this.computed=true;
this.object=object;
this.property=property;
}
return ComputedMemberExpression;
}();
exports.ComputedMemberExpression=ComputedMemberExpression;
var ConditionalExpression=function(){
function ConditionalExpression(test,consequent,alternate){
this.type=syntax_1.Syntax.ConditionalExpression;
this.test=test;
this.consequent=consequent;
this.alternate=alternate;
}
return ConditionalExpression;
}();
exports.ConditionalExpression=ConditionalExpression;
var ContinueStatement=function(){
function ContinueStatement(label){
this.type=syntax_1.Syntax.ContinueStatement;
this.label=label;
}
return ContinueStatement;
}();
exports.ContinueStatement=ContinueStatement;
var DebuggerStatement=function(){
function DebuggerStatement(){
this.type=syntax_1.Syntax.DebuggerStatement;
}
return DebuggerStatement;
}();
exports.DebuggerStatement=DebuggerStatement;
var Directive=function(){
function Directive(expression,directive){
this.type=syntax_1.Syntax.ExpressionStatement;
this.expression=expression;
this.directive=directive;
}
return Directive;
}();
exports.Directive=Directive;
var DoWhileStatement=function(){
function DoWhileStatement(body,test){
this.type=syntax_1.Syntax.DoWhileStatement;
this.body=body;
this.test=test;
}
return DoWhileStatement;
}();
exports.DoWhileStatement=DoWhileStatement;
var EmptyStatement=function(){
function EmptyStatement(){
this.type=syntax_1.Syntax.EmptyStatement;
}
return EmptyStatement;
}();
exports.EmptyStatement=EmptyStatement;
var ExportAllDeclaration=function(){
function ExportAllDeclaration(source){
this.type=syntax_1.Syntax.ExportAllDeclaration;
this.source=source;
}
return ExportAllDeclaration;
}();
exports.ExportAllDeclaration=ExportAllDeclaration;
var ExportDefaultDeclaration=function(){
function ExportDefaultDeclaration(declaration){
this.type=syntax_1.Syntax.ExportDefaultDeclaration;
this.declaration=declaration;
}
return ExportDefaultDeclaration;
}();
exports.ExportDefaultDeclaration=ExportDefaultDeclaration;
var ExportNamedDeclaration=function(){
function ExportNamedDeclaration(declaration,specifiers,source){
this.type=syntax_1.Syntax.ExportNamedDeclaration;
this.declaration=declaration;
this.specifiers=specifiers;
this.source=source;
}
return ExportNamedDeclaration;
}();
exports.ExportNamedDeclaration=ExportNamedDeclaration;
var ExportSpecifier=function(){
function ExportSpecifier(local,exported){
this.type=syntax_1.Syntax.ExportSpecifier;
this.exported=exported;
this.local=local;
}
return ExportSpecifier;
}();
exports.ExportSpecifier=ExportSpecifier;
var ExpressionStatement=function(){
function ExpressionStatement(expression){
this.type=syntax_1.Syntax.ExpressionStatement;
this.expression=expression;
}
return ExpressionStatement;
}();
exports.ExpressionStatement=ExpressionStatement;
var ForInStatement=function(){
function ForInStatement(left,right,body){
this.type=syntax_1.Syntax.ForInStatement;
this.left=left;
this.right=right;
this.body=body;
this.each=false;
}
return ForInStatement;
}();
exports.ForInStatement=ForInStatement;
var ForOfStatement=function(){
function ForOfStatement(left,right,body){
this.type=syntax_1.Syntax.ForOfStatement;
this.left=left;
this.right=right;
this.body=body;
}
return ForOfStatement;
}();
exports.ForOfStatement=ForOfStatement;
var ForStatement=function(){
function ForStatement(init,test,update,body){
this.type=syntax_1.Syntax.ForStatement;
this.init=init;
this.test=test;
this.update=update;
this.body=body;
}
return ForStatement;
}();
exports.ForStatement=ForStatement;
var FunctionDeclaration=function(){
function FunctionDeclaration(id,params,body,generator){
this.type=syntax_1.Syntax.FunctionDeclaration;
this.id=id;
this.params=params;
this.body=body;
this.generator=generator;
this.expression=false;
this.async=false;
}
return FunctionDeclaration;
}();
exports.FunctionDeclaration=FunctionDeclaration;
var FunctionExpression=function(){
function FunctionExpression(id,params,body,generator){
this.type=syntax_1.Syntax.FunctionExpression;
this.id=id;
this.params=params;
this.body=body;
this.generator=generator;
this.expression=false;
this.async=false;
}
return FunctionExpression;
}();
exports.FunctionExpression=FunctionExpression;
var Identifier=function(){
function Identifier(name){
this.type=syntax_1.Syntax.Identifier;
this.name=name;
}
return Identifier;
}();
exports.Identifier=Identifier;
var IfStatement=function(){
function IfStatement(test,consequent,alternate){
this.type=syntax_1.Syntax.IfStatement;
this.test=test;
this.consequent=consequent;
this.alternate=alternate;
}
return IfStatement;
}();
exports.IfStatement=IfStatement;
var ImportDeclaration=function(){
function ImportDeclaration(specifiers,source){
this.type=syntax_1.Syntax.ImportDeclaration;
this.specifiers=specifiers;
this.source=source;
}
return ImportDeclaration;
}();
exports.ImportDeclaration=ImportDeclaration;
var ImportDefaultSpecifier=function(){
function ImportDefaultSpecifier(local){
this.type=syntax_1.Syntax.ImportDefaultSpecifier;
this.local=local;
}
return ImportDefaultSpecifier;
}();
exports.ImportDefaultSpecifier=ImportDefaultSpecifier;
var ImportNamespaceSpecifier=function(){
function ImportNamespaceSpecifier(local){
this.type=syntax_1.Syntax.ImportNamespaceSpecifier;
this.local=local;
}
return ImportNamespaceSpecifier;
}();
exports.ImportNamespaceSpecifier=ImportNamespaceSpecifier;
var ImportSpecifier=function(){
function ImportSpecifier(local,imported){
this.type=syntax_1.Syntax.ImportSpecifier;
this.local=local;
this.imported=imported;
}
return ImportSpecifier;
}();
exports.ImportSpecifier=ImportSpecifier;
var LabeledStatement=function(){
function LabeledStatement(label,body){
this.type=syntax_1.Syntax.LabeledStatement;
this.label=label;
this.body=body;
}
return LabeledStatement;
}();
exports.LabeledStatement=LabeledStatement;
var Literal=function(){
function Literal(value,raw){
this.type=syntax_1.Syntax.Literal;
this.value=value;
this.raw=raw;
}
return Literal;
}();
exports.Literal=Literal;
var MetaProperty=function(){
function MetaProperty(meta,property){
this.type=syntax_1.Syntax.MetaProperty;
this.meta=meta;
this.property=property;
}
return MetaProperty;
}();
exports.MetaProperty=MetaProperty;
var MethodDefinition=function(){
function MethodDefinition(key,computed,value,kind,isStatic){
this.type=syntax_1.Syntax.MethodDefinition;
this.key=key;
this.computed=computed;
this.value=value;
this.kind=kind;
this.static=isStatic;
}
return MethodDefinition;
}();
exports.MethodDefinition=MethodDefinition;
var Module=function(){
function Module(body){
this.type=syntax_1.Syntax.Program;
this.body=body;
this.sourceType='module';
}
return Module;
}();
exports.Module=Module;
var NewExpression=function(){
function NewExpression(callee,args){
this.type=syntax_1.Syntax.NewExpression;
this.callee=callee;
this.arguments=args;
}
return NewExpression;
}();
exports.NewExpression=NewExpression;
var ObjectExpression=function(){
function ObjectExpression(properties){
this.type=syntax_1.Syntax.ObjectExpression;
this.properties=properties;
}
return ObjectExpression;
}();
exports.ObjectExpression=ObjectExpression;
var ObjectPattern=function(){
function ObjectPattern(properties){
this.type=syntax_1.Syntax.ObjectPattern;
this.properties=properties;
}
return ObjectPattern;
}();
exports.ObjectPattern=ObjectPattern;
var Property=function(){
function Property(kind,key,computed,value,method,shorthand){
this.type=syntax_1.Syntax.Property;
this.key=key;
this.computed=computed;
this.value=value;
this.kind=kind;
this.method=method;
this.shorthand=shorthand;
}
return Property;
}();
exports.Property=Property;
var RegexLiteral=function(){
function RegexLiteral(value,raw,pattern,flags){
this.type=syntax_1.Syntax.Literal;
this.value=value;
this.raw=raw;
this.regex={pattern:pattern,flags:flags};
}
return RegexLiteral;
}();
exports.RegexLiteral=RegexLiteral;
var RestElement=function(){
function RestElement(argument){
this.type=syntax_1.Syntax.RestElement;
this.argument=argument;
}
return RestElement;
}();
exports.RestElement=RestElement;
var ReturnStatement=function(){
function ReturnStatement(argument){
this.type=syntax_1.Syntax.ReturnStatement;
this.argument=argument;
}
return ReturnStatement;
}();
exports.ReturnStatement=ReturnStatement;
var Script=function(){
function Script(body){
this.type=syntax_1.Syntax.Program;
this.body=body;
this.sourceType='script';
}
return Script;
}();
exports.Script=Script;
var SequenceExpression=function(){
function SequenceExpression(expressions){
this.type=syntax_1.Syntax.SequenceExpression;
this.expressions=expressions;
}
return SequenceExpression;
}();
exports.SequenceExpression=SequenceExpression;
var SpreadElement=function(){
function SpreadElement(argument){
this.type=syntax_1.Syntax.SpreadElement;
this.argument=argument;
}
return SpreadElement;
}();
exports.SpreadElement=SpreadElement;
var StaticMemberExpression=function(){
function StaticMemberExpression(object,property){
this.type=syntax_1.Syntax.MemberExpression;
this.computed=false;
this.object=object;
this.property=property;
}
return StaticMemberExpression;
}();
exports.StaticMemberExpression=StaticMemberExpression;
var Super=function(){
function Super(){
this.type=syntax_1.Syntax.Super;
}
return Super;
}();
exports.Super=Super;
var SwitchCase=function(){
function SwitchCase(test,consequent){
this.type=syntax_1.Syntax.SwitchCase;
this.test=test;
this.consequent=consequent;
}
return SwitchCase;
}();
exports.SwitchCase=SwitchCase;
var SwitchStatement=function(){
function SwitchStatement(discriminant,cases){
this.type=syntax_1.Syntax.SwitchStatement;
this.discriminant=discriminant;
this.cases=cases;
}
return SwitchStatement;
}();
exports.SwitchStatement=SwitchStatement;
var TaggedTemplateExpression=function(){
function TaggedTemplateExpression(tag,quasi){
this.type=syntax_1.Syntax.TaggedTemplateExpression;
this.tag=tag;
this.quasi=quasi;
}
return TaggedTemplateExpression;
}();
exports.TaggedTemplateExpression=TaggedTemplateExpression;
var TemplateElement=function(){
function TemplateElement(value,tail){
this.type=syntax_1.Syntax.TemplateElement;
this.value=value;
this.tail=tail;
}
return TemplateElement;
}();
exports.TemplateElement=TemplateElement;
var TemplateLiteral=function(){
function TemplateLiteral(quasis,expressions){
this.type=syntax_1.Syntax.TemplateLiteral;
this.quasis=quasis;
this.expressions=expressions;
}
return TemplateLiteral;
}();
exports.TemplateLiteral=TemplateLiteral;
var ThisExpression=function(){
function ThisExpression(){
this.type=syntax_1.Syntax.ThisExpression;
}
return ThisExpression;
}();
exports.ThisExpression=ThisExpression;
var ThrowStatement=function(){
function ThrowStatement(argument){
this.type=syntax_1.Syntax.ThrowStatement;
this.argument=argument;
}
return ThrowStatement;
}();
exports.ThrowStatement=ThrowStatement;
var TryStatement=function(){
function TryStatement(block,handler,finalizer){
this.type=syntax_1.Syntax.TryStatement;
this.block=block;
this.handler=handler;
this.finalizer=finalizer;
}
return TryStatement;
}();
exports.TryStatement=TryStatement;
var UnaryExpression=function(){
function UnaryExpression(operator,argument){
this.type=syntax_1.Syntax.UnaryExpression;
this.operator=operator;
this.argument=argument;
this.prefix=true;
}
return UnaryExpression;
}();
exports.UnaryExpression=UnaryExpression;
var UpdateExpression=function(){
function UpdateExpression(operator,argument,prefix){
this.type=syntax_1.Syntax.UpdateExpression;
this.operator=operator;
this.argument=argument;
this.prefix=prefix;
}
return UpdateExpression;
}();
exports.UpdateExpression=UpdateExpression;
var VariableDeclaration=function(){
function VariableDeclaration(declarations,kind){
this.type=syntax_1.Syntax.VariableDeclaration;
this.declarations=declarations;
this.kind=kind;
}
return VariableDeclaration;
}();
exports.VariableDeclaration=VariableDeclaration;
var VariableDeclarator=function(){
function VariableDeclarator(id,init){
this.type=syntax_1.Syntax.VariableDeclarator;
this.id=id;
this.init=init;
}
return VariableDeclarator;
}();
exports.VariableDeclarator=VariableDeclarator;
var WhileStatement=function(){
function WhileStatement(test,body){
this.type=syntax_1.Syntax.WhileStatement;
this.test=test;
this.body=body;
}
return WhileStatement;
}();
exports.WhileStatement=WhileStatement;
var WithStatement=function(){
function WithStatement(object,body){
this.type=syntax_1.Syntax.WithStatement;
this.object=object;
this.body=body;
}
return WithStatement;
}();
exports.WithStatement=WithStatement;
var YieldExpression=function(){
function YieldExpression(argument,delegate){
this.type=syntax_1.Syntax.YieldExpression;
this.argument=argument;
this.delegate=delegate;
}
return YieldExpression;
}();
exports.YieldExpression=YieldExpression;


},

function(module,exports,__webpack_require__){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
var assert_1=__webpack_require__(9);
var error_handler_1=__webpack_require__(10);
var messages_1=__webpack_require__(11);
var Node=__webpack_require__(7);
var scanner_1=__webpack_require__(12);
var syntax_1=__webpack_require__(2);
var token_1=__webpack_require__(13);
var ArrowParameterPlaceHolder='ArrowParameterPlaceHolder';
var Parser=function(){
function Parser(code,options,delegate){
if(options===void 0){options={};}
this.config={
range:typeof options.range==='boolean'&&options.range,
loc:typeof options.loc==='boolean'&&options.loc,
source:null,
tokens:typeof options.tokens==='boolean'&&options.tokens,
comment:typeof options.comment==='boolean'&&options.comment,
tolerant:typeof options.tolerant==='boolean'&&options.tolerant};

if(this.config.loc&&options.source&&options.source!==null){
this.config.source=String(options.source);
}
this.delegate=delegate;
this.errorHandler=new error_handler_1.ErrorHandler();
this.errorHandler.tolerant=this.config.tolerant;
this.scanner=new scanner_1.Scanner(code,this.errorHandler);
this.scanner.trackComment=this.config.comment;
this.operatorPrecedence={
')':0,
';':0,
',':0,
'=':0,
']':0,
'||':1,
'&&':2,
'|':3,
'^':4,
'&':5,
'==':6,
'!=':6,
'===':6,
'!==':6,
'<':7,
'>':7,
'<=':7,
'>=':7,
'<<':8,
'>>':8,
'>>>':8,
'+':9,
'-':9,
'*':11,
'/':11,
'%':11};

this.lookahead={
type:2,
value:'',
lineNumber:this.scanner.lineNumber,
lineStart:0,
start:0,
end:0};

this.hasLineTerminator=false;
this.context={
isModule:false,
await:false,
allowIn:true,
allowStrictDirective:true,
allowYield:true,
firstCoverInitializedNameError:null,
isAssignmentTarget:false,
isBindingElement:false,
inFunctionBody:false,
inIteration:false,
inSwitch:false,
labelSet:{},
strict:false};

this.tokens=[];
this.startMarker={
index:0,
line:this.scanner.lineNumber,
column:0};

this.lastMarker={
index:0,
line:this.scanner.lineNumber,
column:0};

this.nextToken();
this.lastMarker={
index:this.scanner.index,
line:this.scanner.lineNumber,
column:this.scanner.index-this.scanner.lineStart};

}
Parser.prototype.throwError=function(messageFormat){
var values=[];
for(var _i=1;_i<arguments.length;_i++){
values[_i-1]=arguments[_i];
}
var args=Array.prototype.slice.call(arguments,1);
var msg=messageFormat.replace(/%(\d)/g,function(whole,idx){
assert_1.assert(idx<args.length,'Message reference must be in range');
return args[idx];
});
var index=this.lastMarker.index;
var line=this.lastMarker.line;
var column=this.lastMarker.column+1;
throw this.errorHandler.createError(index,line,column,msg);
};
Parser.prototype.tolerateError=function(messageFormat){
var values=[];
for(var _i=1;_i<arguments.length;_i++){
values[_i-1]=arguments[_i];
}
var args=Array.prototype.slice.call(arguments,1);
var msg=messageFormat.replace(/%(\d)/g,function(whole,idx){
assert_1.assert(idx<args.length,'Message reference must be in range');
return args[idx];
});
var index=this.lastMarker.index;
var line=this.scanner.lineNumber;
var column=this.lastMarker.column+1;
this.errorHandler.tolerateError(index,line,column,msg);
};

Parser.prototype.unexpectedTokenError=function(token,message){
var msg=message||messages_1.Messages.UnexpectedToken;
var value;
if(token){
if(!message){
msg=token.type===2?messages_1.Messages.UnexpectedEOS:
token.type===3?messages_1.Messages.UnexpectedIdentifier:
token.type===6?messages_1.Messages.UnexpectedNumber:
token.type===8?messages_1.Messages.UnexpectedString:
token.type===10?messages_1.Messages.UnexpectedTemplate:
messages_1.Messages.UnexpectedToken;
if(token.type===4){
if(this.scanner.isFutureReservedWord(token.value)){
msg=messages_1.Messages.UnexpectedReserved;
}else
if(this.context.strict&&this.scanner.isStrictModeReservedWord(token.value)){
msg=messages_1.Messages.StrictReservedWord;
}
}
}
value=token.value;
}else
{
value='ILLEGAL';
}
msg=msg.replace('%0',value);
if(token&&typeof token.lineNumber==='number'){
var index=token.start;
var line=token.lineNumber;
var lastMarkerLineStart=this.lastMarker.index-this.lastMarker.column;
var column=token.start-lastMarkerLineStart+1;
return this.errorHandler.createError(index,line,column,msg);
}else
{
var index=this.lastMarker.index;
var line=this.lastMarker.line;
var column=this.lastMarker.column+1;
return this.errorHandler.createError(index,line,column,msg);
}
};
Parser.prototype.throwUnexpectedToken=function(token,message){
throw this.unexpectedTokenError(token,message);
};
Parser.prototype.tolerateUnexpectedToken=function(token,message){
this.errorHandler.tolerate(this.unexpectedTokenError(token,message));
};
Parser.prototype.collectComments=function(){
if(!this.config.comment){
this.scanner.scanComments();
}else
{
var comments=this.scanner.scanComments();
if(comments.length>0&&this.delegate){
for(var i=0;i<comments.length;++i){
var e=comments[i];
var node=void 0;
node={
type:e.multiLine?'BlockComment':'LineComment',
value:this.scanner.source.slice(e.slice[0],e.slice[1])};

if(this.config.range){
node.range=e.range;
}
if(this.config.loc){
node.loc=e.loc;
}
var metadata={
start:{
line:e.loc.start.line,
column:e.loc.start.column,
offset:e.range[0]},

end:{
line:e.loc.end.line,
column:e.loc.end.column,
offset:e.range[1]}};


this.delegate(node,metadata);
}
}
}
};

Parser.prototype.getTokenRaw=function(token){
return this.scanner.source.slice(token.start,token.end);
};
Parser.prototype.convertToken=function(token){
var t={
type:token_1.TokenName[token.type],
value:this.getTokenRaw(token)};

if(this.config.range){
t.range=[token.start,token.end];
}
if(this.config.loc){
t.loc={
start:{
line:this.startMarker.line,
column:this.startMarker.column},

end:{
line:this.scanner.lineNumber,
column:this.scanner.index-this.scanner.lineStart}};


}
if(token.type===9){
var pattern=token.pattern;
var flags=token.flags;
t.regex={pattern:pattern,flags:flags};
}
return t;
};
Parser.prototype.nextToken=function(){
var token=this.lookahead;
this.lastMarker.index=this.scanner.index;
this.lastMarker.line=this.scanner.lineNumber;
this.lastMarker.column=this.scanner.index-this.scanner.lineStart;
this.collectComments();
if(this.scanner.index!==this.startMarker.index){
this.startMarker.index=this.scanner.index;
this.startMarker.line=this.scanner.lineNumber;
this.startMarker.column=this.scanner.index-this.scanner.lineStart;
}
var next=this.scanner.lex();
this.hasLineTerminator=token.lineNumber!==next.lineNumber;
if(next&&this.context.strict&&next.type===3){
if(this.scanner.isStrictModeReservedWord(next.value)){
next.type=4;
}
}
this.lookahead=next;
if(this.config.tokens&&next.type!==2){
this.tokens.push(this.convertToken(next));
}
return token;
};
Parser.prototype.nextRegexToken=function(){
this.collectComments();
var token=this.scanner.scanRegExp();
if(this.config.tokens){


this.tokens.pop();
this.tokens.push(this.convertToken(token));
}

this.lookahead=token;
this.nextToken();
return token;
};
Parser.prototype.createNode=function(){
return{
index:this.startMarker.index,
line:this.startMarker.line,
column:this.startMarker.column};

};
Parser.prototype.startNode=function(token,lastLineStart){
if(lastLineStart===void 0){lastLineStart=0;}
var column=token.start-token.lineStart;
var line=token.lineNumber;
if(column<0){
column+=lastLineStart;
line--;
}
return{
index:token.start,
line:line,
column:column};

};
Parser.prototype.finalize=function(marker,node){
if(this.config.range){
node.range=[marker.index,this.lastMarker.index];
}
if(this.config.loc){
node.loc={
start:{
line:marker.line,
column:marker.column},

end:{
line:this.lastMarker.line,
column:this.lastMarker.column}};


if(this.config.source){
node.loc.source=this.config.source;
}
}
if(this.delegate){
var metadata={
start:{
line:marker.line,
column:marker.column,
offset:marker.index},

end:{
line:this.lastMarker.line,
column:this.lastMarker.column,
offset:this.lastMarker.index}};


this.delegate(node,metadata);
}
return node;
};


Parser.prototype.expect=function(value){
var token=this.nextToken();
if(token.type!==7||token.value!==value){
this.throwUnexpectedToken(token);
}
};

Parser.prototype.expectCommaSeparator=function(){
if(this.config.tolerant){
var token=this.lookahead;
if(token.type===7&&token.value===','){
this.nextToken();
}else
if(token.type===7&&token.value===';'){
this.nextToken();
this.tolerateUnexpectedToken(token);
}else
{
this.tolerateUnexpectedToken(token,messages_1.Messages.UnexpectedToken);
}
}else
{
this.expect(',');
}
};


Parser.prototype.expectKeyword=function(keyword){
var token=this.nextToken();
if(token.type!==4||token.value!==keyword){
this.throwUnexpectedToken(token);
}
};

Parser.prototype.match=function(value){
return this.lookahead.type===7&&this.lookahead.value===value;
};

Parser.prototype.matchKeyword=function(keyword){
return this.lookahead.type===4&&this.lookahead.value===keyword;
};


Parser.prototype.matchContextualKeyword=function(keyword){
return this.lookahead.type===3&&this.lookahead.value===keyword;
};

Parser.prototype.matchAssign=function(){
if(this.lookahead.type!==7){
return false;
}
var op=this.lookahead.value;
return op==='='||
op==='*='||
op==='**='||
op==='/='||
op==='%='||
op==='+='||
op==='-='||
op==='<<='||
op==='>>='||
op==='>>>='||
op==='&='||
op==='^='||
op==='|=';
};































Parser.prototype.isolateCoverGrammar=function(parseFunction){
var previousIsBindingElement=this.context.isBindingElement;
var previousIsAssignmentTarget=this.context.isAssignmentTarget;
var previousFirstCoverInitializedNameError=this.context.firstCoverInitializedNameError;
this.context.isBindingElement=true;
this.context.isAssignmentTarget=true;
this.context.firstCoverInitializedNameError=null;
var result=parseFunction.call(this);
if(this.context.firstCoverInitializedNameError!==null){
this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
}
this.context.isBindingElement=previousIsBindingElement;
this.context.isAssignmentTarget=previousIsAssignmentTarget;
this.context.firstCoverInitializedNameError=previousFirstCoverInitializedNameError;
return result;
};
Parser.prototype.inheritCoverGrammar=function(parseFunction){
var previousIsBindingElement=this.context.isBindingElement;
var previousIsAssignmentTarget=this.context.isAssignmentTarget;
var previousFirstCoverInitializedNameError=this.context.firstCoverInitializedNameError;
this.context.isBindingElement=true;
this.context.isAssignmentTarget=true;
this.context.firstCoverInitializedNameError=null;
var result=parseFunction.call(this);
this.context.isBindingElement=this.context.isBindingElement&&previousIsBindingElement;
this.context.isAssignmentTarget=this.context.isAssignmentTarget&&previousIsAssignmentTarget;
this.context.firstCoverInitializedNameError=previousFirstCoverInitializedNameError||this.context.firstCoverInitializedNameError;
return result;
};
Parser.prototype.consumeSemicolon=function(){
if(this.match(';')){
this.nextToken();
}else
if(!this.hasLineTerminator){
if(this.lookahead.type!==2&&!this.match('}')){
this.throwUnexpectedToken(this.lookahead);
}
this.lastMarker.index=this.startMarker.index;
this.lastMarker.line=this.startMarker.line;
this.lastMarker.column=this.startMarker.column;
}
};

Parser.prototype.parsePrimaryExpression=function(){
var node=this.createNode();
var expr;
var token,raw;
switch(this.lookahead.type){
case 3:
if((this.context.isModule||this.context.await)&&this.lookahead.value==='await'){
this.tolerateUnexpectedToken(this.lookahead);
}
expr=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(node,new Node.Identifier(this.nextToken().value));
break;
case 6:
case 8:
if(this.context.strict&&this.lookahead.octal){
this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.StrictOctalLiteral);
}
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
token=this.nextToken();
raw=this.getTokenRaw(token);
expr=this.finalize(node,new Node.Literal(token.value,raw));
break;
case 1:
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
token=this.nextToken();
raw=this.getTokenRaw(token);
expr=this.finalize(node,new Node.Literal(token.value==='true',raw));
break;
case 5:
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
token=this.nextToken();
raw=this.getTokenRaw(token);
expr=this.finalize(node,new Node.Literal(null,raw));
break;
case 10:
expr=this.parseTemplateLiteral();
break;
case 7:
switch(this.lookahead.value){
case'(':
this.context.isBindingElement=false;
expr=this.inheritCoverGrammar(this.parseGroupExpression);
break;
case'[':
expr=this.inheritCoverGrammar(this.parseArrayInitializer);
break;
case'{':
expr=this.inheritCoverGrammar(this.parseObjectInitializer);
break;
case'/':
case'/=':
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
this.scanner.index=this.startMarker.index;
token=this.nextRegexToken();
raw=this.getTokenRaw(token);
expr=this.finalize(node,new Node.RegexLiteral(token.regex,raw,token.pattern,token.flags));
break;
default:
expr=this.throwUnexpectedToken(this.nextToken());}

break;
case 4:
if(!this.context.strict&&this.context.allowYield&&this.matchKeyword('yield')){
expr=this.parseIdentifierName();
}else
if(!this.context.strict&&this.matchKeyword('let')){
expr=this.finalize(node,new Node.Identifier(this.nextToken().value));
}else
{
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
if(this.matchKeyword('function')){
expr=this.parseFunctionExpression();
}else
if(this.matchKeyword('this')){
this.nextToken();
expr=this.finalize(node,new Node.ThisExpression());
}else
if(this.matchKeyword('class')){
expr=this.parseClassExpression();
}else
{
expr=this.throwUnexpectedToken(this.nextToken());
}
}
break;
default:
expr=this.throwUnexpectedToken(this.nextToken());}

return expr;
};

Parser.prototype.parseSpreadElement=function(){
var node=this.createNode();
this.expect('...');
var arg=this.inheritCoverGrammar(this.parseAssignmentExpression);
return this.finalize(node,new Node.SpreadElement(arg));
};
Parser.prototype.parseArrayInitializer=function(){
var node=this.createNode();
var elements=[];
this.expect('[');
while(!this.match(']')){
if(this.match(',')){
this.nextToken();
elements.push(null);
}else
if(this.match('...')){
var element=this.parseSpreadElement();
if(!this.match(']')){
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
this.expect(',');
}
elements.push(element);
}else
{
elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
if(!this.match(']')){
this.expect(',');
}
}
}
this.expect(']');
return this.finalize(node,new Node.ArrayExpression(elements));
};

Parser.prototype.parsePropertyMethod=function(params){
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
var previousStrict=this.context.strict;
var previousAllowStrictDirective=this.context.allowStrictDirective;
this.context.allowStrictDirective=params.simple;
var body=this.isolateCoverGrammar(this.parseFunctionSourceElements);
if(this.context.strict&&params.firstRestricted){
this.tolerateUnexpectedToken(params.firstRestricted,params.message);
}
if(this.context.strict&&params.stricted){
this.tolerateUnexpectedToken(params.stricted,params.message);
}
this.context.strict=previousStrict;
this.context.allowStrictDirective=previousAllowStrictDirective;
return body;
};
Parser.prototype.parsePropertyMethodFunction=function(){
var isGenerator=false;
var node=this.createNode();
var previousAllowYield=this.context.allowYield;
this.context.allowYield=true;
var params=this.parseFormalParameters();
var method=this.parsePropertyMethod(params);
this.context.allowYield=previousAllowYield;
return this.finalize(node,new Node.FunctionExpression(null,params.params,method,isGenerator));
};
Parser.prototype.parsePropertyMethodAsyncFunction=function(){
var node=this.createNode();
var previousAllowYield=this.context.allowYield;
var previousAwait=this.context.await;
this.context.allowYield=false;
this.context.await=true;
var params=this.parseFormalParameters();
var method=this.parsePropertyMethod(params);
this.context.allowYield=previousAllowYield;
this.context.await=previousAwait;
return this.finalize(node,new Node.AsyncFunctionExpression(null,params.params,method));
};
Parser.prototype.parseObjectPropertyKey=function(){
var node=this.createNode();
var token=this.nextToken();
var key;
switch(token.type){
case 8:
case 6:
if(this.context.strict&&token.octal){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictOctalLiteral);
}
var raw=this.getTokenRaw(token);
key=this.finalize(node,new Node.Literal(token.value,raw));
break;
case 3:
case 1:
case 5:
case 4:
key=this.finalize(node,new Node.Identifier(token.value));
break;
case 7:
if(token.value==='['){
key=this.isolateCoverGrammar(this.parseAssignmentExpression);
this.expect(']');
}else
{
key=this.throwUnexpectedToken(token);
}
break;
default:
key=this.throwUnexpectedToken(token);}

return key;
};
Parser.prototype.isPropertyKey=function(key,value){
return key.type===syntax_1.Syntax.Identifier&&key.name===value||
key.type===syntax_1.Syntax.Literal&&key.value===value;
};
Parser.prototype.parseObjectProperty=function(hasProto){
var node=this.createNode();
var token=this.lookahead;
var kind;
var key=null;
var value=null;
var computed=false;
var method=false;
var shorthand=false;
var isAsync=false;
if(token.type===3){
var id=token.value;
this.nextToken();
computed=this.match('[');
isAsync=!this.hasLineTerminator&&id==='async'&&
!this.match(':')&&!this.match('(')&&!this.match('*')&&!this.match(',');
key=isAsync?this.parseObjectPropertyKey():this.finalize(node,new Node.Identifier(id));
}else
if(this.match('*')){
this.nextToken();
}else
{
computed=this.match('[');
key=this.parseObjectPropertyKey();
}
var lookaheadPropertyKey=this.qualifiedPropertyName(this.lookahead);
if(token.type===3&&!isAsync&&token.value==='get'&&lookaheadPropertyKey){
kind='get';
computed=this.match('[');
key=this.parseObjectPropertyKey();
this.context.allowYield=false;
value=this.parseGetterMethod();
}else
if(token.type===3&&!isAsync&&token.value==='set'&&lookaheadPropertyKey){
kind='set';
computed=this.match('[');
key=this.parseObjectPropertyKey();
value=this.parseSetterMethod();
}else
if(token.type===7&&token.value==='*'&&lookaheadPropertyKey){
kind='init';
computed=this.match('[');
key=this.parseObjectPropertyKey();
value=this.parseGeneratorMethod();
method=true;
}else
{
if(!key){
this.throwUnexpectedToken(this.lookahead);
}
kind='init';
if(this.match(':')&&!isAsync){
if(!computed&&this.isPropertyKey(key,'__proto__')){
if(hasProto.value){
this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
}
hasProto.value=true;
}
this.nextToken();
value=this.inheritCoverGrammar(this.parseAssignmentExpression);
}else
if(this.match('(')){
value=isAsync?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction();
method=true;
}else
if(token.type===3){
var id=this.finalize(node,new Node.Identifier(token.value));
if(this.match('=')){
this.context.firstCoverInitializedNameError=this.lookahead;
this.nextToken();
shorthand=true;
var init=this.isolateCoverGrammar(this.parseAssignmentExpression);
value=this.finalize(node,new Node.AssignmentPattern(id,init));
}else
{
shorthand=true;
value=id;
}
}else
{
this.throwUnexpectedToken(this.nextToken());
}
}
return this.finalize(node,new Node.Property(kind,key,computed,value,method,shorthand));
};
Parser.prototype.parseObjectInitializer=function(){
var node=this.createNode();
this.expect('{');
var properties=[];
var hasProto={value:false};
while(!this.match('}')){
properties.push(this.parseObjectProperty(hasProto));
if(!this.match('}')){
this.expectCommaSeparator();
}
}
this.expect('}');
return this.finalize(node,new Node.ObjectExpression(properties));
};

Parser.prototype.parseTemplateHead=function(){
assert_1.assert(this.lookahead.head,'Template literal must start with a template head');
var node=this.createNode();
var token=this.nextToken();
var raw=token.value;
var cooked=token.cooked;
return this.finalize(node,new Node.TemplateElement({raw:raw,cooked:cooked},token.tail));
};
Parser.prototype.parseTemplateElement=function(){
if(this.lookahead.type!==10){
this.throwUnexpectedToken();
}
var node=this.createNode();
var token=this.nextToken();
var raw=token.value;
var cooked=token.cooked;
return this.finalize(node,new Node.TemplateElement({raw:raw,cooked:cooked},token.tail));
};
Parser.prototype.parseTemplateLiteral=function(){
var node=this.createNode();
var expressions=[];
var quasis=[];
var quasi=this.parseTemplateHead();
quasis.push(quasi);
while(!quasi.tail){
expressions.push(this.parseExpression());
quasi=this.parseTemplateElement();
quasis.push(quasi);
}
return this.finalize(node,new Node.TemplateLiteral(quasis,expressions));
};

Parser.prototype.reinterpretExpressionAsPattern=function(expr){
switch(expr.type){
case syntax_1.Syntax.Identifier:
case syntax_1.Syntax.MemberExpression:
case syntax_1.Syntax.RestElement:
case syntax_1.Syntax.AssignmentPattern:
break;
case syntax_1.Syntax.SpreadElement:
expr.type=syntax_1.Syntax.RestElement;
this.reinterpretExpressionAsPattern(expr.argument);
break;
case syntax_1.Syntax.ArrayExpression:
expr.type=syntax_1.Syntax.ArrayPattern;
for(var i=0;i<expr.elements.length;i++){
if(expr.elements[i]!==null){
this.reinterpretExpressionAsPattern(expr.elements[i]);
}
}
break;
case syntax_1.Syntax.ObjectExpression:
expr.type=syntax_1.Syntax.ObjectPattern;
for(var i=0;i<expr.properties.length;i++){
this.reinterpretExpressionAsPattern(expr.properties[i].value);
}
break;
case syntax_1.Syntax.AssignmentExpression:
expr.type=syntax_1.Syntax.AssignmentPattern;
delete expr.operator;
this.reinterpretExpressionAsPattern(expr.left);
break;
default:

break;}

};
Parser.prototype.parseGroupExpression=function(){
var expr;
this.expect('(');
if(this.match(')')){
this.nextToken();
if(!this.match('=>')){
this.expect('=>');
}
expr={
type:ArrowParameterPlaceHolder,
params:[],
async:false};

}else
{
var startToken=this.lookahead;
var params=[];
if(this.match('...')){
expr=this.parseRestElement(params);
this.expect(')');
if(!this.match('=>')){
this.expect('=>');
}
expr={
type:ArrowParameterPlaceHolder,
params:[expr],
async:false};

}else
{
var arrow=false;
this.context.isBindingElement=true;
expr=this.inheritCoverGrammar(this.parseAssignmentExpression);
if(this.match(',')){
var expressions=[];
this.context.isAssignmentTarget=false;
expressions.push(expr);
while(this.lookahead.type!==2){
if(!this.match(',')){
break;
}
this.nextToken();
if(this.match(')')){
this.nextToken();
for(var i=0;i<expressions.length;i++){
this.reinterpretExpressionAsPattern(expressions[i]);
}
arrow=true;
expr={
type:ArrowParameterPlaceHolder,
params:expressions,
async:false};

}else
if(this.match('...')){
if(!this.context.isBindingElement){
this.throwUnexpectedToken(this.lookahead);
}
expressions.push(this.parseRestElement(params));
this.expect(')');
if(!this.match('=>')){
this.expect('=>');
}
this.context.isBindingElement=false;
for(var i=0;i<expressions.length;i++){
this.reinterpretExpressionAsPattern(expressions[i]);
}
arrow=true;
expr={
type:ArrowParameterPlaceHolder,
params:expressions,
async:false};

}else
{
expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
}
if(arrow){
break;
}
}
if(!arrow){
expr=this.finalize(this.startNode(startToken),new Node.SequenceExpression(expressions));
}
}
if(!arrow){
this.expect(')');
if(this.match('=>')){
if(expr.type===syntax_1.Syntax.Identifier&&expr.name==='yield'){
arrow=true;
expr={
type:ArrowParameterPlaceHolder,
params:[expr],
async:false};

}
if(!arrow){
if(!this.context.isBindingElement){
this.throwUnexpectedToken(this.lookahead);
}
if(expr.type===syntax_1.Syntax.SequenceExpression){
for(var i=0;i<expr.expressions.length;i++){
this.reinterpretExpressionAsPattern(expr.expressions[i]);
}
}else
{
this.reinterpretExpressionAsPattern(expr);
}
var parameters=expr.type===syntax_1.Syntax.SequenceExpression?expr.expressions:[expr];
expr={
type:ArrowParameterPlaceHolder,
params:parameters,
async:false};

}
}
this.context.isBindingElement=false;
}
}
}
return expr;
};

Parser.prototype.parseArguments=function(){
this.expect('(');
var args=[];
if(!this.match(')')){
while(true){
var expr=this.match('...')?this.parseSpreadElement():
this.isolateCoverGrammar(this.parseAssignmentExpression);
args.push(expr);
if(this.match(')')){
break;
}
this.expectCommaSeparator();
if(this.match(')')){
break;
}
}
}
this.expect(')');
return args;
};
Parser.prototype.isIdentifierName=function(token){
return token.type===3||
token.type===4||
token.type===1||
token.type===5;
};
Parser.prototype.parseIdentifierName=function(){
var node=this.createNode();
var token=this.nextToken();
if(!this.isIdentifierName(token)){
this.throwUnexpectedToken(token);
}
return this.finalize(node,new Node.Identifier(token.value));
};
Parser.prototype.parseNewExpression=function(){
var node=this.createNode();
var id=this.parseIdentifierName();
assert_1.assert(id.name==='new','New expression must start with `new`');
var expr;
if(this.match('.')){
this.nextToken();
if(this.lookahead.type===3&&this.context.inFunctionBody&&this.lookahead.value==='target'){
var property=this.parseIdentifierName();
expr=new Node.MetaProperty(id,property);
}else
{
this.throwUnexpectedToken(this.lookahead);
}
}else
{
var callee=this.isolateCoverGrammar(this.parseLeftHandSideExpression);
var args=this.match('(')?this.parseArguments():[];
expr=new Node.NewExpression(callee,args);
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
}
return this.finalize(node,expr);
};
Parser.prototype.parseAsyncArgument=function(){
var arg=this.parseAssignmentExpression();
this.context.firstCoverInitializedNameError=null;
return arg;
};
Parser.prototype.parseAsyncArguments=function(){
this.expect('(');
var args=[];
if(!this.match(')')){
while(true){
var expr=this.match('...')?this.parseSpreadElement():
this.isolateCoverGrammar(this.parseAsyncArgument);
args.push(expr);
if(this.match(')')){
break;
}
this.expectCommaSeparator();
if(this.match(')')){
break;
}
}
}
this.expect(')');
return args;
};
Parser.prototype.parseLeftHandSideExpressionAllowCall=function(){
var startToken=this.lookahead;
var maybeAsync=this.matchContextualKeyword('async');
var previousAllowIn=this.context.allowIn;
this.context.allowIn=true;
var expr;
if(this.matchKeyword('super')&&this.context.inFunctionBody){
expr=this.createNode();
this.nextToken();
expr=this.finalize(expr,new Node.Super());
if(!this.match('(')&&!this.match('.')&&!this.match('[')){
this.throwUnexpectedToken(this.lookahead);
}
}else
{
expr=this.inheritCoverGrammar(this.matchKeyword('new')?this.parseNewExpression:this.parsePrimaryExpression);
}
while(true){
if(this.match('.')){
this.context.isBindingElement=false;
this.context.isAssignmentTarget=true;
this.expect('.');
var property=this.parseIdentifierName();
expr=this.finalize(this.startNode(startToken),new Node.StaticMemberExpression(expr,property));
}else
if(this.match('(')){
var asyncArrow=maybeAsync&&startToken.lineNumber===this.lookahead.lineNumber;
this.context.isBindingElement=false;
this.context.isAssignmentTarget=false;
var args=asyncArrow?this.parseAsyncArguments():this.parseArguments();
expr=this.finalize(this.startNode(startToken),new Node.CallExpression(expr,args));
if(asyncArrow&&this.match('=>')){
for(var i=0;i<args.length;++i){
this.reinterpretExpressionAsPattern(args[i]);
}
expr={
type:ArrowParameterPlaceHolder,
params:args,
async:true};

}
}else
if(this.match('[')){
this.context.isBindingElement=false;
this.context.isAssignmentTarget=true;
this.expect('[');
var property=this.isolateCoverGrammar(this.parseExpression);
this.expect(']');
expr=this.finalize(this.startNode(startToken),new Node.ComputedMemberExpression(expr,property));
}else
if(this.lookahead.type===10&&this.lookahead.head){
var quasi=this.parseTemplateLiteral();
expr=this.finalize(this.startNode(startToken),new Node.TaggedTemplateExpression(expr,quasi));
}else
{
break;
}
}
this.context.allowIn=previousAllowIn;
return expr;
};
Parser.prototype.parseSuper=function(){
var node=this.createNode();
this.expectKeyword('super');
if(!this.match('[')&&!this.match('.')){
this.throwUnexpectedToken(this.lookahead);
}
return this.finalize(node,new Node.Super());
};
Parser.prototype.parseLeftHandSideExpression=function(){
assert_1.assert(this.context.allowIn,'callee of new expression always allow in keyword.');
var node=this.startNode(this.lookahead);
var expr=this.matchKeyword('super')&&this.context.inFunctionBody?this.parseSuper():
this.inheritCoverGrammar(this.matchKeyword('new')?this.parseNewExpression:this.parsePrimaryExpression);
while(true){
if(this.match('[')){
this.context.isBindingElement=false;
this.context.isAssignmentTarget=true;
this.expect('[');
var property=this.isolateCoverGrammar(this.parseExpression);
this.expect(']');
expr=this.finalize(node,new Node.ComputedMemberExpression(expr,property));
}else
if(this.match('.')){
this.context.isBindingElement=false;
this.context.isAssignmentTarget=true;
this.expect('.');
var property=this.parseIdentifierName();
expr=this.finalize(node,new Node.StaticMemberExpression(expr,property));
}else
if(this.lookahead.type===10&&this.lookahead.head){
var quasi=this.parseTemplateLiteral();
expr=this.finalize(node,new Node.TaggedTemplateExpression(expr,quasi));
}else
{
break;
}
}
return expr;
};

Parser.prototype.parseUpdateExpression=function(){
var expr;
var startToken=this.lookahead;
if(this.match('++')||this.match('--')){
var node=this.startNode(startToken);
var token=this.nextToken();
expr=this.inheritCoverGrammar(this.parseUnaryExpression);
if(this.context.strict&&expr.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(expr.name)){
this.tolerateError(messages_1.Messages.StrictLHSPrefix);
}
if(!this.context.isAssignmentTarget){
this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
}
var prefix=true;
expr=this.finalize(node,new Node.UpdateExpression(token.value,expr,prefix));
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
}else
{
expr=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
if(!this.hasLineTerminator&&this.lookahead.type===7){
if(this.match('++')||this.match('--')){
if(this.context.strict&&expr.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(expr.name)){
this.tolerateError(messages_1.Messages.StrictLHSPostfix);
}
if(!this.context.isAssignmentTarget){
this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
}
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
var operator=this.nextToken().value;
var prefix=false;
expr=this.finalize(this.startNode(startToken),new Node.UpdateExpression(operator,expr,prefix));
}
}
}
return expr;
};

Parser.prototype.parseAwaitExpression=function(){
var node=this.createNode();
this.nextToken();
var argument=this.parseUnaryExpression();
return this.finalize(node,new Node.AwaitExpression(argument));
};
Parser.prototype.parseUnaryExpression=function(){
var expr;
if(this.match('+')||this.match('-')||this.match('~')||this.match('!')||
this.matchKeyword('delete')||this.matchKeyword('void')||this.matchKeyword('typeof')){
var node=this.startNode(this.lookahead);
var token=this.nextToken();
expr=this.inheritCoverGrammar(this.parseUnaryExpression);
expr=this.finalize(node,new Node.UnaryExpression(token.value,expr));
if(this.context.strict&&expr.operator==='delete'&&expr.argument.type===syntax_1.Syntax.Identifier){
this.tolerateError(messages_1.Messages.StrictDelete);
}
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
}else
if(this.context.await&&this.matchContextualKeyword('await')){
expr=this.parseAwaitExpression();
}else
{
expr=this.parseUpdateExpression();
}
return expr;
};
Parser.prototype.parseExponentiationExpression=function(){
var startToken=this.lookahead;
var expr=this.inheritCoverGrammar(this.parseUnaryExpression);
if(expr.type!==syntax_1.Syntax.UnaryExpression&&this.match('**')){
this.nextToken();
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
var left=expr;
var right=this.isolateCoverGrammar(this.parseExponentiationExpression);
expr=this.finalize(this.startNode(startToken),new Node.BinaryExpression('**',left,right));
}
return expr;
};








Parser.prototype.binaryPrecedence=function(token){
var op=token.value;
var precedence;
if(token.type===7){
precedence=this.operatorPrecedence[op]||0;
}else
if(token.type===4){
precedence=op==='instanceof'||this.context.allowIn&&op==='in'?7:0;
}else
{
precedence=0;
}
return precedence;
};
Parser.prototype.parseBinaryExpression=function(){
var startToken=this.lookahead;
var expr=this.inheritCoverGrammar(this.parseExponentiationExpression);
var token=this.lookahead;
var prec=this.binaryPrecedence(token);
if(prec>0){
this.nextToken();
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
var markers=[startToken,this.lookahead];
var left=expr;
var right=this.isolateCoverGrammar(this.parseExponentiationExpression);
var stack=[left,token.value,right];
var precedences=[prec];
while(true){
prec=this.binaryPrecedence(this.lookahead);
if(prec<=0){
break;
}

while(stack.length>2&&prec<=precedences[precedences.length-1]){
right=stack.pop();
var operator=stack.pop();
precedences.pop();
left=stack.pop();
markers.pop();
var node=this.startNode(markers[markers.length-1]);
stack.push(this.finalize(node,new Node.BinaryExpression(operator,left,right)));
}

stack.push(this.nextToken().value);
precedences.push(prec);
markers.push(this.lookahead);
stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
}

var i=stack.length-1;
expr=stack[i];
var lastMarker=markers.pop();
while(i>1){
var marker=markers.pop();
var lastLineStart=lastMarker&&lastMarker.lineStart;
var node=this.startNode(marker,lastLineStart);
var operator=stack[i-1];
expr=this.finalize(node,new Node.BinaryExpression(operator,stack[i-2],expr));
i-=2;
lastMarker=marker;
}
}
return expr;
};

Parser.prototype.parseConditionalExpression=function(){
var startToken=this.lookahead;
var expr=this.inheritCoverGrammar(this.parseBinaryExpression);
if(this.match('?')){
this.nextToken();
var previousAllowIn=this.context.allowIn;
this.context.allowIn=true;
var consequent=this.isolateCoverGrammar(this.parseAssignmentExpression);
this.context.allowIn=previousAllowIn;
this.expect(':');
var alternate=this.isolateCoverGrammar(this.parseAssignmentExpression);
expr=this.finalize(this.startNode(startToken),new Node.ConditionalExpression(expr,consequent,alternate));
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
}
return expr;
};

Parser.prototype.checkPatternParam=function(options,param){
switch(param.type){
case syntax_1.Syntax.Identifier:
this.validateParam(options,param,param.name);
break;
case syntax_1.Syntax.RestElement:
this.checkPatternParam(options,param.argument);
break;
case syntax_1.Syntax.AssignmentPattern:
this.checkPatternParam(options,param.left);
break;
case syntax_1.Syntax.ArrayPattern:
for(var i=0;i<param.elements.length;i++){
if(param.elements[i]!==null){
this.checkPatternParam(options,param.elements[i]);
}
}
break;
case syntax_1.Syntax.ObjectPattern:
for(var i=0;i<param.properties.length;i++){
this.checkPatternParam(options,param.properties[i].value);
}
break;
default:
break;}

options.simple=options.simple&&param instanceof Node.Identifier;
};
Parser.prototype.reinterpretAsCoverFormalsList=function(expr){
var params=[expr];
var options;
var asyncArrow=false;
switch(expr.type){
case syntax_1.Syntax.Identifier:
break;
case ArrowParameterPlaceHolder:
params=expr.params;
asyncArrow=expr.async;
break;
default:
return null;}

options={
simple:true,
paramSet:{}};

for(var i=0;i<params.length;++i){
var param=params[i];
if(param.type===syntax_1.Syntax.AssignmentPattern){
if(param.right.type===syntax_1.Syntax.YieldExpression){
if(param.right.argument){
this.throwUnexpectedToken(this.lookahead);
}
param.right.type=syntax_1.Syntax.Identifier;
param.right.name='yield';
delete param.right.argument;
delete param.right.delegate;
}
}else
if(asyncArrow&&param.type===syntax_1.Syntax.Identifier&&param.name==='await'){
this.throwUnexpectedToken(this.lookahead);
}
this.checkPatternParam(options,param);
params[i]=param;
}
if(this.context.strict||!this.context.allowYield){
for(var i=0;i<params.length;++i){
var param=params[i];
if(param.type===syntax_1.Syntax.YieldExpression){
this.throwUnexpectedToken(this.lookahead);
}
}
}
if(options.message===messages_1.Messages.StrictParamDupe){
var token=this.context.strict?options.stricted:options.firstRestricted;
this.throwUnexpectedToken(token,options.message);
}
return{
simple:options.simple,
params:params,
stricted:options.stricted,
firstRestricted:options.firstRestricted,
message:options.message};

};
Parser.prototype.parseAssignmentExpression=function(){
var expr;
if(!this.context.allowYield&&this.matchKeyword('yield')){
expr=this.parseYieldExpression();
}else
{
var startToken=this.lookahead;
var token=startToken;
expr=this.parseConditionalExpression();
if(token.type===3&&token.lineNumber===this.lookahead.lineNumber&&token.value==='async'){
if(this.lookahead.type===3||this.matchKeyword('yield')){
var arg=this.parsePrimaryExpression();
this.reinterpretExpressionAsPattern(arg);
expr={
type:ArrowParameterPlaceHolder,
params:[arg],
async:true};

}
}
if(expr.type===ArrowParameterPlaceHolder||this.match('=>')){

this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
var isAsync=expr.async;
var list=this.reinterpretAsCoverFormalsList(expr);
if(list){
if(this.hasLineTerminator){
this.tolerateUnexpectedToken(this.lookahead);
}
this.context.firstCoverInitializedNameError=null;
var previousStrict=this.context.strict;
var previousAllowStrictDirective=this.context.allowStrictDirective;
this.context.allowStrictDirective=list.simple;
var previousAllowYield=this.context.allowYield;
var previousAwait=this.context.await;
this.context.allowYield=true;
this.context.await=isAsync;
var node=this.startNode(startToken);
this.expect('=>');
var body=void 0;
if(this.match('{')){
var previousAllowIn=this.context.allowIn;
this.context.allowIn=true;
body=this.parseFunctionSourceElements();
this.context.allowIn=previousAllowIn;
}else
{
body=this.isolateCoverGrammar(this.parseAssignmentExpression);
}
var expression=body.type!==syntax_1.Syntax.BlockStatement;
if(this.context.strict&&list.firstRestricted){
this.throwUnexpectedToken(list.firstRestricted,list.message);
}
if(this.context.strict&&list.stricted){
this.tolerateUnexpectedToken(list.stricted,list.message);
}
expr=isAsync?this.finalize(node,new Node.AsyncArrowFunctionExpression(list.params,body,expression)):
this.finalize(node,new Node.ArrowFunctionExpression(list.params,body,expression));
this.context.strict=previousStrict;
this.context.allowStrictDirective=previousAllowStrictDirective;
this.context.allowYield=previousAllowYield;
this.context.await=previousAwait;
}
}else
{
if(this.matchAssign()){
if(!this.context.isAssignmentTarget){
this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
}
if(this.context.strict&&expr.type===syntax_1.Syntax.Identifier){
var id=expr;
if(this.scanner.isRestrictedWord(id.name)){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictLHSAssignment);
}
if(this.scanner.isStrictModeReservedWord(id.name)){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictReservedWord);
}
}
if(!this.match('=')){
this.context.isAssignmentTarget=false;
this.context.isBindingElement=false;
}else
{
this.reinterpretExpressionAsPattern(expr);
}
token=this.nextToken();
var operator=token.value;
var right=this.isolateCoverGrammar(this.parseAssignmentExpression);
expr=this.finalize(this.startNode(startToken),new Node.AssignmentExpression(operator,expr,right));
this.context.firstCoverInitializedNameError=null;
}
}
}
return expr;
};

Parser.prototype.parseExpression=function(){
var startToken=this.lookahead;
var expr=this.isolateCoverGrammar(this.parseAssignmentExpression);
if(this.match(',')){
var expressions=[];
expressions.push(expr);
while(this.lookahead.type!==2){
if(!this.match(',')){
break;
}
this.nextToken();
expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
}
expr=this.finalize(this.startNode(startToken),new Node.SequenceExpression(expressions));
}
return expr;
};

Parser.prototype.parseStatementListItem=function(){
var statement;
this.context.isAssignmentTarget=true;
this.context.isBindingElement=true;
if(this.lookahead.type===4){
switch(this.lookahead.value){
case'export':
if(!this.context.isModule){
this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.IllegalExportDeclaration);
}
statement=this.parseExportDeclaration();
break;
case'import':
if(!this.context.isModule){
this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.IllegalImportDeclaration);
}
statement=this.parseImportDeclaration();
break;
case'const':
statement=this.parseLexicalDeclaration({inFor:false});
break;
case'function':
statement=this.parseFunctionDeclaration();
break;
case'class':
statement=this.parseClassDeclaration();
break;
case'let':
statement=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:false}):this.parseStatement();
break;
default:
statement=this.parseStatement();
break;}

}else
{
statement=this.parseStatement();
}
return statement;
};
Parser.prototype.parseBlock=function(){
var node=this.createNode();
this.expect('{');
var block=[];
while(true){
if(this.match('}')){
break;
}
block.push(this.parseStatementListItem());
}
this.expect('}');
return this.finalize(node,new Node.BlockStatement(block));
};

Parser.prototype.parseLexicalBinding=function(kind,options){
var node=this.createNode();
var params=[];
var id=this.parsePattern(params,kind);
if(this.context.strict&&id.type===syntax_1.Syntax.Identifier){
if(this.scanner.isRestrictedWord(id.name)){
this.tolerateError(messages_1.Messages.StrictVarName);
}
}
var init=null;
if(kind==='const'){
if(!this.matchKeyword('in')&&!this.matchContextualKeyword('of')){
if(this.match('=')){
this.nextToken();
init=this.isolateCoverGrammar(this.parseAssignmentExpression);
}else
{
this.throwError(messages_1.Messages.DeclarationMissingInitializer,'const');
}
}
}else
if(!options.inFor&&id.type!==syntax_1.Syntax.Identifier||this.match('=')){
this.expect('=');
init=this.isolateCoverGrammar(this.parseAssignmentExpression);
}
return this.finalize(node,new Node.VariableDeclarator(id,init));
};
Parser.prototype.parseBindingList=function(kind,options){
var list=[this.parseLexicalBinding(kind,options)];
while(this.match(',')){
this.nextToken();
list.push(this.parseLexicalBinding(kind,options));
}
return list;
};
Parser.prototype.isLexicalDeclaration=function(){
var state=this.scanner.saveState();
this.scanner.scanComments();
var next=this.scanner.lex();
this.scanner.restoreState(state);
return next.type===3||
next.type===7&&next.value==='['||
next.type===7&&next.value==='{'||
next.type===4&&next.value==='let'||
next.type===4&&next.value==='yield';
};
Parser.prototype.parseLexicalDeclaration=function(options){
var node=this.createNode();
var kind=this.nextToken().value;
assert_1.assert(kind==='let'||kind==='const','Lexical declaration must be either let or const');
var declarations=this.parseBindingList(kind,options);
this.consumeSemicolon();
return this.finalize(node,new Node.VariableDeclaration(declarations,kind));
};

Parser.prototype.parseBindingRestElement=function(params,kind){
var node=this.createNode();
this.expect('...');
var arg=this.parsePattern(params,kind);
return this.finalize(node,new Node.RestElement(arg));
};
Parser.prototype.parseArrayPattern=function(params,kind){
var node=this.createNode();
this.expect('[');
var elements=[];
while(!this.match(']')){
if(this.match(',')){
this.nextToken();
elements.push(null);
}else
{
if(this.match('...')){
elements.push(this.parseBindingRestElement(params,kind));
break;
}else
{
elements.push(this.parsePatternWithDefault(params,kind));
}
if(!this.match(']')){
this.expect(',');
}
}
}
this.expect(']');
return this.finalize(node,new Node.ArrayPattern(elements));
};
Parser.prototype.parsePropertyPattern=function(params,kind){
var node=this.createNode();
var computed=false;
var shorthand=false;
var method=false;
var key;
var value;
if(this.lookahead.type===3){
var keyToken=this.lookahead;
key=this.parseVariableIdentifier();
var init=this.finalize(node,new Node.Identifier(keyToken.value));
if(this.match('=')){
params.push(keyToken);
shorthand=true;
this.nextToken();
var expr=this.parseAssignmentExpression();
value=this.finalize(this.startNode(keyToken),new Node.AssignmentPattern(init,expr));
}else
if(!this.match(':')){
params.push(keyToken);
shorthand=true;
value=init;
}else
{
this.expect(':');
value=this.parsePatternWithDefault(params,kind);
}
}else
{
computed=this.match('[');
key=this.parseObjectPropertyKey();
this.expect(':');
value=this.parsePatternWithDefault(params,kind);
}
return this.finalize(node,new Node.Property('init',key,computed,value,method,shorthand));
};
Parser.prototype.parseObjectPattern=function(params,kind){
var node=this.createNode();
var properties=[];
this.expect('{');
while(!this.match('}')){
properties.push(this.parsePropertyPattern(params,kind));
if(!this.match('}')){
this.expect(',');
}
}
this.expect('}');
return this.finalize(node,new Node.ObjectPattern(properties));
};
Parser.prototype.parsePattern=function(params,kind){
var pattern;
if(this.match('[')){
pattern=this.parseArrayPattern(params,kind);
}else
if(this.match('{')){
pattern=this.parseObjectPattern(params,kind);
}else
{
if(this.matchKeyword('let')&&(kind==='const'||kind==='let')){
this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.LetInLexicalBinding);
}
params.push(this.lookahead);
pattern=this.parseVariableIdentifier(kind);
}
return pattern;
};
Parser.prototype.parsePatternWithDefault=function(params,kind){
var startToken=this.lookahead;
var pattern=this.parsePattern(params,kind);
if(this.match('=')){
this.nextToken();
var previousAllowYield=this.context.allowYield;
this.context.allowYield=true;
var right=this.isolateCoverGrammar(this.parseAssignmentExpression);
this.context.allowYield=previousAllowYield;
pattern=this.finalize(this.startNode(startToken),new Node.AssignmentPattern(pattern,right));
}
return pattern;
};

Parser.prototype.parseVariableIdentifier=function(kind){
var node=this.createNode();
var token=this.nextToken();
if(token.type===4&&token.value==='yield'){
if(this.context.strict){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictReservedWord);
}else
if(!this.context.allowYield){
this.throwUnexpectedToken(token);
}
}else
if(token.type!==3){
if(this.context.strict&&token.type===4&&this.scanner.isStrictModeReservedWord(token.value)){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictReservedWord);
}else
{
if(this.context.strict||token.value!=='let'||kind!=='var'){
this.throwUnexpectedToken(token);
}
}
}else
if((this.context.isModule||this.context.await)&&token.type===3&&token.value==='await'){
this.tolerateUnexpectedToken(token);
}
return this.finalize(node,new Node.Identifier(token.value));
};
Parser.prototype.parseVariableDeclaration=function(options){
var node=this.createNode();
var params=[];
var id=this.parsePattern(params,'var');
if(this.context.strict&&id.type===syntax_1.Syntax.Identifier){
if(this.scanner.isRestrictedWord(id.name)){
this.tolerateError(messages_1.Messages.StrictVarName);
}
}
var init=null;
if(this.match('=')){
this.nextToken();
init=this.isolateCoverGrammar(this.parseAssignmentExpression);
}else
if(id.type!==syntax_1.Syntax.Identifier&&!options.inFor){
this.expect('=');
}
return this.finalize(node,new Node.VariableDeclarator(id,init));
};
Parser.prototype.parseVariableDeclarationList=function(options){
var opt={inFor:options.inFor};
var list=[];
list.push(this.parseVariableDeclaration(opt));
while(this.match(',')){
this.nextToken();
list.push(this.parseVariableDeclaration(opt));
}
return list;
};
Parser.prototype.parseVariableStatement=function(){
var node=this.createNode();
this.expectKeyword('var');
var declarations=this.parseVariableDeclarationList({inFor:false});
this.consumeSemicolon();
return this.finalize(node,new Node.VariableDeclaration(declarations,'var'));
};

Parser.prototype.parseEmptyStatement=function(){
var node=this.createNode();
this.expect(';');
return this.finalize(node,new Node.EmptyStatement());
};

Parser.prototype.parseExpressionStatement=function(){
var node=this.createNode();
var expr=this.parseExpression();
this.consumeSemicolon();
return this.finalize(node,new Node.ExpressionStatement(expr));
};

Parser.prototype.parseIfClause=function(){
if(this.context.strict&&this.matchKeyword('function')){
this.tolerateError(messages_1.Messages.StrictFunction);
}
return this.parseStatement();
};
Parser.prototype.parseIfStatement=function(){
var node=this.createNode();
var consequent;
var alternate=null;
this.expectKeyword('if');
this.expect('(');
var test=this.parseExpression();
if(!this.match(')')&&this.config.tolerant){
this.tolerateUnexpectedToken(this.nextToken());
consequent=this.finalize(this.createNode(),new Node.EmptyStatement());
}else
{
this.expect(')');
consequent=this.parseIfClause();
if(this.matchKeyword('else')){
this.nextToken();
alternate=this.parseIfClause();
}
}
return this.finalize(node,new Node.IfStatement(test,consequent,alternate));
};

Parser.prototype.parseDoWhileStatement=function(){
var node=this.createNode();
this.expectKeyword('do');
var previousInIteration=this.context.inIteration;
this.context.inIteration=true;
var body=this.parseStatement();
this.context.inIteration=previousInIteration;
this.expectKeyword('while');
this.expect('(');
var test=this.parseExpression();
if(!this.match(')')&&this.config.tolerant){
this.tolerateUnexpectedToken(this.nextToken());
}else
{
this.expect(')');
if(this.match(';')){
this.nextToken();
}
}
return this.finalize(node,new Node.DoWhileStatement(body,test));
};

Parser.prototype.parseWhileStatement=function(){
var node=this.createNode();
var body;
this.expectKeyword('while');
this.expect('(');
var test=this.parseExpression();
if(!this.match(')')&&this.config.tolerant){
this.tolerateUnexpectedToken(this.nextToken());
body=this.finalize(this.createNode(),new Node.EmptyStatement());
}else
{
this.expect(')');
var previousInIteration=this.context.inIteration;
this.context.inIteration=true;
body=this.parseStatement();
this.context.inIteration=previousInIteration;
}
return this.finalize(node,new Node.WhileStatement(test,body));
};


Parser.prototype.parseForStatement=function(){
var init=null;
var test=null;
var update=null;
var forIn=true;
var left,right;
var node=this.createNode();
this.expectKeyword('for');
this.expect('(');
if(this.match(';')){
this.nextToken();
}else
{
if(this.matchKeyword('var')){
init=this.createNode();
this.nextToken();
var previousAllowIn=this.context.allowIn;
this.context.allowIn=false;
var declarations=this.parseVariableDeclarationList({inFor:true});
this.context.allowIn=previousAllowIn;
if(declarations.length===1&&this.matchKeyword('in')){
var decl=declarations[0];
if(decl.init&&(decl.id.type===syntax_1.Syntax.ArrayPattern||decl.id.type===syntax_1.Syntax.ObjectPattern||this.context.strict)){
this.tolerateError(messages_1.Messages.ForInOfLoopInitializer,'for-in');
}
init=this.finalize(init,new Node.VariableDeclaration(declarations,'var'));
this.nextToken();
left=init;
right=this.parseExpression();
init=null;
}else
if(declarations.length===1&&declarations[0].init===null&&this.matchContextualKeyword('of')){
init=this.finalize(init,new Node.VariableDeclaration(declarations,'var'));
this.nextToken();
left=init;
right=this.parseAssignmentExpression();
init=null;
forIn=false;
}else
{
init=this.finalize(init,new Node.VariableDeclaration(declarations,'var'));
this.expect(';');
}
}else
if(this.matchKeyword('const')||this.matchKeyword('let')){
init=this.createNode();
var kind=this.nextToken().value;
if(!this.context.strict&&this.lookahead.value==='in'){
init=this.finalize(init,new Node.Identifier(kind));
this.nextToken();
left=init;
right=this.parseExpression();
init=null;
}else
{
var previousAllowIn=this.context.allowIn;
this.context.allowIn=false;
var declarations=this.parseBindingList(kind,{inFor:true});
this.context.allowIn=previousAllowIn;
if(declarations.length===1&&declarations[0].init===null&&this.matchKeyword('in')){
init=this.finalize(init,new Node.VariableDeclaration(declarations,kind));
this.nextToken();
left=init;
right=this.parseExpression();
init=null;
}else
if(declarations.length===1&&declarations[0].init===null&&this.matchContextualKeyword('of')){
init=this.finalize(init,new Node.VariableDeclaration(declarations,kind));
this.nextToken();
left=init;
right=this.parseAssignmentExpression();
init=null;
forIn=false;
}else
{
this.consumeSemicolon();
init=this.finalize(init,new Node.VariableDeclaration(declarations,kind));
}
}
}else
{
var initStartToken=this.lookahead;
var previousAllowIn=this.context.allowIn;
this.context.allowIn=false;
init=this.inheritCoverGrammar(this.parseAssignmentExpression);
this.context.allowIn=previousAllowIn;
if(this.matchKeyword('in')){
if(!this.context.isAssignmentTarget||init.type===syntax_1.Syntax.AssignmentExpression){
this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
}
this.nextToken();
this.reinterpretExpressionAsPattern(init);
left=init;
right=this.parseExpression();
init=null;
}else
if(this.matchContextualKeyword('of')){
if(!this.context.isAssignmentTarget||init.type===syntax_1.Syntax.AssignmentExpression){
this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
}
this.nextToken();
this.reinterpretExpressionAsPattern(init);
left=init;
right=this.parseAssignmentExpression();
init=null;
forIn=false;
}else
{
if(this.match(',')){
var initSeq=[init];
while(this.match(',')){
this.nextToken();
initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
}
init=this.finalize(this.startNode(initStartToken),new Node.SequenceExpression(initSeq));
}
this.expect(';');
}
}
}
if(typeof left==='undefined'){
if(!this.match(';')){
test=this.parseExpression();
}
this.expect(';');
if(!this.match(')')){
update=this.parseExpression();
}
}
var body;
if(!this.match(')')&&this.config.tolerant){
this.tolerateUnexpectedToken(this.nextToken());
body=this.finalize(this.createNode(),new Node.EmptyStatement());
}else
{
this.expect(')');
var previousInIteration=this.context.inIteration;
this.context.inIteration=true;
body=this.isolateCoverGrammar(this.parseStatement);
this.context.inIteration=previousInIteration;
}
return typeof left==='undefined'?
this.finalize(node,new Node.ForStatement(init,test,update,body)):
forIn?this.finalize(node,new Node.ForInStatement(left,right,body)):
this.finalize(node,new Node.ForOfStatement(left,right,body));
};

Parser.prototype.parseContinueStatement=function(){
var node=this.createNode();
this.expectKeyword('continue');
var label=null;
if(this.lookahead.type===3&&!this.hasLineTerminator){
var id=this.parseVariableIdentifier();
label=id;
var key='$'+id.name;
if(!Object.prototype.hasOwnProperty.call(this.context.labelSet,key)){
this.throwError(messages_1.Messages.UnknownLabel,id.name);
}
}
this.consumeSemicolon();
if(label===null&&!this.context.inIteration){
this.throwError(messages_1.Messages.IllegalContinue);
}
return this.finalize(node,new Node.ContinueStatement(label));
};

Parser.prototype.parseBreakStatement=function(){
var node=this.createNode();
this.expectKeyword('break');
var label=null;
if(this.lookahead.type===3&&!this.hasLineTerminator){
var id=this.parseVariableIdentifier();
var key='$'+id.name;
if(!Object.prototype.hasOwnProperty.call(this.context.labelSet,key)){
this.throwError(messages_1.Messages.UnknownLabel,id.name);
}
label=id;
}
this.consumeSemicolon();
if(label===null&&!this.context.inIteration&&!this.context.inSwitch){
this.throwError(messages_1.Messages.IllegalBreak);
}
return this.finalize(node,new Node.BreakStatement(label));
};

Parser.prototype.parseReturnStatement=function(){
if(!this.context.inFunctionBody){
this.tolerateError(messages_1.Messages.IllegalReturn);
}
var node=this.createNode();
this.expectKeyword('return');
var hasArgument=!this.match(';')&&!this.match('}')&&
!this.hasLineTerminator&&this.lookahead.type!==2||
this.lookahead.type===8||
this.lookahead.type===10;
var argument=hasArgument?this.parseExpression():null;
this.consumeSemicolon();
return this.finalize(node,new Node.ReturnStatement(argument));
};

Parser.prototype.parseWithStatement=function(){
if(this.context.strict){
this.tolerateError(messages_1.Messages.StrictModeWith);
}
var node=this.createNode();
var body;
this.expectKeyword('with');
this.expect('(');
var object=this.parseExpression();
if(!this.match(')')&&this.config.tolerant){
this.tolerateUnexpectedToken(this.nextToken());
body=this.finalize(this.createNode(),new Node.EmptyStatement());
}else
{
this.expect(')');
body=this.parseStatement();
}
return this.finalize(node,new Node.WithStatement(object,body));
};

Parser.prototype.parseSwitchCase=function(){
var node=this.createNode();
var test;
if(this.matchKeyword('default')){
this.nextToken();
test=null;
}else
{
this.expectKeyword('case');
test=this.parseExpression();
}
this.expect(':');
var consequent=[];
while(true){
if(this.match('}')||this.matchKeyword('default')||this.matchKeyword('case')){
break;
}
consequent.push(this.parseStatementListItem());
}
return this.finalize(node,new Node.SwitchCase(test,consequent));
};
Parser.prototype.parseSwitchStatement=function(){
var node=this.createNode();
this.expectKeyword('switch');
this.expect('(');
var discriminant=this.parseExpression();
this.expect(')');
var previousInSwitch=this.context.inSwitch;
this.context.inSwitch=true;
var cases=[];
var defaultFound=false;
this.expect('{');
while(true){
if(this.match('}')){
break;
}
var clause=this.parseSwitchCase();
if(clause.test===null){
if(defaultFound){
this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
}
defaultFound=true;
}
cases.push(clause);
}
this.expect('}');
this.context.inSwitch=previousInSwitch;
return this.finalize(node,new Node.SwitchStatement(discriminant,cases));
};

Parser.prototype.parseLabelledStatement=function(){
var node=this.createNode();
var expr=this.parseExpression();
var statement;
if(expr.type===syntax_1.Syntax.Identifier&&this.match(':')){
this.nextToken();
var id=expr;
var key='$'+id.name;
if(Object.prototype.hasOwnProperty.call(this.context.labelSet,key)){
this.throwError(messages_1.Messages.Redeclaration,'Label',id.name);
}
this.context.labelSet[key]=true;
var body=void 0;
if(this.matchKeyword('class')){
this.tolerateUnexpectedToken(this.lookahead);
body=this.parseClassDeclaration();
}else
if(this.matchKeyword('function')){
var token=this.lookahead;
var declaration=this.parseFunctionDeclaration();
if(this.context.strict){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictFunction);
}else
if(declaration.generator){
this.tolerateUnexpectedToken(token,messages_1.Messages.GeneratorInLegacyContext);
}
body=declaration;
}else
{
body=this.parseStatement();
}
delete this.context.labelSet[key];
statement=new Node.LabeledStatement(id,body);
}else
{
this.consumeSemicolon();
statement=new Node.ExpressionStatement(expr);
}
return this.finalize(node,statement);
};

Parser.prototype.parseThrowStatement=function(){
var node=this.createNode();
this.expectKeyword('throw');
if(this.hasLineTerminator){
this.throwError(messages_1.Messages.NewlineAfterThrow);
}
var argument=this.parseExpression();
this.consumeSemicolon();
return this.finalize(node,new Node.ThrowStatement(argument));
};

Parser.prototype.parseCatchClause=function(){
var node=this.createNode();
this.expectKeyword('catch');
this.expect('(');
if(this.match(')')){
this.throwUnexpectedToken(this.lookahead);
}
var params=[];
var param=this.parsePattern(params);
var paramMap={};
for(var i=0;i<params.length;i++){
var key='$'+params[i].value;
if(Object.prototype.hasOwnProperty.call(paramMap,key)){
this.tolerateError(messages_1.Messages.DuplicateBinding,params[i].value);
}
paramMap[key]=true;
}
if(this.context.strict&&param.type===syntax_1.Syntax.Identifier){
if(this.scanner.isRestrictedWord(param.name)){
this.tolerateError(messages_1.Messages.StrictCatchVariable);
}
}
this.expect(')');
var body=this.parseBlock();
return this.finalize(node,new Node.CatchClause(param,body));
};
Parser.prototype.parseFinallyClause=function(){
this.expectKeyword('finally');
return this.parseBlock();
};
Parser.prototype.parseTryStatement=function(){
var node=this.createNode();
this.expectKeyword('try');
var block=this.parseBlock();
var handler=this.matchKeyword('catch')?this.parseCatchClause():null;
var finalizer=this.matchKeyword('finally')?this.parseFinallyClause():null;
if(!handler&&!finalizer){
this.throwError(messages_1.Messages.NoCatchOrFinally);
}
return this.finalize(node,new Node.TryStatement(block,handler,finalizer));
};

Parser.prototype.parseDebuggerStatement=function(){
var node=this.createNode();
this.expectKeyword('debugger');
this.consumeSemicolon();
return this.finalize(node,new Node.DebuggerStatement());
};

Parser.prototype.parseStatement=function(){
var statement;
switch(this.lookahead.type){
case 1:
case 5:
case 6:
case 8:
case 10:
case 9:
statement=this.parseExpressionStatement();
break;
case 7:
var value=this.lookahead.value;
if(value==='{'){
statement=this.parseBlock();
}else
if(value==='('){
statement=this.parseExpressionStatement();
}else
if(value===';'){
statement=this.parseEmptyStatement();
}else
{
statement=this.parseExpressionStatement();
}
break;
case 3:
statement=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();
break;
case 4:
switch(this.lookahead.value){
case'break':
statement=this.parseBreakStatement();
break;
case'continue':
statement=this.parseContinueStatement();
break;
case'debugger':
statement=this.parseDebuggerStatement();
break;
case'do':
statement=this.parseDoWhileStatement();
break;
case'for':
statement=this.parseForStatement();
break;
case'function':
statement=this.parseFunctionDeclaration();
break;
case'if':
statement=this.parseIfStatement();
break;
case'return':
statement=this.parseReturnStatement();
break;
case'switch':
statement=this.parseSwitchStatement();
break;
case'throw':
statement=this.parseThrowStatement();
break;
case'try':
statement=this.parseTryStatement();
break;
case'var':
statement=this.parseVariableStatement();
break;
case'while':
statement=this.parseWhileStatement();
break;
case'with':
statement=this.parseWithStatement();
break;
default:
statement=this.parseExpressionStatement();
break;}

break;
default:
statement=this.throwUnexpectedToken(this.lookahead);}

return statement;
};

Parser.prototype.parseFunctionSourceElements=function(){
var node=this.createNode();
this.expect('{');
var body=this.parseDirectivePrologues();
var previousLabelSet=this.context.labelSet;
var previousInIteration=this.context.inIteration;
var previousInSwitch=this.context.inSwitch;
var previousInFunctionBody=this.context.inFunctionBody;
this.context.labelSet={};
this.context.inIteration=false;
this.context.inSwitch=false;
this.context.inFunctionBody=true;
while(this.lookahead.type!==2){
if(this.match('}')){
break;
}
body.push(this.parseStatementListItem());
}
this.expect('}');
this.context.labelSet=previousLabelSet;
this.context.inIteration=previousInIteration;
this.context.inSwitch=previousInSwitch;
this.context.inFunctionBody=previousInFunctionBody;
return this.finalize(node,new Node.BlockStatement(body));
};
Parser.prototype.validateParam=function(options,param,name){
var key='$'+name;
if(this.context.strict){
if(this.scanner.isRestrictedWord(name)){
options.stricted=param;
options.message=messages_1.Messages.StrictParamName;
}
if(Object.prototype.hasOwnProperty.call(options.paramSet,key)){
options.stricted=param;
options.message=messages_1.Messages.StrictParamDupe;
}
}else
if(!options.firstRestricted){
if(this.scanner.isRestrictedWord(name)){
options.firstRestricted=param;
options.message=messages_1.Messages.StrictParamName;
}else
if(this.scanner.isStrictModeReservedWord(name)){
options.firstRestricted=param;
options.message=messages_1.Messages.StrictReservedWord;
}else
if(Object.prototype.hasOwnProperty.call(options.paramSet,key)){
options.stricted=param;
options.message=messages_1.Messages.StrictParamDupe;
}
}

if(typeof Object.defineProperty==='function'){
Object.defineProperty(options.paramSet,key,{value:true,enumerable:true,writable:true,configurable:true});
}else
{
options.paramSet[key]=true;
}
};
Parser.prototype.parseRestElement=function(params){
var node=this.createNode();
this.expect('...');
var arg=this.parsePattern(params);
if(this.match('=')){
this.throwError(messages_1.Messages.DefaultRestParameter);
}
if(!this.match(')')){
this.throwError(messages_1.Messages.ParameterAfterRestParameter);
}
return this.finalize(node,new Node.RestElement(arg));
};
Parser.prototype.parseFormalParameter=function(options){
var params=[];
var param=this.match('...')?this.parseRestElement(params):this.parsePatternWithDefault(params);
for(var i=0;i<params.length;i++){
this.validateParam(options,params[i],params[i].value);
}
options.simple=options.simple&&param instanceof Node.Identifier;
options.params.push(param);
};
Parser.prototype.parseFormalParameters=function(firstRestricted){
var options;
options={
simple:true,
params:[],
firstRestricted:firstRestricted};

this.expect('(');
if(!this.match(')')){
options.paramSet={};
while(this.lookahead.type!==2){
this.parseFormalParameter(options);
if(this.match(')')){
break;
}
this.expect(',');
if(this.match(')')){
break;
}
}
}
this.expect(')');
return{
simple:options.simple,
params:options.params,
stricted:options.stricted,
firstRestricted:options.firstRestricted,
message:options.message};

};
Parser.prototype.matchAsyncFunction=function(){
var match=this.matchContextualKeyword('async');
if(match){
var state=this.scanner.saveState();
this.scanner.scanComments();
var next=this.scanner.lex();
this.scanner.restoreState(state);
match=state.lineNumber===next.lineNumber&&next.type===4&&next.value==='function';
}
return match;
};
Parser.prototype.parseFunctionDeclaration=function(identifierIsOptional){
var node=this.createNode();
var isAsync=this.matchContextualKeyword('async');
if(isAsync){
this.nextToken();
}
this.expectKeyword('function');
var isGenerator=isAsync?false:this.match('*');
if(isGenerator){
this.nextToken();
}
var message;
var id=null;
var firstRestricted=null;
if(!identifierIsOptional||!this.match('(')){
var token=this.lookahead;
id=this.parseVariableIdentifier();
if(this.context.strict){
if(this.scanner.isRestrictedWord(token.value)){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictFunctionName);
}
}else
{
if(this.scanner.isRestrictedWord(token.value)){
firstRestricted=token;
message=messages_1.Messages.StrictFunctionName;
}else
if(this.scanner.isStrictModeReservedWord(token.value)){
firstRestricted=token;
message=messages_1.Messages.StrictReservedWord;
}
}
}
var previousAllowAwait=this.context.await;
var previousAllowYield=this.context.allowYield;
this.context.await=isAsync;
this.context.allowYield=!isGenerator;
var formalParameters=this.parseFormalParameters(firstRestricted);
var params=formalParameters.params;
var stricted=formalParameters.stricted;
firstRestricted=formalParameters.firstRestricted;
if(formalParameters.message){
message=formalParameters.message;
}
var previousStrict=this.context.strict;
var previousAllowStrictDirective=this.context.allowStrictDirective;
this.context.allowStrictDirective=formalParameters.simple;
var body=this.parseFunctionSourceElements();
if(this.context.strict&&firstRestricted){
this.throwUnexpectedToken(firstRestricted,message);
}
if(this.context.strict&&stricted){
this.tolerateUnexpectedToken(stricted,message);
}
this.context.strict=previousStrict;
this.context.allowStrictDirective=previousAllowStrictDirective;
this.context.await=previousAllowAwait;
this.context.allowYield=previousAllowYield;
return isAsync?this.finalize(node,new Node.AsyncFunctionDeclaration(id,params,body)):
this.finalize(node,new Node.FunctionDeclaration(id,params,body,isGenerator));
};
Parser.prototype.parseFunctionExpression=function(){
var node=this.createNode();
var isAsync=this.matchContextualKeyword('async');
if(isAsync){
this.nextToken();
}
this.expectKeyword('function');
var isGenerator=isAsync?false:this.match('*');
if(isGenerator){
this.nextToken();
}
var message;
var id=null;
var firstRestricted;
var previousAllowAwait=this.context.await;
var previousAllowYield=this.context.allowYield;
this.context.await=isAsync;
this.context.allowYield=!isGenerator;
if(!this.match('(')){
var token=this.lookahead;
id=!this.context.strict&&!isGenerator&&this.matchKeyword('yield')?this.parseIdentifierName():this.parseVariableIdentifier();
if(this.context.strict){
if(this.scanner.isRestrictedWord(token.value)){
this.tolerateUnexpectedToken(token,messages_1.Messages.StrictFunctionName);
}
}else
{
if(this.scanner.isRestrictedWord(token.value)){
firstRestricted=token;
message=messages_1.Messages.StrictFunctionName;
}else
if(this.scanner.isStrictModeReservedWord(token.value)){
firstRestricted=token;
message=messages_1.Messages.StrictReservedWord;
}
}
}
var formalParameters=this.parseFormalParameters(firstRestricted);
var params=formalParameters.params;
var stricted=formalParameters.stricted;
firstRestricted=formalParameters.firstRestricted;
if(formalParameters.message){
message=formalParameters.message;
}
var previousStrict=this.context.strict;
var previousAllowStrictDirective=this.context.allowStrictDirective;
this.context.allowStrictDirective=formalParameters.simple;
var body=this.parseFunctionSourceElements();
if(this.context.strict&&firstRestricted){
this.throwUnexpectedToken(firstRestricted,message);
}
if(this.context.strict&&stricted){
this.tolerateUnexpectedToken(stricted,message);
}
this.context.strict=previousStrict;
this.context.allowStrictDirective=previousAllowStrictDirective;
this.context.await=previousAllowAwait;
this.context.allowYield=previousAllowYield;
return isAsync?this.finalize(node,new Node.AsyncFunctionExpression(id,params,body)):
this.finalize(node,new Node.FunctionExpression(id,params,body,isGenerator));
};

Parser.prototype.parseDirective=function(){
var token=this.lookahead;
var node=this.createNode();
var expr=this.parseExpression();
var directive=expr.type===syntax_1.Syntax.Literal?this.getTokenRaw(token).slice(1,-1):null;
this.consumeSemicolon();
return this.finalize(node,directive?new Node.Directive(expr,directive):new Node.ExpressionStatement(expr));
};
Parser.prototype.parseDirectivePrologues=function(){
var firstRestricted=null;
var body=[];
while(true){
var token=this.lookahead;
if(token.type!==8){
break;
}
var statement=this.parseDirective();
body.push(statement);
var directive=statement.directive;
if(typeof directive!=='string'){
break;
}
if(directive==='use strict'){
this.context.strict=true;
if(firstRestricted){
this.tolerateUnexpectedToken(firstRestricted,messages_1.Messages.StrictOctalLiteral);
}
if(!this.context.allowStrictDirective){
this.tolerateUnexpectedToken(token,messages_1.Messages.IllegalLanguageModeDirective);
}
}else
{
if(!firstRestricted&&token.octal){
firstRestricted=token;
}
}
}
return body;
};

Parser.prototype.qualifiedPropertyName=function(token){
switch(token.type){
case 3:
case 8:
case 1:
case 5:
case 6:
case 4:
return true;
case 7:
return token.value==='[';
default:
break;}

return false;
};
Parser.prototype.parseGetterMethod=function(){
var node=this.createNode();
var isGenerator=false;
var previousAllowYield=this.context.allowYield;
this.context.allowYield=!isGenerator;
var formalParameters=this.parseFormalParameters();
if(formalParameters.params.length>0){
this.tolerateError(messages_1.Messages.BadGetterArity);
}
var method=this.parsePropertyMethod(formalParameters);
this.context.allowYield=previousAllowYield;
return this.finalize(node,new Node.FunctionExpression(null,formalParameters.params,method,isGenerator));
};
Parser.prototype.parseSetterMethod=function(){
var node=this.createNode();
var isGenerator=false;
var previousAllowYield=this.context.allowYield;
this.context.allowYield=!isGenerator;
var formalParameters=this.parseFormalParameters();
if(formalParameters.params.length!==1){
this.tolerateError(messages_1.Messages.BadSetterArity);
}else
if(formalParameters.params[0]instanceof Node.RestElement){
this.tolerateError(messages_1.Messages.BadSetterRestParameter);
}
var method=this.parsePropertyMethod(formalParameters);
this.context.allowYield=previousAllowYield;
return this.finalize(node,new Node.FunctionExpression(null,formalParameters.params,method,isGenerator));
};
Parser.prototype.parseGeneratorMethod=function(){
var node=this.createNode();
var isGenerator=true;
var previousAllowYield=this.context.allowYield;
this.context.allowYield=true;
var params=this.parseFormalParameters();
this.context.allowYield=false;
var method=this.parsePropertyMethod(params);
this.context.allowYield=previousAllowYield;
return this.finalize(node,new Node.FunctionExpression(null,params.params,method,isGenerator));
};

Parser.prototype.isStartOfExpression=function(){
var start=true;
var value=this.lookahead.value;
switch(this.lookahead.type){
case 7:
start=value==='['||value==='('||value==='{'||
value==='+'||value==='-'||
value==='!'||value==='~'||
value==='++'||value==='--'||
value==='/'||value==='/=';
break;
case 4:
start=value==='class'||value==='delete'||
value==='function'||value==='let'||value==='new'||
value==='super'||value==='this'||value==='typeof'||
value==='void'||value==='yield';
break;
default:
break;}

return start;
};
Parser.prototype.parseYieldExpression=function(){
var node=this.createNode();
this.expectKeyword('yield');
var argument=null;
var delegate=false;
if(!this.hasLineTerminator){
var previousAllowYield=this.context.allowYield;
this.context.allowYield=false;
delegate=this.match('*');
if(delegate){
this.nextToken();
argument=this.parseAssignmentExpression();
}else
if(this.isStartOfExpression()){
argument=this.parseAssignmentExpression();
}
this.context.allowYield=previousAllowYield;
}
return this.finalize(node,new Node.YieldExpression(argument,delegate));
};

Parser.prototype.parseClassElement=function(hasConstructor){
var token=this.lookahead;
var node=this.createNode();
var kind='';
var key=null;
var value=null;
var computed=false;
var method=false;
var isStatic=false;
var isAsync=false;
if(this.match('*')){
this.nextToken();
}else
{
computed=this.match('[');
key=this.parseObjectPropertyKey();
var id=key;
if(id.name==='static'&&(this.qualifiedPropertyName(this.lookahead)||this.match('*'))){
token=this.lookahead;
isStatic=true;
computed=this.match('[');
if(this.match('*')){
this.nextToken();
}else
{
key=this.parseObjectPropertyKey();
}
}
if(token.type===3&&!this.hasLineTerminator&&token.value==='async'){
var punctuator=this.lookahead.value;
if(punctuator!==':'&&punctuator!=='('&&punctuator!=='*'){
isAsync=true;
token=this.lookahead;
key=this.parseObjectPropertyKey();
if(token.type===3&&token.value==='constructor'){
this.tolerateUnexpectedToken(token,messages_1.Messages.ConstructorIsAsync);
}
}
}
}
var lookaheadPropertyKey=this.qualifiedPropertyName(this.lookahead);
if(token.type===3){
if(token.value==='get'&&lookaheadPropertyKey){
kind='get';
computed=this.match('[');
key=this.parseObjectPropertyKey();
this.context.allowYield=false;
value=this.parseGetterMethod();
}else
if(token.value==='set'&&lookaheadPropertyKey){
kind='set';
computed=this.match('[');
key=this.parseObjectPropertyKey();
value=this.parseSetterMethod();
}
}else
if(token.type===7&&token.value==='*'&&lookaheadPropertyKey){
kind='init';
computed=this.match('[');
key=this.parseObjectPropertyKey();
value=this.parseGeneratorMethod();
method=true;
}
if(!kind&&key&&this.match('(')){
kind='init';
value=isAsync?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction();
method=true;
}
if(!kind){
this.throwUnexpectedToken(this.lookahead);
}
if(kind==='init'){
kind='method';
}
if(!computed){
if(isStatic&&this.isPropertyKey(key,'prototype')){
this.throwUnexpectedToken(token,messages_1.Messages.StaticPrototype);
}
if(!isStatic&&this.isPropertyKey(key,'constructor')){
if(kind!=='method'||!method||value&&value.generator){
this.throwUnexpectedToken(token,messages_1.Messages.ConstructorSpecialMethod);
}
if(hasConstructor.value){
this.throwUnexpectedToken(token,messages_1.Messages.DuplicateConstructor);
}else
{
hasConstructor.value=true;
}
kind='constructor';
}
}
return this.finalize(node,new Node.MethodDefinition(key,computed,value,kind,isStatic));
};
Parser.prototype.parseClassElementList=function(){
var body=[];
var hasConstructor={value:false};
this.expect('{');
while(!this.match('}')){
if(this.match(';')){
this.nextToken();
}else
{
body.push(this.parseClassElement(hasConstructor));
}
}
this.expect('}');
return body;
};
Parser.prototype.parseClassBody=function(){
var node=this.createNode();
var elementList=this.parseClassElementList();
return this.finalize(node,new Node.ClassBody(elementList));
};
Parser.prototype.parseClassDeclaration=function(identifierIsOptional){
var node=this.createNode();
var previousStrict=this.context.strict;
this.context.strict=true;
this.expectKeyword('class');
var id=identifierIsOptional&&this.lookahead.type!==3?null:this.parseVariableIdentifier();
var superClass=null;
if(this.matchKeyword('extends')){
this.nextToken();
superClass=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
}
var classBody=this.parseClassBody();
this.context.strict=previousStrict;
return this.finalize(node,new Node.ClassDeclaration(id,superClass,classBody));
};
Parser.prototype.parseClassExpression=function(){
var node=this.createNode();
var previousStrict=this.context.strict;
this.context.strict=true;
this.expectKeyword('class');
var id=this.lookahead.type===3?this.parseVariableIdentifier():null;
var superClass=null;
if(this.matchKeyword('extends')){
this.nextToken();
superClass=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
}
var classBody=this.parseClassBody();
this.context.strict=previousStrict;
return this.finalize(node,new Node.ClassExpression(id,superClass,classBody));
};


Parser.prototype.parseModule=function(){
this.context.strict=true;
this.context.isModule=true;
this.scanner.isModule=true;
var node=this.createNode();
var body=this.parseDirectivePrologues();
while(this.lookahead.type!==2){
body.push(this.parseStatementListItem());
}
return this.finalize(node,new Node.Module(body));
};
Parser.prototype.parseScript=function(){
var node=this.createNode();
var body=this.parseDirectivePrologues();
while(this.lookahead.type!==2){
body.push(this.parseStatementListItem());
}
return this.finalize(node,new Node.Script(body));
};

Parser.prototype.parseModuleSpecifier=function(){
var node=this.createNode();
if(this.lookahead.type!==8){
this.throwError(messages_1.Messages.InvalidModuleSpecifier);
}
var token=this.nextToken();
var raw=this.getTokenRaw(token);
return this.finalize(node,new Node.Literal(token.value,raw));
};

Parser.prototype.parseImportSpecifier=function(){
var node=this.createNode();
var imported;
var local;
if(this.lookahead.type===3){
imported=this.parseVariableIdentifier();
local=imported;
if(this.matchContextualKeyword('as')){
this.nextToken();
local=this.parseVariableIdentifier();
}
}else
{
imported=this.parseIdentifierName();
local=imported;
if(this.matchContextualKeyword('as')){
this.nextToken();
local=this.parseVariableIdentifier();
}else
{
this.throwUnexpectedToken(this.nextToken());
}
}
return this.finalize(node,new Node.ImportSpecifier(local,imported));
};

Parser.prototype.parseNamedImports=function(){
this.expect('{');
var specifiers=[];
while(!this.match('}')){
specifiers.push(this.parseImportSpecifier());
if(!this.match('}')){
this.expect(',');
}
}
this.expect('}');
return specifiers;
};

Parser.prototype.parseImportDefaultSpecifier=function(){
var node=this.createNode();
var local=this.parseIdentifierName();
return this.finalize(node,new Node.ImportDefaultSpecifier(local));
};

Parser.prototype.parseImportNamespaceSpecifier=function(){
var node=this.createNode();
this.expect('*');
if(!this.matchContextualKeyword('as')){
this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
}
this.nextToken();
var local=this.parseIdentifierName();
return this.finalize(node,new Node.ImportNamespaceSpecifier(local));
};
Parser.prototype.parseImportDeclaration=function(){
if(this.context.inFunctionBody){
this.throwError(messages_1.Messages.IllegalImportDeclaration);
}
var node=this.createNode();
this.expectKeyword('import');
var src;
var specifiers=[];
if(this.lookahead.type===8){

src=this.parseModuleSpecifier();
}else
{
if(this.match('{')){

specifiers=specifiers.concat(this.parseNamedImports());
}else
if(this.match('*')){

specifiers.push(this.parseImportNamespaceSpecifier());
}else
if(this.isIdentifierName(this.lookahead)&&!this.matchKeyword('default')){

specifiers.push(this.parseImportDefaultSpecifier());
if(this.match(',')){
this.nextToken();
if(this.match('*')){

specifiers.push(this.parseImportNamespaceSpecifier());
}else
if(this.match('{')){

specifiers=specifiers.concat(this.parseNamedImports());
}else
{
this.throwUnexpectedToken(this.lookahead);
}
}
}else
{
this.throwUnexpectedToken(this.nextToken());
}
if(!this.matchContextualKeyword('from')){
var message=this.lookahead.value?messages_1.Messages.UnexpectedToken:messages_1.Messages.MissingFromClause;
this.throwError(message,this.lookahead.value);
}
this.nextToken();
src=this.parseModuleSpecifier();
}
this.consumeSemicolon();
return this.finalize(node,new Node.ImportDeclaration(specifiers,src));
};

Parser.prototype.parseExportSpecifier=function(){
var node=this.createNode();
var local=this.parseIdentifierName();
var exported=local;
if(this.matchContextualKeyword('as')){
this.nextToken();
exported=this.parseIdentifierName();
}
return this.finalize(node,new Node.ExportSpecifier(local,exported));
};
Parser.prototype.parseExportDeclaration=function(){
if(this.context.inFunctionBody){
this.throwError(messages_1.Messages.IllegalExportDeclaration);
}
var node=this.createNode();
this.expectKeyword('export');
var exportDeclaration;
if(this.matchKeyword('default')){

this.nextToken();
if(this.matchKeyword('function')){


var declaration=this.parseFunctionDeclaration(true);
exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration));
}else
if(this.matchKeyword('class')){

var declaration=this.parseClassDeclaration(true);
exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration));
}else
if(this.matchContextualKeyword('async')){



var declaration=this.matchAsyncFunction()?this.parseFunctionDeclaration(true):this.parseAssignmentExpression();
exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration));
}else
{
if(this.matchContextualKeyword('from')){
this.throwError(messages_1.Messages.UnexpectedToken,this.lookahead.value);
}



var declaration=this.match('{')?this.parseObjectInitializer():
this.match('[')?this.parseArrayInitializer():this.parseAssignmentExpression();
this.consumeSemicolon();
exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration));
}
}else
if(this.match('*')){

this.nextToken();
if(!this.matchContextualKeyword('from')){
var message=this.lookahead.value?messages_1.Messages.UnexpectedToken:messages_1.Messages.MissingFromClause;
this.throwError(message,this.lookahead.value);
}
this.nextToken();
var src=this.parseModuleSpecifier();
this.consumeSemicolon();
exportDeclaration=this.finalize(node,new Node.ExportAllDeclaration(src));
}else
if(this.lookahead.type===4){

var declaration=void 0;
switch(this.lookahead.value){
case'let':
case'const':
declaration=this.parseLexicalDeclaration({inFor:false});
break;
case'var':
case'class':
case'function':
declaration=this.parseStatementListItem();
break;
default:
this.throwUnexpectedToken(this.lookahead);}

exportDeclaration=this.finalize(node,new Node.ExportNamedDeclaration(declaration,[],null));
}else
if(this.matchAsyncFunction()){
var declaration=this.parseFunctionDeclaration();
exportDeclaration=this.finalize(node,new Node.ExportNamedDeclaration(declaration,[],null));
}else
{
var specifiers=[];
var source=null;
var isExportFromIdentifier=false;
this.expect('{');
while(!this.match('}')){
isExportFromIdentifier=isExportFromIdentifier||this.matchKeyword('default');
specifiers.push(this.parseExportSpecifier());
if(!this.match('}')){
this.expect(',');
}
}
this.expect('}');
if(this.matchContextualKeyword('from')){


this.nextToken();
source=this.parseModuleSpecifier();
this.consumeSemicolon();
}else
if(isExportFromIdentifier){

var message=this.lookahead.value?messages_1.Messages.UnexpectedToken:messages_1.Messages.MissingFromClause;
this.throwError(message,this.lookahead.value);
}else
{

this.consumeSemicolon();
}
exportDeclaration=this.finalize(node,new Node.ExportNamedDeclaration(null,specifiers,source));
}
return exportDeclaration;
};
return Parser;
}();
exports.Parser=Parser;


},

function(module,exports){

"use strict";




Object.defineProperty(exports,"__esModule",{value:true});
function assert(condition,message){

if(!condition){
throw new Error('ASSERT: '+message);
}
}
exports.assert=assert;


},

function(module,exports){

"use strict";

Object.defineProperty(exports,"__esModule",{value:true});
var ErrorHandler=function(){
function ErrorHandler(){
this.errors=[];
this.tolerant=false;
}
ErrorHandler.prototype.recordError=function(error){
this.errors.push(error);
};
ErrorHandler.prototype.tolerate=function(error){
if(this.tolerant){
this.recordError(error);
}else
{
throw error;
}
};
ErrorHandler.prototype.constructError=function(msg,column){
var error=new Error(msg);
try{
throw error;
}
catch(base){

if(Object.create&&Object.defineProperty){
error=Object.create(base);
Object.defineProperty(error,'column',{value:column});
}
}

return error;
};
ErrorHandler.prototype.createError=function(index,line,col,description){
var msg='Line '+line+': '+description;
var error=this.constructError(msg,col);
error.index=index;
error.lineNumber=line;
error.description=description;
return error;
};
ErrorHandler.prototype.throwError=function(index,line,col,description){
throw this.createError(index,line,col,description);
};
ErrorHandler.prototype.tolerateError=function(index,line,col,description){
var error=this.createError(index,line,col,description);
if(this.tolerant){
this.recordError(error);
}else
{
throw error;
}
};
return ErrorHandler;
}();
exports.ErrorHandler=ErrorHandler;


},

function(module,exports){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});

exports.Messages={
BadGetterArity:'Getter must not have any formal parameters',
BadSetterArity:'Setter must have exactly one formal parameter',
BadSetterRestParameter:'Setter function argument must not be a rest parameter',
ConstructorIsAsync:'Class constructor may not be an async method',
ConstructorSpecialMethod:'Class constructor may not be an accessor',
DeclarationMissingInitializer:'Missing initializer in %0 declaration',
DefaultRestParameter:'Unexpected token =',
DuplicateBinding:'Duplicate binding %0',
DuplicateConstructor:'A class may only have one constructor',
DuplicateProtoProperty:'Duplicate __proto__ fields are not allowed in object literals',
ForInOfLoopInitializer:'%0 loop variable declaration may not have an initializer',
GeneratorInLegacyContext:'Generator declarations are not allowed in legacy contexts',
IllegalBreak:'Illegal break statement',
IllegalContinue:'Illegal continue statement',
IllegalExportDeclaration:'Unexpected token',
IllegalImportDeclaration:'Unexpected token',
IllegalLanguageModeDirective:'Illegal \'use strict\' directive in function with non-simple parameter list',
IllegalReturn:'Illegal return statement',
InvalidEscapedReservedWord:'Keyword must not contain escaped characters',
InvalidHexEscapeSequence:'Invalid hexadecimal escape sequence',
InvalidLHSInAssignment:'Invalid left-hand side in assignment',
InvalidLHSInForIn:'Invalid left-hand side in for-in',
InvalidLHSInForLoop:'Invalid left-hand side in for-loop',
InvalidModuleSpecifier:'Unexpected token',
InvalidRegExp:'Invalid regular expression',
LetInLexicalBinding:'let is disallowed as a lexically bound name',
MissingFromClause:'Unexpected token',
MultipleDefaultsInSwitch:'More than one default clause in switch statement',
NewlineAfterThrow:'Illegal newline after throw',
NoAsAfterImportNamespace:'Unexpected token',
NoCatchOrFinally:'Missing catch or finally after try',
ParameterAfterRestParameter:'Rest parameter must be last formal parameter',
Redeclaration:'%0 \'%1\' has already been declared',
StaticPrototype:'Classes may not have static property named prototype',
StrictCatchVariable:'Catch variable may not be eval or arguments in strict mode',
StrictDelete:'Delete of an unqualified identifier in strict mode.',
StrictFunction:'In strict mode code, functions can only be declared at top level or inside a block',
StrictFunctionName:'Function name may not be eval or arguments in strict mode',
StrictLHSAssignment:'Assignment to eval or arguments is not allowed in strict mode',
StrictLHSPostfix:'Postfix increment/decrement may not have eval or arguments operand in strict mode',
StrictLHSPrefix:'Prefix increment/decrement may not have eval or arguments operand in strict mode',
StrictModeWith:'Strict mode code may not include a with statement',
StrictOctalLiteral:'Octal literals are not allowed in strict mode.',
StrictParamDupe:'Strict mode function may not have duplicate parameter names',
StrictParamName:'Parameter name eval or arguments is not allowed in strict mode',
StrictReservedWord:'Use of future reserved word in strict mode',
StrictVarName:'Variable name may not be eval or arguments in strict mode',
TemplateOctalLiteral:'Octal literals are not allowed in template strings.',
UnexpectedEOS:'Unexpected end of input',
UnexpectedIdentifier:'Unexpected identifier',
UnexpectedNumber:'Unexpected number',
UnexpectedReserved:'Unexpected reserved word',
UnexpectedString:'Unexpected string',
UnexpectedTemplate:'Unexpected quasi %0',
UnexpectedToken:'Unexpected token %0',
UnexpectedTokenIllegal:'Unexpected token ILLEGAL',
UnknownLabel:'Undefined label \'%0\'',
UnterminatedRegExp:'Invalid regular expression: missing /'};



},

function(module,exports,__webpack_require__){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
var assert_1=__webpack_require__(9);
var character_1=__webpack_require__(4);
var messages_1=__webpack_require__(11);
function hexValue(ch){
return'0123456789abcdef'.indexOf(ch.toLowerCase());
}
function octalValue(ch){
return'01234567'.indexOf(ch);
}
var Scanner=function(){
function Scanner(code,handler){
this.source=code;
this.errorHandler=handler;
this.trackComment=false;
this.isModule=false;
this.length=code.length;
this.index=0;
this.lineNumber=code.length>0?1:0;
this.lineStart=0;
this.curlyStack=[];
}
Scanner.prototype.saveState=function(){
return{
index:this.index,
lineNumber:this.lineNumber,
lineStart:this.lineStart};

};
Scanner.prototype.restoreState=function(state){
this.index=state.index;
this.lineNumber=state.lineNumber;
this.lineStart=state.lineStart;
};
Scanner.prototype.eof=function(){
return this.index>=this.length;
};
Scanner.prototype.throwUnexpectedToken=function(message){
if(message===void 0){message=messages_1.Messages.UnexpectedTokenIllegal;}
return this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,message);
};
Scanner.prototype.tolerateUnexpectedToken=function(message){
if(message===void 0){message=messages_1.Messages.UnexpectedTokenIllegal;}
this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,message);
};

Scanner.prototype.skipSingleLineComment=function(offset){
var comments=[];
var start,loc;
if(this.trackComment){
comments=[];
start=this.index-offset;
loc={
start:{
line:this.lineNumber,
column:this.index-this.lineStart-offset},

end:{}};

}
while(!this.eof()){
var ch=this.source.charCodeAt(this.index);
++this.index;
if(character_1.Character.isLineTerminator(ch)){
if(this.trackComment){
loc.end={
line:this.lineNumber,
column:this.index-this.lineStart-1};

var entry={
multiLine:false,
slice:[start+offset,this.index-1],
range:[start,this.index-1],
loc:loc};

comments.push(entry);
}
if(ch===13&&this.source.charCodeAt(this.index)===10){
++this.index;
}
++this.lineNumber;
this.lineStart=this.index;
return comments;
}
}
if(this.trackComment){
loc.end={
line:this.lineNumber,
column:this.index-this.lineStart};

var entry={
multiLine:false,
slice:[start+offset,this.index],
range:[start,this.index],
loc:loc};

comments.push(entry);
}
return comments;
};
Scanner.prototype.skipMultiLineComment=function(){
var comments=[];
var start,loc;
if(this.trackComment){
comments=[];
start=this.index-2;
loc={
start:{
line:this.lineNumber,
column:this.index-this.lineStart-2},

end:{}};

}
while(!this.eof()){
var ch=this.source.charCodeAt(this.index);
if(character_1.Character.isLineTerminator(ch)){
if(ch===0x0D&&this.source.charCodeAt(this.index+1)===0x0A){
++this.index;
}
++this.lineNumber;
++this.index;
this.lineStart=this.index;
}else
if(ch===0x2A){

if(this.source.charCodeAt(this.index+1)===0x2F){
this.index+=2;
if(this.trackComment){
loc.end={
line:this.lineNumber,
column:this.index-this.lineStart};

var entry={
multiLine:true,
slice:[start+2,this.index-2],
range:[start,this.index],
loc:loc};

comments.push(entry);
}
return comments;
}
++this.index;
}else
{
++this.index;
}
}

if(this.trackComment){
loc.end={
line:this.lineNumber,
column:this.index-this.lineStart};

var entry={
multiLine:true,
slice:[start+2,this.index],
range:[start,this.index],
loc:loc};

comments.push(entry);
}
this.tolerateUnexpectedToken();
return comments;
};
Scanner.prototype.scanComments=function(){
var comments;
if(this.trackComment){
comments=[];
}
var start=this.index===0;
while(!this.eof()){
var ch=this.source.charCodeAt(this.index);
if(character_1.Character.isWhiteSpace(ch)){
++this.index;
}else
if(character_1.Character.isLineTerminator(ch)){
++this.index;
if(ch===0x0D&&this.source.charCodeAt(this.index)===0x0A){
++this.index;
}
++this.lineNumber;
this.lineStart=this.index;
start=true;
}else
if(ch===0x2F){
ch=this.source.charCodeAt(this.index+1);
if(ch===0x2F){
this.index+=2;
var comment=this.skipSingleLineComment(2);
if(this.trackComment){
comments=comments.concat(comment);
}
start=true;
}else
if(ch===0x2A){
this.index+=2;
var comment=this.skipMultiLineComment();
if(this.trackComment){
comments=comments.concat(comment);
}
}else
{
break;
}
}else
if(start&&ch===0x2D){

if(this.source.charCodeAt(this.index+1)===0x2D&&this.source.charCodeAt(this.index+2)===0x3E){

this.index+=3;
var comment=this.skipSingleLineComment(3);
if(this.trackComment){
comments=comments.concat(comment);
}
}else
{
break;
}
}else
if(ch===0x3C&&!this.isModule){
if(this.source.slice(this.index+1,this.index+4)==='!--'){
this.index+=4;
var comment=this.skipSingleLineComment(4);
if(this.trackComment){
comments=comments.concat(comment);
}
}else
{
break;
}
}else
{
break;
}
}
return comments;
};

Scanner.prototype.isFutureReservedWord=function(id){
switch(id){
case'enum':
case'export':
case'import':
case'super':
return true;
default:
return false;}

};
Scanner.prototype.isStrictModeReservedWord=function(id){
switch(id){
case'implements':
case'interface':
case'package':
case'private':
case'protected':
case'public':
case'static':
case'yield':
case'let':
return true;
default:
return false;}

};
Scanner.prototype.isRestrictedWord=function(id){
return id==='eval'||id==='arguments';
};

Scanner.prototype.isKeyword=function(id){
switch(id.length){
case 2:
return id==='if'||id==='in'||id==='do';
case 3:
return id==='var'||id==='for'||id==='new'||
id==='try'||id==='let';
case 4:
return id==='this'||id==='else'||id==='case'||
id==='void'||id==='with'||id==='enum';
case 5:
return id==='while'||id==='break'||id==='catch'||
id==='throw'||id==='const'||id==='yield'||
id==='class'||id==='super';
case 6:
return id==='return'||id==='typeof'||id==='delete'||
id==='switch'||id==='export'||id==='import';
case 7:
return id==='default'||id==='finally'||id==='extends';
case 8:
return id==='function'||id==='continue'||id==='debugger';
case 10:
return id==='instanceof';
default:
return false;}

};
Scanner.prototype.codePointAt=function(i){
var cp=this.source.charCodeAt(i);
if(cp>=0xD800&&cp<=0xDBFF){
var second=this.source.charCodeAt(i+1);
if(second>=0xDC00&&second<=0xDFFF){
var first=cp;
cp=(first-0xD800)*0x400+second-0xDC00+0x10000;
}
}
return cp;
};
Scanner.prototype.scanHexEscape=function(prefix){
var len=prefix==='u'?4:2;
var code=0;
for(var i=0;i<len;++i){
if(!this.eof()&&character_1.Character.isHexDigit(this.source.charCodeAt(this.index))){
code=code*16+hexValue(this.source[this.index++]);
}else
{
return null;
}
}
return String.fromCharCode(code);
};
Scanner.prototype.scanUnicodeCodePointEscape=function(){
var ch=this.source[this.index];
var code=0;

if(ch==='}'){
this.throwUnexpectedToken();
}
while(!this.eof()){
ch=this.source[this.index++];
if(!character_1.Character.isHexDigit(ch.charCodeAt(0))){
break;
}
code=code*16+hexValue(ch);
}
if(code>0x10FFFF||ch!=='}'){
this.throwUnexpectedToken();
}
return character_1.Character.fromCodePoint(code);
};
Scanner.prototype.getIdentifier=function(){
var start=this.index++;
while(!this.eof()){
var ch=this.source.charCodeAt(this.index);
if(ch===0x5C){

this.index=start;
return this.getComplexIdentifier();
}else
if(ch>=0xD800&&ch<0xDFFF){

this.index=start;
return this.getComplexIdentifier();
}
if(character_1.Character.isIdentifierPart(ch)){
++this.index;
}else
{
break;
}
}
return this.source.slice(start,this.index);
};
Scanner.prototype.getComplexIdentifier=function(){
var cp=this.codePointAt(this.index);
var id=character_1.Character.fromCodePoint(cp);
this.index+=id.length;

var ch;
if(cp===0x5C){
if(this.source.charCodeAt(this.index)!==0x75){
this.throwUnexpectedToken();
}
++this.index;
if(this.source[this.index]==='{'){
++this.index;
ch=this.scanUnicodeCodePointEscape();
}else
{
ch=this.scanHexEscape('u');
if(ch===null||ch==='\\'||!character_1.Character.isIdentifierStart(ch.charCodeAt(0))){
this.throwUnexpectedToken();
}
}
id=ch;
}
while(!this.eof()){
cp=this.codePointAt(this.index);
if(!character_1.Character.isIdentifierPart(cp)){
break;
}
ch=character_1.Character.fromCodePoint(cp);
id+=ch;
this.index+=ch.length;

if(cp===0x5C){
id=id.substr(0,id.length-1);
if(this.source.charCodeAt(this.index)!==0x75){
this.throwUnexpectedToken();
}
++this.index;
if(this.source[this.index]==='{'){
++this.index;
ch=this.scanUnicodeCodePointEscape();
}else
{
ch=this.scanHexEscape('u');
if(ch===null||ch==='\\'||!character_1.Character.isIdentifierPart(ch.charCodeAt(0))){
this.throwUnexpectedToken();
}
}
id+=ch;
}
}
return id;
};
Scanner.prototype.octalToDecimal=function(ch){

var octal=ch!=='0';
var code=octalValue(ch);
if(!this.eof()&&character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))){
octal=true;
code=code*8+octalValue(this.source[this.index++]);


if('0123'.indexOf(ch)>=0&&!this.eof()&&character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))){
code=code*8+octalValue(this.source[this.index++]);
}
}
return{
code:code,
octal:octal};

};

Scanner.prototype.scanIdentifier=function(){
var type;
var start=this.index;

var id=this.source.charCodeAt(start)===0x5C?this.getComplexIdentifier():this.getIdentifier();


if(id.length===1){
type=3;
}else
if(this.isKeyword(id)){
type=4;
}else
if(id==='null'){
type=5;
}else
if(id==='true'||id==='false'){
type=1;
}else
{
type=3;
}
if(type!==3&&start+id.length!==this.index){
var restore=this.index;
this.index=start;
this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
this.index=restore;
}
return{
type:type,
value:id,
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};

Scanner.prototype.scanPunctuator=function(){
var start=this.index;

var str=this.source[this.index];
switch(str){
case'(':
case'{':
if(str==='{'){
this.curlyStack.push('{');
}
++this.index;
break;
case'.':
++this.index;
if(this.source[this.index]==='.'&&this.source[this.index+1]==='.'){

this.index+=2;
str='...';
}
break;
case'}':
++this.index;
this.curlyStack.pop();
break;
case')':
case';':
case',':
case'[':
case']':
case':':
case'?':
case'~':
++this.index;
break;
default:

str=this.source.substr(this.index,4);
if(str==='>>>='){
this.index+=4;
}else
{

str=str.substr(0,3);
if(str==='==='||str==='!=='||str==='>>>'||
str==='<<='||str==='>>='||str==='**='){
this.index+=3;
}else
{

str=str.substr(0,2);
if(str==='&&'||str==='||'||str==='=='||str==='!='||
str==='+='||str==='-='||str==='*='||str==='/='||
str==='++'||str==='--'||str==='<<'||str==='>>'||
str==='&='||str==='|='||str==='^='||str==='%='||
str==='<='||str==='>='||str==='=>'||str==='**'){
this.index+=2;
}else
{

str=this.source[this.index];
if('<>=!+-*%&|^/'.indexOf(str)>=0){
++this.index;
}
}
}
}}

if(this.index===start){
this.throwUnexpectedToken();
}
return{
type:7,
value:str,
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};

Scanner.prototype.scanHexLiteral=function(start){
var num='';
while(!this.eof()){
if(!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))){
break;
}
num+=this.source[this.index++];
}
if(num.length===0){
this.throwUnexpectedToken();
}
if(character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))){
this.throwUnexpectedToken();
}
return{
type:6,
value:parseInt('0x'+num,16),
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};
Scanner.prototype.scanBinaryLiteral=function(start){
var num='';
var ch;
while(!this.eof()){
ch=this.source[this.index];
if(ch!=='0'&&ch!=='1'){
break;
}
num+=this.source[this.index++];
}
if(num.length===0){

this.throwUnexpectedToken();
}
if(!this.eof()){
ch=this.source.charCodeAt(this.index);

if(character_1.Character.isIdentifierStart(ch)||character_1.Character.isDecimalDigit(ch)){
this.throwUnexpectedToken();
}
}
return{
type:6,
value:parseInt(num,2),
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};
Scanner.prototype.scanOctalLiteral=function(prefix,start){
var num='';
var octal=false;
if(character_1.Character.isOctalDigit(prefix.charCodeAt(0))){
octal=true;
num='0'+this.source[this.index++];
}else
{
++this.index;
}
while(!this.eof()){
if(!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))){
break;
}
num+=this.source[this.index++];
}
if(!octal&&num.length===0){

this.throwUnexpectedToken();
}
if(character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))||character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))){
this.throwUnexpectedToken();
}
return{
type:6,
value:parseInt(num,8),
octal:octal,
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};
Scanner.prototype.isImplicitOctalLiteral=function(){


for(var i=this.index+1;i<this.length;++i){
var ch=this.source[i];
if(ch==='8'||ch==='9'){
return false;
}
if(!character_1.Character.isOctalDigit(ch.charCodeAt(0))){
return true;
}
}
return true;
};
Scanner.prototype.scanNumericLiteral=function(){
var start=this.index;
var ch=this.source[start];
assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0))||ch==='.','Numeric literal must start with a decimal digit or a decimal point');
var num='';
if(ch!=='.'){
num=this.source[this.index++];
ch=this.source[this.index];




if(num==='0'){
if(ch==='x'||ch==='X'){
++this.index;
return this.scanHexLiteral(start);
}
if(ch==='b'||ch==='B'){
++this.index;
return this.scanBinaryLiteral(start);
}
if(ch==='o'||ch==='O'){
return this.scanOctalLiteral(ch,start);
}
if(ch&&character_1.Character.isOctalDigit(ch.charCodeAt(0))){
if(this.isImplicitOctalLiteral()){
return this.scanOctalLiteral(ch,start);
}
}
}
while(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))){
num+=this.source[this.index++];
}
ch=this.source[this.index];
}
if(ch==='.'){
num+=this.source[this.index++];
while(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))){
num+=this.source[this.index++];
}
ch=this.source[this.index];
}
if(ch==='e'||ch==='E'){
num+=this.source[this.index++];
ch=this.source[this.index];
if(ch==='+'||ch==='-'){
num+=this.source[this.index++];
}
if(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))){
while(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))){
num+=this.source[this.index++];
}
}else
{
this.throwUnexpectedToken();
}
}
if(character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))){
this.throwUnexpectedToken();
}
return{
type:6,
value:parseFloat(num),
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};

Scanner.prototype.scanStringLiteral=function(){
var start=this.index;
var quote=this.source[start];
assert_1.assert(quote==='\''||quote==='"','String literal must starts with a quote');
++this.index;
var octal=false;
var str='';
while(!this.eof()){
var ch=this.source[this.index++];
if(ch===quote){
quote='';
break;
}else
if(ch==='\\'){
ch=this.source[this.index++];
if(!ch||!character_1.Character.isLineTerminator(ch.charCodeAt(0))){
switch(ch){
case'u':
if(this.source[this.index]==='{'){
++this.index;
str+=this.scanUnicodeCodePointEscape();
}else
{
var unescaped_1=this.scanHexEscape(ch);
if(unescaped_1===null){
this.throwUnexpectedToken();
}
str+=unescaped_1;
}
break;
case'x':
var unescaped=this.scanHexEscape(ch);
if(unescaped===null){
this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
}
str+=unescaped;
break;
case'n':
str+='\n';
break;
case'r':
str+='\r';
break;
case't':
str+='\t';
break;
case'b':
str+='\b';
break;
case'f':
str+='\f';
break;
case'v':
str+='\x0B';
break;
case'8':
case'9':
str+=ch;
this.tolerateUnexpectedToken();
break;
default:
if(ch&&character_1.Character.isOctalDigit(ch.charCodeAt(0))){
var octToDec=this.octalToDecimal(ch);
octal=octToDec.octal||octal;
str+=String.fromCharCode(octToDec.code);
}else
{
str+=ch;
}
break;}

}else
{
++this.lineNumber;
if(ch==='\r'&&this.source[this.index]==='\n'){
++this.index;
}
this.lineStart=this.index;
}
}else
if(character_1.Character.isLineTerminator(ch.charCodeAt(0))){
break;
}else
{
str+=ch;
}
}
if(quote!==''){
this.index=start;
this.throwUnexpectedToken();
}
return{
type:8,
value:str,
octal:octal,
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};

Scanner.prototype.scanTemplate=function(){
var cooked='';
var terminated=false;
var start=this.index;
var head=this.source[start]==='`';
var tail=false;
var rawOffset=2;
++this.index;
while(!this.eof()){
var ch=this.source[this.index++];
if(ch==='`'){
rawOffset=1;
tail=true;
terminated=true;
break;
}else
if(ch==='$'){
if(this.source[this.index]==='{'){
this.curlyStack.push('${');
++this.index;
terminated=true;
break;
}
cooked+=ch;
}else
if(ch==='\\'){
ch=this.source[this.index++];
if(!character_1.Character.isLineTerminator(ch.charCodeAt(0))){
switch(ch){
case'n':
cooked+='\n';
break;
case'r':
cooked+='\r';
break;
case't':
cooked+='\t';
break;
case'u':
if(this.source[this.index]==='{'){
++this.index;
cooked+=this.scanUnicodeCodePointEscape();
}else
{
var restore=this.index;
var unescaped_2=this.scanHexEscape(ch);
if(unescaped_2!==null){
cooked+=unescaped_2;
}else
{
this.index=restore;
cooked+=ch;
}
}
break;
case'x':
var unescaped=this.scanHexEscape(ch);
if(unescaped===null){
this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
}
cooked+=unescaped;
break;
case'b':
cooked+='\b';
break;
case'f':
cooked+='\f';
break;
case'v':
cooked+='\v';
break;
default:
if(ch==='0'){
if(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))){

this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
}
cooked+='\0';
}else
if(character_1.Character.isOctalDigit(ch.charCodeAt(0))){

this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
}else
{
cooked+=ch;
}
break;}

}else
{
++this.lineNumber;
if(ch==='\r'&&this.source[this.index]==='\n'){
++this.index;
}
this.lineStart=this.index;
}
}else
if(character_1.Character.isLineTerminator(ch.charCodeAt(0))){
++this.lineNumber;
if(ch==='\r'&&this.source[this.index]==='\n'){
++this.index;
}
this.lineStart=this.index;
cooked+='\n';
}else
{
cooked+=ch;
}
}
if(!terminated){
this.throwUnexpectedToken();
}
if(!head){
this.curlyStack.pop();
}
return{
type:10,
value:this.source.slice(start+1,this.index-rawOffset),
cooked:cooked,
head:head,
tail:tail,
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};

Scanner.prototype.testRegExp=function(pattern,flags){






var astralSubstitute='\uFFFF';
var tmp=pattern;
var self=this;
if(flags.indexOf('u')>=0){
tmp=tmp.
replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,function($0,$1,$2){
var codePoint=parseInt($1||$2,16);
if(codePoint>0x10FFFF){
self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
}
if(codePoint<=0xFFFF){
return String.fromCharCode(codePoint);
}
return astralSubstitute;
}).
replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,astralSubstitute);
}

try{
RegExp(tmp);
}
catch(e){
this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
}



try{
return new RegExp(pattern,flags);
}
catch(exception){

return null;
}
};
Scanner.prototype.scanRegExpBody=function(){
var ch=this.source[this.index];
assert_1.assert(ch==='/','Regular expression literal must start with a slash');
var str=this.source[this.index++];
var classMarker=false;
var terminated=false;
while(!this.eof()){
ch=this.source[this.index++];
str+=ch;
if(ch==='\\'){
ch=this.source[this.index++];

if(character_1.Character.isLineTerminator(ch.charCodeAt(0))){
this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
}
str+=ch;
}else
if(character_1.Character.isLineTerminator(ch.charCodeAt(0))){
this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
}else
if(classMarker){
if(ch===']'){
classMarker=false;
}
}else
{
if(ch==='/'){
terminated=true;
break;
}else
if(ch==='['){
classMarker=true;
}
}
}
if(!terminated){
this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
}

return str.substr(1,str.length-2);
};
Scanner.prototype.scanRegExpFlags=function(){
var str='';
var flags='';
while(!this.eof()){
var ch=this.source[this.index];
if(!character_1.Character.isIdentifierPart(ch.charCodeAt(0))){
break;
}
++this.index;
if(ch==='\\'&&!this.eof()){
ch=this.source[this.index];
if(ch==='u'){
++this.index;
var restore=this.index;
var char=this.scanHexEscape('u');
if(char!==null){
flags+=char;
for(str+='\\u';restore<this.index;++restore){
str+=this.source[restore];
}
}else
{
this.index=restore;
flags+='u';
str+='\\u';
}
this.tolerateUnexpectedToken();
}else
{
str+='\\';
this.tolerateUnexpectedToken();
}
}else
{
flags+=ch;
str+=ch;
}
}
return flags;
};
Scanner.prototype.scanRegExp=function(){
var start=this.index;
var pattern=this.scanRegExpBody();
var flags=this.scanRegExpFlags();
var value=this.testRegExp(pattern,flags);
return{
type:9,
value:'',
pattern:pattern,
flags:flags,
regex:value,
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:start,
end:this.index};

};
Scanner.prototype.lex=function(){
if(this.eof()){
return{
type:2,
value:'',
lineNumber:this.lineNumber,
lineStart:this.lineStart,
start:this.index,
end:this.index};

}
var cp=this.source.charCodeAt(this.index);
if(character_1.Character.isIdentifierStart(cp)){
return this.scanIdentifier();
}

if(cp===0x28||cp===0x29||cp===0x3B){
return this.scanPunctuator();
}

if(cp===0x27||cp===0x22){
return this.scanStringLiteral();
}


if(cp===0x2E){
if(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))){
return this.scanNumericLiteral();
}
return this.scanPunctuator();
}
if(character_1.Character.isDecimalDigit(cp)){
return this.scanNumericLiteral();
}


if(cp===0x60||cp===0x7D&&this.curlyStack[this.curlyStack.length-1]==='${'){
return this.scanTemplate();
}

if(cp>=0xD800&&cp<0xDFFF){
if(character_1.Character.isIdentifierStart(this.codePointAt(this.index))){
return this.scanIdentifier();
}
}
return this.scanPunctuator();
};
return Scanner;
}();
exports.Scanner=Scanner;


},

function(module,exports){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
exports.TokenName={};
exports.TokenName[1]='Boolean';
exports.TokenName[2]='<end>';
exports.TokenName[3]='Identifier';
exports.TokenName[4]='Keyword';
exports.TokenName[5]='Null';
exports.TokenName[6]='Numeric';
exports.TokenName[7]='Punctuator';
exports.TokenName[8]='String';
exports.TokenName[9]='RegularExpression';
exports.TokenName[10]='Template';


},

function(module,exports){

"use strict";

Object.defineProperty(exports,"__esModule",{value:true});
exports.XHTMLEntities={
quot:'\u0022',
amp:'\u0026',
apos:'\u0027',
gt:'\u003E',
nbsp:'\u00A0',
iexcl:'\u00A1',
cent:'\u00A2',
pound:'\u00A3',
curren:'\u00A4',
yen:'\u00A5',
brvbar:'\u00A6',
sect:'\u00A7',
uml:'\u00A8',
copy:'\u00A9',
ordf:'\u00AA',
laquo:'\u00AB',
not:'\u00AC',
shy:'\u00AD',
reg:'\u00AE',
macr:'\u00AF',
deg:'\u00B0',
plusmn:'\u00B1',
sup2:'\u00B2',
sup3:'\u00B3',
acute:'\u00B4',
micro:'\u00B5',
para:'\u00B6',
middot:'\u00B7',
cedil:'\u00B8',
sup1:'\u00B9',
ordm:'\u00BA',
raquo:'\u00BB',
frac14:'\u00BC',
frac12:'\u00BD',
frac34:'\u00BE',
iquest:'\u00BF',
Agrave:'\u00C0',
Aacute:'\u00C1',
Acirc:'\u00C2',
Atilde:'\u00C3',
Auml:'\u00C4',
Aring:'\u00C5',
AElig:'\u00C6',
Ccedil:'\u00C7',
Egrave:'\u00C8',
Eacute:'\u00C9',
Ecirc:'\u00CA',
Euml:'\u00CB',
Igrave:'\u00CC',
Iacute:'\u00CD',
Icirc:'\u00CE',
Iuml:'\u00CF',
ETH:'\u00D0',
Ntilde:'\u00D1',
Ograve:'\u00D2',
Oacute:'\u00D3',
Ocirc:'\u00D4',
Otilde:'\u00D5',
Ouml:'\u00D6',
times:'\u00D7',
Oslash:'\u00D8',
Ugrave:'\u00D9',
Uacute:'\u00DA',
Ucirc:'\u00DB',
Uuml:'\u00DC',
Yacute:'\u00DD',
THORN:'\u00DE',
szlig:'\u00DF',
agrave:'\u00E0',
aacute:'\u00E1',
acirc:'\u00E2',
atilde:'\u00E3',
auml:'\u00E4',
aring:'\u00E5',
aelig:'\u00E6',
ccedil:'\u00E7',
egrave:'\u00E8',
eacute:'\u00E9',
ecirc:'\u00EA',
euml:'\u00EB',
igrave:'\u00EC',
iacute:'\u00ED',
icirc:'\u00EE',
iuml:'\u00EF',
eth:'\u00F0',
ntilde:'\u00F1',
ograve:'\u00F2',
oacute:'\u00F3',
ocirc:'\u00F4',
otilde:'\u00F5',
ouml:'\u00F6',
divide:'\u00F7',
oslash:'\u00F8',
ugrave:'\u00F9',
uacute:'\u00FA',
ucirc:'\u00FB',
uuml:'\u00FC',
yacute:'\u00FD',
thorn:'\u00FE',
yuml:'\u00FF',
OElig:'\u0152',
oelig:'\u0153',
Scaron:'\u0160',
scaron:'\u0161',
Yuml:'\u0178',
fnof:'\u0192',
circ:'\u02C6',
tilde:'\u02DC',
Alpha:'\u0391',
Beta:'\u0392',
Gamma:'\u0393',
Delta:'\u0394',
Epsilon:'\u0395',
Zeta:'\u0396',
Eta:'\u0397',
Theta:'\u0398',
Iota:'\u0399',
Kappa:'\u039A',
Lambda:'\u039B',
Mu:'\u039C',
Nu:'\u039D',
Xi:'\u039E',
Omicron:'\u039F',
Pi:'\u03A0',
Rho:'\u03A1',
Sigma:'\u03A3',
Tau:'\u03A4',
Upsilon:'\u03A5',
Phi:'\u03A6',
Chi:'\u03A7',
Psi:'\u03A8',
Omega:'\u03A9',
alpha:'\u03B1',
beta:'\u03B2',
gamma:'\u03B3',
delta:'\u03B4',
epsilon:'\u03B5',
zeta:'\u03B6',
eta:'\u03B7',
theta:'\u03B8',
iota:'\u03B9',
kappa:'\u03BA',
lambda:'\u03BB',
mu:'\u03BC',
nu:'\u03BD',
xi:'\u03BE',
omicron:'\u03BF',
pi:'\u03C0',
rho:'\u03C1',
sigmaf:'\u03C2',
sigma:'\u03C3',
tau:'\u03C4',
upsilon:'\u03C5',
phi:'\u03C6',
chi:'\u03C7',
psi:'\u03C8',
omega:'\u03C9',
thetasym:'\u03D1',
upsih:'\u03D2',
piv:'\u03D6',
ensp:'\u2002',
emsp:'\u2003',
thinsp:'\u2009',
zwnj:'\u200C',
zwj:'\u200D',
lrm:'\u200E',
rlm:'\u200F',
ndash:'\u2013',
mdash:'\u2014',
lsquo:'\u2018',
rsquo:'\u2019',
sbquo:'\u201A',
ldquo:'\u201C',
rdquo:'\u201D',
bdquo:'\u201E',
dagger:'\u2020',
Dagger:'\u2021',
bull:'\u2022',
hellip:'\u2026',
permil:'\u2030',
prime:'\u2032',
Prime:'\u2033',
lsaquo:'\u2039',
rsaquo:'\u203A',
oline:'\u203E',
frasl:'\u2044',
euro:'\u20AC',
image:'\u2111',
weierp:'\u2118',
real:'\u211C',
trade:'\u2122',
alefsym:'\u2135',
larr:'\u2190',
uarr:'\u2191',
rarr:'\u2192',
darr:'\u2193',
harr:'\u2194',
crarr:'\u21B5',
lArr:'\u21D0',
uArr:'\u21D1',
rArr:'\u21D2',
dArr:'\u21D3',
hArr:'\u21D4',
forall:'\u2200',
part:'\u2202',
exist:'\u2203',
empty:'\u2205',
nabla:'\u2207',
isin:'\u2208',
notin:'\u2209',
ni:'\u220B',
prod:'\u220F',
sum:'\u2211',
minus:'\u2212',
lowast:'\u2217',
radic:'\u221A',
prop:'\u221D',
infin:'\u221E',
ang:'\u2220',
and:'\u2227',
or:'\u2228',
cap:'\u2229',
cup:'\u222A',
int:'\u222B',
there4:'\u2234',
sim:'\u223C',
cong:'\u2245',
asymp:'\u2248',
ne:'\u2260',
equiv:'\u2261',
le:'\u2264',
ge:'\u2265',
sub:'\u2282',
sup:'\u2283',
nsub:'\u2284',
sube:'\u2286',
supe:'\u2287',
oplus:'\u2295',
otimes:'\u2297',
perp:'\u22A5',
sdot:'\u22C5',
lceil:'\u2308',
rceil:'\u2309',
lfloor:'\u230A',
rfloor:'\u230B',
loz:'\u25CA',
spades:'\u2660',
clubs:'\u2663',
hearts:'\u2665',
diams:'\u2666',
lang:'\u27E8',
rang:'\u27E9'};



},

function(module,exports,__webpack_require__){

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});
var error_handler_1=__webpack_require__(10);
var scanner_1=__webpack_require__(12);
var token_1=__webpack_require__(13);
var Reader=function(){
function Reader(){
this.values=[];
this.curly=this.paren=-1;
}

Reader.prototype.beforeFunctionExpression=function(t){
return['(','{','[','in','typeof','instanceof','new',
'return','case','delete','throw','void',

'=','+=','-=','*=','**=','/=','%=','<<=','>>=','>>>=',
'&=','|=','^=',',',

'+','-','*','**','/','%','++','--','<<','>>','>>>','&',
'|','^','!','~','&&','||','?',':','===','==','>=',
'<=','<','>','!=','!=='].indexOf(t)>=0;
};


Reader.prototype.isRegexStart=function(){
var previous=this.values[this.values.length-1];
var regex=previous!==null;
switch(previous){
case'this':
case']':
regex=false;
break;
case')':
var keyword=this.values[this.paren-1];
regex=keyword==='if'||keyword==='while'||keyword==='for'||keyword==='with';
break;
case'}':


regex=false;
if(this.values[this.curly-3]==='function'){

var check=this.values[this.curly-4];
regex=check?!this.beforeFunctionExpression(check):false;
}else
if(this.values[this.curly-4]==='function'){

var check=this.values[this.curly-5];
regex=check?!this.beforeFunctionExpression(check):true;
}
break;
default:
break;}

return regex;
};
Reader.prototype.push=function(token){
if(token.type===7||token.type===4){
if(token.value==='{'){
this.curly=this.values.length;
}else
if(token.value==='('){
this.paren=this.values.length;
}
this.values.push(token.value);
}else
{
this.values.push(null);
}
};
return Reader;
}();
var Tokenizer=function(){
function Tokenizer(code,config){
this.errorHandler=new error_handler_1.ErrorHandler();
this.errorHandler.tolerant=config?typeof config.tolerant==='boolean'&&config.tolerant:false;
this.scanner=new scanner_1.Scanner(code,this.errorHandler);
this.scanner.trackComment=config?typeof config.comment==='boolean'&&config.comment:false;
this.trackRange=config?typeof config.range==='boolean'&&config.range:false;
this.trackLoc=config?typeof config.loc==='boolean'&&config.loc:false;
this.buffer=[];
this.reader=new Reader();
}
Tokenizer.prototype.errors=function(){
return this.errorHandler.errors;
};
Tokenizer.prototype.getNextToken=function(){
if(this.buffer.length===0){
var comments=this.scanner.scanComments();
if(this.scanner.trackComment){
for(var i=0;i<comments.length;++i){
var e=comments[i];
var value=this.scanner.source.slice(e.slice[0],e.slice[1]);
var comment={
type:e.multiLine?'BlockComment':'LineComment',
value:value};

if(this.trackRange){
comment.range=e.range;
}
if(this.trackLoc){
comment.loc=e.loc;
}
this.buffer.push(comment);
}
}
if(!this.scanner.eof()){
var loc=void 0;
if(this.trackLoc){
loc={
start:{
line:this.scanner.lineNumber,
column:this.scanner.index-this.scanner.lineStart},

end:{}};

}
var startRegex=this.scanner.source[this.scanner.index]==='/'&&this.reader.isRegexStart();
var token=startRegex?this.scanner.scanRegExp():this.scanner.lex();
this.reader.push(token);
var entry={
type:token_1.TokenName[token.type],
value:this.scanner.source.slice(token.start,token.end)};

if(this.trackRange){
entry.range=[token.start,token.end];
}
if(this.trackLoc){
loc.end={
line:this.scanner.lineNumber,
column:this.scanner.index-this.scanner.lineStart};

entry.loc=loc;
}
if(token.type===9){
var pattern=token.pattern;
var flags=token.flags;
entry.regex={pattern:pattern,flags:flags};
}
this.buffer.push(entry);
}
}
return this.buffer.shift();
};
return Tokenizer;
}();
exports.Tokenizer=Tokenizer;


}]);

});
;
},{}],163:[function(require,module,exports){
(function(Buffer){
var querystring=require('querystring');
var trim=require('./trim');






function Link(value){

if(!(this instanceof Link)){
return new Link(value);
}


this.refs=[];

}





Link.pattern=/(?:\<([^\>]+)\>)((\s*;\s*([a-z\*]+)=(("[^"]+")|('[^']+')|([^\,\;]+)))*)(\s*,\s*|$)/gi;





Link.attrPattern=/([a-z\*]+)=(?:(?:"([^"]+)")|(?:'([^']+)')|([^\,\;]+))/gi;







Link.isCompatibleEncoding=function(value){
return /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i.test(value);
};







Link.formatExtendedAttribute=function(attr,data){

var encoding=(data.encoding||'utf-8').toUpperCase();
var language=data.language||'en';

var encodedValue='';

if(Buffer.isBuffer(data.value)&&Link.isCompatibleEncoding(encoding)){
encodedValue=data.value.toString(encoding);
}else if(Buffer.isBuffer(data.value)){
encodedValue=data.value.toString('hex').
replace(/[0-9a-f]{2}/gi,'%$1');
}else{
encodedValue=querystring.escape(data.value);
}

return attr+'='+encoding+'\''+
language+'\''+encodedValue;

};







Link.formatAttribute=function(attr,value){


if(/\*$/.test(attr)||typeof value!=='string')
return Link.formatExtendedAttribute(attr,value);



var needsQuotes=/[^a-z]/i.test(value);

if(needsQuotes){

value=querystring.escape(value).
replace(/%20/g,' ').
replace(/%2C/g,',').
replace(/%3B/g,';');

value='"'+value+'"';
}

return attr+'='+value;

};







Link.parseExtendedValue=function(value){
var parts=/([^']+)?(?:'([^']+)')?(.+)/.exec(value);
return{
language:parts[2].toLowerCase(),
encoding:Link.isCompatibleEncoding(parts[1])?
null:parts[1].toLowerCase(),
value:Link.isCompatibleEncoding(parts[1])?
querystring.unescape(parts[3]):parts[3]};

};







Link.setAttr=function(link,attr,value){



if(attr==='rel'&&link[attr]!=null)
return link;

if(Array.isArray(link[attr])){
link[attr].push(value);
}else if(link[attr]!=null){
link[attr]=[link[attr],value];
}else{
link[attr]=value;
}

return link;

};




Link.parseParams=function(link,uri){

var kvs={};
var params=/(.+)\?(.+)/gi.exec(uri);

if(!params){
return link;
}

params=params[2].split('&');

for(var i=0;i<params.length;i++){
var param=params[i].split('=');
kvs[param[0]]=param[1];
}

Link.setAttr(link,'params',kvs);

return link;

};








Link.parseAttrs=function(link,parts){

var match=null;
var attr='';
var value='';
var attrs='';

var uriAttrs=/<(.*)>;\s*(.*)/gi.exec(parts);
if(uriAttrs){
attrs=uriAttrs[2];
link=Link.parseParams(link,uriAttrs[1]);
}

while(match=Link.attrPattern.exec(attrs)){
attr=match[1].toLowerCase();
value=match[4]||match[3]||match[2];
if(/\*$/.test(attr)){
Link.setAttr(link,attr,Link.parseExtendedValue(value));
}else if(/%/.test(value)){
Link.setAttr(link,attr,querystring.unescape(value));
}else{
Link.setAttr(link,attr,value);
}
}

return link;

};

Link.parse=function(value){
return new Link().parse(value);
};





Link.prototype={

constructor:Link,






rel:function(value){

var links=[];

for(var i=0;i<this.refs.length;i++){
if(this.refs[i].rel===value){
links.push(this.refs[i]);
}
}

return links;

},







get:function(attr,value){

attr=attr.toLowerCase();

var links=[];

for(var i=0;i<this.refs.length;i++){
if(this.refs[i][attr]===value){
links.push(this.refs[i]);
}
}

return links;

},

set:function(link){
this.refs.push(link);
return this;
},

has:function(attr,value){
return this.get(attr,value)!=null;
},

parse:function(value){


value=trim(value).
replace(/\r?\n[\x20\x09]+/g,'');

var match=null;

while(match=Link.pattern.exec(value)){
var link=Link.parseAttrs({uri:match[1]},match[0]);
this.refs.push(link);
}

return this;

},

toString:function(){

var refs=[];
var link='';
var ref=null;

for(var i=0;i<this.refs.length;i++){
ref=this.refs[i];
link=Object.keys(this.refs[i]).reduce(function(link,attr){
if(attr==='uri')return link;
return link+'; '+Link.formatAttribute(attr,ref[attr]);
},'<'+ref.uri+'>');
refs.push(link);
}

return refs.join(', ');

}};




module.exports=Link;

}).call(this,{"isBuffer":require("../../../lighthouse-extension/node_modules/is-buffer/index.js")});
},{"../../../lighthouse-extension/node_modules/is-buffer/index.js":114,"./trim":164,"querystring":129}],164:[function(require,module,exports){
module.exports=function trim(value){
return value.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,'');
};

},{}],165:[function(require,module,exports){













var ImageSSIM;
(function(ImageSSIM){
'use strict';



(function(Channels){
Channels[Channels["Grey"]=1]="Grey";
Channels[Channels["GreyAlpha"]=2]="GreyAlpha";
Channels[Channels["RGB"]=3]="RGB";
Channels[Channels["RGBAlpha"]=4]="RGBAlpha";
})(ImageSSIM.Channels||(ImageSSIM.Channels={}));
var Channels=ImageSSIM.Channels;




function compare(image1,image2,windowSize,K1,K2,luminance,bitsPerComponent){
if(windowSize===void 0){windowSize=8;}
if(K1===void 0){K1=0.01;}
if(K2===void 0){K2=0.03;}
if(luminance===void 0){luminance=true;}
if(bitsPerComponent===void 0){bitsPerComponent=8;}
if(image1.width!==image2.width||image1.height!==image2.height){
throw new Error('Images have different sizes!');
}

var L=(1<<bitsPerComponent)-1;

var c1=Math.pow(K1*L,2),c2=Math.pow(K2*L,2),numWindows=0,mssim=0.0;
var mcs=0.0;
function iteration(lumaValues1,lumaValues2,averageLumaValue1,averageLumaValue2){

var sigxy,sigsqx,sigsqy;
sigxy=sigsqx=sigsqy=0.0;
for(var i=0;i<lumaValues1.length;i++){
sigsqx+=Math.pow(lumaValues1[i]-averageLumaValue1,2);
sigsqy+=Math.pow(lumaValues2[i]-averageLumaValue2,2);
sigxy+=(lumaValues1[i]-averageLumaValue1)*(lumaValues2[i]-averageLumaValue2);
}
var numPixelsInWin=lumaValues1.length-1;
sigsqx/=numPixelsInWin;
sigsqy/=numPixelsInWin;
sigxy/=numPixelsInWin;

var numerator=(2*averageLumaValue1*averageLumaValue2+c1)*(2*sigxy+c2);
var denominator=(Math.pow(averageLumaValue1,2)+Math.pow(averageLumaValue2,2)+c1)*(sigsqx+sigsqy+c2);
mssim+=numerator/denominator;
mcs+=(2*sigxy+c2)/(sigsqx+sigsqy+c2);
numWindows++;
}

Internals._iterate(image1,image2,windowSize,luminance,iteration);
return{ssim:mssim/numWindows,mcs:mcs/numWindows};
}
ImageSSIM.compare=compare;



var Internals;
(function(Internals){
function _iterate(image1,image2,windowSize,luminance,callback){
var width=image1.width,height=image1.height;
for(var y=0;y<height;y+=windowSize){
for(var x=0;x<width;x+=windowSize){

var windowWidth=Math.min(windowSize,width-x),windowHeight=Math.min(windowSize,height-y);
var lumaValues1=_lumaValuesForWindow(image1,x,y,windowWidth,windowHeight,luminance),lumaValues2=_lumaValuesForWindow(image2,x,y,windowWidth,windowHeight,luminance),averageLuma1=_averageLuma(lumaValues1),averageLuma2=_averageLuma(lumaValues2);
callback(lumaValues1,lumaValues2,averageLuma1,averageLuma2);
}
}
}
Internals._iterate=_iterate;
function _lumaValuesForWindow(image,x,y,width,height,luminance){
var array=image.data,lumaValues=new Float32Array(new ArrayBuffer(width*height*4)),counter=0;
var maxj=y+height;
for(var j=y;j<maxj;j++){
var offset=j*image.width;
var i=(offset+x)*image.channels;
var maxi=(offset+x+width)*image.channels;
switch(image.channels){
case 1:
while(i<maxi){

lumaValues[counter++]=array[i++];
}
break;
case 2:
while(i<maxi){
lumaValues[counter++]=array[i++]*(array[i++]/255);
}
break;
case 3:
if(luminance){
while(i<maxi){
lumaValues[counter++]=array[i++]*0.212655+array[i++]*0.715158+array[i++]*0.072187;
}
}else
{
while(i<maxi){
lumaValues[counter++]=array[i++]+array[i++]+array[i++];
}
}
break;
case 4:
if(luminance){
while(i<maxi){
lumaValues[counter++]=(array[i++]*0.212655+array[i++]*0.715158+array[i++]*0.072187)*(array[i++]/255);
}
}else
{
while(i<maxi){
lumaValues[counter++]=(array[i++]+array[i++]+array[i++])*(array[i++]/255);
}
}
break;}

}
return lumaValues;
}
function _averageLuma(lumaValues){
var sumLuma=0.0;
for(var i=0;i<lumaValues.length;i++){
sumLuma+=lumaValues[i];
}
return sumLuma/lumaValues.length;
}
})(Internals||(Internals={}));
})(ImageSSIM||(ImageSSIM={}));
module.exports=ImageSSIM;

},{}],166:[function(require,module,exports){
'use strict';

exports=module.exports=require('./lib/parser')['default'];
exports['default']=exports;

},{"./lib/parser":167}],167:[function(require,module,exports){
"use strict";

exports["default"]=function(){
"use strict";







function peg$subclass(child,parent){
function ctor(){this.constructor=child;}
ctor.prototype=parent.prototype;
child.prototype=new ctor();
}

function peg$SyntaxError(message,expected,found,location){
this.message=message;
this.expected=expected;
this.found=found;
this.location=location;
this.name="SyntaxError";

if(typeof Error.captureStackTrace==="function"){
Error.captureStackTrace(this,peg$SyntaxError);
}
}

peg$subclass(peg$SyntaxError,Error);

function peg$parse(input){
var options=arguments.length>1?arguments[1]:{},
parser=this,

peg$FAILED={},

peg$startRuleFunctions={start:peg$parsestart},
peg$startRuleFunction=peg$parsestart,

peg$c0=function(elements){
return{
type:'messageFormatPattern',
elements:elements,
location:location()};

},
peg$c1=function(text){
var string='',
i,j,outerLen,inner,innerLen;

for(i=0,outerLen=text.length;i<outerLen;i+=1){
inner=text[i];

for(j=0,innerLen=inner.length;j<innerLen;j+=1){
string+=inner[j];
}
}

return string;
},
peg$c2=function(messageText){
return{
type:'messageTextElement',
value:messageText,
location:location()};

},
peg$c3=/^[^ \t\n\r,.+={}#]/,
peg$c4={type:"class",value:"[^ \\t\\n\\r,.+={}#]",description:"[^ \\t\\n\\r,.+={}#]"},
peg$c5="{",
peg$c6={type:"literal",value:"{",description:"\"{\""},
peg$c7=",",
peg$c8={type:"literal",value:",",description:"\",\""},
peg$c9="}",
peg$c10={type:"literal",value:"}",description:"\"}\""},
peg$c11=function(id,format){
return{
type:'argumentElement',
id:id,
format:format&&format[2],
location:location()};

},
peg$c12="number",
peg$c13={type:"literal",value:"number",description:"\"number\""},
peg$c14="date",
peg$c15={type:"literal",value:"date",description:"\"date\""},
peg$c16="time",
peg$c17={type:"literal",value:"time",description:"\"time\""},
peg$c18=function(type,style){
return{
type:type+'Format',
style:style&&style[2],
location:location()};

},
peg$c19="plural",
peg$c20={type:"literal",value:"plural",description:"\"plural\""},
peg$c21=function(pluralStyle){
return{
type:pluralStyle.type,
ordinal:false,
offset:pluralStyle.offset||0,
options:pluralStyle.options,
location:location()};

},
peg$c22="selectordinal",
peg$c23={type:"literal",value:"selectordinal",description:"\"selectordinal\""},
peg$c24=function(pluralStyle){
return{
type:pluralStyle.type,
ordinal:true,
offset:pluralStyle.offset||0,
options:pluralStyle.options,
location:location()};

},
peg$c25="select",
peg$c26={type:"literal",value:"select",description:"\"select\""},
peg$c27=function(options){
return{
type:'selectFormat',
options:options,
location:location()};

},
peg$c28="=",
peg$c29={type:"literal",value:"=",description:"\"=\""},
peg$c30=function(selector,pattern){
return{
type:'optionalFormatPattern',
selector:selector,
value:pattern,
location:location()};

},
peg$c31="offset:",
peg$c32={type:"literal",value:"offset:",description:"\"offset:\""},
peg$c33=function(number){
return number;
},
peg$c34=function(offset,options){
return{
type:'pluralFormat',
offset:offset,
options:options,
location:location()};

},
peg$c35={type:"other",description:"whitespace"},
peg$c36=/^[ \t\n\r]/,
peg$c37={type:"class",value:"[ \\t\\n\\r]",description:"[ \\t\\n\\r]"},
peg$c38={type:"other",description:"optionalWhitespace"},
peg$c39=/^[0-9]/,
peg$c40={type:"class",value:"[0-9]",description:"[0-9]"},
peg$c41=/^[0-9a-f]/i,
peg$c42={type:"class",value:"[0-9a-f]i",description:"[0-9a-f]i"},
peg$c43="0",
peg$c44={type:"literal",value:"0",description:"\"0\""},
peg$c45=/^[1-9]/,
peg$c46={type:"class",value:"[1-9]",description:"[1-9]"},
peg$c47=function(digits){
return parseInt(digits,10);
},
peg$c48=/^[^{}\\\0-\x1F \t\n\r]/,
peg$c49={type:"class",value:"[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]",description:"[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]"},
peg$c50="\\\\",
peg$c51={type:"literal",value:"\\\\",description:"\"\\\\\\\\\""},
peg$c52=function(){return'\\';},
peg$c53="\\#",
peg$c54={type:"literal",value:"\\#",description:"\"\\\\#\""},
peg$c55=function(){return'\\#';},
peg$c56="\\{",
peg$c57={type:"literal",value:"\\{",description:"\"\\\\{\""},
peg$c58=function(){return'\u007B';},
peg$c59="\\}",
peg$c60={type:"literal",value:"\\}",description:"\"\\\\}\""},
peg$c61=function(){return'\u007D';},
peg$c62="\\u",
peg$c63={type:"literal",value:"\\u",description:"\"\\\\u\""},
peg$c64=function(digits){
return String.fromCharCode(parseInt(digits,16));
},
peg$c65=function(chars){return chars.join('');},

peg$currPos=0,
peg$savedPos=0,
peg$posDetailsCache=[{line:1,column:1,seenCR:false}],
peg$maxFailPos=0,
peg$maxFailExpected=[],
peg$silentFails=0,

peg$result;

if("startRule"in options){
if(!(options.startRule in peg$startRuleFunctions)){
throw new Error("Can't start parsing from rule \""+options.startRule+"\".");
}

peg$startRuleFunction=peg$startRuleFunctions[options.startRule];
}

function text(){
return input.substring(peg$savedPos,peg$currPos);
}

function location(){
return peg$computeLocation(peg$savedPos,peg$currPos);
}

function expected(description){
throw peg$buildException(
null,
[{type:"other",description:description}],
input.substring(peg$savedPos,peg$currPos),
peg$computeLocation(peg$savedPos,peg$currPos));

}

function error(message){
throw peg$buildException(
message,
null,
input.substring(peg$savedPos,peg$currPos),
peg$computeLocation(peg$savedPos,peg$currPos));

}

function peg$computePosDetails(pos){
var details=peg$posDetailsCache[pos],
p,ch;

if(details){
return details;
}else{
p=pos-1;
while(!peg$posDetailsCache[p]){
p--;
}

details=peg$posDetailsCache[p];
details={
line:details.line,
column:details.column,
seenCR:details.seenCR};


while(p<pos){
ch=input.charAt(p);
if(ch==="\n"){
if(!details.seenCR){details.line++;}
details.column=1;
details.seenCR=false;
}else if(ch==="\r"||ch==="\u2028"||ch==="\u2029"){
details.line++;
details.column=1;
details.seenCR=true;
}else{
details.column++;
details.seenCR=false;
}

p++;
}

peg$posDetailsCache[pos]=details;
return details;
}
}

function peg$computeLocation(startPos,endPos){
var startPosDetails=peg$computePosDetails(startPos),
endPosDetails=peg$computePosDetails(endPos);

return{
start:{
offset:startPos,
line:startPosDetails.line,
column:startPosDetails.column},

end:{
offset:endPos,
line:endPosDetails.line,
column:endPosDetails.column}};


}

function peg$fail(expected){
if(peg$currPos<peg$maxFailPos){return;}

if(peg$currPos>peg$maxFailPos){
peg$maxFailPos=peg$currPos;
peg$maxFailExpected=[];
}

peg$maxFailExpected.push(expected);
}

function peg$buildException(message,expected,found,location){
function cleanupExpected(expected){
var i=1;

expected.sort(function(a,b){
if(a.description<b.description){
return-1;
}else if(a.description>b.description){
return 1;
}else{
return 0;
}
});

while(i<expected.length){
if(expected[i-1]===expected[i]){
expected.splice(i,1);
}else{
i++;
}
}
}

function buildMessage(expected,found){
function stringEscape(s){
function hex(ch){return ch.charCodeAt(0).toString(16).toUpperCase();}

return s.
replace(/\\/g,'\\\\').
replace(/"/g,'\\"').
replace(/\x08/g,'\\b').
replace(/\t/g,'\\t').
replace(/\n/g,'\\n').
replace(/\f/g,'\\f').
replace(/\r/g,'\\r').
replace(/[\x00-\x07\x0B\x0E\x0F]/g,function(ch){return'\\x0'+hex(ch);}).
replace(/[\x10-\x1F\x80-\xFF]/g,function(ch){return'\\x'+hex(ch);}).
replace(/[\u0100-\u0FFF]/g,function(ch){return'\\u0'+hex(ch);}).
replace(/[\u1000-\uFFFF]/g,function(ch){return'\\u'+hex(ch);});
}

var expectedDescs=new Array(expected.length),
expectedDesc,foundDesc,i;

for(i=0;i<expected.length;i++){
expectedDescs[i]=expected[i].description;
}

expectedDesc=expected.length>1?
expectedDescs.slice(0,-1).join(", ")+
" or "+
expectedDescs[expected.length-1]:
expectedDescs[0];

foundDesc=found?"\""+stringEscape(found)+"\"":"end of input";

return"Expected "+expectedDesc+" but "+foundDesc+" found.";
}

if(expected!==null){
cleanupExpected(expected);
}

return new peg$SyntaxError(
message!==null?message:buildMessage(expected,found),
expected,
found,
location);

}

function peg$parsestart(){
var s0;

s0=peg$parsemessageFormatPattern();

return s0;
}

function peg$parsemessageFormatPattern(){
var s0,s1,s2;

s0=peg$currPos;
s1=[];
s2=peg$parsemessageFormatElement();
while(s2!==peg$FAILED){
s1.push(s2);
s2=peg$parsemessageFormatElement();
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c0(s1);
}
s0=s1;

return s0;
}

function peg$parsemessageFormatElement(){
var s0;

s0=peg$parsemessageTextElement();
if(s0===peg$FAILED){
s0=peg$parseargumentElement();
}

return s0;
}

function peg$parsemessageText(){
var s0,s1,s2,s3,s4,s5;

s0=peg$currPos;
s1=[];
s2=peg$currPos;
s3=peg$parse_();
if(s3!==peg$FAILED){
s4=peg$parsechars();
if(s4!==peg$FAILED){
s5=peg$parse_();
if(s5!==peg$FAILED){
s3=[s3,s4,s5];
s2=s3;
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
if(s2!==peg$FAILED){
while(s2!==peg$FAILED){
s1.push(s2);
s2=peg$currPos;
s3=peg$parse_();
if(s3!==peg$FAILED){
s4=peg$parsechars();
if(s4!==peg$FAILED){
s5=peg$parse_();
if(s5!==peg$FAILED){
s3=[s3,s4,s5];
s2=s3;
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
}
}else{
s1=peg$FAILED;
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c1(s1);
}
s0=s1;
if(s0===peg$FAILED){
s0=peg$currPos;
s1=peg$parsews();
if(s1!==peg$FAILED){
s0=input.substring(s0,peg$currPos);
}else{
s0=s1;
}
}

return s0;
}

function peg$parsemessageTextElement(){
var s0,s1;

s0=peg$currPos;
s1=peg$parsemessageText();
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c2(s1);
}
s0=s1;

return s0;
}

function peg$parseargument(){
var s0,s1,s2;

s0=peg$parsenumber();
if(s0===peg$FAILED){
s0=peg$currPos;
s1=[];
if(peg$c3.test(input.charAt(peg$currPos))){
s2=input.charAt(peg$currPos);
peg$currPos++;
}else{
s2=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c4);}
}
if(s2!==peg$FAILED){
while(s2!==peg$FAILED){
s1.push(s2);
if(peg$c3.test(input.charAt(peg$currPos))){
s2=input.charAt(peg$currPos);
peg$currPos++;
}else{
s2=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c4);}
}
}
}else{
s1=peg$FAILED;
}
if(s1!==peg$FAILED){
s0=input.substring(s0,peg$currPos);
}else{
s0=s1;
}
}

return s0;
}

function peg$parseargumentElement(){
var s0,s1,s2,s3,s4,s5,s6,s7,s8;

s0=peg$currPos;
if(input.charCodeAt(peg$currPos)===123){
s1=peg$c5;
peg$currPos++;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c6);}
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
s3=peg$parseargument();
if(s3!==peg$FAILED){
s4=peg$parse_();
if(s4!==peg$FAILED){
s5=peg$currPos;
if(input.charCodeAt(peg$currPos)===44){
s6=peg$c7;
peg$currPos++;
}else{
s6=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c8);}
}
if(s6!==peg$FAILED){
s7=peg$parse_();
if(s7!==peg$FAILED){
s8=peg$parseelementFormat();
if(s8!==peg$FAILED){
s6=[s6,s7,s8];
s5=s6;
}else{
peg$currPos=s5;
s5=peg$FAILED;
}
}else{
peg$currPos=s5;
s5=peg$FAILED;
}
}else{
peg$currPos=s5;
s5=peg$FAILED;
}
if(s5===peg$FAILED){
s5=null;
}
if(s5!==peg$FAILED){
s6=peg$parse_();
if(s6!==peg$FAILED){
if(input.charCodeAt(peg$currPos)===125){
s7=peg$c9;
peg$currPos++;
}else{
s7=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c10);}
}
if(s7!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c11(s3,s5);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parseelementFormat(){
var s0;

s0=peg$parsesimpleFormat();
if(s0===peg$FAILED){
s0=peg$parsepluralFormat();
if(s0===peg$FAILED){
s0=peg$parseselectOrdinalFormat();
if(s0===peg$FAILED){
s0=peg$parseselectFormat();
}
}
}

return s0;
}

function peg$parsesimpleFormat(){
var s0,s1,s2,s3,s4,s5,s6;

s0=peg$currPos;
if(input.substr(peg$currPos,6)===peg$c12){
s1=peg$c12;
peg$currPos+=6;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c13);}
}
if(s1===peg$FAILED){
if(input.substr(peg$currPos,4)===peg$c14){
s1=peg$c14;
peg$currPos+=4;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c15);}
}
if(s1===peg$FAILED){
if(input.substr(peg$currPos,4)===peg$c16){
s1=peg$c16;
peg$currPos+=4;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c17);}
}
}
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
s3=peg$currPos;
if(input.charCodeAt(peg$currPos)===44){
s4=peg$c7;
peg$currPos++;
}else{
s4=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c8);}
}
if(s4!==peg$FAILED){
s5=peg$parse_();
if(s5!==peg$FAILED){
s6=peg$parsechars();
if(s6!==peg$FAILED){
s4=[s4,s5,s6];
s3=s4;
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
if(s3===peg$FAILED){
s3=null;
}
if(s3!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c18(s1,s3);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parsepluralFormat(){
var s0,s1,s2,s3,s4,s5;

s0=peg$currPos;
if(input.substr(peg$currPos,6)===peg$c19){
s1=peg$c19;
peg$currPos+=6;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c20);}
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
if(input.charCodeAt(peg$currPos)===44){
s3=peg$c7;
peg$currPos++;
}else{
s3=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c8);}
}
if(s3!==peg$FAILED){
s4=peg$parse_();
if(s4!==peg$FAILED){
s5=peg$parsepluralStyle();
if(s5!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c21(s5);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parseselectOrdinalFormat(){
var s0,s1,s2,s3,s4,s5;

s0=peg$currPos;
if(input.substr(peg$currPos,13)===peg$c22){
s1=peg$c22;
peg$currPos+=13;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c23);}
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
if(input.charCodeAt(peg$currPos)===44){
s3=peg$c7;
peg$currPos++;
}else{
s3=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c8);}
}
if(s3!==peg$FAILED){
s4=peg$parse_();
if(s4!==peg$FAILED){
s5=peg$parsepluralStyle();
if(s5!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c24(s5);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parseselectFormat(){
var s0,s1,s2,s3,s4,s5,s6;

s0=peg$currPos;
if(input.substr(peg$currPos,6)===peg$c25){
s1=peg$c25;
peg$currPos+=6;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c26);}
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
if(input.charCodeAt(peg$currPos)===44){
s3=peg$c7;
peg$currPos++;
}else{
s3=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c8);}
}
if(s3!==peg$FAILED){
s4=peg$parse_();
if(s4!==peg$FAILED){
s5=[];
s6=peg$parseoptionalFormatPattern();
if(s6!==peg$FAILED){
while(s6!==peg$FAILED){
s5.push(s6);
s6=peg$parseoptionalFormatPattern();
}
}else{
s5=peg$FAILED;
}
if(s5!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c27(s5);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parseselector(){
var s0,s1,s2,s3;

s0=peg$currPos;
s1=peg$currPos;
if(input.charCodeAt(peg$currPos)===61){
s2=peg$c28;
peg$currPos++;
}else{
s2=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c29);}
}
if(s2!==peg$FAILED){
s3=peg$parsenumber();
if(s3!==peg$FAILED){
s2=[s2,s3];
s1=s2;
}else{
peg$currPos=s1;
s1=peg$FAILED;
}
}else{
peg$currPos=s1;
s1=peg$FAILED;
}
if(s1!==peg$FAILED){
s0=input.substring(s0,peg$currPos);
}else{
s0=s1;
}
if(s0===peg$FAILED){
s0=peg$parsechars();
}

return s0;
}

function peg$parseoptionalFormatPattern(){
var s0,s1,s2,s3,s4,s5,s6,s7,s8;

s0=peg$currPos;
s1=peg$parse_();
if(s1!==peg$FAILED){
s2=peg$parseselector();
if(s2!==peg$FAILED){
s3=peg$parse_();
if(s3!==peg$FAILED){
if(input.charCodeAt(peg$currPos)===123){
s4=peg$c5;
peg$currPos++;
}else{
s4=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c6);}
}
if(s4!==peg$FAILED){
s5=peg$parse_();
if(s5!==peg$FAILED){
s6=peg$parsemessageFormatPattern();
if(s6!==peg$FAILED){
s7=peg$parse_();
if(s7!==peg$FAILED){
if(input.charCodeAt(peg$currPos)===125){
s8=peg$c9;
peg$currPos++;
}else{
s8=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c10);}
}
if(s8!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c30(s2,s6);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parseoffset(){
var s0,s1,s2,s3;

s0=peg$currPos;
if(input.substr(peg$currPos,7)===peg$c31){
s1=peg$c31;
peg$currPos+=7;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c32);}
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
s3=peg$parsenumber();
if(s3!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c33(s3);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parsepluralStyle(){
var s0,s1,s2,s3,s4;

s0=peg$currPos;
s1=peg$parseoffset();
if(s1===peg$FAILED){
s1=null;
}
if(s1!==peg$FAILED){
s2=peg$parse_();
if(s2!==peg$FAILED){
s3=[];
s4=peg$parseoptionalFormatPattern();
if(s4!==peg$FAILED){
while(s4!==peg$FAILED){
s3.push(s4);
s4=peg$parseoptionalFormatPattern();
}
}else{
s3=peg$FAILED;
}
if(s3!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c34(s1,s3);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}

return s0;
}

function peg$parsews(){
var s0,s1;

peg$silentFails++;
s0=[];
if(peg$c36.test(input.charAt(peg$currPos))){
s1=input.charAt(peg$currPos);
peg$currPos++;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c37);}
}
if(s1!==peg$FAILED){
while(s1!==peg$FAILED){
s0.push(s1);
if(peg$c36.test(input.charAt(peg$currPos))){
s1=input.charAt(peg$currPos);
peg$currPos++;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c37);}
}
}
}else{
s0=peg$FAILED;
}
peg$silentFails--;
if(s0===peg$FAILED){
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c35);}
}

return s0;
}

function peg$parse_(){
var s0,s1,s2;

peg$silentFails++;
s0=peg$currPos;
s1=[];
s2=peg$parsews();
while(s2!==peg$FAILED){
s1.push(s2);
s2=peg$parsews();
}
if(s1!==peg$FAILED){
s0=input.substring(s0,peg$currPos);
}else{
s0=s1;
}
peg$silentFails--;
if(s0===peg$FAILED){
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c38);}
}

return s0;
}

function peg$parsedigit(){
var s0;

if(peg$c39.test(input.charAt(peg$currPos))){
s0=input.charAt(peg$currPos);
peg$currPos++;
}else{
s0=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c40);}
}

return s0;
}

function peg$parsehexDigit(){
var s0;

if(peg$c41.test(input.charAt(peg$currPos))){
s0=input.charAt(peg$currPos);
peg$currPos++;
}else{
s0=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c42);}
}

return s0;
}

function peg$parsenumber(){
var s0,s1,s2,s3,s4,s5;

s0=peg$currPos;
if(input.charCodeAt(peg$currPos)===48){
s1=peg$c43;
peg$currPos++;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c44);}
}
if(s1===peg$FAILED){
s1=peg$currPos;
s2=peg$currPos;
if(peg$c45.test(input.charAt(peg$currPos))){
s3=input.charAt(peg$currPos);
peg$currPos++;
}else{
s3=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c46);}
}
if(s3!==peg$FAILED){
s4=[];
s5=peg$parsedigit();
while(s5!==peg$FAILED){
s4.push(s5);
s5=peg$parsedigit();
}
if(s4!==peg$FAILED){
s3=[s3,s4];
s2=s3;
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
}else{
peg$currPos=s2;
s2=peg$FAILED;
}
if(s2!==peg$FAILED){
s1=input.substring(s1,peg$currPos);
}else{
s1=s2;
}
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c47(s1);
}
s0=s1;

return s0;
}

function peg$parsechar(){
var s0,s1,s2,s3,s4,s5,s6,s7;

if(peg$c48.test(input.charAt(peg$currPos))){
s0=input.charAt(peg$currPos);
peg$currPos++;
}else{
s0=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c49);}
}
if(s0===peg$FAILED){
s0=peg$currPos;
if(input.substr(peg$currPos,2)===peg$c50){
s1=peg$c50;
peg$currPos+=2;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c51);}
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c52();
}
s0=s1;
if(s0===peg$FAILED){
s0=peg$currPos;
if(input.substr(peg$currPos,2)===peg$c53){
s1=peg$c53;
peg$currPos+=2;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c54);}
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c55();
}
s0=s1;
if(s0===peg$FAILED){
s0=peg$currPos;
if(input.substr(peg$currPos,2)===peg$c56){
s1=peg$c56;
peg$currPos+=2;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c57);}
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c58();
}
s0=s1;
if(s0===peg$FAILED){
s0=peg$currPos;
if(input.substr(peg$currPos,2)===peg$c59){
s1=peg$c59;
peg$currPos+=2;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c60);}
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c61();
}
s0=s1;
if(s0===peg$FAILED){
s0=peg$currPos;
if(input.substr(peg$currPos,2)===peg$c62){
s1=peg$c62;
peg$currPos+=2;
}else{
s1=peg$FAILED;
if(peg$silentFails===0){peg$fail(peg$c63);}
}
if(s1!==peg$FAILED){
s2=peg$currPos;
s3=peg$currPos;
s4=peg$parsehexDigit();
if(s4!==peg$FAILED){
s5=peg$parsehexDigit();
if(s5!==peg$FAILED){
s6=peg$parsehexDigit();
if(s6!==peg$FAILED){
s7=peg$parsehexDigit();
if(s7!==peg$FAILED){
s4=[s4,s5,s6,s7];
s3=s4;
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
}else{
peg$currPos=s3;
s3=peg$FAILED;
}
if(s3!==peg$FAILED){
s2=input.substring(s2,peg$currPos);
}else{
s2=s3;
}
if(s2!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c64(s2);
s0=s1;
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}else{
peg$currPos=s0;
s0=peg$FAILED;
}
}
}
}
}
}

return s0;
}

function peg$parsechars(){
var s0,s1,s2;

s0=peg$currPos;
s1=[];
s2=peg$parsechar();
if(s2!==peg$FAILED){
while(s2!==peg$FAILED){
s1.push(s2);
s2=peg$parsechar();
}
}else{
s1=peg$FAILED;
}
if(s1!==peg$FAILED){
peg$savedPos=s0;
s1=peg$c65(s1);
}
s0=s1;

return s0;
}

peg$result=peg$startRuleFunction();

if(peg$result!==peg$FAILED&&peg$currPos===input.length){
return peg$result;
}else{
if(peg$result!==peg$FAILED&&peg$currPos<input.length){
peg$fail({type:"end",description:"end of input"});
}

throw peg$buildException(
null,
peg$maxFailExpected,
peg$maxFailPos<input.length?input.charAt(peg$maxFailPos):null,
peg$maxFailPos<input.length?
peg$computeLocation(peg$maxFailPos,peg$maxFailPos+1):
peg$computeLocation(peg$maxFailPos,peg$maxFailPos));

}
}

return{
SyntaxError:peg$SyntaxError,
parse:peg$parse};

}();


},{}],168:[function(require,module,exports){


'use strict';

var IntlMessageFormat=require('./lib/main')['default'];



require('./lib/locales');




exports=module.exports=IntlMessageFormat;
exports['default']=exports;

},{"./lib/locales":104,"./lib/main":173}],169:[function(require,module,exports){








"use strict";
exports["default"]=Compiler;

function Compiler(locales,formats,pluralFn){
this.locales=locales;
this.formats=formats;
this.pluralFn=pluralFn;
}

Compiler.prototype.compile=function(ast){
this.pluralStack=[];
this.currentPlural=null;
this.pluralNumberFormat=null;

return this.compileMessage(ast);
};

Compiler.prototype.compileMessage=function(ast){
if(!(ast&&ast.type==='messageFormatPattern')){
throw new Error('Message AST is not of type: "messageFormatPattern"');
}

var elements=ast.elements,
pattern=[];

var i,len,element;

for(i=0,len=elements.length;i<len;i+=1){
element=elements[i];

switch(element.type){
case'messageTextElement':
pattern.push(this.compileMessageText(element));
break;

case'argumentElement':
pattern.push(this.compileArgument(element));
break;

default:
throw new Error('Message element does not have a valid type');}

}

return pattern;
};

Compiler.prototype.compileMessageText=function(element){



if(this.currentPlural&&/(^|[^\\])#/g.test(element.value)){


if(!this.pluralNumberFormat){
this.pluralNumberFormat=new Intl.NumberFormat(this.locales);
}

return new PluralOffsetString(
this.currentPlural.id,
this.currentPlural.format.offset,
this.pluralNumberFormat,
element.value);
}


return element.value.replace(/\\#/g,'#');
};

Compiler.prototype.compileArgument=function(element){
var format=element.format;

if(!format){
return new StringFormat(element.id);
}

var formats=this.formats,
locales=this.locales,
pluralFn=this.pluralFn,
options;

switch(format.type){
case'numberFormat':
options=formats.number[format.style];
return{
id:element.id,
format:new Intl.NumberFormat(locales,options).format};


case'dateFormat':
options=formats.date[format.style];
return{
id:element.id,
format:new Intl.DateTimeFormat(locales,options).format};


case'timeFormat':
options=formats.time[format.style];
return{
id:element.id,
format:new Intl.DateTimeFormat(locales,options).format};


case'pluralFormat':
options=this.compileOptions(element);
return new PluralFormat(
element.id,format.ordinal,format.offset,options,pluralFn);


case'selectFormat':
options=this.compileOptions(element);
return new SelectFormat(element.id,options);

default:
throw new Error('Message element does not have a valid format type');}

};

Compiler.prototype.compileOptions=function(element){
var format=element.format,
options=format.options,
optionsHash={};




this.pluralStack.push(this.currentPlural);
this.currentPlural=format.type==='pluralFormat'?element:null;

var i,len,option;

for(i=0,len=options.length;i<len;i+=1){
option=options[i];


optionsHash[option.selector]=this.compileMessage(option.value);
}


this.currentPlural=this.pluralStack.pop();

return optionsHash;
};



function StringFormat(id){
this.id=id;
}

StringFormat.prototype.format=function(value){
if(!value&&typeof value!=='number'){
return'';
}

return typeof value==='string'?value:String(value);
};

function PluralFormat(id,useOrdinal,offset,options,pluralFn){
this.id=id;
this.useOrdinal=useOrdinal;
this.offset=offset;
this.options=options;
this.pluralFn=pluralFn;
}

PluralFormat.prototype.getOption=function(value){
var options=this.options;

var option=options['='+value]||
options[this.pluralFn(value-this.offset,this.useOrdinal)];

return option||options.other;
};

function PluralOffsetString(id,offset,numberFormat,string){
this.id=id;
this.offset=offset;
this.numberFormat=numberFormat;
this.string=string;
}

PluralOffsetString.prototype.format=function(value){
var number=this.numberFormat.format(value-this.offset);

return this.string.
replace(/(^|[^\\])#/g,'$1'+number).
replace(/\\#/g,'#');
};

function SelectFormat(id,options){
this.id=id;
this.options=options;
}

SelectFormat.prototype.getOption=function(value){
var options=this.options;
return options[value]||options.other;
};


},{}],170:[function(require,module,exports){








"use strict";
var src$utils$$=require("./utils"),src$es5$$=require("./es5"),src$compiler$$=require("./compiler"),intl$messageformat$parser$$=require("intl-messageformat-parser");
exports["default"]=MessageFormat;



function MessageFormat(message,locales,formats){

var ast=typeof message==='string'?
MessageFormat.__parse(message):message;

if(!(ast&&ast.type==='messageFormatPattern')){
throw new TypeError('A message must be provided as a String or AST.');
}



formats=this._mergeFormats(MessageFormat.formats,formats);


src$es5$$.defineProperty(this,'_locale',{value:this._resolveLocale(locales)});




var pluralFn=this._findPluralRuleFunction(this._locale);
var pattern=this._compilePattern(ast,locales,formats,pluralFn);



var messageFormat=this;
this.format=function(values){
try{
return messageFormat._format(pattern,values);
}catch(e){
if(e.variableId){
throw new Error(
'The intl string context variable \''+e.variableId+'\''+
' was not provided to the string \''+message+'\'');

}else{
throw e;
}
}
};
}




src$es5$$.defineProperty(MessageFormat,'formats',{
enumerable:true,

value:{
number:{
'currency':{
style:'currency'},


'percent':{
style:'percent'}},



date:{
'short':{
month:'numeric',
day:'numeric',
year:'2-digit'},


'medium':{
month:'short',
day:'numeric',
year:'numeric'},


'long':{
month:'long',
day:'numeric',
year:'numeric'},


'full':{
weekday:'long',
month:'long',
day:'numeric',
year:'numeric'}},



time:{
'short':{
hour:'numeric',
minute:'numeric'},


'medium':{
hour:'numeric',
minute:'numeric',
second:'numeric'},


'long':{
hour:'numeric',
minute:'numeric',
second:'numeric',
timeZoneName:'short'},


'full':{
hour:'numeric',
minute:'numeric',
second:'numeric',
timeZoneName:'short'}}}});






src$es5$$.defineProperty(MessageFormat,'__localeData__',{value:src$es5$$.objCreate(null)});
src$es5$$.defineProperty(MessageFormat,'__addLocaleData',{value:function(data){
if(!(data&&data.locale)){
throw new Error(
'Locale data provided to IntlMessageFormat is missing a '+
'`locale` property');

}

MessageFormat.__localeData__[data.locale.toLowerCase()]=data;
}});


src$es5$$.defineProperty(MessageFormat,'__parse',{value:intl$messageformat$parser$$["default"].parse});



src$es5$$.defineProperty(MessageFormat,'defaultLocale',{
enumerable:true,
writable:true,
value:undefined});


MessageFormat.prototype.resolvedOptions=function(){

return{
locale:this._locale};

};

MessageFormat.prototype._compilePattern=function(ast,locales,formats,pluralFn){
var compiler=new src$compiler$$["default"](locales,formats,pluralFn);
return compiler.compile(ast);
};

MessageFormat.prototype._findPluralRuleFunction=function(locale){
var localeData=MessageFormat.__localeData__;
var data=localeData[locale.toLowerCase()];



while(data){
if(data.pluralRuleFunction){
return data.pluralRuleFunction;
}

data=data.parentLocale&&localeData[data.parentLocale.toLowerCase()];
}

throw new Error(
'Locale data added to IntlMessageFormat is missing a '+
'`pluralRuleFunction` for :'+locale);

};

MessageFormat.prototype._format=function(pattern,values){
var result='',
i,len,part,id,value,err;

for(i=0,len=pattern.length;i<len;i+=1){
part=pattern[i];


if(typeof part==='string'){
result+=part;
continue;
}

id=part.id;


if(!(values&&src$utils$$.hop.call(values,id))){
err=new Error('A value must be provided for: '+id);
err.variableId=id;
throw err;
}

value=values[id];




if(part.options){
result+=this._format(part.getOption(value),values);
}else{
result+=part.format(value);
}
}

return result;
};

MessageFormat.prototype._mergeFormats=function(defaults,formats){
var mergedFormats={},
type,mergedType;

for(type in defaults){
if(!src$utils$$.hop.call(defaults,type)){continue;}

mergedFormats[type]=mergedType=src$es5$$.objCreate(defaults[type]);

if(formats&&src$utils$$.hop.call(formats,type)){
src$utils$$.extend(mergedType,formats[type]);
}
}

return mergedFormats;
};

MessageFormat.prototype._resolveLocale=function(locales){
if(typeof locales==='string'){
locales=[locales];
}


locales=(locales||[]).concat(MessageFormat.defaultLocale);

var localeData=MessageFormat.__localeData__;
var i,len,localeParts,data;






for(i=0,len=locales.length;i<len;i+=1){
localeParts=locales[i].toLowerCase().split('-');

while(localeParts.length){
data=localeData[localeParts.join('-')];
if(data){


return data.locale;
}

localeParts.pop();
}
}

var defaultLocale=locales.pop();
throw new Error(
'No locale data has been added to IntlMessageFormat for: '+
locales.join(', ')+', or the default locale: '+defaultLocale);

};


},{"./compiler":169,"./es5":172,"./utils":174,"intl-messageformat-parser":166}],171:[function(require,module,exports){

"use strict";
exports["default"]={"locale":"en","pluralRuleFunction":function(n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other";}};


},{}],172:[function(require,module,exports){








"use strict";
var src$utils$$=require("./utils");




var realDefineProp=function(){
try{return!!Object.defineProperty({},'a',{});}
catch(e){return false;}
}();

var es3=!realDefineProp&&!Object.prototype.__defineGetter__;

var defineProperty=realDefineProp?Object.defineProperty:
function(obj,name,desc){

if('get'in desc&&obj.__defineGetter__){
obj.__defineGetter__(name,desc.get);
}else if(!src$utils$$.hop.call(obj,name)||'value'in desc){
obj[name]=desc.value;
}
};

var objCreate=Object.create||function(proto,props){
var obj,k;

function F(){}
F.prototype=proto;
obj=new F();

for(k in props){
if(src$utils$$.hop.call(props,k)){
defineProperty(obj,k,props[k]);
}
}

return obj;
};

exports.defineProperty=defineProperty,exports.objCreate=objCreate;


},{"./utils":174}],173:[function(require,module,exports){


"use strict";
var src$core$$=require("./core"),src$en$$=require("./en");

src$core$$["default"].__addLocaleData(src$en$$["default"]);
src$core$$["default"].defaultLocale='en';

exports["default"]=src$core$$["default"];


},{"./core":170,"./en":171}],174:[function(require,module,exports){








"use strict";
exports.extend=extend;
var hop=Object.prototype.hasOwnProperty;

function extend(obj){
var sources=Array.prototype.slice.call(arguments,1),
i,len,source,key;

for(i=0,len=sources.length;i<len;i+=1){
source=sources[i];
if(!source){continue;}

for(key in source){
if(hop.call(source,key)){
obj[key]=source[key];
}
}
}

return obj;
}
exports.hop=hop;


},{}],175:[function(require,module,exports){
var encode=require('./lib/encoder'),
decode=require('./lib/decoder');

module.exports={
encode:encode,
decode:decode};


},{"./lib/decoder":176,"./lib/encoder":177}],176:[function(require,module,exports){
(function(Buffer){


























var JpegImage=function jpegImage(){
"use strict";
var dctZigZag=new Int32Array([
0,
1,8,
16,9,2,
3,10,17,24,
32,25,18,11,4,
5,12,19,26,33,40,
48,41,34,27,20,13,6,
7,14,21,28,35,42,49,56,
57,50,43,36,29,22,15,
23,30,37,44,51,58,
59,52,45,38,31,
39,46,53,60,
61,54,47,
55,62,
63]);


var dctCos1=4017;
var dctSin1=799;
var dctCos3=3406;
var dctSin3=2276;
var dctCos6=1567;
var dctSin6=3784;
var dctSqrt2=5793;
var dctSqrt1d2=2896;

function constructor(){
}

function buildHuffmanTable(codeLengths,values){
var k=0,code=[],i,j,length=16;
while(length>0&&!codeLengths[length-1])
length--;
code.push({children:[],index:0});
var p=code[0],q;
for(i=0;i<length;i++){
for(j=0;j<codeLengths[i];j++){
p=code.pop();
p.children[p.index]=values[k];
while(p.index>0){
p=code.pop();
}
p.index++;
code.push(p);
while(code.length<=i){
code.push(q={children:[],index:0});
p.children[p.index]=q.children;
p=q;
}
k++;
}
if(i+1<length){

code.push(q={children:[],index:0});
p.children[p.index]=q.children;
p=q;
}
}
return code[0].children;
}

function decodeScan(data,offset,
frame,components,resetInterval,
spectralStart,spectralEnd,
successivePrev,successive){
var precision=frame.precision;
var samplesPerLine=frame.samplesPerLine;
var scanLines=frame.scanLines;
var mcusPerLine=frame.mcusPerLine;
var progressive=frame.progressive;
var maxH=frame.maxH,maxV=frame.maxV;

var startOffset=offset,bitsData=0,bitsCount=0;
function readBit(){
if(bitsCount>0){
bitsCount--;
return bitsData>>bitsCount&1;
}
bitsData=data[offset++];
if(bitsData==0xFF){
var nextByte=data[offset++];
if(nextByte){
throw"unexpected marker: "+(bitsData<<8|nextByte).toString(16);
}

}
bitsCount=7;
return bitsData>>>7;
}
function decodeHuffman(tree){
var node=tree,bit;
while((bit=readBit())!==null){
node=node[bit];
if(typeof node==='number')
return node;
if(typeof node!=='object')
throw"invalid huffman sequence";
}
return null;
}
function receive(length){
var n=0;
while(length>0){
var bit=readBit();
if(bit===null)return;
n=n<<1|bit;
length--;
}
return n;
}
function receiveAndExtend(length){
var n=receive(length);
if(n>=1<<length-1)
return n;
return n+(-1<<length)+1;
}
function decodeBaseline(component,zz){
var t=decodeHuffman(component.huffmanTableDC);
var diff=t===0?0:receiveAndExtend(t);
zz[0]=component.pred+=diff;
var k=1;
while(k<64){
var rs=decodeHuffman(component.huffmanTableAC);
var s=rs&15,r=rs>>4;
if(s===0){
if(r<15)
break;
k+=16;
continue;
}
k+=r;
var z=dctZigZag[k];
zz[z]=receiveAndExtend(s);
k++;
}
}
function decodeDCFirst(component,zz){
var t=decodeHuffman(component.huffmanTableDC);
var diff=t===0?0:receiveAndExtend(t)<<successive;
zz[0]=component.pred+=diff;
}
function decodeDCSuccessive(component,zz){
zz[0]|=readBit()<<successive;
}
var eobrun=0;
function decodeACFirst(component,zz){
if(eobrun>0){
eobrun--;
return;
}
var k=spectralStart,e=spectralEnd;
while(k<=e){
var rs=decodeHuffman(component.huffmanTableAC);
var s=rs&15,r=rs>>4;
if(s===0){
if(r<15){
eobrun=receive(r)+(1<<r)-1;
break;
}
k+=16;
continue;
}
k+=r;
var z=dctZigZag[k];
zz[z]=receiveAndExtend(s)*(1<<successive);
k++;
}
}
var successiveACState=0,successiveACNextValue;
function decodeACSuccessive(component,zz){
var k=spectralStart,e=spectralEnd,r=0;
while(k<=e){
var z=dctZigZag[k];
switch(successiveACState){
case 0:
var rs=decodeHuffman(component.huffmanTableAC);
var s=rs&15,r=rs>>4;
if(s===0){
if(r<15){
eobrun=receive(r)+(1<<r);
successiveACState=4;
}else{
r=16;
successiveACState=1;
}
}else{
if(s!==1)
throw"invalid ACn encoding";
successiveACNextValue=receiveAndExtend(s);
successiveACState=r?2:3;
}
continue;
case 1:
case 2:
if(zz[z])
zz[z]+=readBit()<<successive;else
{
r--;
if(r===0)
successiveACState=successiveACState==2?3:0;
}
break;
case 3:
if(zz[z])
zz[z]+=readBit()<<successive;else
{
zz[z]=successiveACNextValue<<successive;
successiveACState=0;
}
break;
case 4:
if(zz[z])
zz[z]+=readBit()<<successive;
break;}

k++;
}
if(successiveACState===4){
eobrun--;
if(eobrun===0)
successiveACState=0;
}
}
function decodeMcu(component,decode,mcu,row,col){
var mcuRow=mcu/mcusPerLine|0;
var mcuCol=mcu%mcusPerLine;
var blockRow=mcuRow*component.v+row;
var blockCol=mcuCol*component.h+col;
decode(component,component.blocks[blockRow][blockCol]);
}
function decodeBlock(component,decode,mcu){
var blockRow=mcu/component.blocksPerLine|0;
var blockCol=mcu%component.blocksPerLine;
decode(component,component.blocks[blockRow][blockCol]);
}

var componentsLength=components.length;
var component,i,j,k,n;
var decodeFn;
if(progressive){
if(spectralStart===0)
decodeFn=successivePrev===0?decodeDCFirst:decodeDCSuccessive;else

decodeFn=successivePrev===0?decodeACFirst:decodeACSuccessive;
}else{
decodeFn=decodeBaseline;
}

var mcu=0,marker;
var mcuExpected;
if(componentsLength==1){
mcuExpected=components[0].blocksPerLine*components[0].blocksPerColumn;
}else{
mcuExpected=mcusPerLine*frame.mcusPerColumn;
}
if(!resetInterval)resetInterval=mcuExpected;

var h,v;
while(mcu<mcuExpected){

for(i=0;i<componentsLength;i++)
components[i].pred=0;
eobrun=0;

if(componentsLength==1){
component=components[0];
for(n=0;n<resetInterval;n++){
decodeBlock(component,decodeFn,mcu);
mcu++;
}
}else{
for(n=0;n<resetInterval;n++){
for(i=0;i<componentsLength;i++){
component=components[i];
h=component.h;
v=component.v;
for(j=0;j<v;j++){
for(k=0;k<h;k++){
decodeMcu(component,decodeFn,mcu,j,k);
}
}
}
mcu++;


if(mcu===mcuExpected)break;
}
}


bitsCount=0;
marker=data[offset]<<8|data[offset+1];
if(marker<0xFF00){
throw"marker was not found";
}

if(marker>=0xFFD0&&marker<=0xFFD7){
offset+=2;
}else

break;
}

return offset-startOffset;
}

function buildComponentData(frame,component){
var lines=[];
var blocksPerLine=component.blocksPerLine;
var blocksPerColumn=component.blocksPerColumn;
var samplesPerLine=blocksPerLine<<3;
var R=new Int32Array(64),r=new Uint8Array(64);






function quantizeAndInverse(zz,dataOut,dataIn){
var qt=component.quantizationTable;
var v0,v1,v2,v3,v4,v5,v6,v7,t;
var p=dataIn;
var i;


for(i=0;i<64;i++)
p[i]=zz[i]*qt[i];


for(i=0;i<8;++i){
var row=8*i;


if(p[1+row]==0&&p[2+row]==0&&p[3+row]==0&&
p[4+row]==0&&p[5+row]==0&&p[6+row]==0&&
p[7+row]==0){
t=dctSqrt2*p[0+row]+512>>10;
p[0+row]=t;
p[1+row]=t;
p[2+row]=t;
p[3+row]=t;
p[4+row]=t;
p[5+row]=t;
p[6+row]=t;
p[7+row]=t;
continue;
}


v0=dctSqrt2*p[0+row]+128>>8;
v1=dctSqrt2*p[4+row]+128>>8;
v2=p[2+row];
v3=p[6+row];
v4=dctSqrt1d2*(p[1+row]-p[7+row])+128>>8;
v7=dctSqrt1d2*(p[1+row]+p[7+row])+128>>8;
v5=p[3+row]<<4;
v6=p[5+row]<<4;


t=v0-v1+1>>1;
v0=v0+v1+1>>1;
v1=t;
t=v2*dctSin6+v3*dctCos6+128>>8;
v2=v2*dctCos6-v3*dctSin6+128>>8;
v3=t;
t=v4-v6+1>>1;
v4=v4+v6+1>>1;
v6=t;
t=v7+v5+1>>1;
v5=v7-v5+1>>1;
v7=t;


t=v0-v3+1>>1;
v0=v0+v3+1>>1;
v3=t;
t=v1-v2+1>>1;
v1=v1+v2+1>>1;
v2=t;
t=v4*dctSin3+v7*dctCos3+2048>>12;
v4=v4*dctCos3-v7*dctSin3+2048>>12;
v7=t;
t=v5*dctSin1+v6*dctCos1+2048>>12;
v5=v5*dctCos1-v6*dctSin1+2048>>12;
v6=t;


p[0+row]=v0+v7;
p[7+row]=v0-v7;
p[1+row]=v1+v6;
p[6+row]=v1-v6;
p[2+row]=v2+v5;
p[5+row]=v2-v5;
p[3+row]=v3+v4;
p[4+row]=v3-v4;
}


for(i=0;i<8;++i){
var col=i;


if(p[1*8+col]==0&&p[2*8+col]==0&&p[3*8+col]==0&&
p[4*8+col]==0&&p[5*8+col]==0&&p[6*8+col]==0&&
p[7*8+col]==0){
t=dctSqrt2*dataIn[i+0]+8192>>14;
p[0*8+col]=t;
p[1*8+col]=t;
p[2*8+col]=t;
p[3*8+col]=t;
p[4*8+col]=t;
p[5*8+col]=t;
p[6*8+col]=t;
p[7*8+col]=t;
continue;
}


v0=dctSqrt2*p[0*8+col]+2048>>12;
v1=dctSqrt2*p[4*8+col]+2048>>12;
v2=p[2*8+col];
v3=p[6*8+col];
v4=dctSqrt1d2*(p[1*8+col]-p[7*8+col])+2048>>12;
v7=dctSqrt1d2*(p[1*8+col]+p[7*8+col])+2048>>12;
v5=p[3*8+col];
v6=p[5*8+col];


t=v0-v1+1>>1;
v0=v0+v1+1>>1;
v1=t;
t=v2*dctSin6+v3*dctCos6+2048>>12;
v2=v2*dctCos6-v3*dctSin6+2048>>12;
v3=t;
t=v4-v6+1>>1;
v4=v4+v6+1>>1;
v6=t;
t=v7+v5+1>>1;
v5=v7-v5+1>>1;
v7=t;


t=v0-v3+1>>1;
v0=v0+v3+1>>1;
v3=t;
t=v1-v2+1>>1;
v1=v1+v2+1>>1;
v2=t;
t=v4*dctSin3+v7*dctCos3+2048>>12;
v4=v4*dctCos3-v7*dctSin3+2048>>12;
v7=t;
t=v5*dctSin1+v6*dctCos1+2048>>12;
v5=v5*dctCos1-v6*dctSin1+2048>>12;
v6=t;


p[0*8+col]=v0+v7;
p[7*8+col]=v0-v7;
p[1*8+col]=v1+v6;
p[6*8+col]=v1-v6;
p[2*8+col]=v2+v5;
p[5*8+col]=v2-v5;
p[3*8+col]=v3+v4;
p[4*8+col]=v3-v4;
}


for(i=0;i<64;++i){
var sample=128+(p[i]+8>>4);
dataOut[i]=sample<0?0:sample>0xFF?0xFF:sample;
}
}

var i,j;
for(var blockRow=0;blockRow<blocksPerColumn;blockRow++){
var scanLine=blockRow<<3;
for(i=0;i<8;i++)
lines.push(new Uint8Array(samplesPerLine));
for(var blockCol=0;blockCol<blocksPerLine;blockCol++){
quantizeAndInverse(component.blocks[blockRow][blockCol],r,R);

var offset=0,sample=blockCol<<3;
for(j=0;j<8;j++){
var line=lines[scanLine+j];
for(i=0;i<8;i++)
line[sample+i]=r[offset++];
}
}
}
return lines;
}

function clampTo8bit(a){
return a<0?0:a>255?255:a;
}

constructor.prototype={
load:function load(path){
var xhr=new XMLHttpRequest();
xhr.open("GET",path,true);
xhr.responseType="arraybuffer";
xhr.onload=function(){

var data=new Uint8Array(xhr.response||xhr.mozResponseArrayBuffer);
this.parse(data);
if(this.onload)
this.onload();
}.bind(this);
xhr.send(null);
},
parse:function parse(data){
var offset=0,length=data.length;
function readUint16(){
var value=data[offset]<<8|data[offset+1];
offset+=2;
return value;
}
function readDataBlock(){
var length=readUint16();
var array=data.subarray(offset,offset+length-2);
offset+=array.length;
return array;
}
function prepareComponents(frame){
var maxH=0,maxV=0;
var component,componentId;
for(componentId in frame.components){
if(frame.components.hasOwnProperty(componentId)){
component=frame.components[componentId];
if(maxH<component.h)maxH=component.h;
if(maxV<component.v)maxV=component.v;
}
}
var mcusPerLine=Math.ceil(frame.samplesPerLine/8/maxH);
var mcusPerColumn=Math.ceil(frame.scanLines/8/maxV);
for(componentId in frame.components){
if(frame.components.hasOwnProperty(componentId)){
component=frame.components[componentId];
var blocksPerLine=Math.ceil(Math.ceil(frame.samplesPerLine/8)*component.h/maxH);
var blocksPerColumn=Math.ceil(Math.ceil(frame.scanLines/8)*component.v/maxV);
var blocksPerLineForMcu=mcusPerLine*component.h;
var blocksPerColumnForMcu=mcusPerColumn*component.v;
var blocks=[];
for(var i=0;i<blocksPerColumnForMcu;i++){
var row=[];
for(var j=0;j<blocksPerLineForMcu;j++)
row.push(new Int32Array(64));
blocks.push(row);
}
component.blocksPerLine=blocksPerLine;
component.blocksPerColumn=blocksPerColumn;
component.blocks=blocks;
}
}
frame.maxH=maxH;
frame.maxV=maxV;
frame.mcusPerLine=mcusPerLine;
frame.mcusPerColumn=mcusPerColumn;
}
var jfif=null;
var adobe=null;
var pixels=null;
var frame,resetInterval;
var quantizationTables=[],frames=[];
var huffmanTablesAC=[],huffmanTablesDC=[];
var fileMarker=readUint16();
if(fileMarker!=0xFFD8){
throw"SOI not found";
}

fileMarker=readUint16();
while(fileMarker!=0xFFD9){
var i,j,l;
switch(fileMarker){
case 0xFF00:break;
case 0xFFE0:
case 0xFFE1:
case 0xFFE2:
case 0xFFE3:
case 0xFFE4:
case 0xFFE5:
case 0xFFE6:
case 0xFFE7:
case 0xFFE8:
case 0xFFE9:
case 0xFFEA:
case 0xFFEB:
case 0xFFEC:
case 0xFFED:
case 0xFFEE:
case 0xFFEF:
case 0xFFFE:
var appData=readDataBlock();

if(fileMarker===0xFFE0){
if(appData[0]===0x4A&&appData[1]===0x46&&appData[2]===0x49&&
appData[3]===0x46&&appData[4]===0){
jfif={
version:{major:appData[5],minor:appData[6]},
densityUnits:appData[7],
xDensity:appData[8]<<8|appData[9],
yDensity:appData[10]<<8|appData[11],
thumbWidth:appData[12],
thumbHeight:appData[13],
thumbData:appData.subarray(14,14+3*appData[12]*appData[13])};

}
}

if(fileMarker===0xFFEE){
if(appData[0]===0x41&&appData[1]===0x64&&appData[2]===0x6F&&
appData[3]===0x62&&appData[4]===0x65&&appData[5]===0){
adobe={
version:appData[6],
flags0:appData[7]<<8|appData[8],
flags1:appData[9]<<8|appData[10],
transformCode:appData[11]};

}
}
break;

case 0xFFDB:
var quantizationTablesLength=readUint16();
var quantizationTablesEnd=quantizationTablesLength+offset-2;
while(offset<quantizationTablesEnd){
var quantizationTableSpec=data[offset++];
var tableData=new Int32Array(64);
if(quantizationTableSpec>>4===0){
for(j=0;j<64;j++){
var z=dctZigZag[j];
tableData[z]=data[offset++];
}
}else if(quantizationTableSpec>>4===1){
for(j=0;j<64;j++){
var z=dctZigZag[j];
tableData[z]=readUint16();
}
}else
throw"DQT: invalid table spec";
quantizationTables[quantizationTableSpec&15]=tableData;
}
break;

case 0xFFC0:
case 0xFFC1:
case 0xFFC2:
readUint16();
frame={};
frame.extended=fileMarker===0xFFC1;
frame.progressive=fileMarker===0xFFC2;
frame.precision=data[offset++];
frame.scanLines=readUint16();
frame.samplesPerLine=readUint16();
frame.components={};
frame.componentsOrder=[];
var componentsCount=data[offset++],componentId;
var maxH=0,maxV=0;
for(i=0;i<componentsCount;i++){
componentId=data[offset];
var h=data[offset+1]>>4;
var v=data[offset+1]&15;
var qId=data[offset+2];
frame.componentsOrder.push(componentId);
frame.components[componentId]={
h:h,
v:v,
quantizationIdx:qId};

offset+=3;
}
prepareComponents(frame);
frames.push(frame);
break;

case 0xFFC4:
var huffmanLength=readUint16();
for(i=2;i<huffmanLength;){
var huffmanTableSpec=data[offset++];
var codeLengths=new Uint8Array(16);
var codeLengthSum=0;
for(j=0;j<16;j++,offset++)
codeLengthSum+=codeLengths[j]=data[offset];
var huffmanValues=new Uint8Array(codeLengthSum);
for(j=0;j<codeLengthSum;j++,offset++)
huffmanValues[j]=data[offset];
i+=17+codeLengthSum;

(huffmanTableSpec>>4===0?
huffmanTablesDC:huffmanTablesAC)[huffmanTableSpec&15]=
buildHuffmanTable(codeLengths,huffmanValues);
}
break;

case 0xFFDD:
readUint16();
resetInterval=readUint16();
break;

case 0xFFDA:
var scanLength=readUint16();
var selectorsCount=data[offset++];
var components=[],component;
for(i=0;i<selectorsCount;i++){
component=frame.components[data[offset++]];
var tableSpec=data[offset++];
component.huffmanTableDC=huffmanTablesDC[tableSpec>>4];
component.huffmanTableAC=huffmanTablesAC[tableSpec&15];
components.push(component);
}
var spectralStart=data[offset++];
var spectralEnd=data[offset++];
var successiveApproximation=data[offset++];
var processed=decodeScan(data,offset,
frame,components,resetInterval,
spectralStart,spectralEnd,
successiveApproximation>>4,successiveApproximation&15);
offset+=processed;
break;
default:
if(data[offset-3]==0xFF&&
data[offset-2]>=0xC0&&data[offset-2]<=0xFE){


offset-=3;
break;
}
throw"unknown JPEG marker "+fileMarker.toString(16);}

fileMarker=readUint16();
}
if(frames.length!=1)
throw"only single frame JPEGs supported";


for(var i=0;i<frames.length;i++){
var cp=frames[i].components;
for(var j in cp){
cp[j].quantizationTable=quantizationTables[cp[j].quantizationIdx];
delete cp[j].quantizationIdx;
}
}

this.width=frame.samplesPerLine;
this.height=frame.scanLines;
this.jfif=jfif;
this.adobe=adobe;
this.components=[];
for(var i=0;i<frame.componentsOrder.length;i++){
var component=frame.components[frame.componentsOrder[i]];
this.components.push({
lines:buildComponentData(frame,component),
scaleX:component.h/frame.maxH,
scaleY:component.v/frame.maxV});

}
},
getData:function getData(width,height){
var scaleX=this.width/width,scaleY=this.height/height;

var component1,component2,component3,component4;
var component1Line,component2Line,component3Line,component4Line;
var x,y;
var offset=0;
var Y,Cb,Cr,K,C,M,Ye,R,G,B;
var colorTransform;
var dataLength=width*height*this.components.length;
var data=new Uint8Array(dataLength);
switch(this.components.length){
case 1:
component1=this.components[0];
for(y=0;y<height;y++){
component1Line=component1.lines[0|y*component1.scaleY*scaleY];
for(x=0;x<width;x++){
Y=component1Line[0|x*component1.scaleX*scaleX];

data[offset++]=Y;
}
}
break;
case 2:

component1=this.components[0];
component2=this.components[1];
for(y=0;y<height;y++){
component1Line=component1.lines[0|y*component1.scaleY*scaleY];
component2Line=component2.lines[0|y*component2.scaleY*scaleY];
for(x=0;x<width;x++){
Y=component1Line[0|x*component1.scaleX*scaleX];
data[offset++]=Y;
Y=component2Line[0|x*component2.scaleX*scaleX];
data[offset++]=Y;
}
}
break;
case 3:

colorTransform=true;

if(this.adobe&&this.adobe.transformCode)
colorTransform=true;else
if(typeof this.colorTransform!=='undefined')
colorTransform=!!this.colorTransform;

component1=this.components[0];
component2=this.components[1];
component3=this.components[2];
for(y=0;y<height;y++){
component1Line=component1.lines[0|y*component1.scaleY*scaleY];
component2Line=component2.lines[0|y*component2.scaleY*scaleY];
component3Line=component3.lines[0|y*component3.scaleY*scaleY];
for(x=0;x<width;x++){
if(!colorTransform){
R=component1Line[0|x*component1.scaleX*scaleX];
G=component2Line[0|x*component2.scaleX*scaleX];
B=component3Line[0|x*component3.scaleX*scaleX];
}else{
Y=component1Line[0|x*component1.scaleX*scaleX];
Cb=component2Line[0|x*component2.scaleX*scaleX];
Cr=component3Line[0|x*component3.scaleX*scaleX];

R=clampTo8bit(Y+1.402*(Cr-128));
G=clampTo8bit(Y-0.3441363*(Cb-128)-0.71413636*(Cr-128));
B=clampTo8bit(Y+1.772*(Cb-128));
}

data[offset++]=R;
data[offset++]=G;
data[offset++]=B;
}
}
break;
case 4:
if(!this.adobe)
throw'Unsupported color mode (4 components)';

colorTransform=false;

if(this.adobe&&this.adobe.transformCode)
colorTransform=true;else
if(typeof this.colorTransform!=='undefined')
colorTransform=!!this.colorTransform;

component1=this.components[0];
component2=this.components[1];
component3=this.components[2];
component4=this.components[3];
for(y=0;y<height;y++){
component1Line=component1.lines[0|y*component1.scaleY*scaleY];
component2Line=component2.lines[0|y*component2.scaleY*scaleY];
component3Line=component3.lines[0|y*component3.scaleY*scaleY];
component4Line=component4.lines[0|y*component4.scaleY*scaleY];
for(x=0;x<width;x++){
if(!colorTransform){
C=component1Line[0|x*component1.scaleX*scaleX];
M=component2Line[0|x*component2.scaleX*scaleX];
Ye=component3Line[0|x*component3.scaleX*scaleX];
K=component4Line[0|x*component4.scaleX*scaleX];
}else{
Y=component1Line[0|x*component1.scaleX*scaleX];
Cb=component2Line[0|x*component2.scaleX*scaleX];
Cr=component3Line[0|x*component3.scaleX*scaleX];
K=component4Line[0|x*component4.scaleX*scaleX];

C=255-clampTo8bit(Y+1.402*(Cr-128));
M=255-clampTo8bit(Y-0.3441363*(Cb-128)-0.71413636*(Cr-128));
Ye=255-clampTo8bit(Y+1.772*(Cb-128));
}
data[offset++]=255-C;
data[offset++]=255-M;
data[offset++]=255-Ye;
data[offset++]=255-K;
}
}
break;
default:
throw'Unsupported color mode';}

return data;
},
copyToImageData:function copyToImageData(imageData){
var width=imageData.width,height=imageData.height;
var imageDataArray=imageData.data;
var data=this.getData(width,height);
var i=0,j=0,x,y;
var Y,K,C,M,R,G,B;
switch(this.components.length){
case 1:
for(y=0;y<height;y++){
for(x=0;x<width;x++){
Y=data[i++];

imageDataArray[j++]=Y;
imageDataArray[j++]=Y;
imageDataArray[j++]=Y;
imageDataArray[j++]=255;
}
}
break;
case 3:
for(y=0;y<height;y++){
for(x=0;x<width;x++){
R=data[i++];
G=data[i++];
B=data[i++];

imageDataArray[j++]=R;
imageDataArray[j++]=G;
imageDataArray[j++]=B;
imageDataArray[j++]=255;
}
}
break;
case 4:
for(y=0;y<height;y++){
for(x=0;x<width;x++){
C=data[i++];
M=data[i++];
Y=data[i++];
K=data[i++];

R=255-clampTo8bit(C*(1-K/255)+K);
G=255-clampTo8bit(M*(1-K/255)+K);
B=255-clampTo8bit(Y*(1-K/255)+K);

imageDataArray[j++]=R;
imageDataArray[j++]=G;
imageDataArray[j++]=B;
imageDataArray[j++]=255;
}
}
break;
default:
throw'Unsupported color mode';}

}};


return constructor;
}();
module.exports=decode;

function decode(jpegData){
var arr=new Uint8Array(jpegData);
var decoder=new JpegImage();
decoder.parse(arr);

var image={
width:decoder.width,
height:decoder.height,
data:new Buffer(decoder.width*decoder.height*4)};


decoder.copyToImageData(image);

return image;
}

}).call(this,require("buffer").Buffer);
},{"buffer":109}],177:[function(require,module,exports){
(function(Buffer){





































var btoa=btoa||function(buf){
return new Buffer(buf).toString('base64');
};

function JPEGEncoder(quality){
var self=this;
var fround=Math.round;
var ffloor=Math.floor;
var YTable=new Array(64);
var UVTable=new Array(64);
var fdtbl_Y=new Array(64);
var fdtbl_UV=new Array(64);
var YDC_HT;
var UVDC_HT;
var YAC_HT;
var UVAC_HT;

var bitcode=new Array(65535);
var category=new Array(65535);
var outputfDCTQuant=new Array(64);
var DU=new Array(64);
var byteout=[];
var bytenew=0;
var bytepos=7;

var YDU=new Array(64);
var UDU=new Array(64);
var VDU=new Array(64);
var clt=new Array(256);
var RGB_YUV_TABLE=new Array(2048);
var currentQuality;

var ZigZag=[
0,1,5,6,14,15,27,28,
2,4,7,13,16,26,29,42,
3,8,12,17,25,30,41,43,
9,11,18,24,31,40,44,53,
10,19,23,32,39,45,52,54,
20,22,33,38,46,51,55,60,
21,34,37,47,50,56,59,61,
35,36,48,49,57,58,62,63];


var std_dc_luminance_nrcodes=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];
var std_dc_luminance_values=[0,1,2,3,4,5,6,7,8,9,10,11];
var std_ac_luminance_nrcodes=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];
var std_ac_luminance_values=[
0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,
0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,
0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,
0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,
0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,
0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,
0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,
0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,
0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,
0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,
0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,
0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,
0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,
0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,
0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
0xf9,0xfa];


var std_dc_chrominance_nrcodes=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];
var std_dc_chrominance_values=[0,1,2,3,4,5,6,7,8,9,10,11];
var std_ac_chrominance_nrcodes=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];
var std_ac_chrominance_values=[
0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,
0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,
0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,
0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,
0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,
0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,
0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,
0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,
0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,
0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,
0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,
0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,
0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,
0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,
0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,
0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,
0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,
0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,
0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
0xf9,0xfa];


function initQuantTables(sf){
var YQT=[
16,11,10,16,24,40,51,61,
12,12,14,19,26,58,60,55,
14,13,16,24,40,57,69,56,
14,17,22,29,51,87,80,62,
18,22,37,56,68,109,103,77,
24,35,55,64,81,104,113,92,
49,64,78,87,103,121,120,101,
72,92,95,98,112,100,103,99];


for(var i=0;i<64;i++){
var t=ffloor((YQT[i]*sf+50)/100);
if(t<1){
t=1;
}else if(t>255){
t=255;
}
YTable[ZigZag[i]]=t;
}
var UVQT=[
17,18,24,47,99,99,99,99,
18,21,26,66,99,99,99,99,
24,26,56,99,99,99,99,99,
47,66,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99];

for(var j=0;j<64;j++){
var u=ffloor((UVQT[j]*sf+50)/100);
if(u<1){
u=1;
}else if(u>255){
u=255;
}
UVTable[ZigZag[j]]=u;
}
var aasf=[
1.0,1.387039845,1.306562965,1.175875602,
1.0,0.785694958,0.541196100,0.275899379];

var k=0;
for(var row=0;row<8;row++)
{
for(var col=0;col<8;col++)
{
fdtbl_Y[k]=1.0/(YTable[ZigZag[k]]*aasf[row]*aasf[col]*8.0);
fdtbl_UV[k]=1.0/(UVTable[ZigZag[k]]*aasf[row]*aasf[col]*8.0);
k++;
}
}
}

function computeHuffmanTbl(nrcodes,std_table){
var codevalue=0;
var pos_in_table=0;
var HT=new Array();
for(var k=1;k<=16;k++){
for(var j=1;j<=nrcodes[k];j++){
HT[std_table[pos_in_table]]=[];
HT[std_table[pos_in_table]][0]=codevalue;
HT[std_table[pos_in_table]][1]=k;
pos_in_table++;
codevalue++;
}
codevalue*=2;
}
return HT;
}

function initHuffmanTbl()
{
YDC_HT=computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);
UVDC_HT=computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);
YAC_HT=computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);
UVAC_HT=computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);
}

function initCategoryNumber()
{
var nrlower=1;
var nrupper=2;
for(var cat=1;cat<=15;cat++){

for(var nr=nrlower;nr<nrupper;nr++){
category[32767+nr]=cat;
bitcode[32767+nr]=[];
bitcode[32767+nr][1]=cat;
bitcode[32767+nr][0]=nr;
}

for(var nrneg=-(nrupper-1);nrneg<=-nrlower;nrneg++){
category[32767+nrneg]=cat;
bitcode[32767+nrneg]=[];
bitcode[32767+nrneg][1]=cat;
bitcode[32767+nrneg][0]=nrupper-1+nrneg;
}
nrlower<<=1;
nrupper<<=1;
}
}

function initRGBYUVTable(){
for(var i=0;i<256;i++){
RGB_YUV_TABLE[i]=19595*i;
RGB_YUV_TABLE[i+256>>0]=38470*i;
RGB_YUV_TABLE[i+512>>0]=7471*i+0x8000;
RGB_YUV_TABLE[i+768>>0]=-11059*i;
RGB_YUV_TABLE[i+1024>>0]=-21709*i;
RGB_YUV_TABLE[i+1280>>0]=32768*i+0x807FFF;
RGB_YUV_TABLE[i+1536>>0]=-27439*i;
RGB_YUV_TABLE[i+1792>>0]=-5329*i;
}
}


function writeBits(bs)
{
var value=bs[0];
var posval=bs[1]-1;
while(posval>=0){
if(value&1<<posval){
bytenew|=1<<bytepos;
}
posval--;
bytepos--;
if(bytepos<0){
if(bytenew==0xFF){
writeByte(0xFF);
writeByte(0);
}else
{
writeByte(bytenew);
}
bytepos=7;
bytenew=0;
}
}
}

function writeByte(value)
{

byteout.push(value);
}

function writeWord(value)
{
writeByte(value>>8&0xFF);
writeByte(value&0xFF);
}


function fDCTQuant(data,fdtbl)
{
var d0,d1,d2,d3,d4,d5,d6,d7;

var dataOff=0;
var i;
const I8=8;
const I64=64;
for(i=0;i<I8;++i)
{
d0=data[dataOff];
d1=data[dataOff+1];
d2=data[dataOff+2];
d3=data[dataOff+3];
d4=data[dataOff+4];
d5=data[dataOff+5];
d6=data[dataOff+6];
d7=data[dataOff+7];

var tmp0=d0+d7;
var tmp7=d0-d7;
var tmp1=d1+d6;
var tmp6=d1-d6;
var tmp2=d2+d5;
var tmp5=d2-d5;
var tmp3=d3+d4;
var tmp4=d3-d4;


var tmp10=tmp0+tmp3;
var tmp13=tmp0-tmp3;
var tmp11=tmp1+tmp2;
var tmp12=tmp1-tmp2;

data[dataOff]=tmp10+tmp11;
data[dataOff+4]=tmp10-tmp11;

var z1=(tmp12+tmp13)*0.707106781;
data[dataOff+2]=tmp13+z1;
data[dataOff+6]=tmp13-z1;


tmp10=tmp4+tmp5;
tmp11=tmp5+tmp6;
tmp12=tmp6+tmp7;


var z5=(tmp10-tmp12)*0.382683433;
var z2=0.541196100*tmp10+z5;
var z4=1.306562965*tmp12+z5;
var z3=tmp11*0.707106781;

var z11=tmp7+z3;
var z13=tmp7-z3;

data[dataOff+5]=z13+z2;
data[dataOff+3]=z13-z2;
data[dataOff+1]=z11+z4;
data[dataOff+7]=z11-z4;

dataOff+=8;
}


dataOff=0;
for(i=0;i<I8;++i)
{
d0=data[dataOff];
d1=data[dataOff+8];
d2=data[dataOff+16];
d3=data[dataOff+24];
d4=data[dataOff+32];
d5=data[dataOff+40];
d6=data[dataOff+48];
d7=data[dataOff+56];

var tmp0p2=d0+d7;
var tmp7p2=d0-d7;
var tmp1p2=d1+d6;
var tmp6p2=d1-d6;
var tmp2p2=d2+d5;
var tmp5p2=d2-d5;
var tmp3p2=d3+d4;
var tmp4p2=d3-d4;


var tmp10p2=tmp0p2+tmp3p2;
var tmp13p2=tmp0p2-tmp3p2;
var tmp11p2=tmp1p2+tmp2p2;
var tmp12p2=tmp1p2-tmp2p2;

data[dataOff]=tmp10p2+tmp11p2;
data[dataOff+32]=tmp10p2-tmp11p2;

var z1p2=(tmp12p2+tmp13p2)*0.707106781;
data[dataOff+16]=tmp13p2+z1p2;
data[dataOff+48]=tmp13p2-z1p2;


tmp10p2=tmp4p2+tmp5p2;
tmp11p2=tmp5p2+tmp6p2;
tmp12p2=tmp6p2+tmp7p2;


var z5p2=(tmp10p2-tmp12p2)*0.382683433;
var z2p2=0.541196100*tmp10p2+z5p2;
var z4p2=1.306562965*tmp12p2+z5p2;
var z3p2=tmp11p2*0.707106781;

var z11p2=tmp7p2+z3p2;
var z13p2=tmp7p2-z3p2;

data[dataOff+40]=z13p2+z2p2;
data[dataOff+24]=z13p2-z2p2;
data[dataOff+8]=z11p2+z4p2;
data[dataOff+56]=z11p2-z4p2;

dataOff++;
}


var fDCTQuant;
for(i=0;i<I64;++i)
{

fDCTQuant=data[i]*fdtbl[i];
outputfDCTQuant[i]=fDCTQuant>0.0?fDCTQuant+0.5|0:fDCTQuant-0.5|0;


}
return outputfDCTQuant;
}

function writeAPP0()
{
writeWord(0xFFE0);
writeWord(16);
writeByte(0x4A);
writeByte(0x46);
writeByte(0x49);
writeByte(0x46);
writeByte(0);
writeByte(1);
writeByte(1);
writeByte(0);
writeWord(1);
writeWord(1);
writeByte(0);
writeByte(0);
}

function writeSOF0(width,height)
{
writeWord(0xFFC0);
writeWord(17);
writeByte(8);
writeWord(height);
writeWord(width);
writeByte(3);
writeByte(1);
writeByte(0x11);
writeByte(0);
writeByte(2);
writeByte(0x11);
writeByte(1);
writeByte(3);
writeByte(0x11);
writeByte(1);
}

function writeDQT()
{
writeWord(0xFFDB);
writeWord(132);
writeByte(0);
for(var i=0;i<64;i++){
writeByte(YTable[i]);
}
writeByte(1);
for(var j=0;j<64;j++){
writeByte(UVTable[j]);
}
}

function writeDHT()
{
writeWord(0xFFC4);
writeWord(0x01A2);

writeByte(0);
for(var i=0;i<16;i++){
writeByte(std_dc_luminance_nrcodes[i+1]);
}
for(var j=0;j<=11;j++){
writeByte(std_dc_luminance_values[j]);
}

writeByte(0x10);
for(var k=0;k<16;k++){
writeByte(std_ac_luminance_nrcodes[k+1]);
}
for(var l=0;l<=161;l++){
writeByte(std_ac_luminance_values[l]);
}

writeByte(1);
for(var m=0;m<16;m++){
writeByte(std_dc_chrominance_nrcodes[m+1]);
}
for(var n=0;n<=11;n++){
writeByte(std_dc_chrominance_values[n]);
}

writeByte(0x11);
for(var o=0;o<16;o++){
writeByte(std_ac_chrominance_nrcodes[o+1]);
}
for(var p=0;p<=161;p++){
writeByte(std_ac_chrominance_values[p]);
}
}

function writeSOS()
{
writeWord(0xFFDA);
writeWord(12);
writeByte(3);
writeByte(1);
writeByte(0);
writeByte(2);
writeByte(0x11);
writeByte(3);
writeByte(0x11);
writeByte(0);
writeByte(0x3f);
writeByte(0);
}

function processDU(CDU,fdtbl,DC,HTDC,HTAC){
var EOB=HTAC[0x00];
var M16zeroes=HTAC[0xF0];
var pos;
const I16=16;
const I63=63;
const I64=64;
var DU_DCT=fDCTQuant(CDU,fdtbl);

for(var j=0;j<I64;++j){
DU[ZigZag[j]]=DU_DCT[j];
}
var Diff=DU[0]-DC;DC=DU[0];

if(Diff==0){
writeBits(HTDC[0]);
}else{
pos=32767+Diff;
writeBits(HTDC[category[pos]]);
writeBits(bitcode[pos]);
}

var end0pos=63;
for(;end0pos>0&&DU[end0pos]==0;end0pos--){};

if(end0pos==0){
writeBits(EOB);
return DC;
}
var i=1;
var lng;
while(i<=end0pos){
var startpos=i;
for(;DU[i]==0&&i<=end0pos;++i){}
var nrzeroes=i-startpos;
if(nrzeroes>=I16){
lng=nrzeroes>>4;
for(var nrmarker=1;nrmarker<=lng;++nrmarker)
writeBits(M16zeroes);
nrzeroes=nrzeroes&0xF;
}
pos=32767+DU[i];
writeBits(HTAC[(nrzeroes<<4)+category[pos]]);
writeBits(bitcode[pos]);
i++;
}
if(end0pos!=I63){
writeBits(EOB);
}
return DC;
}

function initCharLookupTable(){
var sfcc=String.fromCharCode;
for(var i=0;i<256;i++){
clt[i]=sfcc(i);
}
}

this.encode=function(image,quality)
{
var time_start=new Date().getTime();

if(quality)setQuality(quality);


byteout=new Array();
bytenew=0;
bytepos=7;


writeWord(0xFFD8);
writeAPP0();
writeDQT();
writeSOF0(image.width,image.height);
writeDHT();
writeSOS();



var DCY=0;
var DCU=0;
var DCV=0;

bytenew=0;
bytepos=7;


this.encode.displayName="_encode_";

var imageData=image.data;
var width=image.width;
var height=image.height;

var quadWidth=width*4;
var tripleWidth=width*3;

var x,y=0;
var r,g,b;
var start,p,col,row,pos;
while(y<height){
x=0;
while(x<quadWidth){
start=quadWidth*y+x;
p=start;
col=-1;
row=0;

for(pos=0;pos<64;pos++){
row=pos>>3;
col=(pos&7)*4;
p=start+row*quadWidth+col;

if(y+row>=height){
p-=quadWidth*(y+1+row-height);
}

if(x+col>=quadWidth){
p-=x+col-quadWidth+4;
}

r=imageData[p++];
g=imageData[p++];
b=imageData[p++];









YDU[pos]=(RGB_YUV_TABLE[r]+RGB_YUV_TABLE[g+256>>0]+RGB_YUV_TABLE[b+512>>0]>>16)-128;
UDU[pos]=(RGB_YUV_TABLE[r+768>>0]+RGB_YUV_TABLE[g+1024>>0]+RGB_YUV_TABLE[b+1280>>0]>>16)-128;
VDU[pos]=(RGB_YUV_TABLE[r+1280>>0]+RGB_YUV_TABLE[g+1536>>0]+RGB_YUV_TABLE[b+1792>>0]>>16)-128;

}

DCY=processDU(YDU,fdtbl_Y,DCY,YDC_HT,YAC_HT);
DCU=processDU(UDU,fdtbl_UV,DCU,UVDC_HT,UVAC_HT);
DCV=processDU(VDU,fdtbl_UV,DCV,UVDC_HT,UVAC_HT);
x+=32;
}
y+=8;
}





if(bytepos>=0){
var fillbits=[];
fillbits[1]=bytepos+1;
fillbits[0]=(1<<bytepos+1)-1;
writeBits(fillbits);
}

writeWord(0xFFD9);


return new Buffer(byteout);

var jpegDataUri='data:image/jpeg;base64,'+btoa(byteout.join(''));

byteout=[];


var duration=new Date().getTime()-time_start;



return jpegDataUri;
};

function setQuality(quality){
if(quality<=0){
quality=1;
}
if(quality>100){
quality=100;
}

if(currentQuality==quality)return;

var sf=0;
if(quality<50){
sf=Math.floor(5000/quality);
}else{
sf=Math.floor(200-quality*2);
}

initQuantTables(sf);
currentQuality=quality;

}

function init(){
var time_start=new Date().getTime();
if(!quality)quality=50;

initCharLookupTable();
initHuffmanTbl();
initCategoryNumber();
initRGBYUVTable();

setQuality(quality);
var duration=new Date().getTime()-time_start;

}

init();

};
module.exports=encode;

function encode(imgData,qu){
if(typeof qu==='undefined')qu=50;
var encoder=new JPEGEncoder(qu);
var data=encoder.encode(imgData,qu);
return{
data:data,
width:imgData.width,
height:imgData.height};

}


function getImageDataFromImage(idOrElement){
var theImg=typeof idOrElement=='string'?document.getElementById(idOrElement):idOrElement;
var cvs=document.createElement('canvas');
cvs.width=theImg.width;
cvs.height=theImg.height;
var ctx=cvs.getContext("2d");
ctx.drawImage(theImg,0,0);

return ctx.getImageData(0,0,cvs.width,cvs.height);
}

}).call(this,require("buffer").Buffer);
},{"buffer":109}],178:[function(require,module,exports){
(function(global){










var LARGE_ARRAY_SIZE=200;


var HASH_UNDEFINED='__lodash_hash_undefined__';


var COMPARE_PARTIAL_FLAG=1,
COMPARE_UNORDERED_FLAG=2;


var MAX_SAFE_INTEGER=9007199254740991;


var argsTag='[object Arguments]',
arrayTag='[object Array]',
asyncTag='[object AsyncFunction]',
boolTag='[object Boolean]',
dateTag='[object Date]',
errorTag='[object Error]',
funcTag='[object Function]',
genTag='[object GeneratorFunction]',
mapTag='[object Map]',
numberTag='[object Number]',
nullTag='[object Null]',
objectTag='[object Object]',
promiseTag='[object Promise]',
proxyTag='[object Proxy]',
regexpTag='[object RegExp]',
setTag='[object Set]',
stringTag='[object String]',
symbolTag='[object Symbol]',
undefinedTag='[object Undefined]',
weakMapTag='[object WeakMap]';

var arrayBufferTag='[object ArrayBuffer]',
dataViewTag='[object DataView]',
float32Tag='[object Float32Array]',
float64Tag='[object Float64Array]',
int8Tag='[object Int8Array]',
int16Tag='[object Int16Array]',
int32Tag='[object Int32Array]',
uint8Tag='[object Uint8Array]',
uint8ClampedTag='[object Uint8ClampedArray]',
uint16Tag='[object Uint16Array]',
uint32Tag='[object Uint32Array]';





var reRegExpChar=/[\\^$.*+?()[\]{}|]/g;


var reIsHostCtor=/^\[object .+?Constructor\]$/;


var reIsUint=/^(?:0|[1-9]\d*)$/;


var typedArrayTags={};
typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=
typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=
typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=
typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=
typedArrayTags[uint32Tag]=true;
typedArrayTags[argsTag]=typedArrayTags[arrayTag]=
typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=
typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=
typedArrayTags[errorTag]=typedArrayTags[funcTag]=
typedArrayTags[mapTag]=typedArrayTags[numberTag]=
typedArrayTags[objectTag]=typedArrayTags[regexpTag]=
typedArrayTags[setTag]=typedArrayTags[stringTag]=
typedArrayTags[weakMapTag]=false;


var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;


var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;


var root=freeGlobal||freeSelf||Function('return this')();


var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;


var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;


var moduleExports=freeModule&&freeModule.exports===freeExports;


var freeProcess=moduleExports&&freeGlobal.process;


var nodeUtil=function(){
try{
return freeProcess&&freeProcess.binding&&freeProcess.binding('util');
}catch(e){}
}();


var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;










function arrayFilter(array,predicate){
var index=-1,
length=array==null?0:array.length,
resIndex=0,
result=[];

while(++index<length){
var value=array[index];
if(predicate(value,index,array)){
result[resIndex++]=value;
}
}
return result;
}









function arrayPush(array,values){
var index=-1,
length=values.length,
offset=array.length;

while(++index<length){
array[offset+index]=values[index];
}
return array;
}











function arraySome(array,predicate){
var index=-1,
length=array==null?0:array.length;

while(++index<length){
if(predicate(array[index],index,array)){
return true;
}
}
return false;
}










function baseTimes(n,iteratee){
var index=-1,
result=Array(n);

while(++index<n){
result[index]=iteratee(index);
}
return result;
}








function baseUnary(func){
return function(value){
return func(value);
};
}









function cacheHas(cache,key){
return cache.has(key);
}









function getValue(object,key){
return object==null?undefined:object[key];
}








function mapToArray(map){
var index=-1,
result=Array(map.size);

map.forEach(function(value,key){
result[++index]=[key,value];
});
return result;
}









function overArg(func,transform){
return function(arg){
return func(transform(arg));
};
}








function setToArray(set){
var index=-1,
result=Array(set.size);

set.forEach(function(value){
result[++index]=value;
});
return result;
}


var arrayProto=Array.prototype,
funcProto=Function.prototype,
objectProto=Object.prototype;


var coreJsData=root['__core-js_shared__'];


var funcToString=funcProto.toString;


var hasOwnProperty=objectProto.hasOwnProperty;


var maskSrcKey=function(){
var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');
return uid?'Symbol(src)_1.'+uid:'';
}();






var nativeObjectToString=objectProto.toString;


var reIsNative=RegExp('^'+
funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').
replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');



var Buffer=moduleExports?root.Buffer:undefined,
Symbol=root.Symbol,
Uint8Array=root.Uint8Array,
propertyIsEnumerable=objectProto.propertyIsEnumerable,
splice=arrayProto.splice,
symToStringTag=Symbol?Symbol.toStringTag:undefined;


var nativeGetSymbols=Object.getOwnPropertySymbols,
nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,
nativeKeys=overArg(Object.keys,Object);


var DataView=getNative(root,'DataView'),
Map=getNative(root,'Map'),
Promise=getNative(root,'Promise'),
Set=getNative(root,'Set'),
WeakMap=getNative(root,'WeakMap'),
nativeCreate=getNative(Object,'create');


var dataViewCtorString=toSource(DataView),
mapCtorString=toSource(Map),
promiseCtorString=toSource(Promise),
setCtorString=toSource(Set),
weakMapCtorString=toSource(WeakMap);


var symbolProto=Symbol?Symbol.prototype:undefined,
symbolValueOf=symbolProto?symbolProto.valueOf:undefined;








function Hash(entries){
var index=-1,
length=entries==null?0:entries.length;

this.clear();
while(++index<length){
var entry=entries[index];
this.set(entry[0],entry[1]);
}
}








function hashClear(){
this.__data__=nativeCreate?nativeCreate(null):{};
this.size=0;
}











function hashDelete(key){
var result=this.has(key)&&delete this.__data__[key];
this.size-=result?1:0;
return result;
}










function hashGet(key){
var data=this.__data__;
if(nativeCreate){
var result=data[key];
return result===HASH_UNDEFINED?undefined:result;
}
return hasOwnProperty.call(data,key)?data[key]:undefined;
}










function hashHas(key){
var data=this.__data__;
return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);
}











function hashSet(key,value){
var data=this.__data__;
this.size+=this.has(key)?0:1;
data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;
return this;
}


Hash.prototype.clear=hashClear;
Hash.prototype['delete']=hashDelete;
Hash.prototype.get=hashGet;
Hash.prototype.has=hashHas;
Hash.prototype.set=hashSet;








function ListCache(entries){
var index=-1,
length=entries==null?0:entries.length;

this.clear();
while(++index<length){
var entry=entries[index];
this.set(entry[0],entry[1]);
}
}








function listCacheClear(){
this.__data__=[];
this.size=0;
}










function listCacheDelete(key){
var data=this.__data__,
index=assocIndexOf(data,key);

if(index<0){
return false;
}
var lastIndex=data.length-1;
if(index==lastIndex){
data.pop();
}else{
splice.call(data,index,1);
}
--this.size;
return true;
}










function listCacheGet(key){
var data=this.__data__,
index=assocIndexOf(data,key);

return index<0?undefined:data[index][1];
}










function listCacheHas(key){
return assocIndexOf(this.__data__,key)>-1;
}











function listCacheSet(key,value){
var data=this.__data__,
index=assocIndexOf(data,key);

if(index<0){
++this.size;
data.push([key,value]);
}else{
data[index][1]=value;
}
return this;
}


ListCache.prototype.clear=listCacheClear;
ListCache.prototype['delete']=listCacheDelete;
ListCache.prototype.get=listCacheGet;
ListCache.prototype.has=listCacheHas;
ListCache.prototype.set=listCacheSet;








function MapCache(entries){
var index=-1,
length=entries==null?0:entries.length;

this.clear();
while(++index<length){
var entry=entries[index];
this.set(entry[0],entry[1]);
}
}








function mapCacheClear(){
this.size=0;
this.__data__={
'hash':new Hash(),
'map':new(Map||ListCache)(),
'string':new Hash()};

}










function mapCacheDelete(key){
var result=getMapData(this,key)['delete'](key);
this.size-=result?1:0;
return result;
}










function mapCacheGet(key){
return getMapData(this,key).get(key);
}










function mapCacheHas(key){
return getMapData(this,key).has(key);
}











function mapCacheSet(key,value){
var data=getMapData(this,key),
size=data.size;

data.set(key,value);
this.size+=data.size==size?0:1;
return this;
}


MapCache.prototype.clear=mapCacheClear;
MapCache.prototype['delete']=mapCacheDelete;
MapCache.prototype.get=mapCacheGet;
MapCache.prototype.has=mapCacheHas;
MapCache.prototype.set=mapCacheSet;









function SetCache(values){
var index=-1,
length=values==null?0:values.length;

this.__data__=new MapCache();
while(++index<length){
this.add(values[index]);
}
}











function setCacheAdd(value){
this.__data__.set(value,HASH_UNDEFINED);
return this;
}










function setCacheHas(value){
return this.__data__.has(value);
}


SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;
SetCache.prototype.has=setCacheHas;








function Stack(entries){
var data=this.__data__=new ListCache(entries);
this.size=data.size;
}








function stackClear(){
this.__data__=new ListCache();
this.size=0;
}










function stackDelete(key){
var data=this.__data__,
result=data['delete'](key);

this.size=data.size;
return result;
}










function stackGet(key){
return this.__data__.get(key);
}










function stackHas(key){
return this.__data__.has(key);
}











function stackSet(key,value){
var data=this.__data__;
if(data instanceof ListCache){
var pairs=data.__data__;
if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){
pairs.push([key,value]);
this.size=++data.size;
return this;
}
data=this.__data__=new MapCache(pairs);
}
data.set(key,value);
this.size=data.size;
return this;
}


Stack.prototype.clear=stackClear;
Stack.prototype['delete']=stackDelete;
Stack.prototype.get=stackGet;
Stack.prototype.has=stackHas;
Stack.prototype.set=stackSet;









function arrayLikeKeys(value,inherited){
var isArr=isArray(value),
isArg=!isArr&&isArguments(value),
isBuff=!isArr&&!isArg&&isBuffer(value),
isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),
skipIndexes=isArr||isArg||isBuff||isType,
result=skipIndexes?baseTimes(value.length,String):[],
length=result.length;

for(var key in value){
if((inherited||hasOwnProperty.call(value,key))&&
!(skipIndexes&&(

key=='length'||

isBuff&&(key=='offset'||key=='parent')||

isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||

isIndex(key,length))))
{
result.push(key);
}
}
return result;
}









function assocIndexOf(array,key){
var length=array.length;
while(length--){
if(eq(array[length][0],key)){
return length;
}
}
return-1;
}












function baseGetAllKeys(object,keysFunc,symbolsFunc){
var result=keysFunc(object);
return isArray(object)?result:arrayPush(result,symbolsFunc(object));
}








function baseGetTag(value){
if(value==null){
return value===undefined?undefinedTag:nullTag;
}
return symToStringTag&&symToStringTag in Object(value)?
getRawTag(value):
objectToString(value);
}








function baseIsArguments(value){
return isObjectLike(value)&&baseGetTag(value)==argsTag;
}















function baseIsEqual(value,other,bitmask,customizer,stack){
if(value===other){
return true;
}
if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){
return value!==value&&other!==other;
}
return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);
}















function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){
var objIsArr=isArray(object),
othIsArr=isArray(other),
objTag=objIsArr?arrayTag:getTag(object),
othTag=othIsArr?arrayTag:getTag(other);

objTag=objTag==argsTag?objectTag:objTag;
othTag=othTag==argsTag?objectTag:othTag;

var objIsObj=objTag==objectTag,
othIsObj=othTag==objectTag,
isSameTag=objTag==othTag;

if(isSameTag&&isBuffer(object)){
if(!isBuffer(other)){
return false;
}
objIsArr=true;
objIsObj=false;
}
if(isSameTag&&!objIsObj){
stack||(stack=new Stack());
return objIsArr||isTypedArray(object)?
equalArrays(object,other,bitmask,customizer,equalFunc,stack):
equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);
}
if(!(bitmask&COMPARE_PARTIAL_FLAG)){
var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),
othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');

if(objIsWrapped||othIsWrapped){
var objUnwrapped=objIsWrapped?object.value():object,
othUnwrapped=othIsWrapped?other.value():other;

stack||(stack=new Stack());
return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);
}
}
if(!isSameTag){
return false;
}
stack||(stack=new Stack());
return equalObjects(object,other,bitmask,customizer,equalFunc,stack);
}









function baseIsNative(value){
if(!isObject(value)||isMasked(value)){
return false;
}
var pattern=isFunction(value)?reIsNative:reIsHostCtor;
return pattern.test(toSource(value));
}








function baseIsTypedArray(value){
return isObjectLike(value)&&
isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];
}








function baseKeys(object){
if(!isPrototype(object)){
return nativeKeys(object);
}
var result=[];
for(var key in Object(object)){
if(hasOwnProperty.call(object,key)&&key!='constructor'){
result.push(key);
}
}
return result;
}














function equalArrays(array,other,bitmask,customizer,equalFunc,stack){
var isPartial=bitmask&COMPARE_PARTIAL_FLAG,
arrLength=array.length,
othLength=other.length;

if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){
return false;
}

var stacked=stack.get(array);
if(stacked&&stack.get(other)){
return stacked==other;
}
var index=-1,
result=true,
seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;

stack.set(array,other);
stack.set(other,array);


while(++index<arrLength){
var arrValue=array[index],
othValue=other[index];

if(customizer){
var compared=isPartial?
customizer(othValue,arrValue,index,other,array,stack):
customizer(arrValue,othValue,index,array,other,stack);
}
if(compared!==undefined){
if(compared){
continue;
}
result=false;
break;
}

if(seen){
if(!arraySome(other,function(othValue,othIndex){
if(!cacheHas(seen,othIndex)&&(
arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){
return seen.push(othIndex);
}
})){
result=false;
break;
}
}else if(!(
arrValue===othValue||
equalFunc(arrValue,othValue,bitmask,customizer,stack)))
{
result=false;
break;
}
}
stack['delete'](array);
stack['delete'](other);
return result;
}


















function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){
switch(tag){
case dataViewTag:
if(object.byteLength!=other.byteLength||
object.byteOffset!=other.byteOffset){
return false;
}
object=object.buffer;
other=other.buffer;

case arrayBufferTag:
if(object.byteLength!=other.byteLength||
!equalFunc(new Uint8Array(object),new Uint8Array(other))){
return false;
}
return true;

case boolTag:
case dateTag:
case numberTag:


return eq(+object,+other);

case errorTag:
return object.name==other.name&&object.message==other.message;

case regexpTag:
case stringTag:



return object==other+'';

case mapTag:
var convert=mapToArray;

case setTag:
var isPartial=bitmask&COMPARE_PARTIAL_FLAG;
convert||(convert=setToArray);

if(object.size!=other.size&&!isPartial){
return false;
}

var stacked=stack.get(object);
if(stacked){
return stacked==other;
}
bitmask|=COMPARE_UNORDERED_FLAG;


stack.set(object,other);
var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);
stack['delete'](object);
return result;

case symbolTag:
if(symbolValueOf){
return symbolValueOf.call(object)==symbolValueOf.call(other);
}}

return false;
}














function equalObjects(object,other,bitmask,customizer,equalFunc,stack){
var isPartial=bitmask&COMPARE_PARTIAL_FLAG,
objProps=getAllKeys(object),
objLength=objProps.length,
othProps=getAllKeys(other),
othLength=othProps.length;

if(objLength!=othLength&&!isPartial){
return false;
}
var index=objLength;
while(index--){
var key=objProps[index];
if(!(isPartial?key in other:hasOwnProperty.call(other,key))){
return false;
}
}

var stacked=stack.get(object);
if(stacked&&stack.get(other)){
return stacked==other;
}
var result=true;
stack.set(object,other);
stack.set(other,object);

var skipCtor=isPartial;
while(++index<objLength){
key=objProps[index];
var objValue=object[key],
othValue=other[key];

if(customizer){
var compared=isPartial?
customizer(othValue,objValue,key,other,object,stack):
customizer(objValue,othValue,key,object,other,stack);
}

if(!(compared===undefined?
objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):
compared))
{
result=false;
break;
}
skipCtor||(skipCtor=key=='constructor');
}
if(result&&!skipCtor){
var objCtor=object.constructor,
othCtor=other.constructor;


if(objCtor!=othCtor&&
'constructor'in object&&'constructor'in other&&
!(typeof objCtor=='function'&&objCtor instanceof objCtor&&
typeof othCtor=='function'&&othCtor instanceof othCtor)){
result=false;
}
}
stack['delete'](object);
stack['delete'](other);
return result;
}








function getAllKeys(object){
return baseGetAllKeys(object,keys,getSymbols);
}









function getMapData(map,key){
var data=map.__data__;
return isKeyable(key)?
data[typeof key=='string'?'string':'hash']:
data.map;
}









function getNative(object,key){
var value=getValue(object,key);
return baseIsNative(value)?value:undefined;
}








function getRawTag(value){
var isOwn=hasOwnProperty.call(value,symToStringTag),
tag=value[symToStringTag];

try{
value[symToStringTag]=undefined;
var unmasked=true;
}catch(e){}

var result=nativeObjectToString.call(value);
if(unmasked){
if(isOwn){
value[symToStringTag]=tag;
}else{
delete value[symToStringTag];
}
}
return result;
}








var getSymbols=!nativeGetSymbols?stubArray:function(object){
if(object==null){
return[];
}
object=Object(object);
return arrayFilter(nativeGetSymbols(object),function(symbol){
return propertyIsEnumerable.call(object,symbol);
});
};








var getTag=baseGetTag;


if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||
Map&&getTag(new Map())!=mapTag||
Promise&&getTag(Promise.resolve())!=promiseTag||
Set&&getTag(new Set())!=setTag||
WeakMap&&getTag(new WeakMap())!=weakMapTag){
getTag=function(value){
var result=baseGetTag(value),
Ctor=result==objectTag?value.constructor:undefined,
ctorString=Ctor?toSource(Ctor):'';

if(ctorString){
switch(ctorString){
case dataViewCtorString:return dataViewTag;
case mapCtorString:return mapTag;
case promiseCtorString:return promiseTag;
case setCtorString:return setTag;
case weakMapCtorString:return weakMapTag;}

}
return result;
};
}









function isIndex(value,length){
length=length==null?MAX_SAFE_INTEGER:length;
return!!length&&(
typeof value=='number'||reIsUint.test(value))&&
value>-1&&value%1==0&&value<length;
}








function isKeyable(value){
var type=typeof value;
return type=='string'||type=='number'||type=='symbol'||type=='boolean'?
value!=='__proto__':
value===null;
}








function isMasked(func){
return!!maskSrcKey&&maskSrcKey in func;
}








function isPrototype(value){
var Ctor=value&&value.constructor,
proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;

return value===proto;
}








function objectToString(value){
return nativeObjectToString.call(value);
}








function toSource(func){
if(func!=null){
try{
return funcToString.call(func);
}catch(e){}
try{
return func+'';
}catch(e){}
}
return'';
}

































function eq(value,other){
return value===other||value!==value&&other!==other;
}



















var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){
return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&
!propertyIsEnumerable.call(value,'callee');
};
























var isArray=Array.isArray;


























function isArrayLike(value){
return value!=null&&isLength(value.length)&&!isFunction(value);
}


















var isBuffer=nativeIsBuffer||stubFalse;





























function isEqual(value,other){
return baseIsEqual(value,other);
}


















function isFunction(value){
if(!isObject(value)){
return false;
}


var tag=baseGetTag(value);
return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;
}



























function isLength(value){
return typeof value=='number'&&
value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;
}


























function isObject(value){
var type=typeof value;
return value!=null&&(type=='object'||type=='function');
}

























function isObjectLike(value){
return value!=null&&typeof value=='object';
}


















var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;





























function keys(object){
return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);
}



















function stubArray(){
return[];
}














function stubFalse(){
return false;
}

module.exports=isEqual;

}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});
},{}],179:[function(require,module,exports){



module.exports=function lookupClosestLocale(locale,available){
if(typeof locale==='string'&&available[locale])return locale;
var locales=[].concat(locale||[]);
for(var l=0,ll=locales.length;l<ll;++l){
var current=locales[l].split('-');
while(current.length){
var candidate=current.join('-');
if(available[candidate])return candidate;
current.pop();
}
}
};

},{}],180:[function(require,module,exports){
exports.getRenderingDataFromViewport=function(viewportProperties,uaDeviceWidth,uaDeviceHeight,uaMaxZoom,uaMinZoom){

var vw=uaDeviceWidth/100;
var vh=uaDeviceHeight/100;



var maxZoom=null;
var minZoom=null;
var zoom=null;
var minWidth=null;
var minHeight=null;
var maxWidth=null;
var maxHeight=null;
var width=null,height=null;
var initialWidth=uaDeviceWidth;
var initialHeight=uaDeviceHeight;
var userZoom="zoom";

if(viewportProperties["maximum-scale"]!==undefined){
maxZoom=translateZoomProperty(viewportProperties["maximum-scale"]);
}
if(viewportProperties["minimum-scale"]!==undefined){
minZoom=translateZoomProperty(viewportProperties["minimum-scale"]);
}
if(viewportProperties["initial-scale"]!==undefined){
zoom=translateZoomProperty(viewportProperties["initial-scale"]);
}







if(minZoom!==null&&maxZoom===null){
minZoom=min(uaMaxZoom,translateZoomProperty(viewportProperties["minimum-scale"]));
}

if(viewportProperties["width"]!==undefined){
minWidth="extend-to-zoom";
maxWidth=translateLengthProperty(viewportProperties["width"],vw,vh);
}

if(viewportProperties["height"]!==undefined){
minHeight="extend-to-zoom";
maxHeight=translateLengthProperty(viewportProperties["height"],vw,vh);
}


if(viewportProperties["user-scalable"]!==undefined){
userZoom=viewportProperties["user-scalable"];
if(typeof userZoom==="number"){
if(userZoom>=1||userZoom<=-1){
userZoom="zoom";
}else{
userZoom="fixed";
}
}else{
switch(userZoom){
case"yes":
case"device-width":
case"device-height":
userZoom="zoom";
break;
case"no":
default:
userZoom="fixed";
break;}

}
}



if(zoom!==null&&(
viewportProperties["width"]===undefined||width===undefined)){
if(viewportProperties["height"]!==undefined){

minWidth=null;
maxWidth=null;
}else{

minWidth="extend-to-zoom";
maxWidth="extend-to-zoom";
}
}






if(minZoom!==null&&maxZoom!==null){
maxZoom=max(minZoom,maxZoom);
}


if(zoom!==null){
zoom=clamp(zoom,minZoom,maxZoom);
}


var extendZoom=zoom===null&&maxZoom===null?null:min(zoom,maxZoom);
var extendWidth,extendHeight;
if(extendZoom===null){
if(maxWidth==="extend-to-zoom"){
maxWidth=null;
}
if(maxHeight==="extend-to-zoom"){
maxHeight=null;
}
if(minWidth==="extend-to-zoom"){
minWidth=maxWidth;
}
if(minHeight==="extend-to-zoom"){
minHeight=maxHeight;
}
}else{
extendWidth=initialWidth/extendZoom;
extendHeight=initialHeight/extendZoom;

if(maxWidth==="extend-to-zoom"){
maxWidth=extendWidth;
}
if(maxHeight==="extend-to-zoom"){
maxHeight=extendHeight;
}
if(minWidth==="extend-to-zoom"){
minWidth=max(extendWidth,maxWidth);
}
if(minHeight==="extend-to-zoom"){
minHeight=max(extendHeight,maxHeight);
}
}


if(minWidth!==null||maxWidth!==null){
width=max(minWidth,min(maxWidth,initialWidth));
}
if(minHeight!==null||maxHeight!==null){
height=max(minHeight,min(maxHeight,initialHeight));
}


if(width===null){
if(height===null){
width=initialWidth;
}else{
if(initialHeight!==0){
width=Math.round(height*(initialWidth/initialHeight));
}else{
width=initialWidth;
}
}
}
if(height===null){
if(initialWidth!==0){
height=Math.round(width*(initialHeight/initialWidth));
}else{
height=initialHeight;
}
}

return{zoom:zoom,width:width,height:height,userZoom:userZoom};
};

function min(a,b){
if(a===null)return b;
if(b===null)return a;
return Math.min(a,b);
}

function max(a,b){
if(a===null)return b;
if(b===null)return a;
return Math.max(a,b);
}


function translateLengthProperty(prop,vw,vh){

if(typeof prop==="number"){
if(prop>=0){

return clamp(prop,1,10000);
}else{
return undefined;
}
}
if(prop==="device-width"){
return 100*vw;
}
if(prop==="device-height"){
return 100*vh;
}
return 1;
}

function translateZoomProperty(prop){

if(typeof prop==="number"){
if(prop>=0){

return clamp(prop,0.1,10);
}else{
return undefined;
}
}
if(prop==="yes"){
return 1;
}
if(prop==="device-width"||prop==="device-height"){
return 10;
}
if(prop==="no"||prop===null){
return 0.1;
}
}


function clamp(value,minv,maxv){
return max(min(value,maxv),minv);
}
































exports.parseMetaViewPortContent=function(S){
var parsedContent={
validProperties:{},
unknownProperties:{},
invalidValues:{}};

var i=1;
while(i<=S.length){
while(i<=S.length&&RegExp(' |\x0A|\x09|\0d|,|;|=').test(S[i-1])){
i++;
}
if(i<=S.length){
i=parseProperty(parsedContent,S,i);
}
}
return parsedContent;
};

var propertyNames=["width","height","initial-scale","minimum-scale","maximum-scale","user-scalable","shrink-to-fit","viewport-fit"];

function parseProperty(parsedContent,S,i){
var start=i;
while(i<=S.length&&!RegExp(' |\x0A|\x09|\0d|,|;|=').test(S[i-1])){
i++;
}
if(i>S.length||RegExp(',|;').test(S[i-1])){
return i;
}
var propertyName=S.slice(start-1,i-1);
while(i<=S.length&&!RegExp(',|;|=').test(S[i-1])){
i++;
}
if(i>S.length||RegExp(',|;').test(S[i-1])){
return i;
}
while(i<=S.length&&RegExp(' |\x0A|\x09|\0d|=').test(S[i-1])){
i++;
}
if(i>S.length||RegExp(',|;').test(S[i-1])){
return i;
}
start=i;
while(i<=S.length&&!RegExp(' |\x0A|\x09|\0d|,|;|=').test(S[i-1])){
i++;
}
var propertyValue=S.slice(start-1,i-1);
setProperty(parsedContent,propertyName,propertyValue);
return i;
}

function setProperty(parsedContent,name,value){
if(propertyNames.indexOf(name)>=0){
var number=parseFloat(value);
if(!isNaN(number)){
parsedContent.validProperties[name]=number;
return;
}
var string=value.toLowerCase();

if(string==="yes"||string==="no"||string==="device-width"||string==="device-height"||


name.toLowerCase()==='viewport-fit'&&(string==='auto'||string==='cover')){

parsedContent.validProperties[name]=string;
return;
}

parsedContent.validProperties[name]=null;
parsedContent.invalidValues[name]=value;
}else{
parsedContent.unknownProperties[name]=value;
}
}

exports.expectedValues={
"width":["device-width","device-height","a positive number"],
"height":["device-width","device-height","a positive number"],
"initial-scale":["a positive number"],
"minimum-scale":["a positive number"],
"maximum-scale":["a positive number"],
"user-scalable":["yes","no","0","1"],
"shrink-to-fit":["yes","no"],
"viewport-fit":["auto","cover"]};


},{}],181:[function(require,module,exports){
module.exports=function parseCacheControl(field){

if(typeof field!=='string'){
return null;
}









var regex=/(?:^|(?:\s*\,\s*))([^\x00-\x20\(\)<>@\,;\:\\"\/\[\]\?\=\{\}\x7F]+)(?:\=(?:([^\x00-\x20\(\)<>@\,;\:\\"\/\[\]\?\=\{\}\x7F]+)|(?:\"((?:[^"\\]|\\.)*)\")))?/g;

var header={};
var err=field.replace(regex,function($0,$1,$2,$3){
var value=$2||$3;
header[$1]=value?value.toLowerCase():true;
return'';
});

if(header['max-age']){
try{
var maxAge=parseInt(header['max-age'],10);
if(isNaN(maxAge)){
return null;
}

header['max-age']=maxAge;
}
catch(err){}
}

return err?null:header;
};

},{}],182:[function(require,module,exports){
var URL=require('url').URL;











function trimLine(line){
if(!line){
return null;
}

if(Array.isArray(line)){
return line.map(trimLine);
}

return String(line).trim();
}








function removeComments(line){
var commentStartIndex=line.indexOf('#');
if(commentStartIndex>-1){
return line.substr(0,commentStartIndex);
}

return line;
}








function splitLine(line){
var idx=String(line).indexOf(':');

if(!line||idx<0){
return null;
}

return[line.slice(0,idx),line.slice(idx+1)];
}









function formatUserAgent(userAgent){
var formattedUserAgent=userAgent.toLowerCase();


var idx=formattedUserAgent.indexOf('/');
if(idx>-1){
formattedUserAgent=formattedUserAgent.substr(0,idx);
}

return formattedUserAgent.trim();
}









function normaliseEncoding(path){
try{
return urlEncodeToUpper(encodeURI(path).replace(/%25/g,'%'));
}catch(e){
return path;
}
}










function urlEncodeToUpper(path){
return path.replace(/%[0-9a-fA-F]{2}/g,function(match){
return match.toUpperCase();
});
}











function parsePattern(pattern){
var regexSpecialChars=/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g;
var wildCardPattern=/\*/g;
var endOfLinePattern=/\\\$$/;

pattern=normaliseEncoding(pattern);

if(pattern.indexOf('*')<0&&pattern.indexOf('$')<0){
return pattern;
}

pattern=pattern.
replace(regexSpecialChars,'\\$&').
replace(wildCardPattern,'(?:.*)').
replace(endOfLinePattern,'$');

return new RegExp(pattern);
}

function parseRobots(contents,robots){
var newlineRegex=/\r\n|\r|\n/;
var lines=contents.
split(newlineRegex).
map(removeComments).
map(splitLine).
map(trimLine);

var currentUserAgents=[];
var isNoneUserAgentState=true;
for(var i=0;i<lines.length;i++){
var line=lines[i];

if(!line||!line[0]){
continue;
}

switch(line[0].toLowerCase()){
case'user-agent':
if(isNoneUserAgentState){
currentUserAgents.length=0;
}

if(line[1]){
currentUserAgents.push(formatUserAgent(line[1]));
}
break;
case'disallow':
robots.addRule(currentUserAgents,line[1],false,i+1);
break;
case'allow':
robots.addRule(currentUserAgents,line[1],true,i+1);
break;
case'crawl-delay':
robots.setCrawlDelay(currentUserAgents,line[1]);
break;
case'sitemap':
if(line[1]){
robots.addSitemap(line[1]);
}
break;
case'host':
if(line[1]){
robots.setPreferredHost(line[1].toLowerCase());
}
break;}


isNoneUserAgentState=line[0].toLowerCase()!=='user-agent';
}
}









function findRule(path,rules){
var matchingRule=null;

for(var i=0;i<rules.length;i++){
var rule=rules[i];

if(typeof rule.pattern==='string'){
if(path.indexOf(rule.pattern)!==0){
continue;
}


if(!matchingRule||rule.pattern.length>matchingRule.pattern.length){
matchingRule=rule;
}


}else if(rule.pattern.test(path)){
return rule;
}
}

return matchingRule;
}










function parseUrl(url){
try{
return new URL(url);
}catch(e){
return null;
}
}


function Robots(url,contents){
this._url=parseUrl(url)||{};
this._url.port=this._url.port||80;

this._rules={};
this._sitemaps=[];
this._preferedHost=null;

parseRobots(contents||'',this);
}










Robots.prototype.addRule=function(userAgents,pattern,allow,lineNumber){
var rules=this._rules;

userAgents.forEach(function(userAgent){
rules[userAgent]=rules[userAgent]||[];

if(!pattern){
return;
}

rules[userAgent].push({
pattern:parsePattern(pattern),
allow:allow,
lineNumber:lineNumber});

});
};







Robots.prototype.setCrawlDelay=function(userAgents,delayStr){
var rules=this._rules;
var delay=Number(delayStr);

userAgents.forEach(function(userAgent){
rules[userAgent]=rules[userAgent]||[];

if(isNaN(delay)){
return;
}

rules[userAgent].crawlDelay=delay;
});
};






Robots.prototype.addSitemap=function(url){
this._sitemaps.push(url);
};






Robots.prototype.setPreferredHost=function(url){
this._preferedHost=url;
};

Robots.prototype._getRule=function(url,ua){
var parsedUrl=parseUrl(url)||{};
var userAgent=formatUserAgent(ua||'*');

parsedUrl.port=parsedUrl.port||'80';


if(parsedUrl.protocol!==this._url.protocol||
parsedUrl.hostname!==this._url.hostname||
parsedUrl.port!==this._url.port){
return;
}

var rules=this._rules[userAgent]||this._rules['*']||[];
var path=urlEncodeToUpper(parsedUrl.pathname+parsedUrl.search);
var rule=findRule(path,rules);

return rule;
};











Robots.prototype.isAllowed=function(url,ua){
var rule=this._getRule(url,ua);

if(typeof rule==='undefined'){
return;
}

return!rule||rule.allow;
};















Robots.prototype.getMatchingLineNumber=function(url,ua){
var rule=this._getRule(url,ua);

return rule?rule.lineNumber:-1;
};








Robots.prototype.isDisallowed=function(url,ua){
return!this.isAllowed(url,ua);
};









Robots.prototype.getCrawlDelay=function(ua){
var userAgent=formatUserAgent(ua||'*');

return(this._rules[userAgent]||this._rules['*']||{}).crawlDelay;
};






Robots.prototype.getPreferredHost=function(){
return this._preferedHost;
};






Robots.prototype.getSitemaps=function(){
return this._sitemaps.slice(0);
};

module.exports=Robots;

},{"url":"url"}],183:[function(require,module,exports){
var Robots=require('./Robots');

module.exports=function(url,contents){
return new Robots(url,contents);
};
},{"./Robots":182}],184:[function(require,module,exports){
(function(process){
exports=module.exports=SemVer;


var debug;
if(typeof process==='object'&&
process.env&&
process.env.NODE_DEBUG&&
/\bsemver\b/i.test(process.env.NODE_DEBUG))
debug=function(){
var args=Array.prototype.slice.call(arguments,0);
args.unshift('SEMVER');
console.log.apply(console,args);
};else

debug=function(){};



exports.SEMVER_SPEC_VERSION='2.0.0';

var MAX_LENGTH=256;
var MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;


var re=exports.re=[];
var src=exports.src=[];
var R=0;







var NUMERICIDENTIFIER=R++;
src[NUMERICIDENTIFIER]='0|[1-9]\\d*';
var NUMERICIDENTIFIERLOOSE=R++;
src[NUMERICIDENTIFIERLOOSE]='[0-9]+';






var NONNUMERICIDENTIFIER=R++;
src[NONNUMERICIDENTIFIER]='\\d*[a-zA-Z-][a-zA-Z0-9-]*';





var MAINVERSION=R++;
src[MAINVERSION]='('+src[NUMERICIDENTIFIER]+')\\.'+
'('+src[NUMERICIDENTIFIER]+')\\.'+
'('+src[NUMERICIDENTIFIER]+')';

var MAINVERSIONLOOSE=R++;
src[MAINVERSIONLOOSE]='('+src[NUMERICIDENTIFIERLOOSE]+')\\.'+
'('+src[NUMERICIDENTIFIERLOOSE]+')\\.'+
'('+src[NUMERICIDENTIFIERLOOSE]+')';




var PRERELEASEIDENTIFIER=R++;
src[PRERELEASEIDENTIFIER]='(?:'+src[NUMERICIDENTIFIER]+
'|'+src[NONNUMERICIDENTIFIER]+')';

var PRERELEASEIDENTIFIERLOOSE=R++;
src[PRERELEASEIDENTIFIERLOOSE]='(?:'+src[NUMERICIDENTIFIERLOOSE]+
'|'+src[NONNUMERICIDENTIFIER]+')';






var PRERELEASE=R++;
src[PRERELEASE]='(?:-('+src[PRERELEASEIDENTIFIER]+
'(?:\\.'+src[PRERELEASEIDENTIFIER]+')*))';

var PRERELEASELOOSE=R++;
src[PRERELEASELOOSE]='(?:-?('+src[PRERELEASEIDENTIFIERLOOSE]+
'(?:\\.'+src[PRERELEASEIDENTIFIERLOOSE]+')*))';




var BUILDIDENTIFIER=R++;
src[BUILDIDENTIFIER]='[0-9A-Za-z-]+';





var BUILD=R++;
src[BUILD]='(?:\\+('+src[BUILDIDENTIFIER]+
'(?:\\.'+src[BUILDIDENTIFIER]+')*))';











var FULL=R++;
var FULLPLAIN='v?'+src[MAINVERSION]+
src[PRERELEASE]+'?'+
src[BUILD]+'?';

src[FULL]='^'+FULLPLAIN+'$';




var LOOSEPLAIN='[v=\\s]*'+src[MAINVERSIONLOOSE]+
src[PRERELEASELOOSE]+'?'+
src[BUILD]+'?';

var LOOSE=R++;
src[LOOSE]='^'+LOOSEPLAIN+'$';

var GTLT=R++;
src[GTLT]='((?:<|>)?=?)';




var XRANGEIDENTIFIERLOOSE=R++;
src[XRANGEIDENTIFIERLOOSE]=src[NUMERICIDENTIFIERLOOSE]+'|x|X|\\*';
var XRANGEIDENTIFIER=R++;
src[XRANGEIDENTIFIER]=src[NUMERICIDENTIFIER]+'|x|X|\\*';

var XRANGEPLAIN=R++;
src[XRANGEPLAIN]='[v=\\s]*('+src[XRANGEIDENTIFIER]+')'+
'(?:\\.('+src[XRANGEIDENTIFIER]+')'+
'(?:\\.('+src[XRANGEIDENTIFIER]+')'+
'(?:'+src[PRERELEASE]+')?'+
src[BUILD]+'?'+
')?)?';

var XRANGEPLAINLOOSE=R++;
src[XRANGEPLAINLOOSE]='[v=\\s]*('+src[XRANGEIDENTIFIERLOOSE]+')'+
'(?:\\.('+src[XRANGEIDENTIFIERLOOSE]+')'+
'(?:\\.('+src[XRANGEIDENTIFIERLOOSE]+')'+
'(?:'+src[PRERELEASELOOSE]+')?'+
src[BUILD]+'?'+
')?)?';

var XRANGE=R++;
src[XRANGE]='^'+src[GTLT]+'\\s*'+src[XRANGEPLAIN]+'$';
var XRANGELOOSE=R++;
src[XRANGELOOSE]='^'+src[GTLT]+'\\s*'+src[XRANGEPLAINLOOSE]+'$';



var LONETILDE=R++;
src[LONETILDE]='(?:~>?)';

var TILDETRIM=R++;
src[TILDETRIM]='(\\s*)'+src[LONETILDE]+'\\s+';
re[TILDETRIM]=new RegExp(src[TILDETRIM],'g');
var tildeTrimReplace='$1~';

var TILDE=R++;
src[TILDE]='^'+src[LONETILDE]+src[XRANGEPLAIN]+'$';
var TILDELOOSE=R++;
src[TILDELOOSE]='^'+src[LONETILDE]+src[XRANGEPLAINLOOSE]+'$';



var LONECARET=R++;
src[LONECARET]='(?:\\^)';

var CARETTRIM=R++;
src[CARETTRIM]='(\\s*)'+src[LONECARET]+'\\s+';
re[CARETTRIM]=new RegExp(src[CARETTRIM],'g');
var caretTrimReplace='$1^';

var CARET=R++;
src[CARET]='^'+src[LONECARET]+src[XRANGEPLAIN]+'$';
var CARETLOOSE=R++;
src[CARETLOOSE]='^'+src[LONECARET]+src[XRANGEPLAINLOOSE]+'$';


var COMPARATORLOOSE=R++;
src[COMPARATORLOOSE]='^'+src[GTLT]+'\\s*('+LOOSEPLAIN+')$|^$';
var COMPARATOR=R++;
src[COMPARATOR]='^'+src[GTLT]+'\\s*('+FULLPLAIN+')$|^$';




var COMPARATORTRIM=R++;
src[COMPARATORTRIM]='(\\s*)'+src[GTLT]+
'\\s*('+LOOSEPLAIN+'|'+src[XRANGEPLAIN]+')';


re[COMPARATORTRIM]=new RegExp(src[COMPARATORTRIM],'g');
var comparatorTrimReplace='$1$2$3';






var HYPHENRANGE=R++;
src[HYPHENRANGE]='^\\s*('+src[XRANGEPLAIN]+')'+
'\\s+-\\s+'+
'('+src[XRANGEPLAIN]+')'+
'\\s*$';

var HYPHENRANGELOOSE=R++;
src[HYPHENRANGELOOSE]='^\\s*('+src[XRANGEPLAINLOOSE]+')'+
'\\s+-\\s+'+
'('+src[XRANGEPLAINLOOSE]+')'+
'\\s*$';


var STAR=R++;
src[STAR]='(<|>)?=?\\s*\\*';



for(var i=0;i<R;i++){
debug(i,src[i]);
if(!re[i])
re[i]=new RegExp(src[i]);
}

exports.parse=parse;
function parse(version,loose){
if(version instanceof SemVer)
return version;

if(typeof version!=='string')
return null;

if(version.length>MAX_LENGTH)
return null;

var r=loose?re[LOOSE]:re[FULL];
if(!r.test(version))
return null;

try{
return new SemVer(version,loose);
}catch(er){
return null;
}
}

exports.valid=valid;
function valid(version,loose){
var v=parse(version,loose);
return v?v.version:null;
}


exports.clean=clean;
function clean(version,loose){
var s=parse(version.trim().replace(/^[=v]+/,''),loose);
return s?s.version:null;
}

exports.SemVer=SemVer;

function SemVer(version,loose){
if(version instanceof SemVer){
if(version.loose===loose)
return version;else

version=version.version;
}else if(typeof version!=='string'){
throw new TypeError('Invalid Version: '+version);
}

if(version.length>MAX_LENGTH)
throw new TypeError('version is longer than '+MAX_LENGTH+' characters');

if(!(this instanceof SemVer))
return new SemVer(version,loose);

debug('SemVer',version,loose);
this.loose=loose;
var m=version.trim().match(loose?re[LOOSE]:re[FULL]);

if(!m)
throw new TypeError('Invalid Version: '+version);

this.raw=version;


this.major=+m[1];
this.minor=+m[2];
this.patch=+m[3];

if(this.major>MAX_SAFE_INTEGER||this.major<0)
throw new TypeError('Invalid major version');

if(this.minor>MAX_SAFE_INTEGER||this.minor<0)
throw new TypeError('Invalid minor version');

if(this.patch>MAX_SAFE_INTEGER||this.patch<0)
throw new TypeError('Invalid patch version');


if(!m[4])
this.prerelease=[];else

this.prerelease=m[4].split('.').map(function(id){
if(/^[0-9]+$/.test(id)){
var num=+id;
if(num>=0&&num<MAX_SAFE_INTEGER)
return num;
}
return id;
});

this.build=m[5]?m[5].split('.'):[];
this.format();
}

SemVer.prototype.format=function(){
this.version=this.major+'.'+this.minor+'.'+this.patch;
if(this.prerelease.length)
this.version+='-'+this.prerelease.join('.');
return this.version;
};

SemVer.prototype.toString=function(){
return this.version;
};

SemVer.prototype.compare=function(other){
debug('SemVer.compare',this.version,this.loose,other);
if(!(other instanceof SemVer))
other=new SemVer(other,this.loose);

return this.compareMain(other)||this.comparePre(other);
};

SemVer.prototype.compareMain=function(other){
if(!(other instanceof SemVer))
other=new SemVer(other,this.loose);

return compareIdentifiers(this.major,other.major)||
compareIdentifiers(this.minor,other.minor)||
compareIdentifiers(this.patch,other.patch);
};

SemVer.prototype.comparePre=function(other){
if(!(other instanceof SemVer))
other=new SemVer(other,this.loose);


if(this.prerelease.length&&!other.prerelease.length)
return-1;else
if(!this.prerelease.length&&other.prerelease.length)
return 1;else
if(!this.prerelease.length&&!other.prerelease.length)
return 0;

var i=0;
do{
var a=this.prerelease[i];
var b=other.prerelease[i];
debug('prerelease compare',i,a,b);
if(a===undefined&&b===undefined)
return 0;else
if(b===undefined)
return 1;else
if(a===undefined)
return-1;else
if(a===b)
continue;else

return compareIdentifiers(a,b);
}while(++i);
};



SemVer.prototype.inc=function(release,identifier){
switch(release){
case'premajor':
this.prerelease.length=0;
this.patch=0;
this.minor=0;
this.major++;
this.inc('pre',identifier);
break;
case'preminor':
this.prerelease.length=0;
this.patch=0;
this.minor++;
this.inc('pre',identifier);
break;
case'prepatch':



this.prerelease.length=0;
this.inc('patch',identifier);
this.inc('pre',identifier);
break;


case'prerelease':
if(this.prerelease.length===0)
this.inc('patch',identifier);
this.inc('pre',identifier);
break;

case'major':




if(this.minor!==0||this.patch!==0||this.prerelease.length===0)
this.major++;
this.minor=0;
this.patch=0;
this.prerelease=[];
break;
case'minor':




if(this.patch!==0||this.prerelease.length===0)
this.minor++;
this.patch=0;
this.prerelease=[];
break;
case'patch':




if(this.prerelease.length===0)
this.patch++;
this.prerelease=[];
break;


case'pre':
if(this.prerelease.length===0)
this.prerelease=[0];else
{
var i=this.prerelease.length;
while(--i>=0){
if(typeof this.prerelease[i]==='number'){
this.prerelease[i]++;
i=-2;
}
}
if(i===-1)
this.prerelease.push(0);
}
if(identifier){


if(this.prerelease[0]===identifier){
if(isNaN(this.prerelease[1]))
this.prerelease=[identifier,0];
}else
this.prerelease=[identifier,0];
}
break;

default:
throw new Error('invalid increment argument: '+release);}

this.format();
this.raw=this.version;
return this;
};

exports.inc=inc;
function inc(version,release,loose,identifier){
if(typeof loose==='string'){
identifier=loose;
loose=undefined;
}

try{
return new SemVer(version,loose).inc(release,identifier).version;
}catch(er){
return null;
}
}

exports.diff=diff;
function diff(version1,version2){
if(eq(version1,version2)){
return null;
}else{
var v1=parse(version1);
var v2=parse(version2);
if(v1.prerelease.length||v2.prerelease.length){
for(var key in v1){
if(key==='major'||key==='minor'||key==='patch'){
if(v1[key]!==v2[key]){
return'pre'+key;
}
}
}
return'prerelease';
}
for(var key in v1){
if(key==='major'||key==='minor'||key==='patch'){
if(v1[key]!==v2[key]){
return key;
}
}
}
}
}

exports.compareIdentifiers=compareIdentifiers;

var numeric=/^[0-9]+$/;
function compareIdentifiers(a,b){
var anum=numeric.test(a);
var bnum=numeric.test(b);

if(anum&&bnum){
a=+a;
b=+b;
}

return anum&&!bnum?-1:
bnum&&!anum?1:
a<b?-1:
a>b?1:
0;
}

exports.rcompareIdentifiers=rcompareIdentifiers;
function rcompareIdentifiers(a,b){
return compareIdentifiers(b,a);
}

exports.major=major;
function major(a,loose){
return new SemVer(a,loose).major;
}

exports.minor=minor;
function minor(a,loose){
return new SemVer(a,loose).minor;
}

exports.patch=patch;
function patch(a,loose){
return new SemVer(a,loose).patch;
}

exports.compare=compare;
function compare(a,b,loose){
return new SemVer(a,loose).compare(b);
}

exports.compareLoose=compareLoose;
function compareLoose(a,b){
return compare(a,b,true);
}

exports.rcompare=rcompare;
function rcompare(a,b,loose){
return compare(b,a,loose);
}

exports.sort=sort;
function sort(list,loose){
return list.sort(function(a,b){
return exports.compare(a,b,loose);
});
}

exports.rsort=rsort;
function rsort(list,loose){
return list.sort(function(a,b){
return exports.rcompare(a,b,loose);
});
}

exports.gt=gt;
function gt(a,b,loose){
return compare(a,b,loose)>0;
}

exports.lt=lt;
function lt(a,b,loose){
return compare(a,b,loose)<0;
}

exports.eq=eq;
function eq(a,b,loose){
return compare(a,b,loose)===0;
}

exports.neq=neq;
function neq(a,b,loose){
return compare(a,b,loose)!==0;
}

exports.gte=gte;
function gte(a,b,loose){
return compare(a,b,loose)>=0;
}

exports.lte=lte;
function lte(a,b,loose){
return compare(a,b,loose)<=0;
}

exports.cmp=cmp;
function cmp(a,op,b,loose){
var ret;
switch(op){
case'===':
if(typeof a==='object')a=a.version;
if(typeof b==='object')b=b.version;
ret=a===b;
break;
case'!==':
if(typeof a==='object')a=a.version;
if(typeof b==='object')b=b.version;
ret=a!==b;
break;
case'':case'=':case'==':ret=eq(a,b,loose);break;
case'!=':ret=neq(a,b,loose);break;
case'>':ret=gt(a,b,loose);break;
case'>=':ret=gte(a,b,loose);break;
case'<':ret=lt(a,b,loose);break;
case'<=':ret=lte(a,b,loose);break;
default:throw new TypeError('Invalid operator: '+op);}

return ret;
}

exports.Comparator=Comparator;
function Comparator(comp,loose){
if(comp instanceof Comparator){
if(comp.loose===loose)
return comp;else

comp=comp.value;
}

if(!(this instanceof Comparator))
return new Comparator(comp,loose);

debug('comparator',comp,loose);
this.loose=loose;
this.parse(comp);

if(this.semver===ANY)
this.value='';else

this.value=this.operator+this.semver.version;

debug('comp',this);
}

var ANY={};
Comparator.prototype.parse=function(comp){
var r=this.loose?re[COMPARATORLOOSE]:re[COMPARATOR];
var m=comp.match(r);

if(!m)
throw new TypeError('Invalid comparator: '+comp);

this.operator=m[1];
if(this.operator==='=')
this.operator='';


if(!m[2])
this.semver=ANY;else

this.semver=new SemVer(m[2],this.loose);
};

Comparator.prototype.toString=function(){
return this.value;
};

Comparator.prototype.test=function(version){
debug('Comparator.test',version,this.loose);

if(this.semver===ANY)
return true;

if(typeof version==='string')
version=new SemVer(version,this.loose);

return cmp(version,this.operator,this.semver,this.loose);
};


exports.Range=Range;
function Range(range,loose){
if(range instanceof Range&&range.loose===loose)
return range;

if(!(this instanceof Range))
return new Range(range,loose);

this.loose=loose;


this.raw=range;
this.set=range.split(/\s*\|\|\s*/).map(function(range){
return this.parseRange(range.trim());
},this).filter(function(c){

return c.length;
});

if(!this.set.length){
throw new TypeError('Invalid SemVer Range: '+range);
}

this.format();
}

Range.prototype.format=function(){
this.range=this.set.map(function(comps){
return comps.join(' ').trim();
}).join('||').trim();
return this.range;
};

Range.prototype.toString=function(){
return this.range;
};

Range.prototype.parseRange=function(range){
var loose=this.loose;
range=range.trim();
debug('range',range,loose);

var hr=loose?re[HYPHENRANGELOOSE]:re[HYPHENRANGE];
range=range.replace(hr,hyphenReplace);
debug('hyphen replace',range);

range=range.replace(re[COMPARATORTRIM],comparatorTrimReplace);
debug('comparator trim',range,re[COMPARATORTRIM]);


range=range.replace(re[TILDETRIM],tildeTrimReplace);


range=range.replace(re[CARETTRIM],caretTrimReplace);


range=range.split(/\s+/).join(' ');




var compRe=loose?re[COMPARATORLOOSE]:re[COMPARATOR];
var set=range.split(' ').map(function(comp){
return parseComparator(comp,loose);
}).join(' ').split(/\s+/);
if(this.loose){

set=set.filter(function(comp){
return!!comp.match(compRe);
});
}
set=set.map(function(comp){
return new Comparator(comp,loose);
});

return set;
};


exports.toComparators=toComparators;
function toComparators(range,loose){
return new Range(range,loose).set.map(function(comp){
return comp.map(function(c){
return c.value;
}).join(' ').trim().split(' ');
});
}




function parseComparator(comp,loose){
debug('comp',comp);
comp=replaceCarets(comp,loose);
debug('caret',comp);
comp=replaceTildes(comp,loose);
debug('tildes',comp);
comp=replaceXRanges(comp,loose);
debug('xrange',comp);
comp=replaceStars(comp,loose);
debug('stars',comp);
return comp;
}

function isX(id){
return!id||id.toLowerCase()==='x'||id==='*';
}







function replaceTildes(comp,loose){
return comp.trim().split(/\s+/).map(function(comp){
return replaceTilde(comp,loose);
}).join(' ');
}

function replaceTilde(comp,loose){
var r=loose?re[TILDELOOSE]:re[TILDE];
return comp.replace(r,function(_,M,m,p,pr){
debug('tilde',comp,_,M,m,p,pr);
var ret;

if(isX(M))
ret='';else
if(isX(m))
ret='>='+M+'.0.0 <'+(+M+1)+'.0.0';else
if(isX(p))

ret='>='+M+'.'+m+'.0 <'+M+'.'+(+m+1)+'.0';else
if(pr){
debug('replaceTilde pr',pr);
if(pr.charAt(0)!=='-')
pr='-'+pr;
ret='>='+M+'.'+m+'.'+p+pr+
' <'+M+'.'+(+m+1)+'.0';
}else

ret='>='+M+'.'+m+'.'+p+
' <'+M+'.'+(+m+1)+'.0';

debug('tilde return',ret);
return ret;
});
}







function replaceCarets(comp,loose){
return comp.trim().split(/\s+/).map(function(comp){
return replaceCaret(comp,loose);
}).join(' ');
}

function replaceCaret(comp,loose){
debug('caret',comp,loose);
var r=loose?re[CARETLOOSE]:re[CARET];
return comp.replace(r,function(_,M,m,p,pr){
debug('caret',comp,_,M,m,p,pr);
var ret;

if(isX(M))
ret='';else
if(isX(m))
ret='>='+M+'.0.0 <'+(+M+1)+'.0.0';else
if(isX(p)){
if(M==='0')
ret='>='+M+'.'+m+'.0 <'+M+'.'+(+m+1)+'.0';else

ret='>='+M+'.'+m+'.0 <'+(+M+1)+'.0.0';
}else if(pr){
debug('replaceCaret pr',pr);
if(pr.charAt(0)!=='-')
pr='-'+pr;
if(M==='0'){
if(m==='0')
ret='>='+M+'.'+m+'.'+p+pr+
' <'+M+'.'+m+'.'+(+p+1);else

ret='>='+M+'.'+m+'.'+p+pr+
' <'+M+'.'+(+m+1)+'.0';
}else
ret='>='+M+'.'+m+'.'+p+pr+
' <'+(+M+1)+'.0.0';
}else{
debug('no pr');
if(M==='0'){
if(m==='0')
ret='>='+M+'.'+m+'.'+p+
' <'+M+'.'+m+'.'+(+p+1);else

ret='>='+M+'.'+m+'.'+p+
' <'+M+'.'+(+m+1)+'.0';
}else
ret='>='+M+'.'+m+'.'+p+
' <'+(+M+1)+'.0.0';
}

debug('caret return',ret);
return ret;
});
}

function replaceXRanges(comp,loose){
debug('replaceXRanges',comp,loose);
return comp.split(/\s+/).map(function(comp){
return replaceXRange(comp,loose);
}).join(' ');
}

function replaceXRange(comp,loose){
comp=comp.trim();
var r=loose?re[XRANGELOOSE]:re[XRANGE];
return comp.replace(r,function(ret,gtlt,M,m,p,pr){
debug('xRange',comp,ret,gtlt,M,m,p,pr);
var xM=isX(M);
var xm=xM||isX(m);
var xp=xm||isX(p);
var anyX=xp;

if(gtlt==='='&&anyX)
gtlt='';

if(xM){
if(gtlt==='>'||gtlt==='<'){

ret='<0.0.0';
}else{

ret='*';
}
}else if(gtlt&&anyX){

if(xm)
m=0;
if(xp)
p=0;

if(gtlt==='>'){



gtlt='>=';
if(xm){
M=+M+1;
m=0;
p=0;
}else if(xp){
m=+m+1;
p=0;
}
}else if(gtlt==='<='){


gtlt='<';
if(xm)
M=+M+1;else

m=+m+1;
}

ret=gtlt+M+'.'+m+'.'+p;
}else if(xm){
ret='>='+M+'.0.0 <'+(+M+1)+'.0.0';
}else if(xp){
ret='>='+M+'.'+m+'.0 <'+M+'.'+(+m+1)+'.0';
}

debug('xRange return',ret);

return ret;
});
}



function replaceStars(comp,loose){
debug('replaceStars',comp,loose);

return comp.trim().replace(re[STAR],'');
}






function hyphenReplace($0,
from,fM,fm,fp,fpr,fb,
to,tM,tm,tp,tpr,tb){

if(isX(fM))
from='';else
if(isX(fm))
from='>='+fM+'.0.0';else
if(isX(fp))
from='>='+fM+'.'+fm+'.0';else

from='>='+from;

if(isX(tM))
to='';else
if(isX(tm))
to='<'+(+tM+1)+'.0.0';else
if(isX(tp))
to='<'+tM+'.'+(+tm+1)+'.0';else
if(tpr)
to='<='+tM+'.'+tm+'.'+tp+'-'+tpr;else

to='<='+to;

return(from+' '+to).trim();
}



Range.prototype.test=function(version){
if(!version)
return false;

if(typeof version==='string')
version=new SemVer(version,this.loose);

for(var i=0;i<this.set.length;i++){
if(testSet(this.set[i],version))
return true;
}
return false;
};

function testSet(set,version){
for(var i=0;i<set.length;i++){
if(!set[i].test(version))
return false;
}

if(version.prerelease.length){





for(var i=0;i<set.length;i++){
debug(set[i].semver);
if(set[i].semver===ANY)
continue;

if(set[i].semver.prerelease.length>0){
var allowed=set[i].semver;
if(allowed.major===version.major&&
allowed.minor===version.minor&&
allowed.patch===version.patch)
return true;
}
}


return false;
}

return true;
}

exports.satisfies=satisfies;
function satisfies(version,range,loose){
try{
range=new Range(range,loose);
}catch(er){
return false;
}
return range.test(version);
}

exports.maxSatisfying=maxSatisfying;
function maxSatisfying(versions,range,loose){
return versions.filter(function(version){
return satisfies(version,range,loose);
}).sort(function(a,b){
return rcompare(a,b,loose);
})[0]||null;
}

exports.minSatisfying=minSatisfying;
function minSatisfying(versions,range,loose){
return versions.filter(function(version){
return satisfies(version,range,loose);
}).sort(function(a,b){
return compare(a,b,loose);
})[0]||null;
}

exports.validRange=validRange;
function validRange(range,loose){
try{


return new Range(range,loose).range||'*';
}catch(er){
return null;
}
}


exports.ltr=ltr;
function ltr(version,range,loose){
return outside(version,range,'<',loose);
}


exports.gtr=gtr;
function gtr(version,range,loose){
return outside(version,range,'>',loose);
}

exports.outside=outside;
function outside(version,range,hilo,loose){
version=new SemVer(version,loose);
range=new Range(range,loose);

var gtfn,ltefn,ltfn,comp,ecomp;
switch(hilo){
case'>':
gtfn=gt;
ltefn=lte;
ltfn=lt;
comp='>';
ecomp='>=';
break;
case'<':
gtfn=lt;
ltefn=gte;
ltfn=gt;
comp='<';
ecomp='<=';
break;
default:
throw new TypeError('Must provide a hilo val of "<" or ">"');}



if(satisfies(version,range,loose)){
return false;
}




for(var i=0;i<range.set.length;++i){
var comparators=range.set[i];

var high=null;
var low=null;

comparators.forEach(function(comparator){
if(comparator.semver===ANY){
comparator=new Comparator('>=0.0.0');
}
high=high||comparator;
low=low||comparator;
if(gtfn(comparator.semver,high.semver,loose)){
high=comparator;
}else if(ltfn(comparator.semver,low.semver,loose)){
low=comparator;
}
});



if(high.operator===comp||high.operator===ecomp){
return false;
}



if((!low.operator||low.operator===comp)&&
ltefn(version,low.semver)){
return false;
}else if(low.operator===ecomp&&ltfn(version,low.semver)){
return false;
}
}
return true;
}

exports.prerelease=prerelease;
function prerelease(version,loose){
var parsed=parse(version,loose);
return parsed&&parsed.prerelease.length?parsed.prerelease:null;
}

}).call(this,require('_process'));
},{"_process":126}],185:[function(require,module,exports){
(function(Buffer){
'use strict';


const jpeg=require('jpeg-js');
















function getPixel(x,y,channel,width,buff){
return buff[(x+y*width)*4+channel];
}






function isWhitePixel(i,j,img){
return getPixel(i,j,0,img.width,img.data)>=249&&
getPixel(i,j,1,img.width,img.data)>=249&&
getPixel(i,j,2,img.width,img.data)>=249;
}


function convertPixelsToHistogram(img){
const createHistogramArray=function(){
const ret=[];
for(let i=0;i<256;i++){
ret[i]=0;
}
return ret;
};

const width=img.width;
const height=img.height;

const histograms=[
createHistogramArray(),
createHistogramArray(),
createHistogramArray()];


for(let j=0;j<height;j++){
for(let i=0;i<width;i++){

if(isWhitePixel(i,j,img)){
continue;
}

for(let channel=0;channel<histograms.length;channel++){
const pixelValue=getPixel(i,j,channel,width,img.data);
histograms[channel][pixelValue]++;
}
}
}

return histograms;
}


function synthesizeWhiteFrame(frames){
const firstImageData=jpeg.decode(frames[0].getImage());
const width=firstImageData.width;
const height=firstImageData.height;

const frameData=Buffer.alloc(width*height*4);
let i=0;
while(i<frameData.length){
frameData[i++]=0xFF;
frameData[i++]=0xFF;
frameData[i++]=0xFF;
frameData[i++]=0xFF;
}

var jpegImageData=jpeg.encode({
data:frameData,
width:width,
height:height});

return jpegImageData.data;
}

const screenshotTraceCategory='disabled-by-default-devtools.screenshot';





function extractFramesFromTimeline(timeline,opts){
opts=opts||{};

let trace;
timeline=typeof timeline==='string'?fs.readFileSync(timeline,'utf-8'):timeline;
try{
trace=typeof timeline==='string'?JSON.parse(timeline):timeline;
}catch(e){
throw new Error('Speedline: Invalid JSON'+e.message);
}

let events=trace.traceEvents||trace;

let startTs=Number.MAX_VALUE;
let endTs=-Number.MAX_VALUE;
events.forEach(e=>{
if(e.ts===0){
return;
}

startTs=Math.min(startTs,e.ts);
endTs=Math.max(endTs,e.ts);
});

startTs=(opts.timeOrigin||startTs)/1000;
endTs/=1000;


let lastFrame=null;
const rawScreenshots=events.filter(e=>e.cat.includes(screenshotTraceCategory)&&e.ts>=startTs*1000);
rawScreenshots.sort((a,b)=>a.ts-b.ts);


const uniqueFrames=rawScreenshots.map(function(evt){
const base64img=evt.args&&evt.args.snapshot;
const timestamp=evt.ts/1000;

if(base64img===lastFrame){
return null;
}

lastFrame=base64img;
const imgBuff=Buffer.from(base64img,'base64');
return frame(imgBuff,timestamp);
}).filter(Boolean);

if(uniqueFrames.length===0){
return Promise.reject(new Error('No screenshots found in trace'));
}

const fakeWhiteFrame=frame(synthesizeWhiteFrame(uniqueFrames),startTs);
uniqueFrames.unshift(fakeWhiteFrame);

const data={
startTs,
endTs,
frames:uniqueFrames};

return Promise.resolve(data);
}






function frame(imgBuff,ts){

let _histogram=null;

let _progress=null;

let _isProgressInterpolated=null;

let _perceptualProgress=null;

let _isPerceptualProgressInterpolated=null;

let _parsedImage=null;

return{
getHistogram:function(){
if(_histogram){
return _histogram;
}

const pixels=this.getParsedImage();
_histogram=convertPixelsToHistogram(pixels);
return _histogram;
},

getTimeStamp:function(){
return ts;
},

setProgress:function(progress,isInterpolated){
_progress=progress;
_isProgressInterpolated=Boolean(isInterpolated);
},

setPerceptualProgress:function(progress,isInterpolated){
_perceptualProgress=progress;
_isPerceptualProgressInterpolated=Boolean(isInterpolated);
},

getImage:function(){
return imgBuff;
},

getParsedImage:function(){
if(!_parsedImage){
_parsedImage=jpeg.decode(imgBuff);
}
return _parsedImage;
},

getProgress:function(){
return _progress;
},

isProgressInterpolated:function(){
return _isProgressInterpolated;
},

getPerceptualProgress:function(){
return _perceptualProgress;
},

isPerceptualProgressInterpolated:function(){
return _isPerceptualProgressInterpolated;
}};

}

module.exports={
extractFramesFromTimeline,
create:frame};


}).call(this,require("buffer").Buffer);
},{"buffer":109,"jpeg-js":175}],186:[function(require,module,exports){
'use strict';

const frame=require('./frame');
const speedIndex=require('./speed-index');











function calculateValues(frames,data){
const indexes=speedIndex.calculateSpeedIndexes(frames,data);
const duration=Math.floor(data.endTs-data.startTs);
const first=Math.floor(indexes.firstPaintTs-data.startTs);
const complete=Math.floor(indexes.visuallyCompleteTs-data.startTs);

return{
beginning:data.startTs,
end:data.endTs,
frames,
first,
complete,
duration,
speedIndex:indexes.speedIndex,
perceptualSpeedIndex:indexes.perceptualSpeedIndex};

}


const Include={
All:'all',
pSI:'perceptualSpeedIndex',
SI:'speedIndex'};









module.exports=function(timeline,opts){
const include=opts&&opts.include||Include.All;

if(!Object.keys(Include).some(key=>Include[key]===include)){
throw new Error(`Unrecognized include option: ${include}`);
}

return frame.extractFramesFromTimeline(timeline,opts).then(function(data){
const frames=data.frames;

if(include===Include.All||include===Include.SI){
speedIndex.calculateVisualProgress(frames,opts);
}

if(include===Include.All||include===Include.pSI){
speedIndex.calculatePerceptualProgress(frames,opts);
}

return calculateValues(frames,data);
});
};

},{"./frame":185,"./speed-index":187}],187:[function(require,module,exports){
'use strict';

const imageSSIM=require('image-ssim');


const fastModeAllowableChangeMax=5;
const fastModeAllowableChangeMedian=3;
const fastModeAllowableChangeMin=-1;

const fastModeConstant=fastModeAllowableChangeMin;
const fastModeMultiplier=fastModeAllowableChangeMax-fastModeConstant;
const fastModeExponentiationCoefficient=Math.log((fastModeAllowableChangeMedian-fastModeConstant)/fastModeMultiplier);














function calculateFastModeAllowableChange(elapsedTime){
const elapsedTimeInSeconds=elapsedTime/1000;
const allowableChange=fastModeMultiplier*Math.exp(fastModeExponentiationCoefficient*elapsedTimeInSeconds)+fastModeConstant;
return allowableChange;
}






function calculateFrameProgress(current,initial,target){
let total=0;
let match=0;

const currentHist=current.getHistogram();
const initialHist=initial.getHistogram();
const targetHist=target.getHistogram();

for(let channel=0;channel<3;channel++){
for(let pixelVal=0;pixelVal<256;pixelVal++){
const currentCount=currentHist[channel][pixelVal];
const initialCount=initialHist[channel][pixelVal];
const targetCount=targetHist[channel][pixelVal];

const currentDiff=Math.abs(currentCount-initialCount);
const targetDiff=Math.abs(targetCount-initialCount);

match+=Math.min(currentDiff,targetDiff);
total+=targetDiff;
}
}

let progress;
if(match===0&&total===0){
progress=100;
}else{
progress=Math.floor(match/total*100);
}
return progress;
}









function calculateProgressBetweenFrames(frames,lowerBound,upperBound,isFastMode,getProgress,setProgress){
if(!isFastMode){
frames.forEach(frame=>setProgress(frame,getProgress(frame),false));
return;
}

const lowerFrame=frames[lowerBound];
const upperFrame=frames[upperBound];
const elapsedTime=upperFrame.getTimeStamp()-lowerFrame.getTimeStamp();

const lowerProgress=getProgress(lowerFrame);
const upperProgress=getProgress(upperFrame);

setProgress(lowerFrame,lowerProgress,false);
setProgress(upperFrame,upperProgress,false);

if(Math.abs(lowerProgress-upperProgress)<calculateFastModeAllowableChange(elapsedTime)){
for(let i=lowerBound+1;i<upperBound;i++){
setProgress(frames[i],lowerProgress,true);
}
}else if(upperBound-lowerBound>1){
const midpoint=Math.floor((lowerBound+upperBound)/2);
calculateProgressBetweenFrames(frames,lowerBound,midpoint,isFastMode,getProgress,setProgress);
calculateProgressBetweenFrames(frames,midpoint,upperBound,isFastMode,getProgress,setProgress);
}
}





function calculateVisualProgress(frames,opts){
const initial=frames[0];
const target=frames[frames.length-1];


function getProgress(frame){
if(typeof frame.getProgress()==='number'){
return frame.getProgress();
}

return calculateFrameProgress(frame,initial,target);
}






function setProgress(frame,progress,isInterpolated){
return frame.setProgress(progress,isInterpolated);
}

calculateProgressBetweenFrames(
frames,
0,
frames.length-1,
opts&&opts.fastMode,
getProgress,
setProgress);


return frames;
}






function calculateFrameSimilarity(frame,target){
const defaultImageConfig={


channels:4};


const frameData=Object.assign(frame.getParsedImage(),defaultImageConfig);
const targetData=Object.assign(target.getParsedImage(),defaultImageConfig);

const diff=imageSSIM.compare(frameData,targetData);
return diff.ssim;
}





function calculatePerceptualProgress(frames,opts){
const initial=frames[0];
const target=frames[frames.length-1];
const initialSimilarity=calculateFrameSimilarity(initial,target);


function getProgress(frame){
if(typeof frame.getPerceptualProgress()==='number'){
return frame.getPerceptualProgress();
}

const ssim=calculateFrameSimilarity(frame,target);
return Math.max(100*(ssim-initialSimilarity)/(1-initialSimilarity),0);
}






function setProgress(frame,progress,isInterpolated){
return frame.setPerceptualProgress(progress,isInterpolated);
}

calculateProgressBetweenFrames(
frames,
0,
frames.length-1,
opts&&opts.fastMode,
getProgress,
setProgress);


return frames;
}






function calculateSpeedIndexes(frames,data){
const hasVisualProgress=typeof frames[0].getProgress()==='number';
const hasPerceptualProgress=typeof frames[0].getPerceptualProgress()==='number';
const progressToUse=hasVisualProgress?'getProgress':'getPerceptualProgress';
const startTs=data.startTs;
let visuallyCompleteTs;

let firstPaintTs;


for(let i=0;i<frames.length&&!firstPaintTs;i++){
if(frames[i][progressToUse]()>0){
firstPaintTs=frames[i].getTimeStamp();
}
}


for(let i=0;i<frames.length&&!visuallyCompleteTs;i++){
if(frames[i][progressToUse]()>=100){
visuallyCompleteTs=frames[i].getTimeStamp();
}
}

let prevFrameTs=frames[0].getTimeStamp();
let prevProgress=frames[0].getProgress();
let prevPerceptualProgress=frames[0].getPerceptualProgress();




let speedIndex=firstPaintTs-startTs;

let perceptualSpeedIndex=firstPaintTs-startTs;

frames.forEach(function(frame){

if(frame.getTimeStamp()>firstPaintTs){
const elapsed=frame.getTimeStamp()-prevFrameTs;
speedIndex+=elapsed*(1-prevProgress);
perceptualSpeedIndex+=elapsed*(1-prevPerceptualProgress);
}

prevFrameTs=frame.getTimeStamp();
prevProgress=frame.getProgress()/100;
prevPerceptualProgress=frame.getPerceptualProgress()/100;
});

speedIndex=hasVisualProgress?speedIndex:undefined;
perceptualSpeedIndex=hasPerceptualProgress?perceptualSpeedIndex:undefined;

return{
firstPaintTs,
visuallyCompleteTs,
speedIndex,
perceptualSpeedIndex};

}

module.exports={
calculateFastModeAllowableChange,
calculateFrameSimilarity,
calculateVisualProgress,
calculatePerceptualProgress,
calculateSpeedIndexes};


},{"image-ssim":165}],188:[function(require,module,exports){
module.exports={
"version":"3.2.0"};

},{}],189:[function(require,module,exports){
module.exports={
"npm":{
"angular":[
{"id":"npm:angular:20180202","severity":"medium","semver":{"vulnerable":["<1.6.9"]}},
{"id":"npm:angular:20171018","severity":"medium","semver":{"vulnerable":["<1.6.7"]}},
{"id":"npm:angular:20160527","severity":"medium","semver":{"vulnerable":["<1.2.30 >=1.0.0"]}},
{"id":"npm:angular:20160122","severity":"medium","semver":{"vulnerable":["<1.5.0-rc.2 >=1.3.0"]}},
{"id":"npm:angular:20140608","severity":"low","semver":{"vulnerable":["<1.3.0"]}},
{"id":"npm:angular:20131113","severity":"high","semver":{"vulnerable":["<1.2.2"]}},
{"id":"npm:angular:20140908","severity":"medium","semver":{"vulnerable":["<1.3.0-rc.4"]}},
{"id":"npm:angular:20161101","severity":"medium","semver":{"vulnerable":["<1.5.9 >=1.5.0"]}},
{"id":"npm:angular:20150909","severity":"high","semver":{"vulnerable":["<1.5.0-beta.2"]}},
{"id":"npm:angular:20151205","severity":"medium","semver":{"vulnerable":["<1.5.0-rc.0"]}},
{"id":"npm:angular:20151130","severity":"medium","semver":{"vulnerable":["<1.4.10"]}},
{"id":"npm:angular:20130622","severity":"medium","semver":{"vulnerable":["<1.2.0 >=1.0.0"]}},
{"id":"npm:angular:20150807-1","severity":"medium","semver":{"vulnerable":["<1.5.0-beta.0 >=1.3.1"]}},
{"id":"npm:angular:20150807","severity":"high","semver":{"vulnerable":["<1.5.0-beta.0 >=1.0.0"]}},
{"id":"npm:angular:20150315","severity":"medium","semver":{"vulnerable":["<1.6.1"]}},
{"id":"npm:angular:20150310","severity":"high","semver":{"vulnerable":["<1.5.0-beta.2"]}},
{"id":"npm:angular:20141104","severity":"medium","semver":{"vulnerable":["<1.3.2"]}},
{"id":"npm:angular:20130621","severity":"medium","semver":{"vulnerable":["<=1.1.5"]}},
{"id":"npm:angular:20140909","severity":"high","semver":{"vulnerable":["<1.2.24 >=1.2.19"]}},
{"id":"npm:angular:20130625","severity":"high","semver":{"vulnerable":["<1.1.5"]}}],

"backbone":[
{"id":"npm:backbone:20160523","severity":"medium","semver":{"vulnerable":["<= 0.3.3"]}},
{"id":"npm:backbone:20110701","severity":"medium","semver":{"vulnerable":["<0.5.0"]}}],

"bootstrap":[
{"id":"npm:bootstrap:20180529","severity":"medium","semver":{"vulnerable":[">=4.0.0 <4.1.2"]}},
{"id":"npm:bootstrap:20160627","severity":"medium","semver":{"vulnerable":["<3.4.0 || >=4.0.0-alpha <4.0.0-beta.2"]}},
{"id":"npm:bootstrap:20120510","severity":"medium","semver":{"vulnerable":["<2.1.0"]}}],

"dojo":[
{"id":"SNYK-JS-DOJO-72305","severity":"medium","semver":{"vulnerable":["<1.14"]}},
{"id":"npm:dojo:20180818","severity":"medium","semver":{"vulnerable":["<1.10.10 || >=1.11.0 <1.11.6 || >=1.12.0 <1.12.4 || >=1.13.0 <1.13.1"]}},
{"id":"npm:dojo:20160523","severity":"medium","semver":{"vulnerable":["<= 1.0.0"]}},
{"id":"npm:dojo:20100614-6","severity":"medium","semver":{"vulnerable":["<1.4.2"]}},
{"id":"npm:dojo:20100614-1","severity":"high","semver":{"vulnerable":[">=0.4 <0.4.4 || >=1.0 <1.0.3 || >=1.1 <1.1.2 || >=1.2 <1.2.4 || >=1.3 <1.3.3 || >=1.4 <1.4.2"]}},
{"id":"npm:dojo:20090409","severity":"medium","semver":{"vulnerable":["<1.1"]}}],

"foundation-sites":[
{"id":"npm:foundation-sites:20170802","severity":"medium","semver":{"vulnerable":["<6.0.0"]}},
{"id":"npm:foundation-sites:20150619","severity":"medium","semver":{"vulnerable":["<5.5.3"]}},
{"id":"npm:foundation-sites:20120717","severity":"medium","semver":{"vulnerable":["<3.0.6 >=3.0.0"]}}],

"handlebars":[
{"id":"npm:handlebars:20151207","severity":"medium","semver":{"vulnerable":["<4.0.0"]}},
{"id":"npm:handlebars:20110425","severity":"medium","semver":{"vulnerable":["<=1.0.0-beta.3"]}}],

"highcharts":[
{"id":"npm:highcharts:20180225","severity":"low","semver":{"vulnerable":["<6.1.0"]}}],

"jquery":[
{"id":"npm:jquery:20160529","severity":"low","semver":{"vulnerable":["=3.0.0-rc.1"]}},
{"id":"npm:jquery:20150627","severity":"medium","semver":{"vulnerable":["<3.0.0-beta1 >1.12.3 || <1.12.0 >=1.4.0"]}},
{"id":"npm:jquery:20140902","severity":"medium","semver":{"vulnerable":[">=1.4.2 <1.6.2"]}},
{"id":"npm:jquery:20120206","severity":"medium","semver":{"vulnerable":["<1.9.0 >=1.7.1"]}},
{"id":"npm:jquery:20110606","severity":"medium","semver":{"vulnerable":["<1.6.3"]}}],

"jquery-mobile":[
{"id":"npm:jquery-mobile:20120802","severity":"medium","semver":{"vulnerable":["<1.2.0"]}}],

"jquery-ui":[
{"id":"npm:jquery-ui:20121127","severity":"medium","semver":{"vulnerable":["<1.10.0"]}},
{"id":"npm:jquery-ui:20100903","severity":"medium","semver":{"vulnerable":["<1.10.0"]}},
{"id":"npm:jquery-ui:20160721","severity":"high","semver":{"vulnerable":["<=1.11.4"]}}],

"knockout":[
{"id":"npm:knockout:20180213","severity":"medium","semver":{"vulnerable":["<3.5.0-beta"]}},
{"id":"npm:knockout:20130701","severity":"medium","semver":{"vulnerable":["<3.0.0 >=2.1.0-pre"]}}],

"lodash":[
{"id":"npm:lodash:20180130","severity":"low","semver":{"vulnerable":["<4.17.5"]}}],

"moment":[
{"id":"npm:moment:20170905","severity":"low","semver":{"vulnerable":["<2.19.3"]}},
{"id":"npm:moment:20161019","severity":"medium","semver":{"vulnerable":["<2.15.2"]}},
{"id":"npm:moment:20160126","severity":"low","semver":{"vulnerable":["<=2.11.1"]}}],

"mustache":[
{"id":"npm:mustache:20151207","severity":"medium","semver":{"vulnerable":["<2.2.1"]}},
{"id":"npm:mustache:20110814","severity":"medium","semver":{"vulnerable":["< 0.3.1"]}}],

"preact-render-to-string":[
{"id":"npm:preact-render-to-string:20180802","severity":"medium","semver":{"vulnerable":["<3.7.2"]}}],

"react":[
{"id":"npm:react:20150318","severity":"high","semver":{"vulnerable":["<0.14.0"]}},
{"id":"npm:react:20131217","severity":"medium","semver":{"vulnerable":[">=0.5.0 <0.5.2 || >=0.4.0 <0.4.2"]}}],

"react-dom":[
{"id":"npm:react-dom:20180802","severity":"medium","semver":{"vulnerable":[">=16.0.0 <16.0.1",">=16.1.0 <16.1.2",">=16.2.0 <16.2.1",">=16.3.0 <16.3.3",">=16.4.0 <16.4.2"]}}],

"riot":[
{"id":"npm:riot:20131114","severity":"medium","semver":{"vulnerable":["<0.9.6"]}}],

"socket.io":[
{"id":"npm:socket.io:20120417","severity":"medium","semver":{"vulnerable":["<0.9.6"]}},
{"id":"npm:socket.io:20120323","severity":"medium","semver":{"vulnerable":["<0.9.7"]}}],

"vue":[
{"id":"npm:vue:20170829","severity":"medium","semver":{"vulnerable":["<2.4.3"]}},
{"id":"npm:vue:20170401","severity":"medium","semver":{"vulnerable":["<2.3.0-beta.1"]}},
{"id":"npm:vue:20180802","severity":"medium","semver":{"vulnerable":["<2.5.17"]}},
{"id":"npm:vue:20180222","severity":"low","semver":{"vulnerable":["<=2.5.14"]}}],

"yui":[
{"id":"npm:yui:20130604","severity":"medium","semver":{"vulnerable":[">=3.0.0 <3.10.1 || =3.10.2"]}},
{"id":"npm:yui:20130515","severity":"medium","semver":{"vulnerable":["<3.10.0 >=3.0.0"]}},
{"id":"npm:yui:20121030","severity":"medium","semver":{"vulnerable":["<3.0.0 >=2.4.0"]}},
{"id":"npm:yui:20120428","severity":"medium","semver":{"vulnerable":["<3.5.1 >=3.5.0-PR1"]}},
{"id":"npm:yui:20101025","severity":"medium","semver":{"vulnerable":["<2.8.2 >=2.4.0"]}}]}};



},{}],"url":[function(require,module,exports){





'use strict';







const Util=require('../report/html/renderer/util.js');


const URL=typeof self!=='undefined'&&self.URL||
require('url').URL;



const listOfTlds=[
'com','co','gov','edu','ac','org','go','gob','or','net','in','ne','nic','gouv',
'web','spb','blog','jus','kiev','mil','wi','qc','ca','bel','on'];


const allowedProtocols=[
'https:','http:','chrome:'];









function rewriteChromeInternalUrl(url){
if(!url||!url.startsWith('chrome://'))return url;


if(url.endsWith('/'))url=url.replace(/\/$/,'');
return url.replace(/^chrome:\/\/chrome\//,'chrome://');
}

class URLShim extends URL{




static isValid(url){
try{
new URL(url);
return true;
}catch(e){
return false;
}
}






static hostsMatch(urlA,urlB){
try{
return new URL(urlA).host===new URL(urlB).host;
}catch(e){
return false;
}
}






static originsMatch(urlA,urlB){
try{
return new URL(urlA).origin===new URL(urlB).origin;
}catch(e){
return false;
}
}





static getOrigin(url){
try{
const urlInfo=new URL(url);


return urlInfo.host&&urlInfo.origin||null;
}catch(e){
return null;
}
}







static getTld(hostname){
const tlds=hostname.split('.').slice(-2);

if(!listOfTlds.includes(tlds[0])){
return`.${tlds[tlds.length-1]}`;
}

return`.${tlds.join('.')}`;
}







static rootDomainsMatch(urlA,urlB){
let urlAInfo;
let urlBInfo;
try{
urlAInfo=new URL(urlA);
urlBInfo=new URL(urlB);
}catch(err){
return false;
}

if(!urlAInfo.hostname||!urlBInfo.hostname){
return false;
}

const tldA=URLShim.getTld(urlAInfo.hostname);
const tldB=URLShim.getTld(urlBInfo.hostname);


const urlARootDomain=urlAInfo.hostname.replace(new RegExp(`${tldA}$`),'').
split('.').splice(-1)[0];
const urlBRootDomain=urlBInfo.hostname.replace(new RegExp(`${tldB}$`),'').
split('.').splice(-1)[0];

return urlARootDomain===urlBRootDomain;
}






static getURLDisplayName(url,options){
return Util.getURLDisplayName(new URL(url),options);
}






static elideDataURI(url){
try{
const parsed=new URL(url);
return parsed.protocol==='data:'?url.slice(0,100):url;
}catch(e){
return url;
}
}







static equalWithExcludedFragments(url1,url2){
[url1,url2]=[url1,url2].map(rewriteChromeInternalUrl);
try{
const urla=new URL(url1);
urla.hash='';

const urlb=new URL(url2);
urlb.hash='';

return urla.href===urlb.href;
}catch(e){
return false;
}
}






static isProtocolAllowed(url){
try{
const parsed=new URL(url);
return allowedProtocols.includes(parsed.protocol);
}catch(e){
return false;
}
}}


URLShim.URL=URL;
URLShim.URLSearchParams=typeof self!=='undefined'&&self.URLSearchParams||
require('url').URLSearchParams;

URLShim.NON_NETWORK_PROTOCOLS=['blob','data'];

URLShim.INVALID_URL_DEBUG_STRING=
'Lighthouse was unable to determine the URL of some script executions. '+
'It\'s possible a Chrome extension or other eval\'d code is the source.';

module.exports=URLShim;

},{"../report/html/renderer/util.js":97,"url":"url"}]},{},[101]);