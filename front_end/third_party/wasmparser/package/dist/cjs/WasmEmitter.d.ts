import { BinaryReader, IBinaryReaderData, IDataSegment, IDataSegmentBody, IElementSegment, IElementSegmentBody, IExportEntry, IFunctionEntry, IFunctionInformation, IFunctionType, IGlobalVariable, IImportEntry, ILinkingEntry, IMemoryType, IModuleHeader, INameEntry, IOperatorInformation, IRelocEntry, IRelocHeader, ISectionInformation, ISourceMappingURL , ITableType} from "./WasmParser.js";

export declare class Emitter {
    private _buffer;
    private _state;
    private _sectionStart;
    private _sectionSizeBytes;
    private _sectionEntiesCount;
    private _sectionEntiesCountBytes;
    private _bodyStart;
    private _bodySizeBytes;
    private _data;
    private _endWritten;
    private _initExpressionAfterState;
    constructor();
    get data(): Uint8Array;
    write(reader: BinaryReader): void;
    writeData(data: IBinaryReaderData): void;
    private writeStateAndResult;
    private writeByte;
    private writeMutiple;
    private get _position();
    private patchByte;
    private writeVarUint;
    private writeVarInt;
    private writePatchableVarUint32;
    private writePatchableSectionEntriesCount;
    private writeBytes;
    private writeString;
    private patchVarUint32;
    private ensureState;
    private ensureEitherState;
    private ensureEndOperatorWritten;
    writeBeginWasm(header?: IModuleHeader): void;
    writeEndWasm(): void;
    writeBeginSection(section: ISectionInformation): void;
    writeBeginSectionRawData(section: ISectionInformation): void;
    private writeSectionRawData;
    private writeFuncType;
    writeTypeSectionEntry(type: IFunctionType): void;
    private writeResizableLimits;
    private writeTableType;
    private writeMemoryType;
    private writeGlobalType;
    writeImportSectionEntry(entry: IImportEntry): void;
    writeFunctionSectionEntry(entry: IFunctionEntry): void;
    writeExportSectionEntry(entry: IExportEntry): void;
    writeBeginFunctionBody(functionInfo: IFunctionInformation): void;
    writeEndFunctionBody(): void;
    writeBeginDataSectionEntry(entry: IDataSegment): void;
    writeDataSectionBody(body: IDataSegmentBody): void;
    writeEndDataSectionEntry(): void;
    writeTableSectionEntry(entry: ITableType): void;
    writeBeginElementSectionEntry(entry: IElementSegment): void;
    writeElementSectionBody(body: IElementSegmentBody): void;
    writeEndElementSectionEntry(): void;
    writeBeginGlobalSectionEntry(entry: IGlobalVariable): void;
    writeEndGlobalSectionEntry(): void;
    writeBeginInitExpression(): void;
    writeEndInitExpression(): void;
    private writeMemoryImmediate;
    private writeVarInt64;
    private writeFloat32;
    private writeFloat64;
    writeOperator(opInfo: IOperatorInformation): void;
    writeMemorySectionEntry(entry: IMemoryType): void;
    private writeNameMap;
    writeNameEntry(entry: INameEntry): void;
    writeRelocHeader(header: IRelocHeader): void;
    writeRelocEntry(entry: IRelocEntry): void;
    writeLinkingSection(entry: ILinkingEntry): void;
    writeSourceMappingURL(url: ISourceMappingURL): void;
    writeEndSection(): void;
}
