# Copyright 2020 The Chromium Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../../third_party/typescript/typescript.gni")
import("./rollup.gni")
import("./vars.gni")

# This defines an entrypoint for DevTools, which uses Rollup
# in release mode, but creates an unbundled JavaScript file
# in debug mode. This entrypoint should only be used if:
# 1. it defines a file that is statically imported. E.g. in
#    the form of "../entrypoint/entrypoint.js".
# 2. it defines a file that is dynamically imported by the
#    runtime. This uses the same notation, but uses a dynamic
#    import in `root/Runtime.js`.
template("devtools_entrypoint") {
  assert(defined(invoker.entrypoint),
         "You must define the 'entrypoint' for a rollup target")

  # Figure out what the relative path is to the front_end folder.
  # We have to get the full path to the target_gen_dir
  # and compare that to the full location of the front_end
  # folder in the gen_dir, to make sure nested packages
  # resolve to the correct location.
  _front_end_module_name =
      string_replace(get_path_info(target_gen_dir, "abspath"),
                     root_gen_dir + "/" + devtools_location + "front_end/",
                     "")

  _entrypoint_target_name = "devtools_entrypoint-" + target_name
  _entrypoint_output_file_name = get_path_info(invoker.entrypoint, "name")
  _entrypoint_gen_file_location =
      "$target_gen_dir/$_entrypoint_output_file_name.js"

  _is_typescript_file = get_path_info(invoker.entrypoint, "extension") == "ts"

  # In debug mode, the entrypoint is kept as-is. This means we only
  # need to compile with TypeScript, which means it will fetch all
  # of its files as separate network requests.
  if (is_debug) {
    if (_is_typescript_file) {
      _ts_library_target_name = _entrypoint_target_name + "-typescript"

      ts_library(_ts_library_target_name) {
        sources = [ invoker.entrypoint ]

        deps = invoker.deps
      }
    } else {
      copy(_entrypoint_target_name) {
        sources = [ invoker.entrypoint ]

        outputs = [ _entrypoint_gen_file_location ]

        deps = invoker.deps
      }
    }
  } else {
    # In release mode, we are running Rollup and thus bundle all
    # files in the (sub-)folder(s) into 1 file.
    #
    # To make sure that the build system can handle the Rollup
    # bundle, we have to use several tasks. That's because we
    # can't have 2 tasks generate a file to the same location.
    #
    # First, we need to compile the entrypoint with TypeScript
    # as usual. However, we can't put the output into the
    # location of the entrypoint, as that's where we are going
    # to put the Rollup bundle output. Therefore, we need to
    # create a separate file called the "entrypoint.prebundle.ts"
    # file.
    #
    # We compile the "prebundle.ts" with TypeScript, to create
    # the "prebundle.js" file. We pass in the "prebundle.js"
    # into Rollup, which then outputs into the normal
    # "entrypoint.js" location.
    #
    # Since TypeScript does not support renaming of files during
    # compilation, we first have a "copy" task that copies (and
    # essentially renames) the file to the output directory.
    #
    # Additionally, we need to fix the tsconfig renaming, to patch
    # up the generated tsconfig.json as part of the second ts_library
    # step.
    #
    # Since all of these tasks depend on each other, we have to
    # make sure that the GN dependency graph correctly corresponds
    # to that. Therefore, the graph looks like so:
    #
    #   copy -> ts_library -> fix-tsconfig -> rollup
    #
    _output_file_name =
        "$target_gen_dir/$_entrypoint_output_file_name.prebundle"
    _copy_target_name = _entrypoint_target_name + "-copy"
    _prebundle_output_file_name = "$_output_file_name.js"
    _rollup_target_name = _entrypoint_target_name + "-rollup"

    if (_is_typescript_file) {
      _copy_output_file_name = "$_output_file_name.ts"

      _prebundle_target_name = _entrypoint_target_name + "-tsconfig"

      copy(_copy_target_name) {
        sources = [ invoker.entrypoint ]

        outputs = [ _copy_output_file_name ]

        deps = invoker.deps
      }

      ts_library(_prebundle_target_name) {
        sources = [ _copy_output_file_name ]

        rootdir = target_gen_dir

        public_deps = [ ":$_copy_target_name" ]
      }
    } else {
      _prebundle_target_name = _copy_target_name
      _entrypoint_target_name = _rollup_target_name

      copy(_copy_target_name) {
        sources = [ invoker.entrypoint ]

        outputs = [ _prebundle_output_file_name ]

        deps = invoker.deps
      }
    }

    rollup(_rollup_target_name) {
      entrypoint = _prebundle_output_file_name

      output_file_location = _entrypoint_gen_file_location

      # Since rollup bundles both the entrypoint and the files it imports,
      # we have to make sure that, when you change a file it imports, we
      # retrigger Rollup. Since the `invoker.deps` is a reference to the
      # `ts_library` that compiles all of the files it imports, we have to
      # explicitly add it here. If you don't, then the file change will
      # retrigger the copy action above, but "the output of the copy action"
      # is the same. So Ninja will detect that no output has changed for
      # "_typescript_target_name" and bail out. This would then *also* skip
      # the Rollup action.
      deps = [ ":$_prebundle_target_name" ] + invoker.deps
    }

    if (_is_typescript_file) {
      # TypeScript requires a `module.d.ts` that describes
      # the public API of the `module.js` entrypoint. To do so, we copy
      # the generated `prebundle.d.ts` over, as the public API for a
      # rolled up bundle remains the same.
      _ts_library_target_name = _entrypoint_target_name + "-typescript"

      action(_ts_library_target_name) {
        script = "//third_party/node/node.py"

        inputs = [ devtools_location_prepend +
                   "scripts/build/ninja/generate-declaration.js" ]

        args = [
          rebase_path(devtools_location_prepend +
                          "scripts/build/ninja/generate-declaration.js",
                      root_build_dir),
          rebase_path(target_gen_dir, root_build_dir),
          invoker.entrypoint,
        ]

        public_deps = [ ":$_rollup_target_name" ]

        outputs = [ "$target_gen_dir/$_entrypoint_output_file_name.d.ts" ]
      }
    }
  }

  if (_is_typescript_file) {
    # Because we change the filename before rolling up the bundle,
    # tsc can get upset when it uses the original `target_name` to
    # reference a different `ts_library`. The `ts_library` action
    # above generates a `tsconfig.json` which does not include the
    # `target_name`, but instead uses `_ts_library_target_name`.
    #
    # For example, if the `target_name` is "module", the `ts_library`
    # action above generates a
    # `devtools_entrypoint-module-typescript-tsconfig.json`. However,
    # if a different `ts_library` depends on this `devtools_entrypoint`,
    # it depends on it as "../module:module". Therefore, the expected
    # location of the `tsconfig.json` is instead `module-tsconfig.json`.
    #
    # Therefore, we need to generate a separate tsconfig.json which
    # artificially mimics what `ts_library` would have generated.
    _generated_tsconfig_location =
        target_gen_dir + "/" + invoker.target_name + "-tsconfig.json"

    action(_entrypoint_target_name) {
      script = "//third_party/node/node.py"

      inputs = [ devtools_location_prepend +
                 "scripts/build/ninja/generate-tsconfig.js" ]

      args = [
               rebase_path(devtools_location_prepend +
                               "scripts/build/ninja/generate-tsconfig.js",
                           root_build_dir),
               rebase_path(_generated_tsconfig_location, root_build_dir),
               rebase_path(invoker.entrypoint, root_build_dir),
             ] + invoker.deps

      public_deps = [ ":$_ts_library_target_name" ]

      outputs = [ _generated_tsconfig_location ]
    }
  }

  copy(target_name) {
    sources = [ _entrypoint_gen_file_location ]

    outputs = [ "$resources_out_dir/$_front_end_module_name/$_entrypoint_output_file_name.js" ]

    deps = [ ":$_entrypoint_target_name" ]
  }
}
