/**
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CDPSession } from './Connection';
import { KeyInput } from './USKeyboardLayout';
export declare class Keyboard {
    _client: CDPSession;
    _modifiers: number;
    _pressedKeys: Set<string>;
    constructor(client: CDPSession);
    down(key: KeyInput, options?: {
        text?: string;
    }): Promise<void>;
    private _modifierBit;
    private _keyDescriptionForString;
    up(key: KeyInput): Promise<void>;
    sendCharacter(char: string): Promise<void>;
    private charIsKey;
    type(text: string, options: {
        delay?: number;
    }): Promise<void>;
    press(key: KeyInput, options?: {
        delay?: number;
        text?: string;
    }): Promise<void>;
}
declare type MouseButton = 'none' | 'left' | 'right' | 'middle';
export declare type MouseButtonInput = Exclude<MouseButton, 'none'>;
interface MouseOptions {
    button?: MouseButtonInput;
    clickCount?: number;
}
export declare class Mouse {
    _client: CDPSession;
    _keyboard: Keyboard;
    _x: number;
    _y: number;
    _button: MouseButton;
    /**
     * @param {CDPSession} client
     * @param {!Keyboard} keyboard
     */
    constructor(client: CDPSession, keyboard: Keyboard);
    move(x: number, y: number, options?: {
        steps?: number;
    }): Promise<void>;
    click(x: number, y: number, options?: MouseOptions & {
        delay?: number;
    }): Promise<void>;
    down(options?: MouseOptions): Promise<void>;
    /**
     * @param {!{button?: "left"|"right"|"middle", clickCount?: number}=} options
     */
    up(options?: MouseOptions): Promise<void>;
}
export declare class Touchscreen {
    _client: CDPSession;
    _keyboard: Keyboard;
    constructor(client: CDPSession, keyboard: Keyboard);
    /**
     * @param {number} x
     * @param {number} y
     */
    tap(x: number, y: number): Promise<void>;
}
export {};
//# sourceMappingURL=Input.d.ts.map