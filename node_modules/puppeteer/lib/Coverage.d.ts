/**
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PuppeteerEventListener } from './helper';
import Protocol from './protocol';
import { CDPSession } from './Connection';
interface CoverageEntry {
    url: string;
    text: string;
    ranges: Array<{
        start: number;
        end: number;
    }>;
}
export declare class Coverage {
    _jsCoverage: JSCoverage;
    _cssCoverage: CSSCoverage;
    constructor(client: CDPSession);
    startJSCoverage(options: {
        resetOnNavigation?: boolean;
        reportAnonymousScripts?: boolean;
    }): Promise<void>;
    stopJSCoverage(): Promise<CoverageEntry[]>;
    startCSSCoverage(options: {
        resetOnNavigation?: boolean;
    }): Promise<void>;
    stopCSSCoverage(): Promise<CoverageEntry[]>;
}
declare class JSCoverage {
    _client: CDPSession;
    _enabled: boolean;
    _scriptURLs: Map<string, string>;
    _scriptSources: Map<string, string>;
    _eventListeners: PuppeteerEventListener[];
    _resetOnNavigation: boolean;
    _reportAnonymousScripts: boolean;
    constructor(client: CDPSession);
    start(options?: {
        resetOnNavigation?: boolean;
        reportAnonymousScripts?: boolean;
    }): Promise<void>;
    _onExecutionContextsCleared(): void;
    _onScriptParsed(event: Protocol.Debugger.scriptParsedPayload): Promise<void>;
    stop(): Promise<CoverageEntry[]>;
}
declare class CSSCoverage {
    _client: CDPSession;
    _enabled: boolean;
    _stylesheetURLs: Map<string, string>;
    _stylesheetSources: Map<string, string>;
    _eventListeners: PuppeteerEventListener[];
    _resetOnNavigation: boolean;
    _reportAnonymousScripts: boolean;
    constructor(client: CDPSession);
    start(options?: {
        resetOnNavigation?: boolean;
    }): Promise<void>;
    _onExecutionContextsCleared(): void;
    _onStyleSheet(event: Protocol.CSS.styleSheetAddedPayload): Promise<void>;
    stop(): Promise<CoverageEntry[]>;
}
export {};
//# sourceMappingURL=Coverage.d.ts.map