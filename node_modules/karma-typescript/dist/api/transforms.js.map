{"version":3,"file":"transforms.js","sourceRoot":"","sources":["../../src/api/transforms.ts"],"names":[],"mappings":"","sourcesContent":["import * as log4js from \"log4js\";\nimport * as ts from \"typescript\";\n\nimport { Configuration } from \"../shared/configuration\";\n\nexport interface TransformResult {\n    dirty?: boolean;\n    transpile?: boolean;\n    transformedScript?: boolean;\n}\n\nexport interface TransformCallback {\n    (error: Error, dirty: boolean, transpile?: boolean): void;\n    (error: Error, result: TransformResult): void;\n}\n\nexport interface TransformContextJs {\n    ast: acorn.Node;\n}\n\nexport interface TransformContextTs {\n    version: string;\n    ast: ts.SourceFile;\n    transpiled: string;\n}\n\nexport interface TransformContext {\n    config: Configuration;\n    js?: TransformContextJs;\n    filename: string;\n    module: string;\n    source: string;\n    ts?: TransformContextTs;\n}\n\nexport interface TransformInitializeLogOptions {\n    appenders: { [name: string]: log4js.Appender };\n    level: string;\n}\n\nexport type TransformInitialize = (log: TransformInitializeLogOptions) => void;\n\nexport interface Transform {\n    (context: TransformContext, callback: TransformCallback): void;\n    initialize?: TransformInitialize;\n}\n"]}