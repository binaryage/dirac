/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/tsickle", ["require", "exports", "typescript", "tsickle/src/cli_support", "tsickle/src/decorator_downlevel_transformer", "tsickle/src/decorators", "tsickle/src/enum_transformer", "tsickle/src/externs", "tsickle/src/fileoverview_comment_transformer", "tsickle/src/googmodule", "tsickle/src/jsdoc_transformer", "tsickle/src/modules_manifest", "tsickle/src/transformer_util", "tsickle/src/cli_support", "tsickle/src/externs", "tsickle/src/modules_manifest"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const ts = require("typescript");
    const cli_support_1 = require("tsickle/src/cli_support");
    const decorator_downlevel_transformer_1 = require("tsickle/src/decorator_downlevel_transformer");
    const decorators_1 = require("tsickle/src/decorators");
    const enum_transformer_1 = require("tsickle/src/enum_transformer");
    const externs_1 = require("tsickle/src/externs");
    const fileoverview_comment_transformer_1 = require("tsickle/src/fileoverview_comment_transformer");
    const googmodule = require("tsickle/src/googmodule");
    const jsdoc_transformer_1 = require("tsickle/src/jsdoc_transformer");
    const modules_manifest_1 = require("tsickle/src/modules_manifest");
    const transformer_util_1 = require("tsickle/src/transformer_util");
    // Exported for users as a default impl of pathToModuleName.
    var cli_support_2 = require("tsickle/src/cli_support");
    exports.pathToModuleName = cli_support_2.pathToModuleName;
    // Retained here for API compatibility.
    var externs_2 = require("tsickle/src/externs");
    exports.getGeneratedExterns = externs_2.getGeneratedExterns;
    var modules_manifest_2 = require("tsickle/src/modules_manifest");
    exports.ModulesManifest = modules_manifest_2.ModulesManifest;
    function mergeEmitResults(emitResults) {
        const diagnostics = [];
        let emitSkipped = true;
        const emittedFiles = [];
        const externs = {};
        const modulesManifest = new modules_manifest_1.ModulesManifest();
        for (const er of emitResults) {
            diagnostics.push(...er.diagnostics);
            emitSkipped = emitSkipped || er.emitSkipped;
            if (er.emittedFiles) {
                emittedFiles.push(...er.emittedFiles);
            }
            Object.assign(externs, er.externs);
            modulesManifest.addManifest(er.modulesManifest);
        }
        return { diagnostics, emitSkipped, emittedFiles, externs, modulesManifest };
    }
    exports.mergeEmitResults = mergeEmitResults;
    /** @deprecated Exposed for backward compat with Angular.  Use emit() instead. */
    function emitWithTsickle(program, host, tsHost, tsOptions, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers = {}) {
        return emit(program, host, writeFile || tsHost.writeFile.bind(tsHost), targetSourceFile, cancellationToken, emitOnlyDtsFiles, customTransformers);
    }
    exports.emitWithTsickle = emitWithTsickle;
    function emit(program, host, writeFile, targetSourceFile, cancellationToken, emitOnlyDtsFiles, customTransformers = {}) {
        for (const sf of program.getSourceFiles()) {
            cli_support_1.assertAbsolute(sf.fileName);
        }
        let tsickleDiagnostics = [];
        const typeChecker = program.getTypeChecker();
        const tsOptions = program.getCompilerOptions();
        const tsickleSourceTransformers = [];
        if (host.transformTypesToClosure) {
            // Only add @suppress {checkTypes} comments when also adding type annotations.
            tsickleSourceTransformers.push(fileoverview_comment_transformer_1.transformFileoverviewCommentFactory(tsOptions, tsickleDiagnostics));
            tsickleSourceTransformers.push(jsdoc_transformer_1.jsdocTransformer(host, tsOptions, typeChecker, tsickleDiagnostics));
            tsickleSourceTransformers.push(enum_transformer_1.enumTransformer(typeChecker, tsickleDiagnostics));
        }
        if (host.transformDecorators) {
            tsickleSourceTransformers.push(decorator_downlevel_transformer_1.decoratorDownlevelTransformer(typeChecker, tsickleDiagnostics));
        }
        const modulesManifest = new modules_manifest_1.ModulesManifest();
        const tsTransformers = {
            before: [
                ...(customTransformers.beforeTsickle || []),
                ...(tsickleSourceTransformers || []).map(tf => skipTransformForSourceFileIfNeeded(host, tf)),
                ...(customTransformers.beforeTs || []),
            ],
            after: [
                ...(customTransformers.afterTs || []),
            ],
            afterDeclarations: customTransformers.afterDeclarations,
        };
        if (host.transformTypesToClosure) {
            // See comment on remoteTypeAssertions.
            tsTransformers.before.push(jsdoc_transformer_1.removeTypeAssertions());
        }
        if (host.googmodule) {
            tsTransformers.after.push(googmodule.commonJsToGoogmoduleTransformer(host, modulesManifest, typeChecker, tsickleDiagnostics));
            tsTransformers.after.push(decorators_1.transformDecoratorsOutputForClosurePropertyRenaming(tsickleDiagnostics));
        }
        // Wrap the writeFile callback to hook writing of the dts file.
        const writeFileImpl = (fileName, content, writeByteOrderMark, onError, sourceFiles) => {
            cli_support_1.assertAbsolute(fileName);
            if (host.addDtsClutzAliases && transformer_util_1.isDtsFileName(fileName) && sourceFiles) {
                // Only bundle emits pass more than one source file for .d.ts writes. Bundle emits however
                // are not supported by tsickle, as we cannot annotate them for Closure in any meaningful
                // way anyway.
                if (!sourceFiles || sourceFiles.length > 1) {
                    throw new Error(`expected exactly one source file for .d.ts emit, got ${sourceFiles.map(sf => sf.fileName)}`);
                }
                const originalSource = sourceFiles[0];
                content = addClutzAliases(content, originalSource, typeChecker, host, tsOptions);
            }
            writeFile(fileName, content, writeByteOrderMark, onError, sourceFiles);
        };
        const { diagnostics: tsDiagnostics, emitSkipped, emittedFiles } = program.emit(targetSourceFile, writeFileImpl, cancellationToken, emitOnlyDtsFiles, tsTransformers);
        const externs = {};
        if (host.transformTypesToClosure) {
            const sourceFiles = targetSourceFile ? [targetSourceFile] : program.getSourceFiles();
            for (const sourceFile of sourceFiles) {
                const isDts = transformer_util_1.isDtsFileName(sourceFile.fileName);
                if (isDts && host.shouldSkipTsickleProcessing(sourceFile.fileName)) {
                    continue;
                }
                const { output, diagnostics } = externs_1.generateExterns(typeChecker, sourceFile, host, host.moduleResolutionHost, program.getCompilerOptions());
                if (output) {
                    externs[sourceFile.fileName] = output;
                }
                if (diagnostics) {
                    tsickleDiagnostics.push(...diagnostics);
                }
            }
        }
        // All diagnostics (including warnings) are treated as errors.
        // If the host decides to ignore warnings, just discard them.
        // Warnings include stuff like "don't use @type in your jsdoc"; tsickle
        // warns and then fixes up the code to be Closure-compatible anyway.
        tsickleDiagnostics = tsickleDiagnostics.filter(d => d.category === ts.DiagnosticCategory.Error ||
            !host.shouldIgnoreWarningsForPath(d.file.fileName));
        return {
            modulesManifest,
            emitSkipped,
            emittedFiles: emittedFiles || [],
            diagnostics: [...tsDiagnostics, ...tsickleDiagnostics],
            externs
        };
    }
    exports.emit = emit;
    /** Compares two strings and returns a number suitable for use in sort(). */
    function stringCompare(a, b) {
        if (a < b)
            return -1;
        if (a > b)
            return 1;
        return 0;
    }
    /**
     * A tsickle produced declaration file might be consumed be referenced by Clutz
     * produced .d.ts files, which use symbol names based on Closure's internal
     * naming conventions, so we need to provide aliases for all the exported symbols
     * in the Clutz naming convention.
     */
    function addClutzAliases(dtsFileContent, sourceFile, typeChecker, host, options) {
        const moduleSymbol = typeChecker.getSymbolAtLocation(sourceFile);
        const moduleExports = moduleSymbol && typeChecker.getExportsOfModule(moduleSymbol);
        if (!moduleExports)
            return dtsFileContent;
        // .d.ts files can be transformed, too, so we need to compare the original node below.
        const origSourceFile = ts.getOriginalNode(sourceFile);
        // In order to write aliases, the exported symbols need to be available in the
        // the module scope. That is not always the case:
        //
        // export
        // 1) export const X;           // works
        //
        // reexport
        // 2) export {X} from './foo';  // doesn't
        //
        // imported reexport
        // 3) import {X} from './foo';  // works
        //    export {X} from './foo';
        //
        // getExportsOfModule returns all three types, but we need to separate 2).
        // For now we 'fix' 2) by simply not emitting a clutz alias, since clutz
        // interop is used in minority of scenarios.
        //
        // TODO(radokirov): attempt to add appropriate imports for 2) so that
        // currently finding out local appears even harder than fixing exports.
        const localExports = moduleExports.filter(e => {
            // If there are no declarations, be conservative and don't emit the aliases.
            // I don't know how can this happen, we have no tests that excercise it.
            if (!e.declarations)
                return false;
            // Skip default exports, they are not currently supported.
            // default is a keyword in typescript, so the name of the export being
            // default means that it's a default export.
            if (e.name === 'default')
                return false;
            // Use the declaration location to determine separate cases above.
            for (const d of e.declarations) {
                // This is a special case for export *. Technically, it is outside the
                // three cases outlined, but at this point we have rewritten it to a
                // reexport or an imported reexport. However, it appears that the
                // rewriting also has made it behave different from explicit named export
                // in the sense that the declaration appears to point at the original
                // location not the reexport location.  Since we can't figure out whether
                // there is a local import here, we err on the side of less emit.
                if (d.getSourceFile() !== origSourceFile) {
                    return false;
                }
                // @internal marked APIs are not exported, so must not get aliases.
                // This uses an internal TS API, assuming that accessing this will be more stable compared to
                // implementing our own version.
                // tslint:disable-next-line: no-any
                if (options.stripInternal && ts['isInternalDeclaration'](d, origSourceFile)) {
                    return false;
                }
                if (!ts.isExportSpecifier(d)) {
                    // we have a pure export (case 1) thus safe to emit clutz alias.
                    return true;
                }
                // The declaration d is useless to separate reexport and import-reexport
                // because they both point to the reexporting file and not to the original
                // one.  However, there is another ts API that can do a deeper resolution.
                const localSymbol = typeChecker.getExportSpecifierLocalTargetSymbol(d);
                // I don't know how can this happen, but err on the side of less emit.
                if (!localSymbol)
                    return false;
                // `declarations` is undefined for builtin symbols, such as `unknown`.
                if (!localSymbol.declarations)
                    return false;
                // In case of no import we ended up in a declaration in foo.ts, while in
                // case of having an import localD is still in the reexporing file.
                for (const localD of localSymbol.declarations) {
                    if (localD.getSourceFile() !== origSourceFile) {
                        return false;
                    }
                }
            }
            return true;
        });
        if (!localExports.length)
            return dtsFileContent;
        // TypeScript 2.8 and TypeScript 2.9 differ on the order in which the
        // module symbols come out, so sort here to make the tests stable.
        localExports.sort((a, b) => stringCompare(a.name, b.name));
        const moduleName = host.pathToModuleName('', sourceFile.fileName);
        const clutzModuleName = moduleName.replace(/\./g, '$');
        // Clutz might refer to the name in two different forms (stemming from goog.provide and
        // goog.module respectively).
        // 1) global in clutz:   ಠ_ಠ.clutz.module$contents$path$to$module_Symbol...
        // 2) local in a module: ಠ_ಠ.clutz.module$exports$path$to$module.Symbol ..
        // See examples at:
        // https://github.com/angular/clutz/tree/master/src/test/java/com/google/javascript/clutz
        // Case (1) from above.
        let globalSymbols = '';
        // Case (2) from above.
        let nestedSymbols = '';
        for (const symbol of localExports) {
            let localName = symbol.name;
            const declaration = symbol.declarations.find(d => d.getSourceFile() === origSourceFile);
            if (declaration && ts.isExportSpecifier(declaration) && declaration.propertyName) {
                // If declared in an "export {X as Y};" export specifier, then X (stored in propertyName) is
                // the local name that resolves within the module, whereas Y is only available on the exports,
                // i.e. the name used to address the symbol from outside the module.
                // Use the localName for the export then, but publish under the external name.
                localName = declaration.propertyName.text;
            }
            const mangledName = `module$contents$${clutzModuleName}_${symbol.name}`;
            globalSymbols += `\t\texport {${localName} as ${mangledName}}\n`;
            // TODO(mprobst): Once tsickle is on TS3.7, the two lines below can be replaced with
            // "export {localName};". However in TS3.5, localName resolves within the module, so
            // exporting {localName} causes a circular definition error. The workaround is to import the
            // mangled name.
            nestedSymbols += `\t\timport ${localName}$clutz = ಠ_ಠ.clutz.${mangledName};\n`;
            nestedSymbols += `\t\texport {${localName}$clutz as ${symbol.name}};\n`;
        }
        dtsFileContent += 'declare global {\n';
        dtsFileContent += `\tnamespace ಠ_ಠ.clutz {\n`;
        dtsFileContent += globalSymbols;
        dtsFileContent += `\t}\n`;
        dtsFileContent += `\tnamespace ಠ_ಠ.clutz.module$exports$${clutzModuleName} {\n`;
        // TODO(martinprobst): See https://github.com/Microsoft/TypeScript/issues/35385, remove once fixed
        dtsFileContent += `\t\tconst clutz$workaround$tissue$35385: number;\n`;
        dtsFileContent += nestedSymbols;
        dtsFileContent += `\t}\n`;
        dtsFileContent += '}\n';
        return dtsFileContent;
    }
    function skipTransformForSourceFileIfNeeded(host, delegateFactory) {
        return (context) => {
            const delegate = delegateFactory(context);
            return (sourceFile) => {
                if (host.shouldSkipTsickleProcessing(sourceFile.fileName)) {
                    return sourceFile;
                }
                return delegate(sourceFile);
            };
        };
    }
});
//# sourceMappingURL=data:application/json;base64,