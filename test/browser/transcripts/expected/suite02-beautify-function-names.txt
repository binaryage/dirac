ns               Testing dirac.tests.tasks.suite02.beautify-function-names
extension        reset extension state
extension        set extension options:{:target-url "http://localhost:<port>"}
extension        set extension options:{:open-as "window"}
automate         open-scenario! ["breakpoint"]
testing          enabled :beautify-function-names feature
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      setCurrentPanel: elements
devtools #1      devtools ready
devtools #1      namespacesCache is cool now
automate         trigger! [:pause-on-breakpoint]
devtools #1      setCurrentPanel: sources
automate #1      scrape! [:callstack-pane-functions]
stdout           displayed 42 items:
                  * breakpoint-demo / dirac.tests.scenarios.breakpoint.core/breakpoint-demo
                  * breakpoint-demo-handler / dirac.tests.scenarios.breakpoint.core/breakpoint-demo-handler
                  * λ
                  * IFn:-invoke² (apply-to-simple) / cljs.core.IFn:-invoke² (cljs.core/apply-to-simple)
                  * IFn:-invoke² (apply) / cljs.core.IFn:-invoke² (cljs.core/apply)
                  * apply / cljs.core/apply
                  * call-trigger! / dirac.automation.scenario/call-trigger!
                  * handle-notification! / dirac.automation.scenario/handle-notification!
                  * process-notification! / dirac.automation.notifications/process-notification!
                  * process-event! / dirac.automation.notifications/process-event!
                  * postMessage (async)
                  * marion$content-script$page$send-message! / marion$content-script$page$send-message!
                  * marion$content-script$background$relay-message-to-page! / marion$content-script$background$relay-message-to-page!
                  * marion$content-script$background$process-message! / marion$content-script$background$process-message!
                  * λ
                  * λ
                  * marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto----*gen-num* / marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto----*gen-num*
                  * marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto-- / marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto--
                  * run-state-machine / cljs.core.async.impl.ioc-helpers/run-state-machine
                  * run-state-machine-wrapped / cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped
                  * λ
                  * λ
                  * process-messages / cljs.core.async.impl.dispatch/process-messages
                  * channel.port1.onmessage / channel.port1.onmessage
                  * postMessage (async)
                  * λ
                  * goog.async.nextTick / goog.async.nextTick
                  * queue-dispatcher / cljs.core.async.impl.dispatch/queue-dispatcher
                  * run / cljs.core.async.impl.dispatch/run
                  * WritePort:put!³ (ManyToManyChannel) / cljs.core.async.impl.protocols.WritePort:put!³ (cljs.core.async.impl.channels/ManyToManyChannel)
                  * put! / cljs.core.async.impl.protocols/put!
                  * IFn:-invoke² (put!) / cljs.core.IFn:-invoke² (cljs.core.async/put!)
                  * put! / cljs.core.async/put!
                  * chromex$chrome-port$ChromePort$chromex$protocols$IChromePortState$put-message!² / chromex$chrome-port$ChromePort$chromex$protocols$IChromePortState$put-message!²
                  * chromex$protocols$put-message! / chromex$protocols$put-message!
                  * λ
                  * EventImpl.dispatchToListener / EventImpl.dispatchToListener
                  * publicClassPrototype.(anonymous function) / publicClassPrototype.(anonymous function)
                  * EventImpl.dispatch_ / EventImpl.dispatch_
                  * EventImpl.dispatch / EventImpl.dispatch
                  * publicClassPrototype.(anonymous function) / publicClassPrototype.(anonymous function)
                  * dispatchOnMessage / dispatchOnMessage
automate #1      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #1
∎
automate         close-scenario! ["scenario-tab#1"]
automate         open-scenario! ["breakpoint"]
testing          disabled :beautify-function-names feature
automate         store-options!
automate         set-options! [{:beautify-function-names false}]
extension        set extension options:{:beautify-function-names false}
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #2
devtools #2      implant initialized
devtools #2      setCurrentPanel: elements
devtools #2      devtools ready
devtools #2      namespacesCache is cool now
automate         trigger! [:pause-on-breakpoint]
devtools #2      setCurrentPanel: sources
automate #2      scrape! [:callstack-pane-functions]
stdout           displayed 42 items:
                  * dirac$tests$scenarios$breakpoint$core$breakpoint_demo
                  * dirac$tests$scenarios$breakpoint$core$breakpoint_demo_handler
                  * (anonymous)
                  * cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2
                  * cljs.core.apply.cljs$core$IFn$_invoke$arity$2
                  * cljs$core$apply
                  * dirac$automation$scenario$call_trigger_BANG_
                  * dirac$automation$scenario$handle_notification_BANG_
                  * dirac$automation$notifications$process_notification_BANG_
                  * dirac$automation$notifications$process_event_BANG_
                  * postMessage (async)
                  * marion$content_script$page$send_message_BANG_
                  * marion$content_script$background$relay_message_to_page_BANG_
                  * marion$content_script$background$process_message_BANG_
                  * (anonymous)
                  * (anonymous)
                  * marion$content_script$background$go_run_marion_content_script_message_loop_BANG__$_state_machine__*gen-num*__auto____*gen-num*
                  * marion$content_script$background$go_run_marion_content_script_message_loop_BANG__$_state_machine__*gen-num*__auto__
                  * cljs$core$async$impl$ioc_helpers$run_state_machine
                  * cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped
                  * (anonymous)
                  * (anonymous)
                  * cljs$core$async$impl$dispatch$process_messages
                  * channel.port1.onmessage
                  * postMessage (async)
                  * (anonymous)
                  * goog.async.nextTick
                  * cljs$core$async$impl$dispatch$queue_dispatcher
                  * cljs$core$async$impl$dispatch$run
                  * cljs.core.async.impl.channels.ManyToManyChannel.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3
                  * cljs$core$async$impl$protocols$put_BANG_
                  * cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2
                  * cljs$core$async$put_BANG_
                  * chromex.chrome_port.ChromePort.chromex$protocols$IChromePortState$put_message_BANG_$arity$2
                  * chromex$protocols$put_message_BANG_
                  * (anonymous)
                  * EventImpl.dispatchToListener
                  * publicClassPrototype.(anonymous function)
                  * EventImpl.dispatch_
                  * EventImpl.dispatch
                  * publicClassPrototype.(anonymous function)
                  * dispatchOnMessage
automate #2      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #2
automate         restore-options!
extension        reset extension options:{:enable-clustered-locals true, :inline-custom-formatters true, :use-backend-supported-api true, :enable-parinfer true, :use-backend-supported-css true, :beautify-function-names true, :enable-friendly-locals true, :user-frontend-url-params nil, :clean-urls true, :enable-repl true, :welcome-message true, :open-as "window", :target-url "http://localhost:<port>", :link-actions true}
∎
automate         close-scenario! ["scenario-tab#2"]
automate         open-scenario! ["exception"]
testing          trigger exception with non-trivial callstack
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #3
devtools #3      implant initialized
devtools #3      setCurrentPanel: elements
devtools #3      devtools ready
devtools #3      namespacesCache is cool now
automate #3      switch-to-console-panel!
devtools #3      setCurrentPanel: console
devtools #3      console initialized
devtools #3      adopt-prompt-element use-parinfer? true
devtools #3      setDiracPromptMode('status')
devtools #3      ConsoleView constructed
devtools #3      displayWelcomeMessage
automate         trigger! [:cause-exception]
scenario         uncaught exception: Error: :invalid is not ISeqable
automate #3      scrape! [:function-names-in-last-console-exception]
stdout           displayed 44 items:
                  * seq
                  * IFn:-invoke³ (seq-reduce)
                  * IFn:-invoke³ (reduce)
                  * IFn:-invoke² (into)
                  * into
                  * crash!
                  * crash-or-break!
                  * ITestProtocol:-pmethod⁴ (TestType)
                  * IFn:-invoke⁴ (-pmethod)
                  * -pmethod
                  * ITestProtocol:-pmethod³ (TestType)
                  * IFn:-invoke³ (-pmethod)
                  * -pmethod
                  * excercise-protocol!
                  * IFn:-invokeⁿ (multi-arity-fn)
                  * multi-arity-fn
                  * IFn:-invoke² (multi-arity-fn)
                  * multi-arity-fn
                  * IFn:-invoke⁰ (multi-arity-fn)
                  * multi-arity-fn
                  * fancy-$%$#%$#-function???-name
                  * exception-demo!
                  * exception-demo-handler
                  * λ
                  * IFn:-invoke² (apply-to-simple)
                  * IFn:-invoke² (apply)
                  * apply
                  * call-trigger!
                  * handle-notification!
                  * process-notification!
                  * process-event!
                  * marion$content-script$page$send-message!
                  * marion$content-script$background$relay-message-to-page!
                  * marion$content-script$background$process-message!
                  * λ
                  * λ
                  * marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto----*gen-num*
                  * marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto--
                  * run-state-machine
                  * run-state-machine-wrapped
                  * λ
                  * λ
                  * process-messages
                  * channel.port1.onmessage
automate #3      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #3
∎
automate         close-scenario! ["scenario-tab#3"]
automate         open-scenario! ["core-async"]
testing          core async stack traces
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #4
devtools #4      implant initialized
devtools #4      setCurrentPanel: elements
devtools #4      devtools ready
devtools #4      namespacesCache is cool now
automate         trigger! [:async]
devtools #4      setCurrentPanel: sources
automate #4      scrape! [:callstack-pane-functions]
stdout           displayed 77 items:
                  * break-here! / dirac.tests.scenarios.core-async/break-here!
                  * λ
                  * λ
                  * break-async-$-state-machine--*gen-num*--auto----*gen-num* / dirac.tests.scenarios.core-async/break-async-$-state-machine--*gen-num*--auto----*gen-num*
                  * break-async-$-state-machine--*gen-num*--auto-- / dirac.tests.scenarios.core-async/break-async-$-state-machine--*gen-num*--auto--
                  * run-state-machine / cljs.core.async.impl.ioc-helpers/run-state-machine
                  * run-state-machine-wrapped / cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped
                  * λ
                  * λ
                  * process-messages / cljs.core.async.impl.dispatch/process-messages
                  * Promise.then (async)
                  * promise-based-set-immediate / dirac.automation.runtime/promise-based-set-immediate
                  * goog.async.nextTick / goog.async.nextTick
                  * queue-dispatcher / cljs.core.async.impl.dispatch/queue-dispatcher
                  * run / cljs.core.async.impl.dispatch/run
                  * Channel:close!¹ (ManyToManyChannel) / cljs.core.async.impl.protocols.Channel:close!¹ (cljs.core.async.impl.channels/ManyToManyChannel)
                  * close! / cljs.core.async.impl.protocols/close!
                  * λ
                  * setTimeout (async)
                  * queue-delay / cljs.core.async.impl.dispatch/queue-delay
                  * timeout / cljs.core.async.impl.timers/timeout
                  * timeout / cljs.core.async/timeout
                  * λ
                  * λ
                  * break-async-$-state-machine--*gen-num*--auto----*gen-num* / dirac.tests.scenarios.core-async/break-async-$-state-machine--*gen-num*--auto----*gen-num*
                  * break-async-$-state-machine--*gen-num*--auto-- / dirac.tests.scenarios.core-async/break-async-$-state-machine--*gen-num*--auto--
                  * run-state-machine / cljs.core.async.impl.ioc-helpers/run-state-machine
                  * run-state-machine-wrapped / cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped
                  * λ
                  * process-messages / cljs.core.async.impl.dispatch/process-messages
                  * Promise.then (async)
                  * promise-based-set-immediate / dirac.automation.runtime/promise-based-set-immediate
                  * goog.async.nextTick / goog.async.nextTick
                  * queue-dispatcher / cljs.core.async.impl.dispatch/queue-dispatcher
                  * run / cljs.core.async.impl.dispatch/run
                  * break-async / dirac.tests.scenarios.core-async/break-async
                  * break-async-handler / dirac.tests.scenarios.core-async/break-async-handler
                  * λ
                  * IFn:-invoke² (apply-to-simple) / cljs.core.IFn:-invoke² (cljs.core/apply-to-simple)
                  * IFn:-invoke² (apply) / cljs.core.IFn:-invoke² (cljs.core/apply)
                  * apply / cljs.core/apply
                  * call-trigger! / dirac.automation.scenario/call-trigger!
                  * handle-notification! / dirac.automation.scenario/handle-notification!
                  * process-notification! / dirac.automation.notifications/process-notification!
                  * process-event! / dirac.automation.notifications/process-event!
                  * postMessage (async)
                  * marion$content-script$page$send-message! / marion$content-script$page$send-message!
                  * marion$content-script$background$relay-message-to-page! / marion$content-script$background$relay-message-to-page!
                  * marion$content-script$background$process-message! / marion$content-script$background$process-message!
                  * λ
                  * λ
                  * marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto----*gen-num* / marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto----*gen-num*
                  * marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto-- / marion$content-script$background$go-run-marion-content-script-message-loop!-$-state-machine--*gen-num*--auto--
                  * run-state-machine / cljs.core.async.impl.ioc-helpers/run-state-machine
                  * run-state-machine-wrapped / cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped
                  * λ
                  * λ
                  * process-messages / cljs.core.async.impl.dispatch/process-messages
                  * channel.port1.onmessage / channel.port1.onmessage
                  * postMessage (async)
                  * λ
                  * goog.async.nextTick / goog.async.nextTick
                  * queue-dispatcher / cljs.core.async.impl.dispatch/queue-dispatcher
                  * run / cljs.core.async.impl.dispatch/run
                  * WritePort:put!³ (ManyToManyChannel) / cljs.core.async.impl.protocols.WritePort:put!³ (cljs.core.async.impl.channels/ManyToManyChannel)
                  * put! / cljs.core.async.impl.protocols/put!
                  * IFn:-invoke² (put!) / cljs.core.IFn:-invoke² (cljs.core.async/put!)
                  * put! / cljs.core.async/put!
                  * chromex$chrome-port$ChromePort$chromex$protocols$IChromePortState$put-message!² / chromex$chrome-port$ChromePort$chromex$protocols$IChromePortState$put-message!²
                  * chromex$protocols$put-message! / chromex$protocols$put-message!
                  * λ
                  * EventImpl.dispatchToListener / EventImpl.dispatchToListener
                  * publicClassPrototype.(anonymous function) / publicClassPrototype.(anonymous function)
                  * EventImpl.dispatch_ / EventImpl.dispatch_
                  * EventImpl.dispatch / EventImpl.dispatch
                  * publicClassPrototype.(anonymous function) / publicClassPrototype.(anonymous function)
                  * dispatchOnMessage / dispatchOnMessage
automate #4      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #4
∎
automate         close-scenario! ["scenario-tab#4"]
summary          Automated 28 actions with 13 check-points containing 0 assertions.
                 0 failures, 0 errors.
