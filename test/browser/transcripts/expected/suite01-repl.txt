ns               Testing dirac.tests.tasks.suite01.repl
extension        reset extension state
extension        set extension options:{:target-url "http://localhost:<port>"}
extension        set extension options:{:open-as "window"}
automate         open-scenario! ["repl"]
testing          simple REPL eval interactions
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      setCurrentPanel: elements
devtools #1      devtools ready
devtools #1      namespacesCache is cool now
automate #1      switch-to-console-panel!
devtools #1      setCurrentPanel: console
devtools #1      console initialized
devtools #1      adopt-prompt-element use-parinfer? true
devtools #1      setDiracPromptMode('status')
devtools #1      ConsoleView constructed
devtools #1      displayWelcomeMessage
automate #1      switch-prompt-to-dirac!
devtools #1      switched console prompt to 'dirac'
devtools #1      init-repl!
devtools #1      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #1      setDiracPromptStatusStyle('info')
devtools #1      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #1      setDiracPromptNS('cljs.user')
devtools #1      setDiracPromptMode('edit')
automate #1      enable-console-feedback!
automate #1      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #1      DC.info> (+ 1 2)
devtools #1      send-eval-request: (+ 1 2)
devtools #1      repl eval job started
devtools #1      DF.info> 3
devtools #1      repl eval job ended
automate #1      exec-and-match-in-console! ["4 5 6" ["info> 4" "info> 5" "info> 6"]]
devtools #1      DC.info> 4 5 6
devtools #1      send-eval-request: 4 5 6
devtools #1      repl eval job started
devtools #1      DF.info> 4
devtools #1      DF.info> 5
devtools #1      DF.info> 6
devtools #1      repl eval job ended
automate #1      focus-console-prompt!
automate #1      simulate-console-action! ["SHIFT+ENTER"]
automate #1      simulate-console-input! ["7"]
automate #1      simulate-console-action! ["ENTER"]
devtools #1      DC.info>
                 7
devtools #1      send-eval-request:
                 7
devtools #1      repl eval job started
devtools #1      DF.info> 7
devtools #1      repl eval job ended
automate #1      focus-console-prompt!
automate #1      simulate-console-input! ["(let [x 1"]
automate #1      simulate-console-action! ["SHIFT+ENTER"]
automate #1      simulate-console-input! ["y 2"]
automate #1      get-prompt-representation
automate #1      exec-and-match-in-console! ["(range 200)" "info> (0 1 2 3 4 …)"]
devtools #1      DC.info> (range 200)
devtools #1      send-eval-request: (range 200)
devtools #1      repl eval job started
devtools #1      DF.info> (0 1 2 3 4 …)
devtools #1      repl eval job ended
automate #1      exec-and-match-in-console! ["(doc filter)" "info> null"]
devtools #1      DC.info> (doc filter)
devtools #1      send-eval-request: (doc filter)
devtools #1      repl eval job started
devtools #1      DF.info>
                 -------------------------
                 cljs.core/filter
                 ([pred] [pred coll])
                   Returns a lazy sequence of the items in coll for which
                   (pred item) returns true. pred must be free of side-effects.
                   Returns a transducer when no collection is provided.
devtools #1      DF.info> null
devtools #1      repl eval job ended
automate #1      exec-and-match-in-console! ["js/window.NaN" "info> NaN"]
devtools #1      DC.info> js/window.NaN
devtools #1      send-eval-request: js/window.NaN
devtools #1      repl eval job started
devtools #1      DF.info> NaN
devtools #1      repl eval job ended
automate #1      exec-and-match-in-console! ["(in-ns)" "java-trace/plain-text > java.lang.IllegalArgumentException: Argument to in-ns must be a symbol."]
devtools #1      DC.info> (in-ns)
devtools #1      send-eval-request: (in-ns)
devtools #1      repl eval job started
devtools #1      present-server-side-output! java-trace/plain-text > java.lang.IllegalArgumentException: Argument to in-ns must be a symbol.
                 <elided stack trace>
devtools #1      repl eval job ended
devtools #1      DF.info> java.lang.IllegalArgumentException: Argument to in-ns must be a symbol.
devtools #1      <elided stack trace>
devtools #1      JS.info> console.groupEnd
automate #1      exec-and-match-in-console! ["(in-ns 'my.ns)" "setDiracPromptNS('my.ns')"]
devtools #1      DC.info> (in-ns 'my.ns)
devtools #1      send-eval-request: (in-ns 'my.ns)
devtools #1      repl eval job started
devtools #1      setDiracPromptNS('my.ns')
devtools #1      repl eval job ended
automate #1      disable-console-feedback!
automate #1      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #1
∎
testing          page-initiated eval requests, https://github.com/binaryage/dirac/issues/38
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #2
devtools #2      implant initialized
devtools #2      setCurrentPanel: elements
devtools #2      devtools ready
devtools #2      namespacesCache is cool now
automate #2      switch-to-console-panel!
devtools #2      setCurrentPanel: console
devtools #2      console initialized
devtools #2      adopt-prompt-element use-parinfer? true
devtools #2      setDiracPromptMode('status')
devtools #2      ConsoleView constructed
devtools #2      displayWelcomeMessage
automate #2      switch-prompt-to-dirac!
devtools #2      switched console prompt to 'dirac'
devtools #2      init-repl!
devtools #2      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #2      setDiracPromptStatusStyle('info')
devtools #2      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #2      setDiracPromptNS('cljs.user')
devtools #2      setDiracPromptMode('edit')
automate #2      enable-console-feedback!
automate         trigger! [:eval-js "console.log('js code here'); 1+3"]
devtools #2      JS.info> js code here
devtools #2      JS.info> 4
automate         trigger! [:eval-cljs "(+ 2 40)"]
devtools #2      DC.info> (+ 2 40)
devtools #2      send-eval-request: (+ 2 40)
devtools #2      repl eval job started
devtools #2      DF.info> 42
devtools #2      repl eval job ended
automate #2      disable-console-feedback!
automate #2      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #2
∎
testing          page refresh while REPL was connected
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #3
devtools #3      implant initialized
devtools #3      setCurrentPanel: elements
devtools #3      devtools ready
devtools #3      namespacesCache is cool now
automate #3      switch-to-console-panel!
devtools #3      setCurrentPanel: console
devtools #3      console initialized
devtools #3      adopt-prompt-element use-parinfer? true
devtools #3      setDiracPromptMode('status')
devtools #3      ConsoleView constructed
devtools #3      displayWelcomeMessage
automate #3      switch-prompt-to-dirac!
devtools #3      switched console prompt to 'dirac'
devtools #3      init-repl!
devtools #3      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #3      setDiracPromptStatusStyle('info')
devtools #3      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #3      setDiracPromptNS('cljs.user')
devtools #3      setDiracPromptMode('edit')
automate #3      enable-console-feedback!
automate #3      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #3      DC.info> (+ 1 2)
devtools #3      send-eval-request: (+ 1 2)
devtools #3      repl eval job started
devtools #3      DF.info> 3
devtools #3      repl eval job ended
automate #3      disable-console-feedback!
automate #3      reload!
devtools #3      setDiracPromptMode('status')
devtools #3      setDiracPromptStatusContent('Disconnected')
devtools #3      init-repl!
devtools #3      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #3      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #3      setDiracPromptMode('edit')
automate #3      enable-console-feedback!
automate #3      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #3      DC.info> (+ 1 2)
devtools #3      send-eval-request: (+ 1 2)
devtools #3      repl eval job started
devtools #3      DF.info> 3
devtools #3      repl eval job ended
automate #3      disable-console-feedback!
automate #3      reload!
devtools #3      setDiracPromptMode('status')
devtools #3      setDiracPromptStatusContent('Disconnected')
devtools #3      init-repl!
devtools #3      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #3      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #3      setDiracPromptMode('edit')
automate #3      enable-console-feedback!
automate #3      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #3      DC.info> (+ 1 2)
devtools #3      send-eval-request: (+ 1 2)
devtools #3      repl eval job started
devtools #3      DF.info> 3
devtools #3      repl eval job ended
automate #3      disable-console-feedback!
automate #3      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #3
∎
testing          navigate to a new page without dirac runtime while REPL was connected, then navigate back and exercise REPL
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #4
devtools #4      implant initialized
devtools #4      setCurrentPanel: elements
devtools #4      devtools ready
devtools #4      namespacesCache is cool now
automate #4      switch-to-console-panel!
devtools #4      setCurrentPanel: console
devtools #4      console initialized
devtools #4      adopt-prompt-element use-parinfer? true
devtools #4      setDiracPromptMode('status')
devtools #4      ConsoleView constructed
devtools #4      displayWelcomeMessage
automate #4      switch-prompt-to-dirac!
devtools #4      switched console prompt to 'dirac'
devtools #4      init-repl!
devtools #4      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #4      setDiracPromptStatusStyle('info')
devtools #4      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #4      setDiracPromptNS('cljs.user')
devtools #4      setDiracPromptMode('edit')
automate #4      enable-console-feedback!
automate #4      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #4      DC.info> (+ 1 2)
devtools #4      send-eval-request: (+ 1 2)
devtools #4      repl eval job started
devtools #4      DF.info> 3
devtools #4      repl eval job ended
automate #4      disable-console-feedback!
automate         trigger! [:navigate "/scenarios/no-runtime.html"]
devtools #4      setDiracPromptMode('status')
devtools #4      setDiracPromptStatusContent('Disconnected')
devtools #4      init-repl!
devtools #4      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #4      setDiracPromptStatusContent('Dirac requires runtime support from your app.
                 Please <a href="https://github.com/binaryage/dirac#installation">install Dirac Runtime</a> into your app and <a href="https://github.com/binaryage/dirac#install-dirac-runtime">enable the :repl feature</a>.')
devtools #4      setDiracPromptStatusStyle('error')
automate         trigger! [:navigate "/scenarios/repl.html"]
devtools #4      setDiracPromptStatusContent('Disconnected')
devtools #4      setDiracPromptStatusStyle('info')
devtools #4      init-repl!
devtools #4      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #4      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #4      setDiracPromptMode('edit')
automate #4      enable-console-feedback!
automate #4      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #4      DC.info> (+ 1 2)
devtools #4      send-eval-request: (+ 1 2)
devtools #4      repl eval job started
devtools #4      DF.info> 3
devtools #4      repl eval job ended
automate #4      disable-console-feedback!
automate #4      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #4
∎
testing          page refresh while REPL was connected (but not active)
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #5
devtools #5      implant initialized
devtools #5      setCurrentPanel: elements
devtools #5      devtools ready
devtools #5      namespacesCache is cool now
automate #5      switch-to-console-panel!
devtools #5      setCurrentPanel: console
devtools #5      console initialized
devtools #5      adopt-prompt-element use-parinfer? true
devtools #5      setDiracPromptMode('status')
devtools #5      ConsoleView constructed
devtools #5      displayWelcomeMessage
automate #5      switch-prompt-to-dirac!
devtools #5      switched console prompt to 'dirac'
devtools #5      init-repl!
devtools #5      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #5      setDiracPromptStatusStyle('info')
devtools #5      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #5      setDiracPromptNS('cljs.user')
devtools #5      setDiracPromptMode('edit')
automate #5      switch-prompt-to-javascript!
devtools #5      switched console prompt to 'js'
automate #5      reload!
devtools #5      setDiracPromptMode('status')
devtools #5      setDiracPromptStatusContent('Disconnected')
automate #5      switch-prompt-to-dirac!
devtools #5      switched console prompt to 'dirac'
devtools #5      init-repl!
devtools #5      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #5      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #5      setDiracPromptMode('edit')
automate #5      enable-console-feedback!
automate #5      exec-and-match-in-console! ["(+ 1 2)" "info> 3"]
devtools #5      DC.info> (+ 1 2)
devtools #5      send-eval-request: (+ 1 2)
devtools #5      repl eval job started
devtools #5      DF.info> 3
devtools #5      repl eval job ended
automate #5      disable-console-feedback!
automate #5      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #5
∎
testing          page refresh while REPL was not connected
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #6
devtools #6      implant initialized
devtools #6      setCurrentPanel: elements
devtools #6      devtools ready
devtools #6      namespacesCache is cool now
automate #6      switch-to-console-panel!
devtools #6      setCurrentPanel: console
devtools #6      console initialized
devtools #6      adopt-prompt-element use-parinfer? true
devtools #6      setDiracPromptMode('status')
devtools #6      ConsoleView constructed
devtools #6      displayWelcomeMessage
automate #6      reload!
automate #6      reload!
automate #6      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #6
∎
testing          make sure `in-ns` works (https://github.com/binaryage/dirac/issues/47)
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #7
devtools #7      implant initialized
devtools #7      setCurrentPanel: elements
devtools #7      devtools ready
devtools #7      namespacesCache is cool now
automate #7      switch-to-console-panel!
devtools #7      setCurrentPanel: console
devtools #7      console initialized
devtools #7      adopt-prompt-element use-parinfer? true
devtools #7      setDiracPromptMode('status')
devtools #7      ConsoleView constructed
devtools #7      displayWelcomeMessage
automate #7      switch-prompt-to-dirac!
devtools #7      switched console prompt to 'dirac'
devtools #7      init-repl!
devtools #7      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #7      setDiracPromptStatusStyle('info')
devtools #7      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #7      setDiracPromptNS('cljs.user')
devtools #7      setDiracPromptMode('edit')
automate #7      enable-console-feedback!
automate #7      type-in-console! ["(require 'dirac.tests.scenarios.repl.workspace)"]
devtools #7      DC.info> (require 'dirac.tests.scenarios.repl.workspace)
devtools #7      send-eval-request: (require 'dirac.tests.scenarios.repl.workspace)
devtools #7      repl eval job started
automate #7      exec-and-match-in-console! ["(in-ns 'dirac.tests.scenarios.repl.workspace)" "setDiracPromptNS('dirac.tests.scenarios.repl.workspace')"]
devtools #7      repl eval job ended
devtools #7      DC.info> (in-ns 'dirac.tests.scenarios.repl.workspace)
devtools #7      send-eval-request: (in-ns 'dirac.tests.scenarios.repl.workspace)
devtools #7      repl eval job started
devtools #7      setDiracPromptNS('dirac.tests.scenarios.repl.workspace')
devtools #7      repl eval job ended
automate #7      scrape [:dirac-prompt-placeholder]
automate #7      exec-and-match-in-console! ["(hello! \"REPL\")" ["DF.info> Hello, REPL!" "DF.info> null"]]
devtools #7      DC.info> (hello! "REPL")
devtools #7      send-eval-request: (hello! "REPL")
devtools #7      repl eval job started
devtools #7      DF.info> Hello, REPL!
devtools #7      DF.info> null
devtools #7      repl eval job ended
automate #7      scrape [:dirac-prompt-placeholder]
automate #7      exec-and-match-in-console! ["(hello! \"again\")" ["DF.info> Hello, again!" "DF.info> null"]]
devtools #7      DC.info> (hello! "again")
devtools #7      send-eval-request: (hello! "again")
devtools #7      repl eval job started
devtools #7      DF.info> Hello, again!
devtools #7      DF.info> null
devtools #7      repl eval job ended
automate #7      exec-and-match-in-console! ["(in-ns 'cljs.user)" "setDiracPromptNS('cljs.user')"]
devtools #7      DC.info> (in-ns 'cljs.user)
devtools #7      send-eval-request: (in-ns 'cljs.user)
devtools #7      repl eval job started
devtools #7      setDiracPromptNS('cljs.user')
devtools #7      repl eval job ended
automate #7      scrape [:dirac-prompt-placeholder]
automate #7      disable-console-feedback!
automate #7      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #7
∎
automate         close-scenario! ["scenario-tab#1"]
summary          Automated 88 actions with 20 check-points containing 4 assertions.
                 0 failures, 0 errors.
