ns               Testing dirac.tests.tasks.suite01.error-feedback
extension        reset extension state
extension        set extension options:{:target-url "http://localhost:<port>"}
extension        set extension options:{:open-as "window"}
automate         open-scenario! ["normal"]
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      setCurrentPanel: elements
devtools #1      devtools ready
devtools #1      namespacesCache is cool now
testing          unhandled DevTools exceptions should be presented in target console as Internal Dirac Error
automate #1      switch-to-console-panel!
devtools #1      setCurrentPanel: console
devtools #1      console initialized
devtools #1      adopt-prompt-element use-parinfer? true
devtools #1      setDiracPromptMode('status')
devtools #1      ConsoleView constructed
devtools #1      displayWelcomeMessage
automate #1      trigger-internal-error!
devtools #1      <elided dirac version info line>
                 DevTools code has thrown an unhandled exception:
                 Error: :keyword is not ISeqable
                     at $cljs$core$seq$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at $cljs$core$seq_reduce$cljs$0core$0IFn$0_invoke$0arity$03$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at $cljs$core$reduce$cljs$0core$0IFn$0_invoke$0arity$03$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at Function.$cljs$core$into$$.$cljs$core$IFn$_invoke$arity$2$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at $dirac$implant$helpers$throw_internal_error_for_testing_BANG_$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                 ---
                 To inspect the problem in internal DevTools => https://goo.gl/0FkZ1o
                 Consider reporting the issue here: https://github.com/binaryage/dirac/issues
automate #1      scrape [:last-log-item-content "info"]
∎
testing          async unhandled DevTools exceptions in promises should be presented in target console as Internal Dirac Error
automate #1      trigger-internal-error-in-promise!
devtools #1      <elided dirac version info line>
                 DevTools code has thrown an unhandled rejection (in promise):
                 Error: fake async error in promise
                     at new $cljs$core$ExceptionInfo$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at $cljs$core$ex_info$cljs$0core$0IFn$0_invoke$0arity$03$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at $cljs$core$ex_info$cljs$0core$0IFn$0_invoke$0arity$02$$ (chrome-extension://<extension-id>/devtools/front_end/shell.js:***)
                     at chrome-extension://<extension-id>/devtools/front_end/shell.js:***
                 ---
                 To inspect the problem in internal DevTools => https://goo.gl/0FkZ1o
                 Consider reporting the issue here: https://github.com/binaryage/dirac/issues
automate #1      scrape [:last-log-item-content "info"]
∎
testing          DevTools console.error logs should be presented in target console as Internal Dirac Error
automate #1      trigger-internal-error-as-error-log!
devtools #1      <elided dirac version info line>
                 An error was logged into the internal DevTools console:
                   | a fake error log 1 2 3
                 ---
                 To inspect the problem in internal DevTools => https://goo.gl/0FkZ1o
                 Consider reporting the issue here: https://github.com/binaryage/dirac/issues
automate #1      scrape [:last-log-item-content "info"]
∎
automate #1      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #1
testing          allow disabling error reporter via an url param
automate         store-options!
automate         set-options! [{:user-frontend-url-params "disable_reporter=1"}]
extension        set extension options:{:user-frontend-url-params "disable_reporter=1"}
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #2
devtools #2      implant initialized
devtools #2      setCurrentPanel: elements
devtools #2      devtools ready
devtools #2      namespacesCache is cool now
automate #2      switch-to-console-panel!
devtools #2      setCurrentPanel: console
devtools #2      console initialized
devtools #2      adopt-prompt-element use-parinfer? true
devtools #2      setDiracPromptMode('status')
devtools #2      ConsoleView constructed
devtools #2      displayWelcomeMessage
automate #2      trigger-internal-error!
automate #2      trigger-internal-error-in-promise!
automate #2      trigger-internal-error-as-error-log!
automate #2      count-internal-dirac-errors
automate #2      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #2
automate         restore-options!
extension        reset extension options:{:enable-clustered-locals true, :inline-custom-formatters true, :enable-parinfer true, :beautify-function-names true, :enable-friendly-locals true, :user-frontend-url-params nil, :clean-urls true, :enable-repl true, :welcome-message true, :open-as "window", :target-url "http://localhost:<port>", :link-actions true}
∎
automate         close-scenario! ["scenario-tab#1"]
summary          Automated 21 actions with 0 check-points containing 4 assertions.
                 0 failures, 0 errors.
