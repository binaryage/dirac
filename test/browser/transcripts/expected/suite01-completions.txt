ns               Testing dirac.tests.tasks.suite01.completions
extension        reset extension state
extension        set extension options:{:target-url "http://localhost:<port>"}
extension        set extension options:{:open-as "window"}
automate         open-scenario! ["completions"]
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      setCurrentPanel: elements
devtools #1      devtools ready
devtools #1      namespacesCache is cool now
automate #1      switch-to-console-panel!
devtools #1      setCurrentPanel: console
devtools #1      console initialized
devtools #1      adopt-prompt-element use-parinfer? true
devtools #1      setDiracPromptMode('status')
devtools #1      ConsoleView constructed
devtools #1      displayWelcomeMessage
automate #1      switch-prompt-to-dirac!
devtools #1      switched console prompt to 'dirac'
devtools #1      init-repl!
devtools #1      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #1      setDiracPromptStatusStyle('info')
devtools #1      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #1      setDiracPromptNS('cljs.user')
devtools #1      setDiracPromptMode('edit')
automate #1      enable-console-feedback!
automate #1      exec-and-match-in-console! ["(in-ns 'dirac.tests.scenarios.completions.workspace)" "setDiracPromptNS('dirac.tests.scenarios.completions.workspace')"]
devtools #1      DC.info> (in-ns 'dirac.tests.scenarios.completions.workspace)
devtools #1      send-eval-request: (in-ns 'dirac.tests.scenarios.completions.workspace)
devtools #1      repl eval job started
devtools #1      setDiracPromptNS('dirac.tests.scenarios.completions.workspace')
devtools #1      repl eval job ended
testing          in-ns completions for our namespace
automate #1      simulate-console-input! ["sample"]
automate #1      scrape! [:suggest-box]
stdout           displayed 3 items:
                  * sample|-def (in-ns selected force-white-icons)
                  * sample|-defn (in-ns)
                  * sample|-defonce (in-ns)
∎
testing          javascript completions in js/ namespace
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["js/docume"]
automate #1      scrape! [:suggest-box]
stdout           displayed 6 items:
                  * docume|nt (selected force-white-icons)
                  * Docume|nt
                  * Docume|ntFragment
                  * Docume|ntType
                  * HTML~Docume|nt
                  * XML~Docume|nt
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           js/document
automate #1      simulate-console-input! [".getElements"]
automate #1      scrape! [:suggest-box]
stdout           displayed 4 items:
                  * getElements|ByClassName (selected force-white-icons)
                  * getElements|ByName
                  * getElements|ByTagName
                  * getElements|ByTagNameNS
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           js/document.getElementsByClassName
∎
testing          qualified completions
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["cljs.core/part"]
automate #1      scrape! [:suggest-box]
stdout           displayed 4 items:
                  * part|ial (qualified selected force-white-icons)
                  * part|ition (qualified)
                  * part|ition-all (qualified)
                  * part|ition-by (qualified)
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           cljs.core/partial
∎
testing          namespace names completions
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["cljs.r"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * cljs.r|eader (ns macro combined-ns-macro selected force-white-icons)
                  * cljs.r|epl (ns macro combined-ns-macro)
automate #1      simulate-console-action! ["DOWN"]
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           cljs.repl
∎
testing          right-arrow completions
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["cljs.cor"]
automate #1      scrape! [:suggest-box]
stdout           displayed 10 items:
                  * cljs.cor|e (ns macro combined-ns-macro selected force-white-icons)
                  * cljs.cor|e.async (ns macro combined-ns-macro)
                  * cljs.cor|e.async.impl.buffers (ns)
                  * cljs.cor|e.async.impl.channels (ns)
                  * cljs.cor|e.async.impl.dispatch (ns)
                  * cljs.cor|e.async.impl.ioc-helpers (ns)
                  * cljs.cor|e.async.impl.ioc-macros (ns macro)
                  * cljs.cor|e.async.impl.protocols (ns)
                  * cljs.cor|e.async.impl.timers (ns)
                  * cljs.cor|e.async.macros (ns macro)
automate #1      simulate-console-action! ["RIGHT"]
automate #1      print-prompt!
stdout           cljs.core
automate #1      simulate-console-input! ["/clj-"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * clj-|>js (qualified selected force-white-icons)
automate #1      simulate-console-action! ["RIGHT"]
automate #1      print-prompt!
stdout           cljs.core/clj->js
∎
testing          opening suggestion box
automate #1      clear-console-prompt!
automate #1      get-suggest-box-item-count
automate #1      simulate-console-action! ["CTRL+SPACE"]
automate #1      get-suggest-box-item-count
∎
testing          aliases to namespaces and macro namespaces
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["alias"]
automate #1      scrape! [:suggest-box]
stdout           displayed 3 items:
                  * alias|-cljs-core-async [is cljs.core.async] (ns-alias selected force-white-icons)
                  * alias|-cljs-core-async-macros [is cljs.core.async.macros] (ns-alias macro)
                  * alias|-dirac-settings [is dirac.settings] (ns-alias macro combined-ns-macro)
∎
testing          refer namespace symbols
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["pu"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * pu|sh-tail (core selected force-white-icons)
                  * pu|t! [in cljs.core.async] (refer)
∎
testing          refer macro namespace symbols
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["wa"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * wa|rn [in chromex.logging] (refer macro selected force-white-icons)
∎
testing          refer macro namespace symbols coming from :refer-macros
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["get-dirac-devtools-window"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * get-dirac-devtools-window|-top [in dirac.settings] (refer macro selected force-white-icons)
∎
testing          qualified completions of namespace alias
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["alias-cljs-core-async/tak"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * tak|e (qualified selected force-white-icons)
                  * tak|e! (qualified)
∎
testing          qualified completions of macro namespace alias
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["alias-cljs-core-async-macros/go"]
automate #1      scrape! [:suggest-box]
stdout           no items displayed
∎
testing          qualified completions of macro namespace
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["chromex.logging/lo"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * lo|g (qualified macro selected force-white-icons)
∎
testing          closure libraries should be listed
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["goog.stri"]
automate #1      scrape! [:suggest-box]
stdout           displayed 5 items:
                  * goog.stri|ng (ns pseudo selected force-white-icons)
                  * goog.stri|ng.Const (ns pseudo)
                  * goog.stri|ng.StringBuffer (ns pseudo)
                  * goog.stri|ng.TypedString (ns pseudo)
                  * goog.stri|ng.Unicode (ns pseudo)
∎
testing          aliases to closure libraries should be listed
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["gstri"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * gstri|ng [is goog.string] (ns-alias pseudo selected force-white-icons)
∎
testing          qualified completions of closure libraries (full name)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["goog.array/cl"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * cl|ear (qualified pseudo selected force-white-icons)
                  * cl|one (qualified pseudo)
∎
testing          qualified completions of closure libraries (via alias)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["gstring/case"]
automate #1      scrape! [:suggest-box]
stdout           displayed 5 items:
                  * case|InsensitiveCompare (qualified pseudo selected force-white-icons)
                  * case|InsensitiveContains (qualified pseudo)
                  * case|InsensitiveEndsWith (qualified pseudo)
                  * case|InsensitiveEquals (qualified pseudo)
                  * case|InsensitiveStartsWith (qualified pseudo)
∎
testing          'dirac!' should be present as repl special command
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["dirac"]
automate #1      scrape [:suggest-box]
∎
testing          'load-file' should be present as repl special command
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["load-fi"]
automate #1      scrape [:suggest-box]
∎
testing          'in-ns' should be present as repl special command
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["in-"]
automate #1      scrape [:suggest-box]
∎
testing          'load-namespace' should be present as repl special command
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["load-name"]
automate #1      scrape [:suggest-box]
∎
testing          *1 *2 *3 *e should be present as repl special commands
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["*"]
automate #1      scrape [:suggest-box]
∎
testing          'load-file' and 'load-namespace' should be present as repl special commands
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["load-"]
automate #1      scrape [:suggest-box]
∎
automate #1      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #1
automate         close-scenario! ["scenario-tab#1"]
summary          Automated 94 actions with 1 check-points containing 18 assertions.
                 0 failures, 0 errors.
